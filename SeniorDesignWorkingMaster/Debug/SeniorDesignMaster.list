
SeniorDesignMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800b448  0800b448  0001b448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb6c  0800bb6c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb6c  0800bb6c  0001bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb74  0800bb74  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb74  0800bb74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb78  0800bb78  0001bb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bb7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001e0  0800bd5c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800bd5c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133d2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002673  00000000  00000000  000335e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00035c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293ab  00000000  00000000  00037b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bfa  00000000  00000000  00060edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100508  00000000  00000000  00071ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005874  00000000  00000000  00172030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b430 	.word	0x0800b430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b430 	.word	0x0800b430

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int adc_buf[ADC_BUF_LEN], adc[6];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<6; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e00a      	b.n	8001010 <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc[i] = adc_buf[i];
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_ADC_ConvCpltCallback+0x38>)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001002:	4909      	ldr	r1, [pc, #36]	; (8001028 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<6; i++)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b05      	cmp	r3, #5
 8001014:	ddf1      	ble.n	8000ffa <HAL_ADC_ConvCpltCallback+0xe>
		}
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200003b4 	.word	0x200003b4
 8001028:	200002f0 	.word	0x200002f0

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b0c7      	sub	sp, #284	; 0x11c
 8001030:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char uart_buf[128] = {'\0'};	//buffer for output data
 8001032:	2300      	movs	r3, #0
 8001034:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103a:	227c      	movs	r2, #124	; 0x7c
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fdca 	bl	8006bd8 <memset>
	int uart_buf_len = {'\0'};
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f001 f9b8 	bl	80023be <HAL_Init>

  /* USER CODE BEGIN Init */
	int target = 1024; //target analog bit value from the ADC
 800104e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001052:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	uint8_t spiData[6];
	for(int j = 0; j < 6; j++){spiData[j] = 0x00;}
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800105c:	e00b      	b.n	8001076 <main+0x4a>
 800105e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001066:	4413      	add	r3, r2
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800107a:	2b05      	cmp	r3, #5
 800107c:	ddef      	ble.n	800105e <main+0x32>
	int SPI_Transmit_Data_1;
	int SPI_Transmit_Data_2;
	int SPI_Transmit_Data_3;
	//char deviceID[20] = "Unit One";
	char readingType[20] = "Ambient";
 800107e:	4a89      	ldr	r2, [pc, #548]	; (80012a4 <main+0x278>)
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001088:	e883 0003 	stmia.w	r3, {r0, r1}
 800108c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
	int readingNumber = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int deviceID_Number = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	int output = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	int power = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dip[4];

	int warmtime = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  //time_t t;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 fad7 	bl	8001668 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f000 fcb5 	bl	8001a28 <MX_GPIO_Init>
  MX_DMA_Init();
 80010be:	f000 fc95 	bl	80019ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c2:	f000 fc63 	bl	800198c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80010c6:	f000 fbf3 	bl	80018b0 <MX_SPI1_Init>
  MX_ADC1_Init();
 80010ca:	f000 fb59 	bl	8001780 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010ce:	f000 fc2d 	bl	800192c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	4873      	ldr	r0, [pc, #460]	; (80012a8 <main+0x27c>)
 80010da:	f003 f8bb 	bl	8004254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);	//set CS2 pin HIGH.
 80010de:	2201      	movs	r2, #1
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4871      	ldr	r0, [pc, #452]	; (80012a8 <main+0x27c>)
 80010e4:	f003 f8b6 	bl	8004254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);	//set CS3 pin HIGH.
 80010e8:	2201      	movs	r2, #1
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	486e      	ldr	r0, [pc, #440]	; (80012a8 <main+0x27c>)
 80010ee:	f003 f8b1 	bl	8004254 <HAL_GPIO_WritePin>


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80010f2:	2206      	movs	r2, #6
 80010f4:	496d      	ldr	r1, [pc, #436]	; (80012ac <main+0x280>)
 80010f6:	486e      	ldr	r0, [pc, #440]	; (80012b0 <main+0x284>)
 80010f8:	f001 fd26 	bl	8002b48 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // mosfet pin low (stops current flow to heater pins)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	486c      	ldr	r0, [pc, #432]	; (80012b4 <main+0x288>)
 8001104:	f003 f8a6 	bl	8004254 <HAL_GPIO_WritePin>
			dip[3] = 1;
		} else {
			dip[3] = 0;
		};*/

	  dip[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8001108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f003 f888 	bl	8004224 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	617b      	str	r3, [r7, #20]
	  dip[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f003 f880 	bl	8004224 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	61bb      	str	r3, [r7, #24]
	  dip[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f003 f878 	bl	8004224 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	61fb      	str	r3, [r7, #28]
	  dip[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f003 f870 	bl	8004224 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	623b      	str	r3, [r7, #32]

		for (int i=0; i<=3; i++){
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800114e:	e01c      	b.n	800118a <main+0x15e>
			output += dip[3-i]*power;
 8001150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001154:	f1c3 0303 	rsb	r3, r3, #3
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800115e:	4413      	add	r3, r2
 8001160:	f853 3cf4 	ldr.w	r3, [r3, #-244]
 8001164:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001170:	4413      	add	r3, r2
 8001172:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			power *= 2;
 8001176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		for (int i=0; i<=3; i++){
 8001180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001184:	3301      	adds	r3, #1
 8001186:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800118a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800118e:	2b03      	cmp	r3, #3
 8001190:	ddde      	ble.n	8001150 <main+0x124>
		}

		warmtime = output * 100;
 8001192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001196:	2264      	movs	r2, #100	; 0x64
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	  //define sensor warming time
	  #define SENS_WARMING_TIME warmtime //anywhere from 0 to 16 minutes in 30 second intervals

	  uart_buf_len =sprintf(uart_buf, "Warm time set to: %d\n\r", warmtime);	  		//load print buffer with message
 80011a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80011a8:	4943      	ldr	r1, [pc, #268]	; (80012b8 <main+0x28c>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 fb9c 	bl	80078e8 <siprintf>
 80011b0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);	//print to terminal
 80011b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	483e      	ldr	r0, [pc, #248]	; (80012bc <main+0x290>)
 80011c2:	f005 f859 	bl	8006278 <HAL_UART_Transmit>


	  	//Fast blinking - Blinking red light 4 times per second for 3 seconds indicating begining of sensor warmup
		for (int i = 0; i < 12; i++) { // I ADDED THINGS HERE !!!!!!!!
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80011cc:	e014      	b.n	80011f8 <main+0x1cc>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 80011ce:	2201      	movs	r2, #1
 80011d0:	2102      	movs	r1, #2
 80011d2:	4838      	ldr	r0, [pc, #224]	; (80012b4 <main+0x288>)
 80011d4:	f003 f83e 	bl	8004254 <HAL_GPIO_WritePin>
		  HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 80011d8:	207d      	movs	r0, #125	; 0x7d
 80011da:	f001 f965 	bl	80024a8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 80011de:	2200      	movs	r2, #0
 80011e0:	2102      	movs	r1, #2
 80011e2:	4834      	ldr	r0, [pc, #208]	; (80012b4 <main+0x288>)
 80011e4:	f003 f836 	bl	8004254 <HAL_GPIO_WritePin>
		  HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 80011e8:	207d      	movs	r0, #125	; 0x7d
 80011ea:	f001 f95d 	bl	80024a8 <HAL_Delay>
		for (int i = 0; i < 12; i++) { // I ADDED THINGS HERE !!!!!!!!
 80011ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80011f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80011fc:	2b0b      	cmp	r3, #11
 80011fe:	dde6      	ble.n	80011ce <main+0x1a2>
		}

		//code to power up sensors here
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	482b      	ldr	r0, [pc, #172]	; (80012b4 <main+0x288>)
 8001208:	f003 f824 	bl	8004254 <HAL_GPIO_WritePin>
		//if (SENS_WARMING_TIME == 0) {
		//	SENS_WARMING_TIME = 60;
		//}

		//Fast blinking - Blinking red light 1 times per second for 5 minute/s indicating sensor warming up
		 for (int i = 0; i < SENS_WARMING_TIME; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001212:	e015      	b.n	8001240 <main+0x214>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 8001214:	2201      	movs	r2, #1
 8001216:	2102      	movs	r1, #2
 8001218:	4826      	ldr	r0, [pc, #152]	; (80012b4 <main+0x288>)
 800121a:	f003 f81b 	bl	8004254 <HAL_GPIO_WritePin>
			 HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 800121e:	207d      	movs	r0, #125	; 0x7d
 8001220:	f001 f942 	bl	80024a8 <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 8001224:	2200      	movs	r2, #0
 8001226:	2102      	movs	r1, #2
 8001228:	4822      	ldr	r0, [pc, #136]	; (80012b4 <main+0x288>)
 800122a:	f003 f813 	bl	8004254 <HAL_GPIO_WritePin>
			 HAL_Delay(875); // I ADDED THINGS HERE !!!!!!!!
 800122e:	f240 306b 	movw	r0, #875	; 0x36b
 8001232:	f001 f939 	bl	80024a8 <HAL_Delay>
		 for (int i = 0; i < SENS_WARMING_TIME; i++) {
 8001236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800123a:	3301      	adds	r3, #1
 800123c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001240:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001248:	429a      	cmp	r2, r3
 800124a:	dbe3      	blt.n	8001214 <main+0x1e8>
		 }

		 //Fast Blinking (four times a second) Yellow for 5 sec warnning begining of data collection via MQTT
		   for (int i = 0; i < 20; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001252:	e01e      	b.n	8001292 <main+0x266>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 8001254:	2201      	movs	r2, #1
 8001256:	2102      	movs	r1, #2
 8001258:	4816      	ldr	r0, [pc, #88]	; (80012b4 <main+0x288>)
 800125a:	f002 fffb 	bl	8004254 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 800125e:	2201      	movs	r2, #1
 8001260:	2104      	movs	r1, #4
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <main+0x288>)
 8001264:	f002 fff6 	bl	8004254 <HAL_GPIO_WritePin>
			   HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 8001268:	207d      	movs	r0, #125	; 0x7d
 800126a:	f001 f91d 	bl	80024a8 <HAL_Delay>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 800126e:	2200      	movs	r2, #0
 8001270:	2102      	movs	r1, #2
 8001272:	4810      	ldr	r0, [pc, #64]	; (80012b4 <main+0x288>)
 8001274:	f002 ffee 	bl	8004254 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 8001278:	2200      	movs	r2, #0
 800127a:	2104      	movs	r1, #4
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <main+0x288>)
 800127e:	f002 ffe9 	bl	8004254 <HAL_GPIO_WritePin>
			   HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 8001282:	207d      	movs	r0, #125	; 0x7d
 8001284:	f001 f910 	bl	80024a8 <HAL_Delay>
		   for (int i = 0; i < 20; i++) {
 8001288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800128c:	3301      	adds	r3, #1
 800128e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001296:	2b13      	cmp	r3, #19
 8001298:	dddc      	ble.n	8001254 <main+0x228>
		   }

	  for(int measurement = 0; measurement < 10; measurement++){
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80012a0:	e0ec      	b.n	800147c <main+0x450>
 80012a2:	bf00      	nop
 80012a4:	0800b53c 	.word	0x0800b53c
 80012a8:	48000800 	.word	0x48000800
 80012ac:	200003b4 	.word	0x200003b4
 80012b0:	20000208 	.word	0x20000208
 80012b4:	48000400 	.word	0x48000400
 80012b8:	0800b448 	.word	0x0800b448
 80012bc:	200003cc 	.word	0x200003cc

		  //------------------------------Read SPI Data------------------------------//

		  spiData[0] = targetCheck(adc[0], target, spiData[0]);
 80012c0:	4b86      	ldr	r3, [pc, #536]	; (80014dc <main+0x4b0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80012c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fc9b 	bl	8001c08 <targetCheck>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		  spiData[1] = targetCheck(adc[1], target, spiData[1]);
 80012da:	4b80      	ldr	r3, [pc, #512]	; (80014dc <main+0x4b0>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80012e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fc8e 	bl	8001c08 <targetCheck>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  spiData[2] = targetCheck(adc[2], target, spiData[2]);
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <main+0x4b0>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80012fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fc81 	bl	8001c08 <targetCheck>
 8001306:	4603      	mov	r3, r0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  SPI_Transmit_Data_1 = 0x00 | spiData[0];
 800130e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
		  SPI_Transmit_Data_2 = 0x00 | spiData[1];
 8001314:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
		  SPI_Transmit_Data_3 = 0x00 | spiData[2];
 800131a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38

		  //------------------------------Transmit SPI Data to 3 Digital Potentiometers------------------------------//

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);				//set CS1 pin LOW.
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	486e      	ldr	r0, [pc, #440]	; (80014e0 <main+0x4b4>)
 8001328:	f002 ff94 	bl	8004254 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi1, (uint8_t *)&SPI_Transmit_Data_1, 1, 10); //handle SPI, Cast data to a 16 bit unsigned integer, 1 bytes of data, 10 ms delay
 800132c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001330:	230a      	movs	r3, #10
 8001332:	2201      	movs	r2, #1
 8001334:	486b      	ldr	r0, [pc, #428]	; (80014e4 <main+0x4b8>)
 8001336:	f004 fb54 	bl	80059e2 <HAL_SPI_Transmit>
		  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800133a:	bf00      	nop
 800133c:	4869      	ldr	r0, [pc, #420]	; (80014e4 <main+0x4b8>)
 800133e:	f004 fdc9 	bl	8005ed4 <HAL_SPI_GetState>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d1f9      	bne.n	800133c <main+0x310>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);				//set CS1 pin HIGH.
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134e:	4864      	ldr	r0, [pc, #400]	; (80014e0 <main+0x4b4>)
 8001350:	f002 ff80 	bl	8004254 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001354:	20c8      	movs	r0, #200	; 0xc8
 8001356:	f001 f8a7 	bl	80024a8 <HAL_Delay>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);				//set CS2 pin LOW.
 800135a:	2200      	movs	r2, #0
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	4860      	ldr	r0, [pc, #384]	; (80014e0 <main+0x4b4>)
 8001360:	f002 ff78 	bl	8004254 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi1, (uint8_t *)&SPI_Transmit_Data_2, 1, 10); //handle SPI, Cast data to a 16 bit unsigned integer, 1 bytes of data, 10 ms delay
 8001364:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001368:	230a      	movs	r3, #10
 800136a:	2201      	movs	r2, #1
 800136c:	485d      	ldr	r0, [pc, #372]	; (80014e4 <main+0x4b8>)
 800136e:	f004 fb38 	bl	80059e2 <HAL_SPI_Transmit>
		  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001372:	bf00      	nop
 8001374:	485b      	ldr	r0, [pc, #364]	; (80014e4 <main+0x4b8>)
 8001376:	f004 fdad 	bl	8005ed4 <HAL_SPI_GetState>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d1f9      	bne.n	8001374 <main+0x348>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);				//set CS2 pin HIGH.
 8001380:	2201      	movs	r2, #1
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4856      	ldr	r0, [pc, #344]	; (80014e0 <main+0x4b4>)
 8001386:	f002 ff65 	bl	8004254 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);				//set CS3 pin LOW.
 800138a:	2200      	movs	r2, #0
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	4854      	ldr	r0, [pc, #336]	; (80014e0 <main+0x4b4>)
 8001390:	f002 ff60 	bl	8004254 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi1, (uint8_t *)&SPI_Transmit_Data_3, 1, 10); //handle SPI, Cast data to a 16 bit unsigned integer, 1 bytes of data, 10 ms delay
 8001394:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001398:	230a      	movs	r3, #10
 800139a:	2201      	movs	r2, #1
 800139c:	4851      	ldr	r0, [pc, #324]	; (80014e4 <main+0x4b8>)
 800139e:	f004 fb20 	bl	80059e2 <HAL_SPI_Transmit>
		  while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013a2:	bf00      	nop
 80013a4:	484f      	ldr	r0, [pc, #316]	; (80014e4 <main+0x4b8>)
 80013a6:	f004 fd95 	bl	8005ed4 <HAL_SPI_GetState>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d1f9      	bne.n	80013a4 <main+0x378>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);				//set CS3 pin HIGH.
 80013b0:	2201      	movs	r2, #1
 80013b2:	2140      	movs	r1, #64	; 0x40
 80013b4:	484a      	ldr	r0, [pc, #296]	; (80014e0 <main+0x4b4>)
 80013b6:	f002 ff4d 	bl	8004254 <HAL_GPIO_WritePin>

		  //------------------------------Send USART Data to Particle Boron Board------------------------------//

		  uart_buf_len =sprintf(uart_buf, "Unit %d, %d, %d, %d, %s, %d\n", deviceID_Number, adc[0], adc[1], adc[2], readingType, readingNumber);	  		//load print buffer with message
 80013ba:	4b48      	ldr	r3, [pc, #288]	; (80014dc <main+0x4b0>)
 80013bc:	681c      	ldr	r4, [r3, #0]
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <main+0x4b0>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4a46      	ldr	r2, [pc, #280]	; (80014dc <main+0x4b0>)
 80013c4:	6892      	ldr	r2, [r2, #8]
 80013c6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80013ca:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80013ce:	9103      	str	r1, [sp, #12]
 80013d0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013d4:	9102      	str	r1, [sp, #8]
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4623      	mov	r3, r4
 80013dc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80013e0:	4941      	ldr	r1, [pc, #260]	; (80014e8 <main+0x4bc>)
 80013e2:	f006 fa81 	bl	80078e8 <siprintf>
 80013e6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);	//print to terminal
 80013ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	483d      	ldr	r0, [pc, #244]	; (80014ec <main+0x4c0>)
 80013f8:	f004 ff3e 	bl	8006278 <HAL_UART_Transmit>
		  readingNumber++;
 80013fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		  //------------------------------Display Results to Terminal------------------------------//

		  uart_buf_len =sprintf(uart_buf, "Test #%d\n", measurement);	  		//load print buffer with message
 8001406:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800140a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800140e:	4938      	ldr	r1, [pc, #224]	; (80014f0 <main+0x4c4>)
 8001410:	4618      	mov	r0, r3
 8001412:	f006 fa69 	bl	80078e8 <siprintf>
 8001416:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);	//print to terminal
 800141a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800141e:	b29a      	uxth	r2, r3
 8001420:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	4833      	ldr	r0, [pc, #204]	; (80014f4 <main+0x4c8>)
 8001428:	f004 ff26 	bl	8006278 <HAL_UART_Transmit>
		  for(int i = 0; i < 3; i++){											//iterate through SPI array and print results to terminal
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001432:	e016      	b.n	8001462 <main+0x436>
			  displayResults(i+1, spiData[i], adc[i]);
 8001434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001438:	1c58      	adds	r0, r3, #1
 800143a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800143e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	4a24      	ldr	r2, [pc, #144]	; (80014dc <main+0x4b0>)
 800144a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	461a      	mov	r2, r3
 8001454:	f000 fb68 	bl	8001b28 <displayResults>
		  for(int i = 0; i < 3; i++){											//iterate through SPI array and print results to terminal
 8001458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800145c:	3301      	adds	r3, #1
 800145e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001466:	2b02      	cmp	r3, #2
 8001468:	dde4      	ble.n	8001434 <main+0x408>
		  }
		  HAL_Delay(500);
 800146a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146e:	f001 f81b 	bl	80024a8 <HAL_Delay>
	  for(int measurement = 0; measurement < 10; measurement++){
 8001472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001476:	3301      	adds	r3, #1
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800147c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001480:	2b09      	cmp	r3, #9
 8001482:	f77f af1d 	ble.w	80012c0 <main+0x294>

	  }

	  //shows a red,yellow,green "get ready" sequence
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!! Red LED on
 8001486:	2201      	movs	r2, #1
 8001488:	2102      	movs	r1, #2
 800148a:	481b      	ldr	r0, [pc, #108]	; (80014f8 <main+0x4cc>)
 800148c:	f002 fee2 	bl	8004254 <HAL_GPIO_WritePin>
	  HAL_Delay(1500);
 8001490:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001494:	f001 f808 	bl	80024a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!! Green LED on
 8001498:	2201      	movs	r2, #1
 800149a:	2104      	movs	r1, #4
 800149c:	4816      	ldr	r0, [pc, #88]	; (80014f8 <main+0x4cc>)
 800149e:	f002 fed9 	bl	8004254 <HAL_GPIO_WritePin>
	  HAL_Delay(1500);
 80014a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014a6:	f000 ffff 	bl	80024a8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!! Red LED off
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	4812      	ldr	r0, [pc, #72]	; (80014f8 <main+0x4cc>)
 80014b0:	f002 fed0 	bl	8004254 <HAL_GPIO_WritePin>
      //FOR USER: BREATHE INTO THE SENSOR

	  char readingType[20] = "Breath";
 80014b4:	463a      	mov	r2, r7
 80014b6:	4911      	ldr	r1, [pc, #68]	; (80014fc <main+0x4d0>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	c903      	ldmia	r1, {r0, r1}
 80014bc:	6018      	str	r0, [r3, #0]
 80014be:	3304      	adds	r3, #4
 80014c0:	8019      	strh	r1, [r3, #0]
 80014c2:	3302      	adds	r3, #2
 80014c4:	0c09      	lsrs	r1, r1, #16
 80014c6:	7019      	strb	r1, [r3, #0]
 80014c8:	1dd3      	adds	r3, r2, #7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	731a      	strb	r2, [r3, #12]
	  for(int measurement = 0; measurement < 10; measurement++){
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80014da:	e095      	b.n	8001608 <main+0x5dc>
 80014dc:	200002f0 	.word	0x200002f0
 80014e0:	48000800 	.word	0x48000800
 80014e4:	20000350 	.word	0x20000350
 80014e8:	0800b460 	.word	0x0800b460
 80014ec:	2000026c 	.word	0x2000026c
 80014f0:	0800b480 	.word	0x0800b480
 80014f4:	200003cc 	.word	0x200003cc
 80014f8:	48000400 	.word	0x48000400
 80014fc:	0800b550 	.word	0x0800b550
		  uart_buf_len =sprintf(uart_buf, "Unit %d, %d, %d, %d, %s, %d\n", deviceID_Number, adc[0], adc[1], adc[2], readingType, readingNumber);	  		//load print buffer with message
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <main+0x618>)
 8001502:	681c      	ldr	r4, [r3, #0]
 8001504:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <main+0x618>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <main+0x618>)
 800150a:	6892      	ldr	r2, [r2, #8]
 800150c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001510:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001514:	9103      	str	r1, [sp, #12]
 8001516:	4639      	mov	r1, r7
 8001518:	9102      	str	r1, [sp, #8]
 800151a:	9201      	str	r2, [sp, #4]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4623      	mov	r3, r4
 8001520:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001524:	4948      	ldr	r1, [pc, #288]	; (8001648 <main+0x61c>)
 8001526:	f006 f9df 	bl	80078e8 <siprintf>
 800152a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);	//print to terminal
 800152e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001532:	b29a      	uxth	r2, r3
 8001534:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001538:	2364      	movs	r3, #100	; 0x64
 800153a:	4844      	ldr	r0, [pc, #272]	; (800164c <main+0x620>)
 800153c:	f004 fe9c 	bl	8006278 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "Potentiometer 1 Value (0 - 128): %d \n\r", SPI_Transmit_Data_1);	  	//load print buffer with message
 8001540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001542:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001546:	4942      	ldr	r1, [pc, #264]	; (8001650 <main+0x624>)
 8001548:	4618      	mov	r0, r3
 800154a:	f006 f9cd 	bl	80078e8 <siprintf>
 800154e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001556:	b29a      	uxth	r2, r3
 8001558:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	483d      	ldr	r0, [pc, #244]	; (8001654 <main+0x628>)
 8001560:	f004 fe8a 	bl	8006278 <HAL_UART_Transmit>
		  uart_buf_len =sprintf(uart_buf, "Potentiometer 2 Value (0 - 128): %d \n\r", SPI_Transmit_Data_2);	  	//load print buffer with message
 8001564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001566:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800156a:	493b      	ldr	r1, [pc, #236]	; (8001658 <main+0x62c>)
 800156c:	4618      	mov	r0, r3
 800156e:	f006 f9bb 	bl	80078e8 <siprintf>
 8001572:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800157a:	b29a      	uxth	r2, r3
 800157c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	4834      	ldr	r0, [pc, #208]	; (8001654 <main+0x628>)
 8001584:	f004 fe78 	bl	8006278 <HAL_UART_Transmit>
		  uart_buf_len =sprintf(uart_buf, "Potentiometer 3 Value (0 - 128): %d \n\r", SPI_Transmit_Data_3);	  	//load print buffer with message
 8001588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800158a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800158e:	4933      	ldr	r1, [pc, #204]	; (800165c <main+0x630>)
 8001590:	4618      	mov	r0, r3
 8001592:	f006 f9a9 	bl	80078e8 <siprintf>
 8001596:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 800159a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	482b      	ldr	r0, [pc, #172]	; (8001654 <main+0x628>)
 80015a8:	f004 fe66 	bl	8006278 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\n\rSent To Boron --> \"Unit %d, %d, %d, %d, %s, %d\"\r\n\n", deviceID_Number, adc[0], adc[1], adc[2], readingType, readingNumber);	  	//load print buffer with message
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <main+0x618>)
 80015ae:	681c      	ldr	r4, [r3, #0]
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <main+0x618>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	4a23      	ldr	r2, [pc, #140]	; (8001644 <main+0x618>)
 80015b6:	6892      	ldr	r2, [r2, #8]
 80015b8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80015bc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80015c0:	9103      	str	r1, [sp, #12]
 80015c2:	4639      	mov	r1, r7
 80015c4:	9102      	str	r1, [sp, #8]
 80015c6:	9201      	str	r2, [sp, #4]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	4623      	mov	r3, r4
 80015cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015d0:	4923      	ldr	r1, [pc, #140]	; (8001660 <main+0x634>)
 80015d2:	f006 f989 	bl	80078e8 <siprintf>
 80015d6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80015da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80015de:	b29a      	uxth	r2, r3
 80015e0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80015e4:	2364      	movs	r3, #100	; 0x64
 80015e6:	481b      	ldr	r0, [pc, #108]	; (8001654 <main+0x628>)
 80015e8:	f004 fe46 	bl	8006278 <HAL_UART_Transmit>
		  readingNumber++;
 80015ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015f0:	3301      	adds	r3, #1
 80015f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  	  HAL_Delay(500);
 80015f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fa:	f000 ff55 	bl	80024a8 <HAL_Delay>
	  for(int measurement = 0; measurement < 10; measurement++){
 80015fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800160c:	2b09      	cmp	r3, #9
 800160e:	f77f af77 	ble.w	8001500 <main+0x4d4>
	  }
	  readingNumber = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  deviceID_Number++;
 8001618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800161c:	3301      	adds	r3, #1
 800161e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // mosfet pin low (stops current flow to heater pins)
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001628:	480e      	ldr	r0, [pc, #56]	; (8001664 <main+0x638>)
 800162a:	f002 fe13 	bl	8004254 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Green LED off
 800162e:	2200      	movs	r2, #0
 8001630:	2104      	movs	r1, #4
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <main+0x638>)
 8001634:	f002 fe0e 	bl	8004254 <HAL_GPIO_WritePin>

	  HAL_Delay(500);
 8001638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163c:	f000 ff34 	bl	80024a8 <HAL_Delay>
  while (1){
 8001640:	e55c      	b.n	80010fc <main+0xd0>
 8001642:	bf00      	nop
 8001644:	200002f0 	.word	0x200002f0
 8001648:	0800b460 	.word	0x0800b460
 800164c:	2000026c 	.word	0x2000026c
 8001650:	0800b48c 	.word	0x0800b48c
 8001654:	200003cc 	.word	0x200003cc
 8001658:	0800b4b4 	.word	0x0800b4b4
 800165c:	0800b4dc 	.word	0x0800b4dc
 8001660:	0800b504 	.word	0x0800b504
 8001664:	48000400 	.word	0x48000400

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0b8      	sub	sp, #224	; 0xe0
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001672:	2244      	movs	r2, #68	; 0x44
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f005 faae 	bl	8006bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2288      	movs	r2, #136	; 0x88
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f005 faa0 	bl	8006bd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001698:	2310      	movs	r3, #16
 800169a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800169e:	2301      	movs	r3, #1
 80016a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016c2:	2328      	movs	r3, #40	; 0x28
 80016c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fe34 	bl	800434c <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x86>
  {
    Error_Handler();
 80016ea:	f000 fba9 	bl	8001e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2303      	movs	r3, #3
 80016f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800170c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fa00 	bl	8004b18 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800171e:	f000 fb8f 	bl	8001e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001722:	f244 0303 	movw	r3, #16387	; 0x4003
 8001726:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001728:	2300      	movs	r3, #0
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800172c:	2304      	movs	r3, #4
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001734:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001736:	2301      	movs	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800173e:	2310      	movs	r3, #16
 8001740:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001742:	2307      	movs	r3, #7
 8001744:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001746:	2302      	movs	r3, #2
 8001748:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800174e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001752:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fbe4 	bl	8004f24 <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001762:	f000 fb6d 	bl	8001e40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800176a:	f002 fd99 	bl	80042a0 <HAL_PWREx_ControlVoltageScaling>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001774:	f000 fb64 	bl	8001e40 <Error_Handler>
  }
}
 8001778:	bf00      	nop
 800177a:	37e0      	adds	r7, #224	; 0xe0
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <MX_ADC1_Init+0x11c>)
 80017a4:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <MX_ADC1_Init+0x120>)
 80017a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80017a8:	4b3c      	ldr	r3, [pc, #240]	; (800189c <MX_ADC1_Init+0x11c>)
 80017aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <MX_ADC1_Init+0x11c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <MX_ADC1_Init+0x11c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <MX_ADC1_Init+0x11c>)
 80017be:	2201      	movs	r2, #1
 80017c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <MX_ADC1_Init+0x11c>)
 80017c4:	2204      	movs	r2, #4
 80017c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <MX_ADC1_Init+0x11c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ce:	4b33      	ldr	r3, [pc, #204]	; (800189c <MX_ADC1_Init+0x11c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <MX_ADC1_Init+0x11c>)
 80017d6:	2203      	movs	r2, #3
 80017d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <MX_ADC1_Init+0x11c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <MX_ADC1_Init+0x11c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <MX_ADC1_Init+0x11c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <MX_ADC1_Init+0x11c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <MX_ADC1_Init+0x11c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_ADC1_Init+0x11c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001804:	4825      	ldr	r0, [pc, #148]	; (800189c <MX_ADC1_Init+0x11c>)
 8001806:	f001 f849 	bl	800289c <HAL_ADC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001810:	f000 fb16 	bl	8001e40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4619      	mov	r1, r3
 800181e:	481f      	ldr	r0, [pc, #124]	; (800189c <MX_ADC1_Init+0x11c>)
 8001820:	f001 ff5c 	bl	80036dc <HAL_ADCEx_MultiModeConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800182a:	f000 fb09 	bl	8001e40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_ADC1_Init+0x124>)
 8001830:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001832:	2306      	movs	r3, #6
 8001834:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800183a:	237f      	movs	r3, #127	; 0x7f
 800183c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800183e:	2304      	movs	r3, #4
 8001840:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4814      	ldr	r0, [pc, #80]	; (800189c <MX_ADC1_Init+0x11c>)
 800184c:	f001 fa3a 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001856:	f000 faf3 	bl	8001e40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_ADC1_Init+0x128>)
 800185c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800185e:	230c      	movs	r3, #12
 8001860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC1_Init+0x11c>)
 8001868:	f001 fa2c 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001872:	f000 fae5 	bl	8001e40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <MX_ADC1_Init+0x12c>)
 8001878:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800187a:	2312      	movs	r3, #18
 800187c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <MX_ADC1_Init+0x11c>)
 8001884:	f001 fa1e 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800188e:	f000 fad7 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000208 	.word	0x20000208
 80018a0:	50040000 	.word	0x50040000
 80018a4:	04300002 	.word	0x04300002
 80018a8:	08600004 	.word	0x08600004
 80018ac:	0c900008 	.word	0x0c900008

080018b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_SPI1_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_SPI1_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_SPI1_Init+0x74>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_SPI1_Init+0x74>)
 80018ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80018ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_SPI1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_SPI1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_SPI1_Init+0x74>)
 80018de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_SPI1_Init+0x74>)
 80018e6:	2230      	movs	r2, #48	; 0x30
 80018e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_SPI1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_SPI1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_SPI1_Init+0x74>)
 80018fe:	2207      	movs	r2, #7
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_SPI1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SPI1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_SPI1_Init+0x74>)
 8001910:	f003 ffc4 	bl	800589c <HAL_SPI_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800191a:	f000 fa91 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000350 	.word	0x20000350
 8001928:	40013000 	.word	0x40013000

0800192c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <MX_USART1_UART_Init+0x5c>)
 8001934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800193c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_USART1_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_USART1_UART_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_USART1_UART_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_USART1_UART_Init+0x58>)
 8001970:	f004 fc34 	bl	80061dc <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800197a:	f000 fa61 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000026c 	.word	0x2000026c
 8001988:	40013800 	.word	0x40013800

0800198c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <MX_USART2_UART_Init+0x5c>)
 8001994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 8001998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800199c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART2_UART_Init+0x58>)
 80019d0:	f004 fc04 	bl	80061dc <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019da:	f000 fa31 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200003cc 	.word	0x200003cc
 80019e8:	40004400 	.word	0x40004400

080019ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_DMA_Init+0x38>)
 80019f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <MX_DMA_Init+0x38>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6493      	str	r3, [r2, #72]	; 0x48
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_DMA_Init+0x38>)
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	200b      	movs	r0, #11
 8001a10:	f001 ffef 	bl	80039f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a14:	200b      	movs	r0, #11
 8001a16:	f002 f808 	bl	8003a2a <HAL_NVIC_EnableIRQ>

}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a29      	ldr	r2, [pc, #164]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <MX_GPIO_Init+0xf0>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED_Pin|G_LED_Pin|Heater_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f240 4106 	movw	r1, #1030	; 0x406
 8001a8c:	4823      	ldr	r0, [pc, #140]	; (8001b1c <MX_GPIO_Init+0xf4>)
 8001a8e:	f002 fbe1 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001a98:	4821      	ldr	r0, [pc, #132]	; (8001b20 <MX_GPIO_Init+0xf8>)
 8001a9a:	f002 fbdb 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481a      	ldr	r0, [pc, #104]	; (8001b1c <MX_GPIO_Init+0xf4>)
 8001ab2:	f002 fa0d 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin Heater_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin|Heater_Pin;
 8001ab6:	f240 4306 	movw	r3, #1030	; 0x406
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0xf4>)
 8001ad0:	f002 f9fe 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 8001ad4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_GPIO_Init+0xf8>)
 8001aee:	f002 f9ef 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip4_Pin Dip3_Pin Dip2_Pin Dip1_Pin */
  GPIO_InitStruct.Pin = Dip4_Pin|Dip3_Pin|Dip2_Pin|Dip1_Pin;
 8001af2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0a:	f002 f9e1 	bl	8003ed0 <HAL_GPIO_Init>

}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48000400 	.word	0x48000400
 8001b20:	48000800 	.word	0x48000800
 8001b24:	00000000 	.word	0x00000000

08001b28 <displayResults>:

/* USER CODE BEGIN 4 */
void displayResults(int ADC_number, int i, int val){
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001b2e:	af06      	add	r7, sp, #24
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	6018      	str	r0, [r3, #0]
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	6019      	str	r1, [r3, #0]
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	601a      	str	r2, [r3, #0]
  char uart_buf[512] = {'\0'};	//buffer for output data
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 f841 	bl	8006bd8 <memset>
  int uart_buf_len = {'\0'};
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  float voltage = (3.3/4096) * val;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f7fe fce0 	bl	8000524 <__aeabi_i2d>
 8001b64:	a326      	add	r3, pc, #152	; (adr r3, 8001c00 <displayResults+0xd8>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fd45 	bl	80005f8 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7ff f837 	bl	8000be8 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  float potValue = (10000/128) * i;
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	224e      	movs	r2, #78	; 0x4e
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b94:	edc7 7a85 	vstr	s15, [r7, #532]	; 0x214

  uart_buf_len =sprintf(uart_buf, "\tADC: #%d\n \
 8001b98:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001b9c:	f7fe fcd4 	bl	8000548 <__aeabi_f2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8001ba8:	f7fe fcce 	bl	8000548 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	f107 0008 	add.w	r0, r7, #8
 8001bb4:	f107 010c 	add.w	r1, r7, #12
 8001bb8:	f107 0614 	add.w	r6, r7, #20
 8001bbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	e9cd 4500 	strd	r4, r5, [sp]
 8001bca:	6803      	ldr	r3, [r0, #0]
 8001bcc:	680a      	ldr	r2, [r1, #0]
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <displayResults+0xd0>)
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f005 fe89 	bl	80078e8 <siprintf>
 8001bd6:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		  	  	  	  	  	  	  \r\t\tPotentiometer Value (0 - 128): %d\n \
		  	  	  	  	  	  	  \r\t\tResistance: .................. %.0f Ohms\n \
		  	  	  	  	  	  	  \r\t\tADC Value (0 - 4096): ........ %d\n \
		  	  	  	  	  	  	  \r\t\tADC Voltage: ................. %.2fV\n\n\r", ADC_number, i, potValue, val, voltage);	  	//load print buffer with message
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001bda:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	f107 0114 	add.w	r1, r7, #20
 8001be4:	2364      	movs	r3, #100	; 0x64
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <displayResults+0xd4>)
 8001be8:	f004 fb46 	bl	8006278 <HAL_UART_Transmit>
}
 8001bec:	bf00      	nop
 8001bee:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800b564 	.word	0x0800b564
 8001bfc:	200003cc 	.word	0x200003cc
 8001c00:	66666666 	.word	0x66666666
 8001c04:	3f4a6666 	.word	0x3f4a6666

08001c08 <targetCheck>:

int targetCheck(int val, int target, int i){
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
		//if the analog value is greater than 30% of the target value, decrease 'i' by 30
		else if (val > 1.30 * target)
			i = i - 30;
			*/
		//if the analog value is greater than 20% of the target value, decrease 'i' by 20
		if (val > 1.20 * target)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7fe fc85 	bl	8000524 <__aeabi_i2d>
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f7fe fc80 	bl	8000524 <__aeabi_i2d>
 8001c24:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001c28:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <targetCheck+0x220>)
 8001c2a:	f7fe fce5 	bl	80005f8 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <targetCheck+0x40>
			i = i - 20;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b14      	subs	r3, #20
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e0c4      	b.n	8001dd2 <targetCheck+0x1ca>
		//if the analog value is greater than 10% of the target value, decrease 'i' by 10
		else if (val > 1.10 * target)
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7fe fc6b 	bl	8000524 <__aeabi_i2d>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	460d      	mov	r5, r1
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f7fe fc66 	bl	8000524 <__aeabi_i2d>
 8001c58:	a365      	add	r3, pc, #404	; (adr r3, 8001df0 <targetCheck+0x1e8>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fccb 	bl	80005f8 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7fe ff55 	bl	8000b18 <__aeabi_dcmpgt>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <targetCheck+0x74>
			i = i - 10;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b0a      	subs	r3, #10
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e0aa      	b.n	8001dd2 <targetCheck+0x1ca>
		//if the analog value is greater than 20% of the target value, decrease 'i' by 5
		else if (val > 1.04 * target)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7fe fc51 	bl	8000524 <__aeabi_i2d>
 8001c82:	4604      	mov	r4, r0
 8001c84:	460d      	mov	r5, r1
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f7fe fc4c 	bl	8000524 <__aeabi_i2d>
 8001c8c:	a35a      	add	r3, pc, #360	; (adr r3, 8001df8 <targetCheck+0x1f0>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe fcb1 	bl	80005f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <targetCheck+0xa8>
			i = i - 5;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b05      	subs	r3, #5
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	e090      	b.n	8001dd2 <targetCheck+0x1ca>
		//if the analog value is greater than 20% of the target value, decrease 'i' by 1
		else if (val > target)
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dd03      	ble.n	8001cc0 <targetCheck+0xb8>
			i = i - 1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	e088      	b.n	8001dd2 <targetCheck+0x1ca>
		//--------------------------------------------------------------------------------------------------------------
		//if the analog value is greater than 20% of the target value, decrease 'i' by 50
		//else if (val < (1- 0.50) * target){
		//	i = i + 50;
		//}
		else if (val < (1- 0.40) * target){
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7fe fc2f 	bl	8000524 <__aeabi_i2d>
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	460d      	mov	r5, r1
 8001cca:	68b8      	ldr	r0, [r7, #8]
 8001ccc:	f7fe fc2a 	bl	8000524 <__aeabi_i2d>
 8001cd0:	a34b      	add	r3, pc, #300	; (adr r3, 8001e00 <targetCheck+0x1f8>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe fc8f 	bl	80005f8 <__aeabi_dmul>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fefb 	bl	8000adc <__aeabi_dcmplt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <targetCheck+0xec>
			i = i + 40;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3328      	adds	r3, #40	; 0x28
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	e06e      	b.n	8001dd2 <targetCheck+0x1ca>
		}
		else if (val < (1- 0.30) * target){
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7fe fc15 	bl	8000524 <__aeabi_i2d>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	460d      	mov	r5, r1
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f7fe fc10 	bl	8000524 <__aeabi_i2d>
 8001d04:	a340      	add	r3, pc, #256	; (adr r3, 8001e08 <targetCheck+0x200>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fc75 	bl	80005f8 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4620      	mov	r0, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	f7fe fee1 	bl	8000adc <__aeabi_dcmplt>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <targetCheck+0x120>
					i = i + 30;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	331e      	adds	r3, #30
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	e054      	b.n	8001dd2 <targetCheck+0x1ca>
				}
		else if (val < (1- 0.20) * target){
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7fe fbfb 	bl	8000524 <__aeabi_i2d>
 8001d2e:	4604      	mov	r4, r0
 8001d30:	460d      	mov	r5, r1
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	f7fe fbf6 	bl	8000524 <__aeabi_i2d>
 8001d38:	a335      	add	r3, pc, #212	; (adr r3, 8001e10 <targetCheck+0x208>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fc5b 	bl	80005f8 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4620      	mov	r0, r4
 8001d48:	4629      	mov	r1, r5
 8001d4a:	f7fe fec7 	bl	8000adc <__aeabi_dcmplt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <targetCheck+0x154>
					i = i + 20;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3314      	adds	r3, #20
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	e03a      	b.n	8001dd2 <targetCheck+0x1ca>
				}
		else if (val < (1- 0.10) * target){
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe fbe1 	bl	8000524 <__aeabi_i2d>
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f7fe fbdc 	bl	8000524 <__aeabi_i2d>
 8001d6c:	a32a      	add	r3, pc, #168	; (adr r3, 8001e18 <targetCheck+0x210>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc41 	bl	80005f8 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f7fe fead 	bl	8000adc <__aeabi_dcmplt>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <targetCheck+0x188>
					i = i + 10;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	330a      	adds	r3, #10
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	e020      	b.n	8001dd2 <targetCheck+0x1ca>
				}
		else if (val < (1- 0.04) * target){
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7fe fbc7 	bl	8000524 <__aeabi_i2d>
 8001d96:	4604      	mov	r4, r0
 8001d98:	460d      	mov	r5, r1
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f7fe fbc2 	bl	8000524 <__aeabi_i2d>
 8001da0:	a31f      	add	r3, pc, #124	; (adr r3, 8001e20 <targetCheck+0x218>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fc27 	bl	80005f8 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fe93 	bl	8000adc <__aeabi_dcmplt>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <targetCheck+0x1bc>
					i = i + 5;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3305      	adds	r3, #5
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	e006      	b.n	8001dd2 <targetCheck+0x1ca>
				}
		else if (val < target){
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	da02      	bge.n	8001dd2 <targetCheck+0x1ca>
			i = i + 1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
		}
		else
			i = i;

	//dataString = createCSV(val,val,val,tNum);
	if(i > 128){
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	dd01      	ble.n	8001ddc <targetCheck+0x1d4>
	  //uart_buf_len =sprintf(uart_buf, "Entered if Statement about 128\n");	  	//load print buffer with message
	  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
	  i = 128;
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	607b      	str	r3, [r7, #4]
	}
	if(i < 0){
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	da01      	bge.n	8001de6 <targetCheck+0x1de>
	  //uart_buf_len =sprintf(uart_buf, "Entered if Statement below 0\n");	  	//load print buffer with message
	  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
	  i = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
	}
	//uart_buf_len =sprintf(uart_buf, "\rpot value being returned after algorithm = %d\r\n", i);	  	//load print buffer with message
	//HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
	return i;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdb0      	pop	{r4, r5, r7, pc}
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3ff19999 	.word	0x3ff19999
 8001df8:	0a3d70a4 	.word	0x0a3d70a4
 8001dfc:	3ff0a3d7 	.word	0x3ff0a3d7
 8001e00:	33333333 	.word	0x33333333
 8001e04:	3fe33333 	.word	0x3fe33333
 8001e08:	66666666 	.word	0x66666666
 8001e0c:	3fe66666 	.word	0x3fe66666
 8001e10:	9999999a 	.word	0x9999999a
 8001e14:	3fe99999 	.word	0x3fe99999
 8001e18:	cccccccd 	.word	0xcccccccd
 8001e1c:	3feccccc 	.word	0x3feccccc
 8001e20:	eb851eb8 	.word	0xeb851eb8
 8001e24:	3feeb851 	.word	0x3feeb851
 8001e28:	3ff33333 	.word	0x3ff33333

08001e2c <HAL_ADC_ConvHalfCpltCallback>:
	//HAL_Delay(100);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
	//HAL_Delay(100);
	}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	/*char uart_buf[50] = {'\0'};	//buffer for output data
	int uart_buf_len = {'\0'};
	uart_buf_len =sprintf(uart_buf, "\rFirt ADC Handle\r\n\n");	  	//load print buffer with message
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1){
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>
	...

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_MspInit+0x44>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_MspInit+0x44>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_MspInit+0x44>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_MspInit+0x44>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_MspInit+0x44>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_MspInit+0x44>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	; (8001f60 <HAL_ADC_MspInit+0xcc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d14f      	bne.n	8001f56 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_ADC_MspInit+0xd0>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <HAL_ADC_MspInit+0xd0>)
 8001ebc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_ADC_MspInit+0xd0>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_ADC_MspInit+0xd0>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <HAL_ADC_MspInit+0xd0>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_ADC_MspInit+0xd0>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = Sensor_1_Pin|Sensor_2_Pin|Sensor_3_Pin;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001eea:	230b      	movs	r3, #11
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481b      	ldr	r0, [pc, #108]	; (8001f68 <HAL_ADC_MspInit+0xd4>)
 8001efa:	f001 ffe9 	bl	8003ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_ADC_MspInit+0xdc>)
 8001f02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f2e:	2220      	movs	r2, #32
 8001f30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f3c:	f001 fd90 	bl	8003a60 <HAL_DMA_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001f46:	f7ff ff7b 	bl	8001e40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_ADC_MspInit+0xd8>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	; 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	50040000 	.word	0x50040000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	20000308 	.word	0x20000308
 8001f70:	40020008 	.word	0x40020008

08001f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_SPI_MspInit+0x8c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d130      	bne.n	8001ff8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_SPI_MspInit+0x90>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_SPI_MspInit+0x90>)
 8001f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_SPI_MspInit+0x90>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SPI_MspInit+0x90>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_SPI_MspInit+0x90>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_SPI_MspInit+0x90>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fc6:	23a0      	movs	r3, #160	; 0xa0
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe4:	f001 ff74 	bl	8003ed0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2023      	movs	r0, #35	; 0x23
 8001fee:	f001 fd00 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ff2:	2023      	movs	r0, #35	; 0x23
 8001ff4:	f001 fd19 	bl	8003a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40013000 	.word	0x40013000
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_UART_MspInit+0xd8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d128      	bne.n	800207c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6613      	str	r3, [r2, #96]	; 0x60
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800205a:	23c0      	movs	r3, #192	; 0xc0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800206a:	2307      	movs	r3, #7
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	481c      	ldr	r0, [pc, #112]	; (80020e8 <HAL_UART_MspInit+0xe0>)
 8002076:	f001 ff2b 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800207a:	e02d      	b.n	80020d8 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <HAL_UART_MspInit+0xe4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d128      	bne.n	80020d8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_UART_MspInit+0xdc>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM_TX_Pin|GPIO_PIN_3;
 80020b6:	230c      	movs	r3, #12
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c6:	2307      	movs	r3, #7
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	4619      	mov	r1, r3
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d4:	f001 fefc 	bl	8003ed0 <HAL_GPIO_Init>
}
 80020d8:	bf00      	nop
 80020da:	3730      	adds	r7, #48	; 0x30
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400
 80020ec:	40004400 	.word	0x40004400

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f000 f990 	bl	8002468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA1_Channel1_IRQHandler+0x10>)
 8002152:	f001 fdde 	bl	8003d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000308 	.word	0x20000308

08002160 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <SPI1_IRQHandler+0x10>)
 8002166:	f003 fdab 	bl	8005cc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000350 	.word	0x20000350

08002174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_kill>:

int _kill(int pid, int sig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800218e:	f004 fcf9 	bl	8006b84 <__errno>
 8002192:	4603      	mov	r3, r0
 8002194:	2216      	movs	r2, #22
 8002196:	601a      	str	r2, [r3, #0]
	return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_exit>:

void _exit (int status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffe7 	bl	8002184 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021b6:	e7fe      	b.n	80021b6 <_exit+0x12>

080021b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
	}

return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
	}
	return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f004 fc5e 	bl	8006b84 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20018000 	.word	0x20018000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	200001fc 	.word	0x200001fc
 80022fc:	20000468 	.word	0x20000468

08002300 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <SystemInit+0x64>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <SystemInit+0x64>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <SystemInit+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a13      	ldr	r2, [pc, #76]	; (8002368 <SystemInit+0x68>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <SystemInit+0x68>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <SystemInit+0x68>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <SystemInit+0x68>)
 800232c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002330:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002334:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <SystemInit+0x68>)
 8002338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800233c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <SystemInit+0x68>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <SystemInit+0x68>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <SystemInit+0x68>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SystemInit+0x64>)
 8002352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002356:	609a      	str	r2, [r3, #8]
#endif
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00
 8002368:	40021000 	.word	0x40021000

0800236c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002370:	f7ff ffc6 	bl	8002300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002374:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002376:	e003      	b.n	8002380 <LoopCopyDataInit>

08002378 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800237a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800237c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800237e:	3104      	adds	r1, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002384:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002386:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002388:	d3f6      	bcc.n	8002378 <CopyDataInit>
	ldr	r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800238c:	e002      	b.n	8002394 <LoopFillZerobss>

0800238e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800238e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002390:	f842 3b04 	str.w	r3, [r2], #4

08002394 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <LoopForever+0x16>)
	cmp	r2, r3
 8002396:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002398:	d3f9      	bcc.n	800238e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239a:	f004 fbf9 	bl	8006b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239e:	f7fe fe45 	bl	800102c <main>

080023a2 <LoopForever>:

LoopForever:
    b LoopForever
 80023a2:	e7fe      	b.n	80023a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023a8:	0800bb7c 	.word	0x0800bb7c
	ldr	r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023b0:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80023b4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80023b8:	20000464 	.word	0x20000464

080023bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>

080023be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f001 fb07 	bl	80039dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f80e 	bl	80023f0 <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	e001      	b.n	80023e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e0:	f7ff fd34 	bl	8001e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023e4:	79fb      	ldrb	r3, [r7, #7]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_InitTick+0x6c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <HAL_InitTick+0x70>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_InitTick+0x6c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002412:	fbb3 f3f1 	udiv	r3, r3, r1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f001 fb13 	bl	8003a46 <HAL_SYSTICK_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d809      	bhi.n	8002440 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f001 fadd 	bl	80039f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_InitTick+0x74>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e007      	b.n	8002450 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e004      	b.n	8002450 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e001      	b.n	8002450 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000008 	.word	0x20000008
 8002460:	20000000 	.word	0x20000000
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x24>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_IncTick+0x24>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008
 800248c:	20000450 	.word	0x20000450

08002490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTick+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000450 	.word	0x20000450

080024a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d005      	beq.n	80024ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_Delay+0x44>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffde 	bl	8002490 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f7      	bhi.n	80024d0 <HAL_Delay+0x28>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000008 	.word	0x20000008

080024f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3360      	adds	r3, #96	; 0x60
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <LL_ADC_SetOffset+0x44>)
 800257a:	4013      	ands	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	4313      	orrs	r3, r2
 8002588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	03fff000 	.word	0x03fff000

080025a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	461a      	mov	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025f6:	bf00      	nop
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3330      	adds	r3, #48	; 0x30
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	4413      	add	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	211f      	movs	r1, #31
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 011f 	and.w	r1, r3, #31
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3314      	adds	r3, #20
 8002690:	461a      	mov	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	0e5b      	lsrs	r3, r3, #25
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0d1b      	lsrs	r3, r3, #20
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2107      	movs	r1, #7
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	401a      	ands	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0d1b      	lsrs	r3, r3, #20
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	431a      	orrs	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0318 	and.w	r3, r3, #24
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <LL_ADC_SetChannelSingleDiff+0x44>)
 80026fc:	40d9      	lsrs	r1, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	400b      	ands	r3, r1
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	431a      	orrs	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	0007ffff 	.word	0x0007ffff

08002720 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 031f 	and.w	r3, r3, #31
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800274c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6093      	str	r3, [r2, #8]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002774:	d101      	bne.n	800277a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800279c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c4:	d101      	bne.n	80027ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <LL_ADC_IsEnabled+0x18>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_ADC_IsEnabled+0x1a>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002836:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d101      	bne.n	8002866 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d101      	bne.n	800288c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e136      	b.n	8002b24 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fae5 	bl	8001e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff3f 	bl	8002760 <LL_ADC_IsDeepPowerDownEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff25 	bl	800273c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff5a 	bl	80027b0 <LL_ADC_IsInternalRegulatorEnabled>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d115      	bne.n	800292e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff3e 	bl	8002788 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800290c:	4b87      	ldr	r3, [pc, #540]	; (8002b2c <HAL_ADC_Init+0x290>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	4a87      	ldr	r2, [pc, #540]	; (8002b30 <HAL_ADC_Init+0x294>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002920:	e002      	b.n	8002928 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3b01      	subs	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff3c 	bl	80027b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0210 	orr.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff75 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 8002964:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 80cf 	bne.w	8002b12 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 80cb 	bne.w	8002b12 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002984:	f043 0202 	orr.w	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff35 	bl	8002800 <LL_ADC_IsEnabled>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d115      	bne.n	80029c8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800299c:	4865      	ldr	r0, [pc, #404]	; (8002b34 <HAL_ADC_Init+0x298>)
 800299e:	f7ff ff2f 	bl	8002800 <LL_ADC_IsEnabled>
 80029a2:	4604      	mov	r4, r0
 80029a4:	4864      	ldr	r0, [pc, #400]	; (8002b38 <HAL_ADC_Init+0x29c>)
 80029a6:	f7ff ff2b 	bl	8002800 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	431c      	orrs	r4, r3
 80029ae:	4863      	ldr	r0, [pc, #396]	; (8002b3c <HAL_ADC_Init+0x2a0>)
 80029b0:	f7ff ff26 	bl	8002800 <LL_ADC_IsEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4323      	orrs	r3, r4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4619      	mov	r1, r3
 80029c2:	485f      	ldr	r0, [pc, #380]	; (8002b40 <HAL_ADC_Init+0x2a4>)
 80029c4:	f7ff fd94 	bl	80024f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e5b      	ldrb	r3, [r3, #25]
 80029cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	3b01      	subs	r3, #1
 80029fc:	045b      	lsls	r3, r3, #17
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_ADC_Init+0x2a8>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff08 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 8002a3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff15 	bl	8002874 <LL_ADC_INJ_IsConversionOngoing>
 8002a4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13d      	bne.n	8002ace <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13a      	bne.n	8002ace <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a5c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a64:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a74:	f023 0302 	bic.w	r3, r3, #2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d118      	bne.n	8002abe <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002aa8:	4311      	orrs	r1, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	e007      	b.n	8002ace <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10c      	bne.n	8002af0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f023 010f 	bic.w	r1, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
 8002aee:	e007      	b.n	8002b00 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020f 	bic.w	r2, r2, #15
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f023 0303 	bic.w	r3, r3, #3
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b10:	e007      	b.n	8002b22 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3724      	adds	r7, #36	; 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	053e2d63 	.word	0x053e2d63
 8002b34:	50040000 	.word	0x50040000
 8002b38:	50040100 	.word	0x50040100
 8002b3c:	50040200 	.word	0x50040200
 8002b40:	50040300 	.word	0x50040300
 8002b44:	fff0c007 	.word	0xfff0c007

08002b48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b54:	4850      	ldr	r0, [pc, #320]	; (8002c98 <HAL_ADC_Start_DMA+0x150>)
 8002b56:	f7ff fde3 	bl	8002720 <LL_ADC_GetMultimode>
 8002b5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe74 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 808e 	bne.w	8002c8a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_Start_DMA+0x34>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e089      	b.n	8002c90 <HAL_ADC_Start_DMA+0x148>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d002      	beq.n	8002b96 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d172      	bne.n	8002c7c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fc84 	bl	80034a4 <ADC_Enable>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d165      	bne.n	8002c72 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <HAL_ADC_Start_DMA+0x154>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d002      	beq.n	8002bca <HAL_ADC_Start_DMA+0x82>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_ADC_Start_DMA+0x84>
 8002bca:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <HAL_ADC_Start_DMA+0x158>)
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d002      	beq.n	8002bda <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f023 0206 	bic.w	r2, r3, #6
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	659a      	str	r2, [r3, #88]	; 0x58
 8002bfe:	e002      	b.n	8002c06 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_ADC_Start_DMA+0x15c>)
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <HAL_ADC_Start_DMA+0x160>)
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4a24      	ldr	r2, [pc, #144]	; (8002cac <HAL_ADC_Start_DMA+0x164>)
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	221c      	movs	r2, #28
 8002c24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0210 	orr.w	r2, r2, #16
 8002c3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3340      	adds	r3, #64	; 0x40
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f000 ffb7 	bl	8003bd0 <HAL_DMA_Start_IT>
 8002c62:	4603      	mov	r3, r0
 8002c64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fddb 	bl	8002826 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c70:	e00d      	b.n	8002c8e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002c7a:	e008      	b.n	8002c8e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c88:	e001      	b.n	8002c8e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	50040300 	.word	0x50040300
 8002c9c:	50040100 	.word	0x50040100
 8002ca0:	50040000 	.word	0x50040000
 8002ca4:	08003569 	.word	0x08003569
 8002ca8:	08003641 	.word	0x08003641
 8002cac:	0800365d 	.word	0x0800365d

08002cb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0b6      	sub	sp, #216	; 0xd8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x22>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e3c7      	b.n	8003476 <HAL_ADC_ConfigChannel+0x7b2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fdab 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 83a8 	bne.w	8003450 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d824      	bhi.n	8002d52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	3b02      	subs	r3, #2
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d81b      	bhi.n	8002d4a <HAL_ADC_ConfigChannel+0x86>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <HAL_ADC_ConfigChannel+0x54>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d31 	.word	0x08002d31
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d41 	.word	0x08002d41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	605a      	str	r2, [r3, #4]
          break;
 8002d2e:	e011      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2212      	movs	r2, #18
 8002d34:	605a      	str	r2, [r3, #4]
          break;
 8002d36:	e00d      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2218      	movs	r2, #24
 8002d3c:	605a      	str	r2, [r3, #4]
          break;
 8002d3e:	e009      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d46:	605a      	str	r2, [r3, #4]
          break;
 8002d48:	e004      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2206      	movs	r2, #6
 8002d4e:	605a      	str	r2, [r3, #4]
          break;
 8002d50:	e000      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f7ff fc61 	bl	8002628 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fd6f 	bl	800284e <LL_ADC_REG_IsConversionOngoing>
 8002d70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fd7b 	bl	8002874 <LL_ADC_INJ_IsConversionOngoing>
 8002d7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 81a6 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 81a1 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f7ff fc6c 	bl	8002680 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d00a      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dda:	f7ff fbbd 	bl	8002558 <LL_ADC_SetOffset>
 8002dde:	e17b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fbda 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x148>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fbcf 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e01e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x186>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbc4 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x19e>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	e018      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1d0>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fb93 	bl	80025cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fb77 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x20e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fb6c 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	e01e      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x24c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fb61 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e004      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x264>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x296>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e004      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d106      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fb30 	bl	80025cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fb14 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2d4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fb09 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	e01e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x312>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fafe 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x32a>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	e016      	b.n	800301c <HAL_ADC_ConfigChannel+0x358>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff facf 	bl	80025cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2103      	movs	r1, #3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fab3 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x396>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2103      	movs	r1, #3
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff faa8 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	e017      	b.n	800308a <HAL_ADC_ConfigChannel+0x3c6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2103      	movs	r1, #3
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fa9d 	bl	80025a0 <LL_ADC_GetOffsetChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003074:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x3de>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	e011      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x402>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fa7a 	bl	80025cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fb8f 	bl	8002800 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 813f 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff faee 	bl	80026d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a8e      	ldr	r2, [pc, #568]	; (800333c <HAL_ADC_ConfigChannel+0x678>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f040 8130 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x46c>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2b09      	cmp	r3, #9
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e019      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4a0>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800314c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2b09      	cmp	r3, #9
 800315c:	bf94      	ite	ls
 800315e:	2301      	movls	r3, #1
 8003160:	2300      	movhi	r3, #0
 8003162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	2b00      	cmp	r3, #0
 8003166:	d079      	beq.n	800325c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x4c0>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003182:	e015      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4ec>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003194:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	069b      	lsls	r3, r3, #26
 80031ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x50c>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	e017      	b.n	8003200 <HAL_ADC_ConfigChannel+0x53c>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x562>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	3301      	adds	r3, #1
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	051b      	lsls	r3, r3, #20
 8003224:	e018      	b.n	8003258 <HAL_ADC_ConfigChannel+0x594>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003258:	430b      	orrs	r3, r1
 800325a:	e080      	b.n	800335e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x5b4>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003276:	e015      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5e0>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x600>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	e017      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x630>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	61fb      	str	r3, [r7, #28]
  return result;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	ea42 0103 	orr.w	r1, r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x65c>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	3b1e      	subs	r3, #30
 8003318:	051b      	lsls	r3, r3, #20
 800331a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331e:	e01d      	b.n	800335c <HAL_ADC_ConfigChannel+0x698>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
  return result;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e005      	b.n	8003348 <HAL_ADC_ConfigChannel+0x684>
 800333c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f003 021f 	and.w	r2, r3, #31
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	3b1e      	subs	r3, #30
 8003356:	051b      	lsls	r3, r3, #20
 8003358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335c:	430b      	orrs	r3, r1
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	6892      	ldr	r2, [r2, #8]
 8003362:	4619      	mov	r1, r3
 8003364:	f7ff f98c 	bl	8002680 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b44      	ldr	r3, [pc, #272]	; (8003480 <HAL_ADC_ConfigChannel+0x7bc>)
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d07a      	beq.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003374:	4843      	ldr	r0, [pc, #268]	; (8003484 <HAL_ADC_ConfigChannel+0x7c0>)
 8003376:	f7ff f8e1 	bl	800253c <LL_ADC_GetCommonPathInternalCh>
 800337a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a41      	ldr	r2, [pc, #260]	; (8003488 <HAL_ADC_ConfigChannel+0x7c4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12c      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800338c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d126      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3c      	ldr	r2, [pc, #240]	; (800348c <HAL_ADC_ConfigChannel+0x7c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x6e4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <HAL_ADC_ConfigChannel+0x7cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d15d      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b0:	4619      	mov	r1, r3
 80033b2:	4834      	ldr	r0, [pc, #208]	; (8003484 <HAL_ADC_ConfigChannel+0x7c0>)
 80033b4:	f7ff f8af 	bl	8002516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_ADC_ConfigChannel+0x7d0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	4a36      	ldr	r2, [pc, #216]	; (8003498 <HAL_ADC_ConfigChannel+0x7d4>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033d2:	e002      	b.n	80033da <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f9      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033e0:	e040      	b.n	8003464 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_ADC_ConfigChannel+0x7d8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d118      	bne.n	800341e <HAL_ADC_ConfigChannel+0x75a>
 80033ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d112      	bne.n	800341e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_ADC_ConfigChannel+0x7c8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_ADC_ConfigChannel+0x748>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a22      	ldr	r2, [pc, #136]	; (8003490 <HAL_ADC_ConfigChannel+0x7cc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d12d      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800340c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003414:	4619      	mov	r1, r3
 8003416:	481b      	ldr	r0, [pc, #108]	; (8003484 <HAL_ADC_ConfigChannel+0x7c0>)
 8003418:	f7ff f87d 	bl	8002516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800341c:	e024      	b.n	8003468 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d120      	bne.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800342c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d11a      	bne.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <HAL_ADC_ConfigChannel+0x7c8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d115      	bne.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003446:	4619      	mov	r1, r3
 8003448:	480e      	ldr	r0, [pc, #56]	; (8003484 <HAL_ADC_ConfigChannel+0x7c0>)
 800344a:	f7ff f864 	bl	8002516 <LL_ADC_SetCommonPathInternalCh>
 800344e:	e00c      	b.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003462:	e002      	b.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003468:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003472:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003476:	4618      	mov	r0, r3
 8003478:	37d8      	adds	r7, #216	; 0xd8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	80080000 	.word	0x80080000
 8003484:	50040300 	.word	0x50040300
 8003488:	c7520000 	.word	0xc7520000
 800348c:	50040000 	.word	0x50040000
 8003490:	50040200 	.word	0x50040200
 8003494:	20000000 	.word	0x20000000
 8003498:	053e2d63 	.word	0x053e2d63
 800349c:	cb840000 	.word	0xcb840000
 80034a0:	80000001 	.word	0x80000001

080034a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f9a5 	bl	8002800 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d14d      	bne.n	8003558 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	4b28      	ldr	r3, [pc, #160]	; (8003564 <ADC_Enable+0xc0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0210 	orr.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e039      	b.n	800355a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f974 	bl	80027d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034f0:	f7fe ffce 	bl	8002490 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f6:	e028      	b.n	800354a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f97f 	bl	8002800 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f963 	bl	80027d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003512:	f7fe ffbd 	bl	8002490 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d914      	bls.n	800354a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d00d      	beq.n	800354a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f043 0210 	orr.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e007      	b.n	800355a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d1cf      	bne.n	80034f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	8000003f 	.word	0x8000003f

08003568 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d14b      	bne.n	800361a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d021      	beq.n	80035e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f82e 	bl	8002602 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d12b      	bne.n	8003612 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11f      	bne.n	8003612 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
 80035de:	e018      	b.n	8003612 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d111      	bne.n	8003612 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7fd fcea 	bl	8000fec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003618:	e00e      	b.n	8003638 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff fb42 	bl	8002cb0 <HAL_ADC_ErrorCallback>
}
 800362c:	e004      	b.n	8003638 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7fe fbec 	bl	8001e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fb14 	bl	8002cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <LL_ADC_IsEnabled>:
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <LL_ADC_IsEnabled+0x18>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <LL_ADC_IsEnabled+0x1a>
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d101      	bne.n	80036ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b09f      	sub	sp, #124	; 0x7c
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e093      	b.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003702:	2300      	movs	r3, #0
 8003704:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003706:	2300      	movs	r3, #0
 8003708:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a47      	ldr	r2, [pc, #284]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d102      	bne.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	e001      	b.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e072      	b.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ffb9 	bl	80036b6 <LL_ADC_REG_IsConversionOngoing>
 8003744:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ffb3 	bl	80036b6 <LL_ADC_REG_IsConversionOngoing>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d154      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003758:	2b00      	cmp	r3, #0
 800375a:	d151      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800375e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d02c      	beq.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800377a:	035b      	lsls	r3, r3, #13
 800377c:	430b      	orrs	r3, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003784:	4829      	ldr	r0, [pc, #164]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003786:	f7ff ff83 	bl	8003690 <LL_ADC_IsEnabled>
 800378a:	4604      	mov	r4, r0
 800378c:	4828      	ldr	r0, [pc, #160]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800378e:	f7ff ff7f 	bl	8003690 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	431c      	orrs	r4, r3
 8003796:	4828      	ldr	r0, [pc, #160]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003798:	f7ff ff7a 	bl	8003690 <LL_ADC_IsEnabled>
 800379c:	4603      	mov	r3, r0
 800379e:	4323      	orrs	r3, r4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d137      	bne.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037ac:	f023 030f 	bic.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	6811      	ldr	r1, [r2, #0]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	431a      	orrs	r2, r3
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c0:	e028      	b.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ce:	4817      	ldr	r0, [pc, #92]	; (800382c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037d0:	f7ff ff5e 	bl	8003690 <LL_ADC_IsEnabled>
 80037d4:	4604      	mov	r4, r0
 80037d6:	4816      	ldr	r0, [pc, #88]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037d8:	f7ff ff5a 	bl	8003690 <LL_ADC_IsEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	431c      	orrs	r4, r3
 80037e0:	4815      	ldr	r0, [pc, #84]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037e2:	f7ff ff55 	bl	8003690 <LL_ADC_IsEnabled>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4323      	orrs	r3, r4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d112      	bne.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037f6:	f023 030f 	bic.w	r3, r3, #15
 80037fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037fe:	e009      	b.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003812:	e000      	b.n	8003816 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003814:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800381e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003822:	4618      	mov	r0, r3
 8003824:	377c      	adds	r7, #124	; 0x7c
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	bf00      	nop
 800382c:	50040000 	.word	0x50040000
 8003830:	50040100 	.word	0x50040100
 8003834:	50040300 	.word	0x50040300
 8003838:	50040200 	.word	0x50040200

0800383c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <__NVIC_SetPriorityGrouping+0x44>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800386e:	4a04      	ldr	r2, [pc, #16]	; (8003880 <__NVIC_SetPriorityGrouping+0x44>)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	60d3      	str	r3, [r2, #12]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <__NVIC_GetPriorityGrouping+0x18>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 0307 	and.w	r3, r3, #7
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	db0b      	blt.n	80038ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	4907      	ldr	r1, [pc, #28]	; (80038d8 <__NVIC_EnableIRQ+0x38>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2001      	movs	r0, #1
 80038c2:	fa00 f202 	lsl.w	r2, r0, r2
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	e000e100 	.word	0xe000e100

080038dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	6039      	str	r1, [r7, #0]
 80038e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db0a      	blt.n	8003906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	490c      	ldr	r1, [pc, #48]	; (8003928 <__NVIC_SetPriority+0x4c>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	440b      	add	r3, r1
 8003900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003904:	e00a      	b.n	800391c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4908      	ldr	r1, [pc, #32]	; (800392c <__NVIC_SetPriority+0x50>)
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	3b04      	subs	r3, #4
 8003914:	0112      	lsls	r2, r2, #4
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	440b      	add	r3, r1
 800391a:	761a      	strb	r2, [r3, #24]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000e100 	.word	0xe000e100
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	; 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f1c3 0307 	rsb	r3, r3, #7
 800394a:	2b04      	cmp	r3, #4
 800394c:	bf28      	it	cs
 800394e:	2304      	movcs	r3, #4
 8003950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3304      	adds	r3, #4
 8003956:	2b06      	cmp	r3, #6
 8003958:	d902      	bls.n	8003960 <NVIC_EncodePriority+0x30>
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3b03      	subs	r3, #3
 800395e:	e000      	b.n	8003962 <NVIC_EncodePriority+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	f04f 32ff 	mov.w	r2, #4294967295
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	401a      	ands	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003978:	f04f 31ff 	mov.w	r1, #4294967295
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	43d9      	mvns	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	4313      	orrs	r3, r2
         );
}
 800398a:	4618      	mov	r0, r3
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a8:	d301      	bcc.n	80039ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00f      	b.n	80039ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <SysTick_Config+0x40>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b6:	210f      	movs	r1, #15
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f7ff ff8e 	bl	80038dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <SysTick_Config+0x40>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <SysTick_Config+0x40>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff29 	bl	800383c <__NVIC_SetPriorityGrouping>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a04:	f7ff ff3e 	bl	8003884 <__NVIC_GetPriorityGrouping>
 8003a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff ff8e 	bl	8003930 <NVIC_EncodePriority>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff5d 	bl	80038dc <__NVIC_SetPriority>
}
 8003a22:	bf00      	nop
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff31 	bl	80038a0 <__NVIC_EnableIRQ>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ffa2 	bl	8003998 <SysTick_Config>
 8003a54:	4603      	mov	r3, r0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e098      	b.n	8003ba4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <HAL_DMA_Init+0x150>)
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d80f      	bhi.n	8003a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <HAL_DMA_Init+0x154>)
 8003a86:	4413      	add	r3, r2
 8003a88:	4a4b      	ldr	r2, [pc, #300]	; (8003bb8 <HAL_DMA_Init+0x158>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	009a      	lsls	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a48      	ldr	r2, [pc, #288]	; (8003bbc <HAL_DMA_Init+0x15c>)
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a9c:	e00e      	b.n	8003abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <HAL_DMA_Init+0x160>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4a43      	ldr	r2, [pc, #268]	; (8003bb8 <HAL_DMA_Init+0x158>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	009a      	lsls	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a42      	ldr	r2, [pc, #264]	; (8003bc4 <HAL_DMA_Init+0x164>)
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b16:	d039      	beq.n	8003b8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <HAL_DMA_Init+0x15c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d11a      	bne.n	8003b58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_DMA_Init+0x168>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f003 031c 	and.w	r3, r3, #28
 8003b2e:	210f      	movs	r1, #15
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	4924      	ldr	r1, [pc, #144]	; (8003bc8 <HAL_DMA_Init+0x168>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_DMA_Init+0x168>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	f003 031c 	and.w	r3, r3, #28
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	491d      	ldr	r1, [pc, #116]	; (8003bc8 <HAL_DMA_Init+0x168>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
 8003b56:	e019      	b.n	8003b8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <HAL_DMA_Init+0x16c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f003 031c 	and.w	r3, r3, #28
 8003b64:	210f      	movs	r1, #15
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	4917      	ldr	r1, [pc, #92]	; (8003bcc <HAL_DMA_Init+0x16c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_DMA_Init+0x16c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f003 031c 	and.w	r3, r3, #28
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	4911      	ldr	r1, [pc, #68]	; (8003bcc <HAL_DMA_Init+0x16c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40020407 	.word	0x40020407
 8003bb4:	bffdfff8 	.word	0xbffdfff8
 8003bb8:	cccccccd 	.word	0xcccccccd
 8003bbc:	40020000 	.word	0x40020000
 8003bc0:	bffdfbf8 	.word	0xbffdfbf8
 8003bc4:	40020400 	.word	0x40020400
 8003bc8:	400200a8 	.word	0x400200a8
 8003bcc:	400204a8 	.word	0x400204a8

08003bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_Start_IT+0x20>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e04b      	b.n	8003c88 <HAL_DMA_Start_IT+0xb8>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d13a      	bne.n	8003c7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f921 	bl	8003e70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 020e 	orr.w	r2, r2, #14
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e00f      	b.n	8003c68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 020a 	orr.w	r2, r2, #10
 8003c66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e005      	b.n	8003c86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d005      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2204      	movs	r2, #4
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e029      	b.n	8003d08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 020e 	bic.w	r2, r2, #14
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	f003 021c 	and.w	r2, r3, #28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
    }
  }
  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f003 031c 	and.w	r3, r3, #28
 8003d32:	2204      	movs	r2, #4
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d026      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x7a>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d021      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f003 021c 	and.w	r2, r3, #28
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2104      	movs	r1, #4
 8003d74:	fa01 f202 	lsl.w	r2, r1, r2
 8003d78:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d071      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d8a:	e06c      	b.n	8003e66 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 031c 	and.w	r3, r3, #28
 8003d94:	2202      	movs	r2, #2
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02e      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xec>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d029      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020a 	bic.w	r2, r2, #10
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f003 021c 	and.w	r2, r3, #28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2102      	movs	r1, #2
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d038      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dfc:	e033      	b.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	f003 031c 	and.w	r3, r3, #28
 8003e06:	2208      	movs	r2, #8
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02a      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d025      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 020e 	bic.w	r2, r2, #14
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	f003 021c 	and.w	r2, r3, #28
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
}
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f003 021c 	and.w	r2, r3, #28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d108      	bne.n	8003eb4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eb2:	e007      	b.n	8003ec4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ede:	e17f      	b.n	80041e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8171 	beq.w	80041da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d00b      	beq.n	8003f18 <HAL_GPIO_Init+0x48>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d007      	beq.n	8003f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f0c:	2b11      	cmp	r3, #17
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b12      	cmp	r3, #18
 8003f16:	d130      	bne.n	8003f7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f4e:	2201      	movs	r2, #1
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 0201 	and.w	r2, r3, #1
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d118      	bne.n	8003fb8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f003 0201 	and.w	r2, r3, #1
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x128>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b12      	cmp	r3, #18
 8003ff6:	d123      	bne.n	8004040 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	08da      	lsrs	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3208      	adds	r2, #8
 8004000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	220f      	movs	r2, #15
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	08da      	lsrs	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3208      	adds	r2, #8
 800403a:	6939      	ldr	r1, [r7, #16]
 800403c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2203      	movs	r2, #3
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0203 	and.w	r2, r3, #3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80ac 	beq.w	80041da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004082:	4b5f      	ldr	r3, [pc, #380]	; (8004200 <HAL_GPIO_Init+0x330>)
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	4a5e      	ldr	r2, [pc, #376]	; (8004200 <HAL_GPIO_Init+0x330>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6613      	str	r3, [r2, #96]	; 0x60
 800408e:	4b5c      	ldr	r3, [pc, #368]	; (8004200 <HAL_GPIO_Init+0x330>)
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800409a:	4a5a      	ldr	r2, [pc, #360]	; (8004204 <HAL_GPIO_Init+0x334>)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040c4:	d025      	beq.n	8004112 <HAL_GPIO_Init+0x242>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4f      	ldr	r2, [pc, #316]	; (8004208 <HAL_GPIO_Init+0x338>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01f      	beq.n	800410e <HAL_GPIO_Init+0x23e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a4e      	ldr	r2, [pc, #312]	; (800420c <HAL_GPIO_Init+0x33c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d019      	beq.n	800410a <HAL_GPIO_Init+0x23a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a4d      	ldr	r2, [pc, #308]	; (8004210 <HAL_GPIO_Init+0x340>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_GPIO_Init+0x236>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4c      	ldr	r2, [pc, #304]	; (8004214 <HAL_GPIO_Init+0x344>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00d      	beq.n	8004102 <HAL_GPIO_Init+0x232>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a4b      	ldr	r2, [pc, #300]	; (8004218 <HAL_GPIO_Init+0x348>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d007      	beq.n	80040fe <HAL_GPIO_Init+0x22e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4a      	ldr	r2, [pc, #296]	; (800421c <HAL_GPIO_Init+0x34c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_GPIO_Init+0x22a>
 80040f6:	2306      	movs	r3, #6
 80040f8:	e00c      	b.n	8004114 <HAL_GPIO_Init+0x244>
 80040fa:	2307      	movs	r3, #7
 80040fc:	e00a      	b.n	8004114 <HAL_GPIO_Init+0x244>
 80040fe:	2305      	movs	r3, #5
 8004100:	e008      	b.n	8004114 <HAL_GPIO_Init+0x244>
 8004102:	2304      	movs	r3, #4
 8004104:	e006      	b.n	8004114 <HAL_GPIO_Init+0x244>
 8004106:	2303      	movs	r3, #3
 8004108:	e004      	b.n	8004114 <HAL_GPIO_Init+0x244>
 800410a:	2302      	movs	r3, #2
 800410c:	e002      	b.n	8004114 <HAL_GPIO_Init+0x244>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_GPIO_Init+0x244>
 8004112:	2300      	movs	r3, #0
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	f002 0203 	and.w	r2, r2, #3
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	4093      	lsls	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004124:	4937      	ldr	r1, [pc, #220]	; (8004204 <HAL_GPIO_Init+0x334>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	3302      	adds	r3, #2
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_GPIO_Init+0x350>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004156:	4a32      	ldr	r2, [pc, #200]	; (8004220 <HAL_GPIO_Init+0x350>)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800415c:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_GPIO_Init+0x350>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <HAL_GPIO_Init+0x350>)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_GPIO_Init+0x350>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_GPIO_Init+0x350>)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <HAL_GPIO_Init+0x350>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041d4:	4a12      	ldr	r2, [pc, #72]	; (8004220 <HAL_GPIO_Init+0x350>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f47f ae78 	bne.w	8003ee0 <HAL_GPIO_Init+0x10>
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000
 8004204:	40010000 	.word	0x40010000
 8004208:	48000400 	.word	0x48000400
 800420c:	48000800 	.word	0x48000800
 8004210:	48000c00 	.word	0x48000c00
 8004214:	48001000 	.word	0x48001000
 8004218:	48001400 	.word	0x48001400
 800421c:	48001800 	.word	0x48001800
 8004220:	40010400 	.word	0x40010400

08004224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e001      	b.n	8004246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004270:	e002      	b.n	8004278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_PWREx_GetVoltageRange+0x18>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40007000 	.word	0x40007000

080042a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ae:	d130      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d038      	beq.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2232      	movs	r2, #50	; 0x32
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	3301      	adds	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e4:	e002      	b.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f8:	d102      	bne.n	8004300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f2      	bne.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430c:	d110      	bne.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e00f      	b.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431e:	d007      	beq.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004328:	4a05      	ldr	r2, [pc, #20]	; (8004340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800432e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40007000 	.word	0x40007000
 8004344:	20000000 	.word	0x20000000
 8004348:	431bde83 	.word	0x431bde83

0800434c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e3d4      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4ba1      	ldr	r3, [pc, #644]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004368:	4b9e      	ldr	r3, [pc, #632]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80e4 	beq.w	8004548 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <HAL_RCC_OscConfig+0x4a>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b0c      	cmp	r3, #12
 800438a:	f040 808b 	bne.w	80044a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b01      	cmp	r3, #1
 8004392:	f040 8087 	bne.w	80044a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004396:	4b93      	ldr	r3, [pc, #588]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x62>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e3ac      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	4b8c      	ldr	r3, [pc, #560]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_RCC_OscConfig+0x7c>
 80043be:	4b89      	ldr	r3, [pc, #548]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c6:	e005      	b.n	80043d4 <HAL_RCC_OscConfig+0x88>
 80043c8:	4b86      	ldr	r3, [pc, #536]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d223      	bcs.n	8004420 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd41 	bl	8004e64 <RCC_SetFlashLatencyFromMSIRange>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e38d      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ec:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7c      	ldr	r2, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80043f2:	f043 0308 	orr.w	r3, r3, #8
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4977      	ldr	r1, [pc, #476]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440a:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	4972      	ldr	r1, [pc, #456]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
 800441e:	e025      	b.n	800446c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004420:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6f      	ldr	r2, [pc, #444]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004426:	f043 0308 	orr.w	r3, r3, #8
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	496a      	ldr	r1, [pc, #424]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443e:	4b69      	ldr	r3, [pc, #420]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	4965      	ldr	r1, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd01 	bl	8004e64 <RCC_SetFlashLatencyFromMSIRange>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e34d      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446c:	f000 fc36 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	495a      	ldr	r1, [pc, #360]	; (80045e8 <HAL_RCC_OscConfig+0x29c>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_OscConfig+0x2a0>)
 800448a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800448c:	4b58      	ldr	r3, [pc, #352]	; (80045f0 <HAL_RCC_OscConfig+0x2a4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd ffad 	bl	80023f0 <HAL_InitTick>
 8004496:	4603      	mov	r3, r0
 8004498:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d052      	beq.n	8004546 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	e331      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d032      	beq.n	8004512 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ac:	4b4d      	ldr	r3, [pc, #308]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a4c      	ldr	r2, [pc, #304]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b8:	f7fd ffea 	bl	8002490 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c0:	f7fd ffe6 	bl	8002490 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e31a      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d2:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a40      	ldr	r2, [pc, #256]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	493b      	ldr	r1, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	4936      	ldr	r1, [pc, #216]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
 8004510:	e01a      	b.n	8004548 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a33      	ldr	r2, [pc, #204]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800451e:	f7fd ffb7 	bl	8002490 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004526:	f7fd ffb3 	bl	8002490 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e2e7      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004538:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x1da>
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004546:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d074      	beq.n	800463e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x21a>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d10e      	bne.n	800457e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d10b      	bne.n	800457e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d064      	beq.n	800463c <HAL_RCC_OscConfig+0x2f0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d160      	bne.n	800463c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e2c4      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x24a>
 8004588:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 800458e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e01d      	b.n	80045d2 <HAL_RCC_OscConfig+0x286>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x26e>
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x286>
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x298>)
 80045cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01c      	beq.n	8004614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7fd ff59 	bl	8002490 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e0:	e011      	b.n	8004606 <HAL_RCC_OscConfig+0x2ba>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	0800b66c 	.word	0x0800b66c
 80045ec:	20000000 	.word	0x20000000
 80045f0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd ff4c 	bl	8002490 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e280      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	4baf      	ldr	r3, [pc, #700]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x2a8>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd ff3c 	bl	8002490 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fd ff38 	bl	8002490 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e26c      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462e:	4ba5      	ldr	r3, [pc, #660]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x2d0>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d060      	beq.n	800470c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x310>
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d119      	bne.n	800468a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d116      	bne.n	800468a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800465c:	4b99      	ldr	r3, [pc, #612]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_OscConfig+0x328>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e249      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b93      	ldr	r3, [pc, #588]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	4990      	ldr	r1, [pc, #576]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	e040      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d023      	beq.n	80046da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004692:	4b8c      	ldr	r3, [pc, #560]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a8b      	ldr	r2, [pc, #556]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fd fef7 	bl	8002490 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fd fef3 	bl	8002490 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e227      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b8:	4b82      	ldr	r3, [pc, #520]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b7f      	ldr	r3, [pc, #508]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	497c      	ldr	r1, [pc, #496]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
 80046d8:	e018      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b7a      	ldr	r3, [pc, #488]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a79      	ldr	r2, [pc, #484]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd fed3 	bl	8002490 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fd fecf 	bl	8002490 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e203      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004700:	4b70      	ldr	r3, [pc, #448]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d03c      	beq.n	8004792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01c      	beq.n	800475a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004720:	4b68      	ldr	r3, [pc, #416]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004726:	4a67      	ldr	r2, [pc, #412]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd feae 	bl	8002490 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004738:	f7fd feaa 	bl	8002490 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1de      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800474a:	4b5e      	ldr	r3, [pc, #376]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCC_OscConfig+0x3ec>
 8004758:	e01b      	b.n	8004792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475a:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004760:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fd fe91 	bl	8002490 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004772:	f7fd fe8d 	bl	8002490 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e1c1      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	4b4f      	ldr	r3, [pc, #316]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ef      	bne.n	8004772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a6 	beq.w	80048ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047a4:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10d      	bne.n	80047cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b0:	4b44      	ldr	r3, [pc, #272]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	4a43      	ldr	r2, [pc, #268]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	6593      	str	r3, [r2, #88]	; 0x58
 80047bc:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <HAL_RCC_OscConfig+0x57c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d118      	bne.n	800480a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCC_OscConfig+0x57c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_RCC_OscConfig+0x57c>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e4:	f7fd fe54 	bl	8002490 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fd fe50 	bl	8002490 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e184      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <HAL_RCC_OscConfig+0x57c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d108      	bne.n	8004824 <HAL_RCC_OscConfig+0x4d8>
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004822:	e024      	b.n	800486e <HAL_RCC_OscConfig+0x522>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d110      	bne.n	800484e <HAL_RCC_OscConfig+0x502>
 800482c:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	4a24      	ldr	r2, [pc, #144]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484c:	e00f      	b.n	800486e <HAL_RCC_OscConfig+0x522>
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004866:	f023 0304 	bic.w	r3, r3, #4
 800486a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd fe0b 	bl	8002490 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fd fe07 	bl	8002490 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e139      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCC_OscConfig+0x578>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ed      	beq.n	800487e <HAL_RCC_OscConfig+0x532>
 80048a2:	e01a      	b.n	80048da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd fdf4 	bl	8002490 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fd fdf0 	bl	8002490 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d906      	bls.n	80048cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e122      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048cc:	4b90      	ldr	r3, [pc, #576]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e8      	bne.n	80048ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048da:	7ffb      	ldrb	r3, [r7, #31]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b8b      	ldr	r3, [pc, #556]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a8a      	ldr	r2, [pc, #552]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8108 	beq.w	8004b06 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	f040 80d0 	bne.w	8004aa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004900:	4b83      	ldr	r3, [pc, #524]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0203 	and.w	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	429a      	cmp	r2, r3
 8004912:	d130      	bne.n	8004976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	3b01      	subs	r3, #1
 8004920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d127      	bne.n	8004976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004930:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d11f      	bne.n	8004976 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004940:	2a07      	cmp	r2, #7
 8004942:	bf14      	ite	ne
 8004944:	2201      	movne	r2, #1
 8004946:	2200      	moveq	r2, #0
 8004948:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800494a:	4293      	cmp	r3, r2
 800494c:	d113      	bne.n	8004976 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d109      	bne.n	8004976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d06e      	beq.n	8004a54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	d069      	beq.n	8004a50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800497c:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004988:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b7      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004998:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a5c      	ldr	r2, [pc, #368]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049a4:	f7fd fd74 	bl	8002490 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd fd70 	bl	8002490 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e0a4      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049be:	4b54      	ldr	r3, [pc, #336]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ca:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	4b51      	ldr	r3, [pc, #324]	; (8004b14 <HAL_RCC_OscConfig+0x7c8>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049da:	3a01      	subs	r2, #1
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	4311      	orrs	r1, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049e4:	0212      	lsls	r2, r2, #8
 80049e6:	4311      	orrs	r1, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049ec:	0852      	lsrs	r2, r2, #1
 80049ee:	3a01      	subs	r2, #1
 80049f0:	0552      	lsls	r2, r2, #21
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049f8:	0852      	lsrs	r2, r2, #1
 80049fa:	3a01      	subs	r2, #1
 80049fc:	0652      	lsls	r2, r2, #25
 80049fe:	4311      	orrs	r1, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a04:	0912      	lsrs	r2, r2, #4
 8004a06:	0452      	lsls	r2, r2, #17
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	4941      	ldr	r1, [pc, #260]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a10:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a1c:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a28:	f7fd fd32 	bl	8002490 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fd fd2e 	bl	8002490 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e062      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a4e:	e05a      	b.n	8004b06 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e059      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a54:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d152      	bne.n	8004b06 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2a      	ldr	r2, [pc, #168]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a78:	f7fd fd0a 	bl	8002490 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fd fd06 	bl	8002490 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e03a      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x734>
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d02d      	beq.n	8004b02 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004ac4:	f023 0303 	bic.w	r3, r3, #3
 8004ac8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004ad0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ada:	f7fd fcd9 	bl	8002490 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fd fcd5 	bl	8002490 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e009      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_OscConfig+0x7c4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x796>
 8004b00:	e001      	b.n	8004b06 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	f99d808c 	.word	0xf99d808c

08004b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0c8      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b66      	ldr	r3, [pc, #408]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d910      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b63      	ldr	r3, [pc, #396]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 0207 	bic.w	r2, r3, #7
 8004b42:	4961      	ldr	r1, [pc, #388]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b5f      	ldr	r3, [pc, #380]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0b0      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d04c      	beq.n	8004c02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b70:	4b56      	ldr	r3, [pc, #344]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d121      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e09e      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b88:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d115      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e092      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba0:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e086      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb0:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e07e      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc0:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 0203 	bic.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	493f      	ldr	r1, [pc, #252]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fd fc5d 	bl	8002490 <HAL_GetTick>
 8004bd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bda:	f7fd fc59 	bl	8002490 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e066      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 020c 	and.w	r2, r3, #12
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d1eb      	bne.n	8004bda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	492c      	ldr	r1, [pc, #176]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d210      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 0207 	bic.w	r2, r3, #7
 8004c36:	4924      	ldr	r1, [pc, #144]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e036      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4918      	ldr	r1, [pc, #96]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4910      	ldr	r1, [pc, #64]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c8e:	f000 f825 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004c92:	4602      	mov	r2, r0
 8004c94:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_RCC_ClockConfig+0x1b4>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	490c      	ldr	r1, [pc, #48]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	5ccb      	ldrb	r3, [r1, r3]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fb9c 	bl	80023f0 <HAL_InitTick>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800b66c 	.word	0x0800b66c
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	20000004 	.word	0x20000004

08004cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cea:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x34>
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d121      	bne.n	8004d4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11e      	bne.n	8004d4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d1c:	4b31      	ldr	r3, [pc, #196]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e005      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d2c:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d38:	4a2b      	ldr	r2, [pc, #172]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d102      	bne.n	8004d5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <HAL_RCC_GetSysClockFreq+0x110>)
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e004      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d60:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d134      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d003      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0xac>
 8004d80:	e005      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d82:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <HAL_RCC_GetSysClockFreq+0x110>)
 8004d84:	617b      	str	r3, [r7, #20]
      break;
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d8a:	617b      	str	r3, [r7, #20]
      break;
 8004d8c:	e002      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	617b      	str	r3, [r7, #20]
      break;
 8004d92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	3301      	adds	r3, #1
 8004da0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	fb02 f203 	mul.w	r2, r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	0e5b      	lsrs	r3, r3, #25
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dd4:	69bb      	ldr	r3, [r7, #24]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3724      	adds	r7, #36	; 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	0800b684 	.word	0x0800b684
 8004dec:	00f42400 	.word	0x00f42400
 8004df0:	007a1200 	.word	0x007a1200

08004df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000000 	.word	0x20000000

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e10:	f7ff fff0 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000
 8004e34:	0800b67c 	.word	0x0800b67c

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e3c:	f7ff ffda 	bl	8004df4 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0adb      	lsrs	r3, r3, #11
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	0800b67c 	.word	0x0800b67c

08004e64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e70:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e7c:	f7ff fa02 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 8004e80:	6178      	str	r0, [r7, #20]
 8004e82:	e014      	b.n	8004eae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e90:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e9c:	f7ff f9f2 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 8004ea0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb4:	d10b      	bne.n	8004ece <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d919      	bls.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2ba0      	cmp	r3, #160	; 0xa0
 8004ec0:	d902      	bls.n	8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	e013      	b.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ec8:	2301      	movs	r3, #1
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	e010      	b.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d902      	bls.n	8004eda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	e00a      	b.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b80      	cmp	r3, #128	; 0x80
 8004ede:	d102      	bne.n	8004ee6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	e004      	b.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b70      	cmp	r3, #112	; 0x70
 8004eea:	d101      	bne.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eec:	2301      	movs	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 0207 	bic.w	r2, r3, #7
 8004ef8:	4909      	ldr	r1, [pc, #36]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40022000 	.word	0x40022000

08004f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f30:	2300      	movs	r3, #0
 8004f32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d041      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f48:	d02a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f4e:	d824      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f64:	d010      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f66:	e018      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f68:	4b86      	ldr	r3, [pc, #536]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a85      	ldr	r2, [pc, #532]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f74:	e015      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fabb 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f86:	e00c      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3320      	adds	r3, #32
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fba6 	bl	80056e0 <RCCEx_PLLSAI2_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fa8:	4b76      	ldr	r3, [pc, #472]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb6:	4973      	ldr	r1, [pc, #460]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d041      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fd8:	d02a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fde:	d824      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fe4:	d008      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fea:	d81e      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ff4:	d010      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ff6:	e018      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ff8:	4b62      	ldr	r3, [pc, #392]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a61      	ldr	r2, [pc, #388]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005004:	e015      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fa73 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005016:	e00c      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3320      	adds	r3, #32
 800501c:	2100      	movs	r1, #0
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fb5e 	bl	80056e0 <RCCEx_PLLSAI2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005028:	e003      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	74fb      	strb	r3, [r7, #19]
      break;
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005038:	4b52      	ldr	r3, [pc, #328]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005046:	494f      	ldr	r1, [pc, #316]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a0 	beq.w	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005066:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	4b41      	ldr	r3, [pc, #260]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	4a40      	ldr	r2, [pc, #256]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6593      	str	r3, [r2, #88]	; 0x58
 8005088:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005094:	2301      	movs	r3, #1
 8005096:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a4:	f7fd f9f4 	bl	8002490 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050aa:	e009      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ac:	f7fd f9f0 	bl	8002490 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	74fb      	strb	r3, [r7, #19]
        break;
 80050be:	e005      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c0:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ef      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d15c      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050d2:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01f      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d019      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050f0:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a20      	ldr	r2, [pc, #128]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d016      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fd f9af 	bl	8002490 <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	e00b      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd f9ab 	bl	8002490 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d902      	bls.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	74fb      	strb	r3, [r7, #19]
            break;
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ec      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005172:	4904      	ldr	r1, [pc, #16]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800517a:	e009      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
 8005180:	e006      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005190:	7c7b      	ldrb	r3, [r7, #17]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d105      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005196:	4b9e      	ldr	r3, [pc, #632]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	4a9d      	ldr	r2, [pc, #628]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ae:	4b98      	ldr	r3, [pc, #608]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f023 0203 	bic.w	r2, r3, #3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4994      	ldr	r1, [pc, #592]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051d0:	4b8f      	ldr	r3, [pc, #572]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f023 020c 	bic.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	498c      	ldr	r1, [pc, #560]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051f2:	4b87      	ldr	r3, [pc, #540]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	4983      	ldr	r1, [pc, #524]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005214:	4b7e      	ldr	r3, [pc, #504]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	497b      	ldr	r1, [pc, #492]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005236:	4b76      	ldr	r3, [pc, #472]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005244:	4972      	ldr	r1, [pc, #456]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005258:	4b6d      	ldr	r3, [pc, #436]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	496a      	ldr	r1, [pc, #424]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	4961      	ldr	r1, [pc, #388]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800529c:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052aa:	4959      	ldr	r1, [pc, #356]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052be:	4b54      	ldr	r3, [pc, #336]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	4950      	ldr	r1, [pc, #320]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052e0:	4b4b      	ldr	r3, [pc, #300]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	4948      	ldr	r1, [pc, #288]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005302:	4b43      	ldr	r3, [pc, #268]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	493f      	ldr	r1, [pc, #252]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d028      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005324:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005332:	4937      	ldr	r1, [pc, #220]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005342:	d106      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005344:	4b32      	ldr	r3, [pc, #200]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a31      	ldr	r2, [pc, #196]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800534e:	60d3      	str	r3, [r2, #12]
 8005350:	e011      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800535a:	d10c      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f8c8 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d028      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	491f      	ldr	r1, [pc, #124]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a0:	d106      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ac:	60d3      	str	r3, [r2, #12]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	2101      	movs	r1, #1
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f899 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02b      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fe:	d109      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a02      	ldr	r2, [pc, #8]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540a:	60d3      	str	r3, [r2, #12]
 800540c:	e014      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800541c:	d10c      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f867 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005452:	4928      	ldr	r1, [pc, #160]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d10d      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f844 	bl	80054f8 <RCCEx_PLLSAI1_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d014      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	74bb      	strb	r3, [r7, #18]
 800547e:	e011      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3320      	adds	r3, #32
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f925 	bl	80056e0 <RCCEx_PLLSAI2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054b0:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054be:	490d      	ldr	r1, [pc, #52]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e2:	4904      	ldr	r1, [pc, #16]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000

080054f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005506:	4b75      	ldr	r3, [pc, #468]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d018      	beq.n	8005544 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005512:	4b72      	ldr	r3, [pc, #456]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d10d      	bne.n	800553e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
       ||
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800552a:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
       ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d047      	beq.n	80055ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
 8005542:	e044      	b.n	80055ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d018      	beq.n	800557e <RCCEx_PLLSAI1_Config+0x86>
 800554c:	2b03      	cmp	r3, #3
 800554e:	d825      	bhi.n	800559c <RCCEx_PLLSAI1_Config+0xa4>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d002      	beq.n	800555a <RCCEx_PLLSAI1_Config+0x62>
 8005554:	2b02      	cmp	r3, #2
 8005556:	d009      	beq.n	800556c <RCCEx_PLLSAI1_Config+0x74>
 8005558:	e020      	b.n	800559c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800555a:	4b60      	ldr	r3, [pc, #384]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11d      	bne.n	80055a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556a:	e01a      	b.n	80055a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800556c:	4b5b      	ldr	r3, [pc, #364]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800557c:	e013      	b.n	80055a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800557e:	4b57      	ldr	r3, [pc, #348]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800558a:	4b54      	ldr	r3, [pc, #336]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800559a:	e006      	b.n	80055aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
      break;
 80055a0:	e004      	b.n	80055ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10d      	bne.n	80055ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055b2:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	430b      	orrs	r3, r1
 80055c8:	4944      	ldr	r1, [pc, #272]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d17d      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055d4:	4b41      	ldr	r3, [pc, #260]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a40      	ldr	r2, [pc, #256]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc ff56 	bl	8002490 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055e6:	e009      	b.n	80055fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e8:	f7fc ff52 	bl	8002490 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d902      	bls.n	80055fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	73fb      	strb	r3, [r7, #15]
        break;
 80055fa:	e005      	b.n	8005608 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ef      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d160      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d111      	bne.n	8005638 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6892      	ldr	r2, [r2, #8]
 8005624:	0211      	lsls	r1, r2, #8
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	0912      	lsrs	r2, r2, #4
 800562c:	0452      	lsls	r2, r2, #17
 800562e:	430a      	orrs	r2, r1
 8005630:	492a      	ldr	r1, [pc, #168]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	610b      	str	r3, [r1, #16]
 8005636:	e027      	b.n	8005688 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d112      	bne.n	8005664 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005646:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6892      	ldr	r2, [r2, #8]
 800564e:	0211      	lsls	r1, r2, #8
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6912      	ldr	r2, [r2, #16]
 8005654:	0852      	lsrs	r2, r2, #1
 8005656:	3a01      	subs	r2, #1
 8005658:	0552      	lsls	r2, r2, #21
 800565a:	430a      	orrs	r2, r1
 800565c:	491f      	ldr	r1, [pc, #124]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	610b      	str	r3, [r1, #16]
 8005662:	e011      	b.n	8005688 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800566c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6892      	ldr	r2, [r2, #8]
 8005674:	0211      	lsls	r1, r2, #8
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6952      	ldr	r2, [r2, #20]
 800567a:	0852      	lsrs	r2, r2, #1
 800567c:	3a01      	subs	r2, #1
 800567e:	0652      	lsls	r2, r2, #25
 8005680:	430a      	orrs	r2, r1
 8005682:	4916      	ldr	r1, [pc, #88]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005684:	4313      	orrs	r3, r2
 8005686:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005688:	4b14      	ldr	r3, [pc, #80]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a13      	ldr	r2, [pc, #76]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005692:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005694:	f7fc fefc 	bl	8002490 <HAL_GetTick>
 8005698:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800569a:	e009      	b.n	80056b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800569c:	f7fc fef8 	bl	8002490 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d902      	bls.n	80056b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	73fb      	strb	r3, [r7, #15]
          break;
 80056ae:	e005      	b.n	80056bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0ef      	beq.n	800569c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	4904      	ldr	r1, [pc, #16]	; (80056dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000

080056e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ee:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056fa:	4b67      	ldr	r3, [pc, #412]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0203 	and.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d10d      	bne.n	8005726 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
       ||
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005712:	4b61      	ldr	r3, [pc, #388]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
       ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d047      	beq.n	80057b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e044      	b.n	80057b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d018      	beq.n	8005766 <RCCEx_PLLSAI2_Config+0x86>
 8005734:	2b03      	cmp	r3, #3
 8005736:	d825      	bhi.n	8005784 <RCCEx_PLLSAI2_Config+0xa4>
 8005738:	2b01      	cmp	r3, #1
 800573a:	d002      	beq.n	8005742 <RCCEx_PLLSAI2_Config+0x62>
 800573c:	2b02      	cmp	r3, #2
 800573e:	d009      	beq.n	8005754 <RCCEx_PLLSAI2_Config+0x74>
 8005740:	e020      	b.n	8005784 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005742:	4b55      	ldr	r3, [pc, #340]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11d      	bne.n	800578a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005752:	e01a      	b.n	800578a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005754:	4b50      	ldr	r3, [pc, #320]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	2b00      	cmp	r3, #0
 800575e:	d116      	bne.n	800578e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005764:	e013      	b.n	800578e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005766:	4b4c      	ldr	r3, [pc, #304]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10f      	bne.n	8005792 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005772:	4b49      	ldr	r3, [pc, #292]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005782:	e006      	b.n	8005792 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e004      	b.n	8005794 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005792:	bf00      	nop
    }

    if(status == HAL_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	430b      	orrs	r3, r1
 80057b0:	4939      	ldr	r1, [pc, #228]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d167      	bne.n	800588c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a35      	ldr	r2, [pc, #212]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c8:	f7fc fe62 	bl	8002490 <HAL_GetTick>
 80057cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057ce:	e009      	b.n	80057e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057d0:	f7fc fe5e 	bl	8002490 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d902      	bls.n	80057e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	73fb      	strb	r3, [r7, #15]
        break;
 80057e2:	e005      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057e4:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ef      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d14a      	bne.n	800588c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d111      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057fc:	4b26      	ldr	r3, [pc, #152]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	0211      	lsls	r1, r2, #8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68d2      	ldr	r2, [r2, #12]
 8005812:	0912      	lsrs	r2, r2, #4
 8005814:	0452      	lsls	r2, r2, #17
 8005816:	430a      	orrs	r2, r1
 8005818:	491f      	ldr	r1, [pc, #124]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581a:	4313      	orrs	r3, r2
 800581c:	614b      	str	r3, [r1, #20]
 800581e:	e011      	b.n	8005844 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005820:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005828:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6892      	ldr	r2, [r2, #8]
 8005830:	0211      	lsls	r1, r2, #8
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6912      	ldr	r2, [r2, #16]
 8005836:	0852      	lsrs	r2, r2, #1
 8005838:	3a01      	subs	r2, #1
 800583a:	0652      	lsls	r2, r2, #25
 800583c:	430a      	orrs	r2, r1
 800583e:	4916      	ldr	r1, [pc, #88]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005840:	4313      	orrs	r3, r2
 8005842:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a13      	ldr	r2, [pc, #76]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fc fe1e 	bl	8002490 <HAL_GetTick>
 8005854:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005856:	e009      	b.n	800586c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005858:	f7fc fe1a 	bl	8002490 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d902      	bls.n	800586c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	73fb      	strb	r3, [r7, #15]
          break;
 800586a:	e005      	b.n	8005878 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ef      	beq.n	8005858 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	4904      	ldr	r1, [pc, #16]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005888:	4313      	orrs	r3, r2
 800588a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000

0800589c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e095      	b.n	80059da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d108      	bne.n	80058c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058be:	d009      	beq.n	80058d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
 80058c6:	e005      	b.n	80058d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc fb40 	bl	8001f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005914:	d902      	bls.n	800591c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e002      	b.n	8005922 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800591c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005920:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800592a:	d007      	beq.n	800593c <HAL_SPI_Init+0xa0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005934:	d002      	beq.n	800593c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	ea42 0103 	orr.w	r1, r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	0c1b      	lsrs	r3, r3, #16
 8005998:	f003 0204 	and.w	r2, r3, #4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059b8:	ea42 0103 	orr.w	r1, r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b088      	sub	sp, #32
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_SPI_Transmit+0x22>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e158      	b.n	8005cb6 <HAL_SPI_Transmit+0x2d4>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a0c:	f7fc fd40 	bl	8002490 <HAL_GetTick>
 8005a10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
 8005a24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a26:	e13d      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_SPI_Transmit+0x52>
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a38:	e134      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a84:	d10f      	bne.n	8005aa6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005acc:	d94b      	bls.n	8005b66 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0xfa>
 8005ad6:	8afb      	ldrh	r3, [r7, #22]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d13e      	bne.n	8005b5a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b00:	e02b      	b.n	8005b5a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d112      	bne.n	8005b36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b34:	e011      	b.n	8005b5a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b36:	f7fc fcab 	bl	8002490 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d803      	bhi.n	8005b4e <HAL_SPI_Transmit+0x16c>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Transmit+0x172>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b58:	e0a4      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ce      	bne.n	8005b02 <HAL_SPI_Transmit+0x120>
 8005b64:	e07c      	b.n	8005c60 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Transmit+0x192>
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d170      	bne.n	8005c56 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d912      	bls.n	8005ba4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	881a      	ldrh	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	1c9a      	adds	r2, r3, #2
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b02      	subs	r3, #2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba2:	e058      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005bca:	e044      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d12b      	bne.n	8005c32 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d912      	bls.n	8005c0a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b02      	subs	r3, #2
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c08:	e025      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c30:	e011      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c32:	f7fc fc2d 	bl	8002490 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d803      	bhi.n	8005c4a <HAL_SPI_Transmit+0x268>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d102      	bne.n	8005c50 <HAL_SPI_Transmit+0x26e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c54:	e026      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1b5      	bne.n	8005bcc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fa73 	bl	8006150 <SPI_EndRxTxTransaction>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e000      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	099b      	lsrs	r3, r3, #6
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10f      	bne.n	8005d04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	099b      	lsrs	r3, r3, #6
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
    return;
 8005d02:	e0d7      	b.n	8005eb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_SPI_IRQHandler+0x66>
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	09db      	lsrs	r3, r3, #7
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
    return;
 8005d24:	e0c6      	b.n	8005eb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10c      	bne.n	8005d4c <HAL_SPI_IRQHandler+0x8c>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	099b      	lsrs	r3, r3, #6
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80b4 	beq.w	8005eb4 <HAL_SPI_IRQHandler+0x1f4>
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 80ad 	beq.w	8005eb4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d023      	beq.n	8005dae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d011      	beq.n	8005d96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	f043 0204 	orr.w	r2, r3, #4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	e00b      	b.n	8005dae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d96:	2300      	movs	r3, #0
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	693b      	ldr	r3, [r7, #16]
        return;
 8005dac:	e082      	b.n	8005eb4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00c      	beq.n	8005e0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df4:	f043 0208 	orr.w	r2, r3, #8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]
 8005e08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04f      	beq.n	8005eb2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d104      	bne.n	8005e3e <HAL_SPI_IRQHandler+0x17e>
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d034      	beq.n	8005ea8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0203 	bic.w	r2, r2, #3
 8005e4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d011      	beq.n	8005e7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <HAL_SPI_IRQHandler+0x1fc>)
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fd ff14 	bl	8003c90 <HAL_DMA_Abort_IT>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <HAL_SPI_IRQHandler+0x1fc>)
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fd fefe 	bl	8003c90 <HAL_DMA_Abort_IT>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005ea6:	e003      	b.n	8005eb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f809 	bl	8005ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005eae:	e000      	b.n	8005eb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005eb0:	bf00      	nop
    return;
 8005eb2:	bf00      	nop
  }
}
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	08005ef1 	.word	0x08005ef1

08005ec0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ee2:	b2db      	uxtb	r3, r3
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff ffd7 	bl	8005ec0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f2c:	f7fc fab0 	bl	8002490 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	4413      	add	r3, r2
 8005f3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f3c:	f7fc faa8 	bl	8002490 <HAL_GetTick>
 8005f40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f42:	4b39      	ldr	r3, [pc, #228]	; (8006028 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	015b      	lsls	r3, r3, #5
 8005f48:	0d1b      	lsrs	r3, r3, #20
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	fb02 f303 	mul.w	r3, r2, r3
 8005f50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f52:	e054      	b.n	8005ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d050      	beq.n	8005ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f5c:	f7fc fa98 	bl	8002490 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d902      	bls.n	8005f72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d13d      	bne.n	8005fee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8a:	d111      	bne.n	8005fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f94:	d004      	beq.n	8005fa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	d107      	bne.n	8005fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb8:	d10f      	bne.n	8005fda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e017      	b.n	800601e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4013      	ands	r3, r2
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	429a      	cmp	r2, r3
 800601a:	d19b      	bne.n	8005f54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000000 	.word	0x20000000

0800602c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800603a:	f7fc fa29 	bl	8002490 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4413      	add	r3, r2
 8006048:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800604a:	f7fc fa21 	bl	8002490 <HAL_GetTick>
 800604e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006050:	4b3e      	ldr	r3, [pc, #248]	; (800614c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	00da      	lsls	r2, r3, #3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	0d1b      	lsrs	r3, r3, #20
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006068:	e062      	b.n	8006130 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006070:	d109      	bne.n	8006086 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006084:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d050      	beq.n	8006130 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800608e:	f7fc f9ff 	bl	8002490 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	429a      	cmp	r2, r3
 800609c:	d902      	bls.n	80060a4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d13d      	bne.n	8006120 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060bc:	d111      	bne.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c6:	d004      	beq.n	80060d2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d0:	d107      	bne.n	80060e2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ea:	d10f      	bne.n	800610c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800610a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e010      	b.n	8006142 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3b01      	subs	r3, #1
 800612e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d194      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	20000000 	.word	0x20000000

08006150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff5f 	bl	800602c <SPI_WaitFifoStateUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e027      	b.n	80061d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fec4 	bl	8005f1c <SPI_WaitFlagStateUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e014      	b.n	80061d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ff38 	bl	800602c <SPI_WaitFifoStateUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e000      	b.n	80061d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e040      	b.n	8006270 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb ff02 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	; 0x24
 8006208:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8c0 	bl	80063a0 <UART_SetConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e022      	b.n	8006270 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fb3e 	bl	80068b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fbc5 	bl	80069f8 <UART_CheckIdleState>
 800626e:	4603      	mov	r3, r0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af02      	add	r7, sp, #8
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628c:	2b20      	cmp	r3, #32
 800628e:	f040 8082 	bne.w	8006396 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_UART_Transmit+0x26>
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07a      	b.n	8006398 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_UART_Transmit+0x38>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e073      	b.n	8006398 <HAL_UART_Transmit+0x120>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2221      	movs	r2, #33	; 0x21
 80062c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062c6:	f7fc f8e3 	bl	8002490 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e4:	d108      	bne.n	80062f8 <HAL_UART_Transmit+0x80>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	e003      	b.n	8006300 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006308:	e02d      	b.n	8006366 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fbb8 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e039      	b.n	8006398 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	881a      	ldrh	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006336:	b292      	uxth	r2, r2
 8006338:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	3302      	adds	r3, #2
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	e008      	b.n	8006354 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	b292      	uxth	r2, r2
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	3301      	adds	r3, #1
 8006352:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1cb      	bne.n	800630a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2200      	movs	r2, #0
 800637a:	2140      	movs	r1, #64	; 0x40
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fb84 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e005      	b.n	8006398 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	e000      	b.n	8006398 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006396:	2302      	movs	r3, #2
  }
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a0:	b5b0      	push	{r4, r5, r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4bad      	ldr	r3, [pc, #692]	; (8006680 <UART_SetConfig+0x2e0>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	69f9      	ldr	r1, [r7, #28]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4aa2      	ldr	r2, [pc, #648]	; (8006684 <UART_SetConfig+0x2e4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	4313      	orrs	r3, r2
 8006406:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	430a      	orrs	r2, r1
 800641a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a99      	ldr	r2, [pc, #612]	; (8006688 <UART_SetConfig+0x2e8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d121      	bne.n	800646a <UART_SetConfig+0xca>
 8006426:	4b99      	ldr	r3, [pc, #612]	; (800668c <UART_SetConfig+0x2ec>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	2b03      	cmp	r3, #3
 8006432:	d817      	bhi.n	8006464 <UART_SetConfig+0xc4>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x9c>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	0800644d 	.word	0x0800644d
 8006440:	08006459 	.word	0x08006459
 8006444:	08006453 	.word	0x08006453
 8006448:	0800645f 	.word	0x0800645f
 800644c:	2301      	movs	r3, #1
 800644e:	76fb      	strb	r3, [r7, #27]
 8006450:	e0e7      	b.n	8006622 <UART_SetConfig+0x282>
 8006452:	2302      	movs	r3, #2
 8006454:	76fb      	strb	r3, [r7, #27]
 8006456:	e0e4      	b.n	8006622 <UART_SetConfig+0x282>
 8006458:	2304      	movs	r3, #4
 800645a:	76fb      	strb	r3, [r7, #27]
 800645c:	e0e1      	b.n	8006622 <UART_SetConfig+0x282>
 800645e:	2308      	movs	r3, #8
 8006460:	76fb      	strb	r3, [r7, #27]
 8006462:	e0de      	b.n	8006622 <UART_SetConfig+0x282>
 8006464:	2310      	movs	r3, #16
 8006466:	76fb      	strb	r3, [r7, #27]
 8006468:	e0db      	b.n	8006622 <UART_SetConfig+0x282>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a88      	ldr	r2, [pc, #544]	; (8006690 <UART_SetConfig+0x2f0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d132      	bne.n	80064da <UART_SetConfig+0x13a>
 8006474:	4b85      	ldr	r3, [pc, #532]	; (800668c <UART_SetConfig+0x2ec>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	2b0c      	cmp	r3, #12
 8006480:	d828      	bhi.n	80064d4 <UART_SetConfig+0x134>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0xe8>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064bd 	.word	0x080064bd
 800648c:	080064d5 	.word	0x080064d5
 8006490:	080064d5 	.word	0x080064d5
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064c9 	.word	0x080064c9
 800649c:	080064d5 	.word	0x080064d5
 80064a0:	080064d5 	.word	0x080064d5
 80064a4:	080064d5 	.word	0x080064d5
 80064a8:	080064c3 	.word	0x080064c3
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	080064cf 	.word	0x080064cf
 80064bc:	2300      	movs	r3, #0
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e0af      	b.n	8006622 <UART_SetConfig+0x282>
 80064c2:	2302      	movs	r3, #2
 80064c4:	76fb      	strb	r3, [r7, #27]
 80064c6:	e0ac      	b.n	8006622 <UART_SetConfig+0x282>
 80064c8:	2304      	movs	r3, #4
 80064ca:	76fb      	strb	r3, [r7, #27]
 80064cc:	e0a9      	b.n	8006622 <UART_SetConfig+0x282>
 80064ce:	2308      	movs	r3, #8
 80064d0:	76fb      	strb	r3, [r7, #27]
 80064d2:	e0a6      	b.n	8006622 <UART_SetConfig+0x282>
 80064d4:	2310      	movs	r3, #16
 80064d6:	76fb      	strb	r3, [r7, #27]
 80064d8:	e0a3      	b.n	8006622 <UART_SetConfig+0x282>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a6d      	ldr	r2, [pc, #436]	; (8006694 <UART_SetConfig+0x2f4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d120      	bne.n	8006526 <UART_SetConfig+0x186>
 80064e4:	4b69      	ldr	r3, [pc, #420]	; (800668c <UART_SetConfig+0x2ec>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064ee:	2b30      	cmp	r3, #48	; 0x30
 80064f0:	d013      	beq.n	800651a <UART_SetConfig+0x17a>
 80064f2:	2b30      	cmp	r3, #48	; 0x30
 80064f4:	d814      	bhi.n	8006520 <UART_SetConfig+0x180>
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d009      	beq.n	800650e <UART_SetConfig+0x16e>
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d810      	bhi.n	8006520 <UART_SetConfig+0x180>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <UART_SetConfig+0x168>
 8006502:	2b10      	cmp	r3, #16
 8006504:	d006      	beq.n	8006514 <UART_SetConfig+0x174>
 8006506:	e00b      	b.n	8006520 <UART_SetConfig+0x180>
 8006508:	2300      	movs	r3, #0
 800650a:	76fb      	strb	r3, [r7, #27]
 800650c:	e089      	b.n	8006622 <UART_SetConfig+0x282>
 800650e:	2302      	movs	r3, #2
 8006510:	76fb      	strb	r3, [r7, #27]
 8006512:	e086      	b.n	8006622 <UART_SetConfig+0x282>
 8006514:	2304      	movs	r3, #4
 8006516:	76fb      	strb	r3, [r7, #27]
 8006518:	e083      	b.n	8006622 <UART_SetConfig+0x282>
 800651a:	2308      	movs	r3, #8
 800651c:	76fb      	strb	r3, [r7, #27]
 800651e:	e080      	b.n	8006622 <UART_SetConfig+0x282>
 8006520:	2310      	movs	r3, #16
 8006522:	76fb      	strb	r3, [r7, #27]
 8006524:	e07d      	b.n	8006622 <UART_SetConfig+0x282>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5b      	ldr	r2, [pc, #364]	; (8006698 <UART_SetConfig+0x2f8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d120      	bne.n	8006572 <UART_SetConfig+0x1d2>
 8006530:	4b56      	ldr	r3, [pc, #344]	; (800668c <UART_SetConfig+0x2ec>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800653a:	2bc0      	cmp	r3, #192	; 0xc0
 800653c:	d013      	beq.n	8006566 <UART_SetConfig+0x1c6>
 800653e:	2bc0      	cmp	r3, #192	; 0xc0
 8006540:	d814      	bhi.n	800656c <UART_SetConfig+0x1cc>
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d009      	beq.n	800655a <UART_SetConfig+0x1ba>
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d810      	bhi.n	800656c <UART_SetConfig+0x1cc>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <UART_SetConfig+0x1b4>
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d006      	beq.n	8006560 <UART_SetConfig+0x1c0>
 8006552:	e00b      	b.n	800656c <UART_SetConfig+0x1cc>
 8006554:	2300      	movs	r3, #0
 8006556:	76fb      	strb	r3, [r7, #27]
 8006558:	e063      	b.n	8006622 <UART_SetConfig+0x282>
 800655a:	2302      	movs	r3, #2
 800655c:	76fb      	strb	r3, [r7, #27]
 800655e:	e060      	b.n	8006622 <UART_SetConfig+0x282>
 8006560:	2304      	movs	r3, #4
 8006562:	76fb      	strb	r3, [r7, #27]
 8006564:	e05d      	b.n	8006622 <UART_SetConfig+0x282>
 8006566:	2308      	movs	r3, #8
 8006568:	76fb      	strb	r3, [r7, #27]
 800656a:	e05a      	b.n	8006622 <UART_SetConfig+0x282>
 800656c:	2310      	movs	r3, #16
 800656e:	76fb      	strb	r3, [r7, #27]
 8006570:	e057      	b.n	8006622 <UART_SetConfig+0x282>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a49      	ldr	r2, [pc, #292]	; (800669c <UART_SetConfig+0x2fc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d125      	bne.n	80065c8 <UART_SetConfig+0x228>
 800657c:	4b43      	ldr	r3, [pc, #268]	; (800668c <UART_SetConfig+0x2ec>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658a:	d017      	beq.n	80065bc <UART_SetConfig+0x21c>
 800658c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006590:	d817      	bhi.n	80065c2 <UART_SetConfig+0x222>
 8006592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006596:	d00b      	beq.n	80065b0 <UART_SetConfig+0x210>
 8006598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659c:	d811      	bhi.n	80065c2 <UART_SetConfig+0x222>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <UART_SetConfig+0x20a>
 80065a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a6:	d006      	beq.n	80065b6 <UART_SetConfig+0x216>
 80065a8:	e00b      	b.n	80065c2 <UART_SetConfig+0x222>
 80065aa:	2300      	movs	r3, #0
 80065ac:	76fb      	strb	r3, [r7, #27]
 80065ae:	e038      	b.n	8006622 <UART_SetConfig+0x282>
 80065b0:	2302      	movs	r3, #2
 80065b2:	76fb      	strb	r3, [r7, #27]
 80065b4:	e035      	b.n	8006622 <UART_SetConfig+0x282>
 80065b6:	2304      	movs	r3, #4
 80065b8:	76fb      	strb	r3, [r7, #27]
 80065ba:	e032      	b.n	8006622 <UART_SetConfig+0x282>
 80065bc:	2308      	movs	r3, #8
 80065be:	76fb      	strb	r3, [r7, #27]
 80065c0:	e02f      	b.n	8006622 <UART_SetConfig+0x282>
 80065c2:	2310      	movs	r3, #16
 80065c4:	76fb      	strb	r3, [r7, #27]
 80065c6:	e02c      	b.n	8006622 <UART_SetConfig+0x282>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <UART_SetConfig+0x2e4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d125      	bne.n	800661e <UART_SetConfig+0x27e>
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <UART_SetConfig+0x2ec>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e0:	d017      	beq.n	8006612 <UART_SetConfig+0x272>
 80065e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e6:	d817      	bhi.n	8006618 <UART_SetConfig+0x278>
 80065e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ec:	d00b      	beq.n	8006606 <UART_SetConfig+0x266>
 80065ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f2:	d811      	bhi.n	8006618 <UART_SetConfig+0x278>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <UART_SetConfig+0x260>
 80065f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fc:	d006      	beq.n	800660c <UART_SetConfig+0x26c>
 80065fe:	e00b      	b.n	8006618 <UART_SetConfig+0x278>
 8006600:	2300      	movs	r3, #0
 8006602:	76fb      	strb	r3, [r7, #27]
 8006604:	e00d      	b.n	8006622 <UART_SetConfig+0x282>
 8006606:	2302      	movs	r3, #2
 8006608:	76fb      	strb	r3, [r7, #27]
 800660a:	e00a      	b.n	8006622 <UART_SetConfig+0x282>
 800660c:	2304      	movs	r3, #4
 800660e:	76fb      	strb	r3, [r7, #27]
 8006610:	e007      	b.n	8006622 <UART_SetConfig+0x282>
 8006612:	2308      	movs	r3, #8
 8006614:	76fb      	strb	r3, [r7, #27]
 8006616:	e004      	b.n	8006622 <UART_SetConfig+0x282>
 8006618:	2310      	movs	r3, #16
 800661a:	76fb      	strb	r3, [r7, #27]
 800661c:	e001      	b.n	8006622 <UART_SetConfig+0x282>
 800661e:	2310      	movs	r3, #16
 8006620:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a17      	ldr	r2, [pc, #92]	; (8006684 <UART_SetConfig+0x2e4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	f040 8087 	bne.w	800673c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800662e:	7efb      	ldrb	r3, [r7, #27]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d837      	bhi.n	80066a4 <UART_SetConfig+0x304>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x29c>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006661 	.word	0x08006661
 8006640:	080066a5 	.word	0x080066a5
 8006644:	08006669 	.word	0x08006669
 8006648:	080066a5 	.word	0x080066a5
 800664c:	0800666f 	.word	0x0800666f
 8006650:	080066a5 	.word	0x080066a5
 8006654:	080066a5 	.word	0x080066a5
 8006658:	080066a5 	.word	0x080066a5
 800665c:	08006677 	.word	0x08006677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006660:	f7fe fbd4 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006664:	6178      	str	r0, [r7, #20]
        break;
 8006666:	e022      	b.n	80066ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <UART_SetConfig+0x300>)
 800666a:	617b      	str	r3, [r7, #20]
        break;
 800666c:	e01f      	b.n	80066ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666e:	f7fe fb35 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8006672:	6178      	str	r0, [r7, #20]
        break;
 8006674:	e01b      	b.n	80066ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667a:	617b      	str	r3, [r7, #20]
        break;
 800667c:	e017      	b.n	80066ae <UART_SetConfig+0x30e>
 800667e:	bf00      	nop
 8006680:	efff69f3 	.word	0xefff69f3
 8006684:	40008000 	.word	0x40008000
 8006688:	40013800 	.word	0x40013800
 800668c:	40021000 	.word	0x40021000
 8006690:	40004400 	.word	0x40004400
 8006694:	40004800 	.word	0x40004800
 8006698:	40004c00 	.word	0x40004c00
 800669c:	40005000 	.word	0x40005000
 80066a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	76bb      	strb	r3, [r7, #26]
        break;
 80066ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80f1 	beq.w	8006898 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4413      	add	r3, r2
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d305      	bcc.n	80066d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d902      	bls.n	80066d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	76bb      	strb	r3, [r7, #26]
 80066d6:	e0df      	b.n	8006898 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	4618      	mov	r0, r3
 80066dc:	f04f 0100 	mov.w	r1, #0
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	020b      	lsls	r3, r1, #8
 80066ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ee:	0202      	lsls	r2, r0, #8
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6849      	ldr	r1, [r1, #4]
 80066f4:	0849      	lsrs	r1, r1, #1
 80066f6:	4608      	mov	r0, r1
 80066f8:	f04f 0100 	mov.w	r1, #0
 80066fc:	1814      	adds	r4, r2, r0
 80066fe:	eb43 0501 	adc.w	r5, r3, r1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	461a      	mov	r2, r3
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f7fa faba 	bl	8000c88 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4613      	mov	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006722:	d308      	bcc.n	8006736 <UART_SetConfig+0x396>
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672a:	d204      	bcs.n	8006736 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e0b0      	b.n	8006898 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	76bb      	strb	r3, [r7, #26]
 800673a:	e0ad      	b.n	8006898 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	d15c      	bne.n	8006800 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006746:	7efb      	ldrb	r3, [r7, #27]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d828      	bhi.n	800679e <UART_SetConfig+0x3fe>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0x3b4>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006779 	.word	0x08006779
 8006758:	08006781 	.word	0x08006781
 800675c:	08006789 	.word	0x08006789
 8006760:	0800679f 	.word	0x0800679f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800679f 	.word	0x0800679f
 800676c:	0800679f 	.word	0x0800679f
 8006770:	0800679f 	.word	0x0800679f
 8006774:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fe fb48 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 800677c:	6178      	str	r0, [r7, #20]
        break;
 800677e:	e013      	b.n	80067a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fe fb5a 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8006784:	6178      	str	r0, [r7, #20]
        break;
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <UART_SetConfig+0x510>)
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e00c      	b.n	80067a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fe faa5 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8006792:	6178      	str	r0, [r7, #20]
        break;
 8006794:	e008      	b.n	80067a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	617b      	str	r3, [r7, #20]
        break;
 800679c:	e004      	b.n	80067a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	76bb      	strb	r3, [r7, #26]
        break;
 80067a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d074      	beq.n	8006898 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	005a      	lsls	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b0f      	cmp	r3, #15
 80067ca:	d916      	bls.n	80067fa <UART_SetConfig+0x45a>
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d212      	bcs.n	80067fa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f023 030f 	bic.w	r3, r3, #15
 80067dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	89fb      	ldrh	r3, [r7, #14]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	89fa      	ldrh	r2, [r7, #14]
 80067f6:	60da      	str	r2, [r3, #12]
 80067f8:	e04e      	b.n	8006898 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	76bb      	strb	r3, [r7, #26]
 80067fe:	e04b      	b.n	8006898 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006800:	7efb      	ldrb	r3, [r7, #27]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d827      	bhi.n	8006856 <UART_SetConfig+0x4b6>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x46c>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fe faec 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8006834:	6178      	str	r0, [r7, #20]
        break;
 8006836:	e013      	b.n	8006860 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fe fafe 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 800683c:	6178      	str	r0, [r7, #20]
        break;
 800683e:	e00f      	b.n	8006860 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <UART_SetConfig+0x510>)
 8006842:	617b      	str	r3, [r7, #20]
        break;
 8006844:	e00c      	b.n	8006860 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fe fa49 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 800684a:	6178      	str	r0, [r7, #20]
        break;
 800684c:	e008      	b.n	8006860 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	617b      	str	r3, [r7, #20]
        break;
 8006854:	e004      	b.n	8006860 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	76bb      	strb	r3, [r7, #26]
        break;
 800685e:	bf00      	nop
    }

    if (pclk != 0U)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d018      	beq.n	8006898 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	085a      	lsrs	r2, r3, #1
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	441a      	add	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	b29b      	uxth	r3, r3
 800687a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d908      	bls.n	8006894 <UART_SetConfig+0x4f4>
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d204      	bcs.n	8006894 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e001      	b.n	8006898 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	00f42400 	.word	0x00f42400

080068b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01a      	beq.n	80069ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b2:	d10a      	bne.n	80069ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a08:	f7fb fd42 	bl	8002490 <HAL_GetTick>
 8006a0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d10e      	bne.n	8006a3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f82d 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e023      	b.n	8006a82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d10e      	bne.n	8006a66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f817 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e00d      	b.n	8006a82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9a:	e05e      	b.n	8006b5a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d05a      	beq.n	8006b5a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa4:	f7fb fcf4 	bl	8002490 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d302      	bcc.n	8006aba <UART_WaitOnFlagUntilTimeout+0x30>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11b      	bne.n	8006af2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ac8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e043      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d02c      	beq.n	8006b5a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0e:	d124      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b18:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0201 	bic.w	r2, r2, #1
 8006b38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e00f      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4013      	ands	r3, r2
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	bf0c      	ite	eq
 8006b6a:	2301      	moveq	r3, #1
 8006b6c:	2300      	movne	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d091      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <__errno>:
 8006b84:	4b01      	ldr	r3, [pc, #4]	; (8006b8c <__errno+0x8>)
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	2000000c 	.word	0x2000000c

08006b90 <__libc_init_array>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	4d0d      	ldr	r5, [pc, #52]	; (8006bc8 <__libc_init_array+0x38>)
 8006b94:	4c0d      	ldr	r4, [pc, #52]	; (8006bcc <__libc_init_array+0x3c>)
 8006b96:	1b64      	subs	r4, r4, r5
 8006b98:	10a4      	asrs	r4, r4, #2
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	42a6      	cmp	r6, r4
 8006b9e:	d109      	bne.n	8006bb4 <__libc_init_array+0x24>
 8006ba0:	4d0b      	ldr	r5, [pc, #44]	; (8006bd0 <__libc_init_array+0x40>)
 8006ba2:	4c0c      	ldr	r4, [pc, #48]	; (8006bd4 <__libc_init_array+0x44>)
 8006ba4:	f004 fc44 	bl	800b430 <_init>
 8006ba8:	1b64      	subs	r4, r4, r5
 8006baa:	10a4      	asrs	r4, r4, #2
 8006bac:	2600      	movs	r6, #0
 8006bae:	42a6      	cmp	r6, r4
 8006bb0:	d105      	bne.n	8006bbe <__libc_init_array+0x2e>
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}
 8006bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb8:	4798      	blx	r3
 8006bba:	3601      	adds	r6, #1
 8006bbc:	e7ee      	b.n	8006b9c <__libc_init_array+0xc>
 8006bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc2:	4798      	blx	r3
 8006bc4:	3601      	adds	r6, #1
 8006bc6:	e7f2      	b.n	8006bae <__libc_init_array+0x1e>
 8006bc8:	0800bb74 	.word	0x0800bb74
 8006bcc:	0800bb74 	.word	0x0800bb74
 8006bd0:	0800bb74 	.word	0x0800bb74
 8006bd4:	0800bb78 	.word	0x0800bb78

08006bd8 <memset>:
 8006bd8:	4402      	add	r2, r0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d100      	bne.n	8006be2 <memset+0xa>
 8006be0:	4770      	bx	lr
 8006be2:	f803 1b01 	strb.w	r1, [r3], #1
 8006be6:	e7f9      	b.n	8006bdc <memset+0x4>

08006be8 <__cvt>:
 8006be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	ec55 4b10 	vmov	r4, r5, d0
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	460e      	mov	r6, r1
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	bfbb      	ittet	lt
 8006bfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bfe:	461d      	movlt	r5, r3
 8006c00:	2300      	movge	r3, #0
 8006c02:	232d      	movlt	r3, #45	; 0x2d
 8006c04:	700b      	strb	r3, [r1, #0]
 8006c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c0c:	4691      	mov	r9, r2
 8006c0e:	f023 0820 	bic.w	r8, r3, #32
 8006c12:	bfbc      	itt	lt
 8006c14:	4622      	movlt	r2, r4
 8006c16:	4614      	movlt	r4, r2
 8006c18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c1c:	d005      	beq.n	8006c2a <__cvt+0x42>
 8006c1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c22:	d100      	bne.n	8006c26 <__cvt+0x3e>
 8006c24:	3601      	adds	r6, #1
 8006c26:	2102      	movs	r1, #2
 8006c28:	e000      	b.n	8006c2c <__cvt+0x44>
 8006c2a:	2103      	movs	r1, #3
 8006c2c:	ab03      	add	r3, sp, #12
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	ab02      	add	r3, sp, #8
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	ec45 4b10 	vmov	d0, r4, r5
 8006c38:	4653      	mov	r3, sl
 8006c3a:	4632      	mov	r2, r6
 8006c3c:	f001 fdb4 	bl	80087a8 <_dtoa_r>
 8006c40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c44:	4607      	mov	r7, r0
 8006c46:	d102      	bne.n	8006c4e <__cvt+0x66>
 8006c48:	f019 0f01 	tst.w	r9, #1
 8006c4c:	d022      	beq.n	8006c94 <__cvt+0xac>
 8006c4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c52:	eb07 0906 	add.w	r9, r7, r6
 8006c56:	d110      	bne.n	8006c7a <__cvt+0x92>
 8006c58:	783b      	ldrb	r3, [r7, #0]
 8006c5a:	2b30      	cmp	r3, #48	; 0x30
 8006c5c:	d10a      	bne.n	8006c74 <__cvt+0x8c>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2300      	movs	r3, #0
 8006c62:	4620      	mov	r0, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7f9 ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c6a:	b918      	cbnz	r0, 8006c74 <__cvt+0x8c>
 8006c6c:	f1c6 0601 	rsb	r6, r6, #1
 8006c70:	f8ca 6000 	str.w	r6, [sl]
 8006c74:	f8da 3000 	ldr.w	r3, [sl]
 8006c78:	4499      	add	r9, r3
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c86:	b108      	cbz	r0, 8006c8c <__cvt+0xa4>
 8006c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c8c:	2230      	movs	r2, #48	; 0x30
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	454b      	cmp	r3, r9
 8006c92:	d307      	bcc.n	8006ca4 <__cvt+0xbc>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c98:	1bdb      	subs	r3, r3, r7
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	b004      	add	sp, #16
 8006ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca4:	1c59      	adds	r1, r3, #1
 8006ca6:	9103      	str	r1, [sp, #12]
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e7f0      	b.n	8006c8e <__cvt+0xa6>

08006cac <__exponent>:
 8006cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	bfb8      	it	lt
 8006cb4:	4249      	neglt	r1, r1
 8006cb6:	f803 2b02 	strb.w	r2, [r3], #2
 8006cba:	bfb4      	ite	lt
 8006cbc:	222d      	movlt	r2, #45	; 0x2d
 8006cbe:	222b      	movge	r2, #43	; 0x2b
 8006cc0:	2909      	cmp	r1, #9
 8006cc2:	7042      	strb	r2, [r0, #1]
 8006cc4:	dd2a      	ble.n	8006d1c <__exponent+0x70>
 8006cc6:	f10d 0407 	add.w	r4, sp, #7
 8006cca:	46a4      	mov	ip, r4
 8006ccc:	270a      	movs	r7, #10
 8006cce:	46a6      	mov	lr, r4
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cd6:	fb07 1516 	mls	r5, r7, r6, r1
 8006cda:	3530      	adds	r5, #48	; 0x30
 8006cdc:	2a63      	cmp	r2, #99	; 0x63
 8006cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	dcf1      	bgt.n	8006cce <__exponent+0x22>
 8006cea:	3130      	adds	r1, #48	; 0x30
 8006cec:	f1ae 0502 	sub.w	r5, lr, #2
 8006cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cf4:	1c44      	adds	r4, r0, #1
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4561      	cmp	r1, ip
 8006cfa:	d30a      	bcc.n	8006d12 <__exponent+0x66>
 8006cfc:	f10d 0209 	add.w	r2, sp, #9
 8006d00:	eba2 020e 	sub.w	r2, r2, lr
 8006d04:	4565      	cmp	r5, ip
 8006d06:	bf88      	it	hi
 8006d08:	2200      	movhi	r2, #0
 8006d0a:	4413      	add	r3, r2
 8006d0c:	1a18      	subs	r0, r3, r0
 8006d0e:	b003      	add	sp, #12
 8006d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d1a:	e7ed      	b.n	8006cf8 <__exponent+0x4c>
 8006d1c:	2330      	movs	r3, #48	; 0x30
 8006d1e:	3130      	adds	r1, #48	; 0x30
 8006d20:	7083      	strb	r3, [r0, #2]
 8006d22:	70c1      	strb	r1, [r0, #3]
 8006d24:	1d03      	adds	r3, r0, #4
 8006d26:	e7f1      	b.n	8006d0c <__exponent+0x60>

08006d28 <_printf_float>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	ed2d 8b02 	vpush	{d8}
 8006d30:	b08d      	sub	sp, #52	; 0x34
 8006d32:	460c      	mov	r4, r1
 8006d34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d38:	4616      	mov	r6, r2
 8006d3a:	461f      	mov	r7, r3
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	f002 fe8f 	bl	8009a60 <_localeconv_r>
 8006d42:	f8d0 a000 	ldr.w	sl, [r0]
 8006d46:	4650      	mov	r0, sl
 8006d48:	f7f9 fa42 	bl	80001d0 <strlen>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	9305      	str	r3, [sp, #20]
 8006d54:	f8d8 3000 	ldr.w	r3, [r8]
 8006d58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d5c:	3307      	adds	r3, #7
 8006d5e:	f023 0307 	bic.w	r3, r3, #7
 8006d62:	f103 0208 	add.w	r2, r3, #8
 8006d66:	f8c8 2000 	str.w	r2, [r8]
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d80:	ee08 0a10 	vmov	s16, r0
 8006d84:	4b9f      	ldr	r3, [pc, #636]	; (8007004 <_printf_float+0x2dc>)
 8006d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	f7f9 fecd 	bl	8000b2c <__aeabi_dcmpun>
 8006d92:	bb88      	cbnz	r0, 8006df8 <_printf_float+0xd0>
 8006d94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d98:	4b9a      	ldr	r3, [pc, #616]	; (8007004 <_printf_float+0x2dc>)
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	f7f9 fea7 	bl	8000af0 <__aeabi_dcmple>
 8006da2:	bb48      	cbnz	r0, 8006df8 <_printf_float+0xd0>
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	4640      	mov	r0, r8
 8006daa:	4649      	mov	r1, r9
 8006dac:	f7f9 fe96 	bl	8000adc <__aeabi_dcmplt>
 8006db0:	b110      	cbz	r0, 8006db8 <_printf_float+0x90>
 8006db2:	232d      	movs	r3, #45	; 0x2d
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db8:	4b93      	ldr	r3, [pc, #588]	; (8007008 <_printf_float+0x2e0>)
 8006dba:	4894      	ldr	r0, [pc, #592]	; (800700c <_printf_float+0x2e4>)
 8006dbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006dc0:	bf94      	ite	ls
 8006dc2:	4698      	movls	r8, r3
 8006dc4:	4680      	movhi	r8, r0
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	f023 0204 	bic.w	r2, r3, #4
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	f04f 0900 	mov.w	r9, #0
 8006dd6:	9700      	str	r7, [sp, #0]
 8006dd8:	4633      	mov	r3, r6
 8006dda:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f9d8 	bl	8007194 <_printf_common>
 8006de4:	3001      	adds	r0, #1
 8006de6:	f040 8090 	bne.w	8006f0a <_printf_float+0x1e2>
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295
 8006dee:	b00d      	add	sp, #52	; 0x34
 8006df0:	ecbd 8b02 	vpop	{d8}
 8006df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe94 	bl	8000b2c <__aeabi_dcmpun>
 8006e04:	b140      	cbz	r0, 8006e18 <_printf_float+0xf0>
 8006e06:	464b      	mov	r3, r9
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bfbc      	itt	lt
 8006e0c:	232d      	movlt	r3, #45	; 0x2d
 8006e0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e12:	487f      	ldr	r0, [pc, #508]	; (8007010 <_printf_float+0x2e8>)
 8006e14:	4b7f      	ldr	r3, [pc, #508]	; (8007014 <_printf_float+0x2ec>)
 8006e16:	e7d1      	b.n	8006dbc <_printf_float+0x94>
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e1e:	9206      	str	r2, [sp, #24]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	d13f      	bne.n	8006ea4 <_printf_float+0x17c>
 8006e24:	2306      	movs	r3, #6
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	9b05      	ldr	r3, [sp, #20]
 8006e2a:	6861      	ldr	r1, [r4, #4]
 8006e2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e30:	2300      	movs	r3, #0
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	ab0a      	add	r3, sp, #40	; 0x28
 8006e36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e3a:	ab09      	add	r3, sp, #36	; 0x24
 8006e3c:	ec49 8b10 	vmov	d0, r8, r9
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7ff fecd 	bl	8006be8 <__cvt>
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e52:	2b47      	cmp	r3, #71	; 0x47
 8006e54:	4680      	mov	r8, r0
 8006e56:	d108      	bne.n	8006e6a <_printf_float+0x142>
 8006e58:	1cc8      	adds	r0, r1, #3
 8006e5a:	db02      	blt.n	8006e62 <_printf_float+0x13a>
 8006e5c:	6863      	ldr	r3, [r4, #4]
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	dd41      	ble.n	8006ee6 <_printf_float+0x1be>
 8006e62:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e66:	fa5f fb8b 	uxtb.w	fp, fp
 8006e6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e6e:	d820      	bhi.n	8006eb2 <_printf_float+0x18a>
 8006e70:	3901      	subs	r1, #1
 8006e72:	465a      	mov	r2, fp
 8006e74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e78:	9109      	str	r1, [sp, #36]	; 0x24
 8006e7a:	f7ff ff17 	bl	8006cac <__exponent>
 8006e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e80:	1813      	adds	r3, r2, r0
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	4681      	mov	r9, r0
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	dc02      	bgt.n	8006e90 <_printf_float+0x168>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	07d2      	lsls	r2, r2, #31
 8006e8e:	d501      	bpl.n	8006e94 <_printf_float+0x16c>
 8006e90:	3301      	adds	r3, #1
 8006e92:	6123      	str	r3, [r4, #16]
 8006e94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d09c      	beq.n	8006dd6 <_printf_float+0xae>
 8006e9c:	232d      	movs	r3, #45	; 0x2d
 8006e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea2:	e798      	b.n	8006dd6 <_printf_float+0xae>
 8006ea4:	9a06      	ldr	r2, [sp, #24]
 8006ea6:	2a47      	cmp	r2, #71	; 0x47
 8006ea8:	d1be      	bne.n	8006e28 <_printf_float+0x100>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1bc      	bne.n	8006e28 <_printf_float+0x100>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7b9      	b.n	8006e26 <_printf_float+0xfe>
 8006eb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006eb6:	d118      	bne.n	8006eea <_printf_float+0x1c2>
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	dd0b      	ble.n	8006ed6 <_printf_float+0x1ae>
 8006ebe:	6121      	str	r1, [r4, #16]
 8006ec0:	b913      	cbnz	r3, 8006ec8 <_printf_float+0x1a0>
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	07d0      	lsls	r0, r2, #31
 8006ec6:	d502      	bpl.n	8006ece <_printf_float+0x1a6>
 8006ec8:	3301      	adds	r3, #1
 8006eca:	440b      	add	r3, r1
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ed0:	f04f 0900 	mov.w	r9, #0
 8006ed4:	e7de      	b.n	8006e94 <_printf_float+0x16c>
 8006ed6:	b913      	cbnz	r3, 8006ede <_printf_float+0x1b6>
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	07d2      	lsls	r2, r2, #31
 8006edc:	d501      	bpl.n	8006ee2 <_printf_float+0x1ba>
 8006ede:	3302      	adds	r3, #2
 8006ee0:	e7f4      	b.n	8006ecc <_printf_float+0x1a4>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e7f2      	b.n	8006ecc <_printf_float+0x1a4>
 8006ee6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eec:	4299      	cmp	r1, r3
 8006eee:	db05      	blt.n	8006efc <_printf_float+0x1d4>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	6121      	str	r1, [r4, #16]
 8006ef4:	07d8      	lsls	r0, r3, #31
 8006ef6:	d5ea      	bpl.n	8006ece <_printf_float+0x1a6>
 8006ef8:	1c4b      	adds	r3, r1, #1
 8006efa:	e7e7      	b.n	8006ecc <_printf_float+0x1a4>
 8006efc:	2900      	cmp	r1, #0
 8006efe:	bfd4      	ite	le
 8006f00:	f1c1 0202 	rsble	r2, r1, #2
 8006f04:	2201      	movgt	r2, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	e7e0      	b.n	8006ecc <_printf_float+0x1a4>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	055a      	lsls	r2, r3, #21
 8006f0e:	d407      	bmi.n	8006f20 <_printf_float+0x1f8>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	4642      	mov	r2, r8
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d12c      	bne.n	8006f78 <_printf_float+0x250>
 8006f1e:	e764      	b.n	8006dea <_printf_float+0xc2>
 8006f20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f24:	f240 80e0 	bls.w	80070e8 <_printf_float+0x3c0>
 8006f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f7f9 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d034      	beq.n	8006fa2 <_printf_float+0x27a>
 8006f38:	4a37      	ldr	r2, [pc, #220]	; (8007018 <_printf_float+0x2f0>)
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	f43f af51 	beq.w	8006dea <_printf_float+0xc2>
 8006f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	db02      	blt.n	8006f56 <_printf_float+0x22e>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	07d8      	lsls	r0, r3, #31
 8006f54:	d510      	bpl.n	8006f78 <_printf_float+0x250>
 8006f56:	ee18 3a10 	vmov	r3, s16
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f af41 	beq.w	8006dea <_printf_float+0xc2>
 8006f68:	f04f 0800 	mov.w	r8, #0
 8006f6c:	f104 091a 	add.w	r9, r4, #26
 8006f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4543      	cmp	r3, r8
 8006f76:	dc09      	bgt.n	8006f8c <_printf_float+0x264>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	079b      	lsls	r3, r3, #30
 8006f7c:	f100 8105 	bmi.w	800718a <_printf_float+0x462>
 8006f80:	68e0      	ldr	r0, [r4, #12]
 8006f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f84:	4298      	cmp	r0, r3
 8006f86:	bfb8      	it	lt
 8006f88:	4618      	movlt	r0, r3
 8006f8a:	e730      	b.n	8006dee <_printf_float+0xc6>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	464a      	mov	r2, r9
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f af27 	beq.w	8006dea <_printf_float+0xc2>
 8006f9c:	f108 0801 	add.w	r8, r8, #1
 8006fa0:	e7e6      	b.n	8006f70 <_printf_float+0x248>
 8006fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc39      	bgt.n	800701c <_printf_float+0x2f4>
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <_printf_float+0x2f0>)
 8006faa:	2301      	movs	r3, #1
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f af19 	beq.w	8006dea <_printf_float+0xc2>
 8006fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d102      	bne.n	8006fc6 <_printf_float+0x29e>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	07d9      	lsls	r1, r3, #31
 8006fc4:	d5d8      	bpl.n	8006f78 <_printf_float+0x250>
 8006fc6:	ee18 3a10 	vmov	r3, s16
 8006fca:	4652      	mov	r2, sl
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f43f af09 	beq.w	8006dea <_printf_float+0xc2>
 8006fd8:	f04f 0900 	mov.w	r9, #0
 8006fdc:	f104 0a1a 	add.w	sl, r4, #26
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	425b      	negs	r3, r3
 8006fe4:	454b      	cmp	r3, r9
 8006fe6:	dc01      	bgt.n	8006fec <_printf_float+0x2c4>
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fea:	e792      	b.n	8006f12 <_printf_float+0x1ea>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4652      	mov	r2, sl
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f aef7 	beq.w	8006dea <_printf_float+0xc2>
 8006ffc:	f109 0901 	add.w	r9, r9, #1
 8007000:	e7ee      	b.n	8006fe0 <_printf_float+0x2b8>
 8007002:	bf00      	nop
 8007004:	7fefffff 	.word	0x7fefffff
 8007008:	0800b6b8 	.word	0x0800b6b8
 800700c:	0800b6bc 	.word	0x0800b6bc
 8007010:	0800b6c4 	.word	0x0800b6c4
 8007014:	0800b6c0 	.word	0x0800b6c0
 8007018:	0800b6c8 	.word	0x0800b6c8
 800701c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007020:	429a      	cmp	r2, r3
 8007022:	bfa8      	it	ge
 8007024:	461a      	movge	r2, r3
 8007026:	2a00      	cmp	r2, #0
 8007028:	4691      	mov	r9, r2
 800702a:	dc37      	bgt.n	800709c <_printf_float+0x374>
 800702c:	f04f 0b00 	mov.w	fp, #0
 8007030:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007034:	f104 021a 	add.w	r2, r4, #26
 8007038:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800703a:	9305      	str	r3, [sp, #20]
 800703c:	eba3 0309 	sub.w	r3, r3, r9
 8007040:	455b      	cmp	r3, fp
 8007042:	dc33      	bgt.n	80070ac <_printf_float+0x384>
 8007044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007048:	429a      	cmp	r2, r3
 800704a:	db3b      	blt.n	80070c4 <_printf_float+0x39c>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	d438      	bmi.n	80070c4 <_printf_float+0x39c>
 8007052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007054:	9b05      	ldr	r3, [sp, #20]
 8007056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	eba2 0901 	sub.w	r9, r2, r1
 800705e:	4599      	cmp	r9, r3
 8007060:	bfa8      	it	ge
 8007062:	4699      	movge	r9, r3
 8007064:	f1b9 0f00 	cmp.w	r9, #0
 8007068:	dc35      	bgt.n	80070d6 <_printf_float+0x3ae>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007072:	f104 0a1a 	add.w	sl, r4, #26
 8007076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	eba3 0309 	sub.w	r3, r3, r9
 8007080:	4543      	cmp	r3, r8
 8007082:	f77f af79 	ble.w	8006f78 <_printf_float+0x250>
 8007086:	2301      	movs	r3, #1
 8007088:	4652      	mov	r2, sl
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	f43f aeaa 	beq.w	8006dea <_printf_float+0xc2>
 8007096:	f108 0801 	add.w	r8, r8, #1
 800709a:	e7ec      	b.n	8007076 <_printf_float+0x34e>
 800709c:	4613      	mov	r3, r2
 800709e:	4631      	mov	r1, r6
 80070a0:	4642      	mov	r2, r8
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	d1c0      	bne.n	800702c <_printf_float+0x304>
 80070aa:	e69e      	b.n	8006dea <_printf_float+0xc2>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	9205      	str	r2, [sp, #20]
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f ae97 	beq.w	8006dea <_printf_float+0xc2>
 80070bc:	9a05      	ldr	r2, [sp, #20]
 80070be:	f10b 0b01 	add.w	fp, fp, #1
 80070c2:	e7b9      	b.n	8007038 <_printf_float+0x310>
 80070c4:	ee18 3a10 	vmov	r3, s16
 80070c8:	4652      	mov	r2, sl
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1be      	bne.n	8007052 <_printf_float+0x32a>
 80070d4:	e689      	b.n	8006dea <_printf_float+0xc2>
 80070d6:	9a05      	ldr	r2, [sp, #20]
 80070d8:	464b      	mov	r3, r9
 80070da:	4442      	add	r2, r8
 80070dc:	4631      	mov	r1, r6
 80070de:	4628      	mov	r0, r5
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	d1c1      	bne.n	800706a <_printf_float+0x342>
 80070e6:	e680      	b.n	8006dea <_printf_float+0xc2>
 80070e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ea:	2a01      	cmp	r2, #1
 80070ec:	dc01      	bgt.n	80070f2 <_printf_float+0x3ca>
 80070ee:	07db      	lsls	r3, r3, #31
 80070f0:	d538      	bpl.n	8007164 <_printf_float+0x43c>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4642      	mov	r2, r8
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f ae74 	beq.w	8006dea <_printf_float+0xc2>
 8007102:	ee18 3a10 	vmov	r3, s16
 8007106:	4652      	mov	r2, sl
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f ae6b 	beq.w	8006dea <_printf_float+0xc2>
 8007114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007118:	2200      	movs	r2, #0
 800711a:	2300      	movs	r3, #0
 800711c:	f7f9 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007120:	b9d8      	cbnz	r0, 800715a <_printf_float+0x432>
 8007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007124:	f108 0201 	add.w	r2, r8, #1
 8007128:	3b01      	subs	r3, #1
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	d10e      	bne.n	8007152 <_printf_float+0x42a>
 8007134:	e659      	b.n	8006dea <_printf_float+0xc2>
 8007136:	2301      	movs	r3, #1
 8007138:	4652      	mov	r2, sl
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae52 	beq.w	8006dea <_printf_float+0xc2>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714c:	3b01      	subs	r3, #1
 800714e:	4543      	cmp	r3, r8
 8007150:	dcf1      	bgt.n	8007136 <_printf_float+0x40e>
 8007152:	464b      	mov	r3, r9
 8007154:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007158:	e6dc      	b.n	8006f14 <_printf_float+0x1ec>
 800715a:	f04f 0800 	mov.w	r8, #0
 800715e:	f104 0a1a 	add.w	sl, r4, #26
 8007162:	e7f2      	b.n	800714a <_printf_float+0x422>
 8007164:	2301      	movs	r3, #1
 8007166:	4642      	mov	r2, r8
 8007168:	e7df      	b.n	800712a <_printf_float+0x402>
 800716a:	2301      	movs	r3, #1
 800716c:	464a      	mov	r2, r9
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	f43f ae38 	beq.w	8006dea <_printf_float+0xc2>
 800717a:	f108 0801 	add.w	r8, r8, #1
 800717e:	68e3      	ldr	r3, [r4, #12]
 8007180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007182:	1a5b      	subs	r3, r3, r1
 8007184:	4543      	cmp	r3, r8
 8007186:	dcf0      	bgt.n	800716a <_printf_float+0x442>
 8007188:	e6fa      	b.n	8006f80 <_printf_float+0x258>
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	f104 0919 	add.w	r9, r4, #25
 8007192:	e7f4      	b.n	800717e <_printf_float+0x456>

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4699      	mov	r9, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e0:	1e13      	subs	r3, r2, #0
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f0:	4649      	mov	r1, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c0      	blx	r8
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	68e5      	ldr	r5, [r4, #12]
 80071fe:	6832      	ldr	r2, [r6, #0]
 8007200:	f003 0306 	and.w	r3, r3, #6
 8007204:	2b04      	cmp	r3, #4
 8007206:	bf08      	it	eq
 8007208:	1aad      	subeq	r5, r5, r2
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4649      	mov	r1, r9
 8007230:	4638      	mov	r0, r7
 8007232:	47c0      	blx	r8
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	; 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	4691      	mov	r9, r2
 8007278:	7e27      	ldrb	r7, [r4, #24]
 800727a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800727c:	2f78      	cmp	r7, #120	; 0x78
 800727e:	4680      	mov	r8, r0
 8007280:	469a      	mov	sl, r3
 8007282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	; 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80d8 	beq.w	8007442 <_printf_i+0x1d2>
 8007292:	2f58      	cmp	r7, #88	; 0x58
 8007294:	f000 80a3 	beq.w	80073de <_printf_i+0x16e>
 8007298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a001      	add	r0, pc, #4	; (adr r0, 80072b0 <_printf_i+0x40>)
 80072ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	08007429 	.word	0x08007429
 80072e0:	0800734d 	.word	0x0800734d
 80072e4:	0800740b 	.word	0x0800740b
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	0800744b 	.word	0x0800744b
 80072f4:	08007299 	.word	0x08007299
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	08007413 	.word	0x08007413
 8007308:	680b      	ldr	r3, [r1, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	600a      	str	r2, [r1, #0]
 8007310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e0a3      	b.n	8007464 <_printf_i+0x1f4>
 800731c:	6825      	ldr	r5, [r4, #0]
 800731e:	6808      	ldr	r0, [r1, #0]
 8007320:	062e      	lsls	r6, r5, #24
 8007322:	f100 0304 	add.w	r3, r0, #4
 8007326:	d50a      	bpl.n	800733e <_printf_i+0xce>
 8007328:	6805      	ldr	r5, [r0, #0]
 800732a:	600b      	str	r3, [r1, #0]
 800732c:	2d00      	cmp	r5, #0
 800732e:	da03      	bge.n	8007338 <_printf_i+0xc8>
 8007330:	232d      	movs	r3, #45	; 0x2d
 8007332:	426d      	negs	r5, r5
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	485e      	ldr	r0, [pc, #376]	; (80074b4 <_printf_i+0x244>)
 800733a:	230a      	movs	r3, #10
 800733c:	e019      	b.n	8007372 <_printf_i+0x102>
 800733e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007342:	6805      	ldr	r5, [r0, #0]
 8007344:	600b      	str	r3, [r1, #0]
 8007346:	bf18      	it	ne
 8007348:	b22d      	sxthne	r5, r5
 800734a:	e7ef      	b.n	800732c <_printf_i+0xbc>
 800734c:	680b      	ldr	r3, [r1, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	1d18      	adds	r0, r3, #4
 8007352:	6008      	str	r0, [r1, #0]
 8007354:	0628      	lsls	r0, r5, #24
 8007356:	d501      	bpl.n	800735c <_printf_i+0xec>
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0xf2>
 800735c:	0669      	lsls	r1, r5, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0xe8>
 8007360:	881d      	ldrh	r5, [r3, #0]
 8007362:	4854      	ldr	r0, [pc, #336]	; (80074b4 <_printf_i+0x244>)
 8007364:	2f6f      	cmp	r7, #111	; 0x6f
 8007366:	bf0c      	ite	eq
 8007368:	2308      	moveq	r3, #8
 800736a:	230a      	movne	r3, #10
 800736c:	2100      	movs	r1, #0
 800736e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007372:	6866      	ldr	r6, [r4, #4]
 8007374:	60a6      	str	r6, [r4, #8]
 8007376:	2e00      	cmp	r6, #0
 8007378:	bfa2      	ittt	ge
 800737a:	6821      	ldrge	r1, [r4, #0]
 800737c:	f021 0104 	bicge.w	r1, r1, #4
 8007380:	6021      	strge	r1, [r4, #0]
 8007382:	b90d      	cbnz	r5, 8007388 <_printf_i+0x118>
 8007384:	2e00      	cmp	r6, #0
 8007386:	d04d      	beq.n	8007424 <_printf_i+0x1b4>
 8007388:	4616      	mov	r6, r2
 800738a:	fbb5 f1f3 	udiv	r1, r5, r3
 800738e:	fb03 5711 	mls	r7, r3, r1, r5
 8007392:	5dc7      	ldrb	r7, [r0, r7]
 8007394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007398:	462f      	mov	r7, r5
 800739a:	42bb      	cmp	r3, r7
 800739c:	460d      	mov	r5, r1
 800739e:	d9f4      	bls.n	800738a <_printf_i+0x11a>
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <_printf_i+0x14c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07df      	lsls	r7, r3, #31
 80073a8:	d508      	bpl.n	80073bc <_printf_i+0x14c>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	bfde      	ittt	le
 80073b2:	2330      	movle	r3, #48	; 0x30
 80073b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073bc:	1b92      	subs	r2, r2, r6
 80073be:	6122      	str	r2, [r4, #16]
 80073c0:	f8cd a000 	str.w	sl, [sp]
 80073c4:	464b      	mov	r3, r9
 80073c6:	aa03      	add	r2, sp, #12
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff fee2 	bl	8007194 <_printf_common>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d14c      	bne.n	800746e <_printf_i+0x1fe>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b004      	add	sp, #16
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	4835      	ldr	r0, [pc, #212]	; (80074b4 <_printf_i+0x244>)
 80073e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	680e      	ldr	r6, [r1, #0]
 80073e8:	061f      	lsls	r7, r3, #24
 80073ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80073ee:	600e      	str	r6, [r1, #0]
 80073f0:	d514      	bpl.n	800741c <_printf_i+0x1ac>
 80073f2:	07d9      	lsls	r1, r3, #31
 80073f4:	bf44      	itt	mi
 80073f6:	f043 0320 	orrmi.w	r3, r3, #32
 80073fa:	6023      	strmi	r3, [r4, #0]
 80073fc:	b91d      	cbnz	r5, 8007406 <_printf_i+0x196>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	f023 0320 	bic.w	r3, r3, #32
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	2310      	movs	r3, #16
 8007408:	e7b0      	b.n	800736c <_printf_i+0xfc>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	4828      	ldr	r0, [pc, #160]	; (80074b8 <_printf_i+0x248>)
 8007416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800741a:	e7e3      	b.n	80073e4 <_printf_i+0x174>
 800741c:	065e      	lsls	r6, r3, #25
 800741e:	bf48      	it	mi
 8007420:	b2ad      	uxthmi	r5, r5
 8007422:	e7e6      	b.n	80073f2 <_printf_i+0x182>
 8007424:	4616      	mov	r6, r2
 8007426:	e7bb      	b.n	80073a0 <_printf_i+0x130>
 8007428:	680b      	ldr	r3, [r1, #0]
 800742a:	6826      	ldr	r6, [r4, #0]
 800742c:	6960      	ldr	r0, [r4, #20]
 800742e:	1d1d      	adds	r5, r3, #4
 8007430:	600d      	str	r5, [r1, #0]
 8007432:	0635      	lsls	r5, r6, #24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	d501      	bpl.n	800743c <_printf_i+0x1cc>
 8007438:	6018      	str	r0, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0x1d2>
 800743c:	0671      	lsls	r1, r6, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0x1c8>
 8007440:	8018      	strh	r0, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4616      	mov	r6, r2
 8007448:	e7ba      	b.n	80073c0 <_printf_i+0x150>
 800744a:	680b      	ldr	r3, [r1, #0]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	600a      	str	r2, [r1, #0]
 8007450:	681e      	ldr	r6, [r3, #0]
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	4630      	mov	r0, r6
 8007458:	f7f8 fec2 	bl	80001e0 <memchr>
 800745c:	b108      	cbz	r0, 8007462 <_printf_i+0x1f2>
 800745e:	1b80      	subs	r0, r0, r6
 8007460:	6060      	str	r0, [r4, #4]
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2300      	movs	r3, #0
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e7a8      	b.n	80073c0 <_printf_i+0x150>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	4632      	mov	r2, r6
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d0ab      	beq.n	80073d4 <_printf_i+0x164>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	d413      	bmi.n	80074aa <_printf_i+0x23a>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	4298      	cmp	r0, r3
 8007488:	bfb8      	it	lt
 800748a:	4618      	movlt	r0, r3
 800748c:	e7a4      	b.n	80073d8 <_printf_i+0x168>
 800748e:	2301      	movs	r3, #1
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d09b      	beq.n	80073d4 <_printf_i+0x164>
 800749c:	3501      	adds	r5, #1
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dcf2      	bgt.n	800748e <_printf_i+0x21e>
 80074a8:	e7eb      	b.n	8007482 <_printf_i+0x212>
 80074aa:	2500      	movs	r5, #0
 80074ac:	f104 0619 	add.w	r6, r4, #25
 80074b0:	e7f5      	b.n	800749e <_printf_i+0x22e>
 80074b2:	bf00      	nop
 80074b4:	0800b6ca 	.word	0x0800b6ca
 80074b8:	0800b6db 	.word	0x0800b6db

080074bc <_scanf_float>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	b087      	sub	sp, #28
 80074c2:	4617      	mov	r7, r2
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	688b      	ldr	r3, [r1, #8]
 80074c8:	1e5a      	subs	r2, r3, #1
 80074ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80074ce:	bf83      	ittte	hi
 80074d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80074d4:	195b      	addhi	r3, r3, r5
 80074d6:	9302      	strhi	r3, [sp, #8]
 80074d8:	2300      	movls	r3, #0
 80074da:	bf86      	itte	hi
 80074dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80074e0:	608b      	strhi	r3, [r1, #8]
 80074e2:	9302      	strls	r3, [sp, #8]
 80074e4:	680b      	ldr	r3, [r1, #0]
 80074e6:	468b      	mov	fp, r1
 80074e8:	2500      	movs	r5, #0
 80074ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80074ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80074f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074f6:	4680      	mov	r8, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	465e      	mov	r6, fp
 80074fc:	46aa      	mov	sl, r5
 80074fe:	46a9      	mov	r9, r5
 8007500:	9501      	str	r5, [sp, #4]
 8007502:	68a2      	ldr	r2, [r4, #8]
 8007504:	b152      	cbz	r2, 800751c <_scanf_float+0x60>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b4e      	cmp	r3, #78	; 0x4e
 800750c:	d864      	bhi.n	80075d8 <_scanf_float+0x11c>
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d83c      	bhi.n	800758c <_scanf_float+0xd0>
 8007512:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007516:	b2c8      	uxtb	r0, r1
 8007518:	280e      	cmp	r0, #14
 800751a:	d93a      	bls.n	8007592 <_scanf_float+0xd6>
 800751c:	f1b9 0f00 	cmp.w	r9, #0
 8007520:	d003      	beq.n	800752a <_scanf_float+0x6e>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800752e:	f1ba 0f01 	cmp.w	sl, #1
 8007532:	f200 8113 	bhi.w	800775c <_scanf_float+0x2a0>
 8007536:	455e      	cmp	r6, fp
 8007538:	f200 8105 	bhi.w	8007746 <_scanf_float+0x28a>
 800753c:	2501      	movs	r5, #1
 800753e:	4628      	mov	r0, r5
 8007540:	b007      	add	sp, #28
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800754a:	2a0d      	cmp	r2, #13
 800754c:	d8e6      	bhi.n	800751c <_scanf_float+0x60>
 800754e:	a101      	add	r1, pc, #4	; (adr r1, 8007554 <_scanf_float+0x98>)
 8007550:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007554:	08007693 	.word	0x08007693
 8007558:	0800751d 	.word	0x0800751d
 800755c:	0800751d 	.word	0x0800751d
 8007560:	0800751d 	.word	0x0800751d
 8007564:	080076f3 	.word	0x080076f3
 8007568:	080076cb 	.word	0x080076cb
 800756c:	0800751d 	.word	0x0800751d
 8007570:	0800751d 	.word	0x0800751d
 8007574:	080076a1 	.word	0x080076a1
 8007578:	0800751d 	.word	0x0800751d
 800757c:	0800751d 	.word	0x0800751d
 8007580:	0800751d 	.word	0x0800751d
 8007584:	0800751d 	.word	0x0800751d
 8007588:	08007659 	.word	0x08007659
 800758c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007590:	e7db      	b.n	800754a <_scanf_float+0x8e>
 8007592:	290e      	cmp	r1, #14
 8007594:	d8c2      	bhi.n	800751c <_scanf_float+0x60>
 8007596:	a001      	add	r0, pc, #4	; (adr r0, 800759c <_scanf_float+0xe0>)
 8007598:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800759c:	0800764b 	.word	0x0800764b
 80075a0:	0800751d 	.word	0x0800751d
 80075a4:	0800764b 	.word	0x0800764b
 80075a8:	080076df 	.word	0x080076df
 80075ac:	0800751d 	.word	0x0800751d
 80075b0:	080075f9 	.word	0x080075f9
 80075b4:	08007635 	.word	0x08007635
 80075b8:	08007635 	.word	0x08007635
 80075bc:	08007635 	.word	0x08007635
 80075c0:	08007635 	.word	0x08007635
 80075c4:	08007635 	.word	0x08007635
 80075c8:	08007635 	.word	0x08007635
 80075cc:	08007635 	.word	0x08007635
 80075d0:	08007635 	.word	0x08007635
 80075d4:	08007635 	.word	0x08007635
 80075d8:	2b6e      	cmp	r3, #110	; 0x6e
 80075da:	d809      	bhi.n	80075f0 <_scanf_float+0x134>
 80075dc:	2b60      	cmp	r3, #96	; 0x60
 80075de:	d8b2      	bhi.n	8007546 <_scanf_float+0x8a>
 80075e0:	2b54      	cmp	r3, #84	; 0x54
 80075e2:	d077      	beq.n	80076d4 <_scanf_float+0x218>
 80075e4:	2b59      	cmp	r3, #89	; 0x59
 80075e6:	d199      	bne.n	800751c <_scanf_float+0x60>
 80075e8:	2d07      	cmp	r5, #7
 80075ea:	d197      	bne.n	800751c <_scanf_float+0x60>
 80075ec:	2508      	movs	r5, #8
 80075ee:	e029      	b.n	8007644 <_scanf_float+0x188>
 80075f0:	2b74      	cmp	r3, #116	; 0x74
 80075f2:	d06f      	beq.n	80076d4 <_scanf_float+0x218>
 80075f4:	2b79      	cmp	r3, #121	; 0x79
 80075f6:	e7f6      	b.n	80075e6 <_scanf_float+0x12a>
 80075f8:	6821      	ldr	r1, [r4, #0]
 80075fa:	05c8      	lsls	r0, r1, #23
 80075fc:	d51a      	bpl.n	8007634 <_scanf_float+0x178>
 80075fe:	9b02      	ldr	r3, [sp, #8]
 8007600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007604:	6021      	str	r1, [r4, #0]
 8007606:	f109 0901 	add.w	r9, r9, #1
 800760a:	b11b      	cbz	r3, 8007614 <_scanf_float+0x158>
 800760c:	3b01      	subs	r3, #1
 800760e:	3201      	adds	r2, #1
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	60a2      	str	r2, [r4, #8]
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	3301      	adds	r3, #1
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3b01      	subs	r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	607b      	str	r3, [r7, #4]
 8007628:	f340 8084 	ble.w	8007734 <_scanf_float+0x278>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	e766      	b.n	8007502 <_scanf_float+0x46>
 8007634:	eb1a 0f05 	cmn.w	sl, r5
 8007638:	f47f af70 	bne.w	800751c <_scanf_float+0x60>
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	f806 3b01 	strb.w	r3, [r6], #1
 8007648:	e7e4      	b.n	8007614 <_scanf_float+0x158>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	0610      	lsls	r0, r2, #24
 800764e:	f57f af65 	bpl.w	800751c <_scanf_float+0x60>
 8007652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007656:	e7f4      	b.n	8007642 <_scanf_float+0x186>
 8007658:	f1ba 0f00 	cmp.w	sl, #0
 800765c:	d10e      	bne.n	800767c <_scanf_float+0x1c0>
 800765e:	f1b9 0f00 	cmp.w	r9, #0
 8007662:	d10e      	bne.n	8007682 <_scanf_float+0x1c6>
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800766a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800766e:	d108      	bne.n	8007682 <_scanf_float+0x1c6>
 8007670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007674:	6022      	str	r2, [r4, #0]
 8007676:	f04f 0a01 	mov.w	sl, #1
 800767a:	e7e3      	b.n	8007644 <_scanf_float+0x188>
 800767c:	f1ba 0f02 	cmp.w	sl, #2
 8007680:	d055      	beq.n	800772e <_scanf_float+0x272>
 8007682:	2d01      	cmp	r5, #1
 8007684:	d002      	beq.n	800768c <_scanf_float+0x1d0>
 8007686:	2d04      	cmp	r5, #4
 8007688:	f47f af48 	bne.w	800751c <_scanf_float+0x60>
 800768c:	3501      	adds	r5, #1
 800768e:	b2ed      	uxtb	r5, r5
 8007690:	e7d8      	b.n	8007644 <_scanf_float+0x188>
 8007692:	f1ba 0f01 	cmp.w	sl, #1
 8007696:	f47f af41 	bne.w	800751c <_scanf_float+0x60>
 800769a:	f04f 0a02 	mov.w	sl, #2
 800769e:	e7d1      	b.n	8007644 <_scanf_float+0x188>
 80076a0:	b97d      	cbnz	r5, 80076c2 <_scanf_float+0x206>
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	f47f af3c 	bne.w	8007522 <_scanf_float+0x66>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076b4:	f47f af39 	bne.w	800752a <_scanf_float+0x6e>
 80076b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	2501      	movs	r5, #1
 80076c0:	e7c0      	b.n	8007644 <_scanf_float+0x188>
 80076c2:	2d03      	cmp	r5, #3
 80076c4:	d0e2      	beq.n	800768c <_scanf_float+0x1d0>
 80076c6:	2d05      	cmp	r5, #5
 80076c8:	e7de      	b.n	8007688 <_scanf_float+0x1cc>
 80076ca:	2d02      	cmp	r5, #2
 80076cc:	f47f af26 	bne.w	800751c <_scanf_float+0x60>
 80076d0:	2503      	movs	r5, #3
 80076d2:	e7b7      	b.n	8007644 <_scanf_float+0x188>
 80076d4:	2d06      	cmp	r5, #6
 80076d6:	f47f af21 	bne.w	800751c <_scanf_float+0x60>
 80076da:	2507      	movs	r5, #7
 80076dc:	e7b2      	b.n	8007644 <_scanf_float+0x188>
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	0591      	lsls	r1, r2, #22
 80076e2:	f57f af1b 	bpl.w	800751c <_scanf_float+0x60>
 80076e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80076ea:	6022      	str	r2, [r4, #0]
 80076ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80076f0:	e7a8      	b.n	8007644 <_scanf_float+0x188>
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80076f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076fc:	d006      	beq.n	800770c <_scanf_float+0x250>
 80076fe:	0550      	lsls	r0, r2, #21
 8007700:	f57f af0c 	bpl.w	800751c <_scanf_float+0x60>
 8007704:	f1b9 0f00 	cmp.w	r9, #0
 8007708:	f43f af0f 	beq.w	800752a <_scanf_float+0x6e>
 800770c:	0591      	lsls	r1, r2, #22
 800770e:	bf58      	it	pl
 8007710:	9901      	ldrpl	r1, [sp, #4]
 8007712:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007716:	bf58      	it	pl
 8007718:	eba9 0101 	subpl.w	r1, r9, r1
 800771c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007720:	bf58      	it	pl
 8007722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	f04f 0900 	mov.w	r9, #0
 800772c:	e78a      	b.n	8007644 <_scanf_float+0x188>
 800772e:	f04f 0a03 	mov.w	sl, #3
 8007732:	e787      	b.n	8007644 <_scanf_float+0x188>
 8007734:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007738:	4639      	mov	r1, r7
 800773a:	4640      	mov	r0, r8
 800773c:	4798      	blx	r3
 800773e:	2800      	cmp	r0, #0
 8007740:	f43f aedf 	beq.w	8007502 <_scanf_float+0x46>
 8007744:	e6ea      	b.n	800751c <_scanf_float+0x60>
 8007746:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800774a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800774e:	463a      	mov	r2, r7
 8007750:	4640      	mov	r0, r8
 8007752:	4798      	blx	r3
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	3b01      	subs	r3, #1
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	e6ec      	b.n	8007536 <_scanf_float+0x7a>
 800775c:	1e6b      	subs	r3, r5, #1
 800775e:	2b06      	cmp	r3, #6
 8007760:	d825      	bhi.n	80077ae <_scanf_float+0x2f2>
 8007762:	2d02      	cmp	r5, #2
 8007764:	d836      	bhi.n	80077d4 <_scanf_float+0x318>
 8007766:	455e      	cmp	r6, fp
 8007768:	f67f aee8 	bls.w	800753c <_scanf_float+0x80>
 800776c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007770:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007774:	463a      	mov	r2, r7
 8007776:	4640      	mov	r0, r8
 8007778:	4798      	blx	r3
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	3b01      	subs	r3, #1
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	e7f1      	b.n	8007766 <_scanf_float+0x2aa>
 8007782:	9802      	ldr	r0, [sp, #8]
 8007784:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007788:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800778c:	9002      	str	r0, [sp, #8]
 800778e:	463a      	mov	r2, r7
 8007790:	4640      	mov	r0, r8
 8007792:	4798      	blx	r3
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	3b01      	subs	r3, #1
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800779e:	fa5f fa8a 	uxtb.w	sl, sl
 80077a2:	f1ba 0f02 	cmp.w	sl, #2
 80077a6:	d1ec      	bne.n	8007782 <_scanf_float+0x2c6>
 80077a8:	3d03      	subs	r5, #3
 80077aa:	b2ed      	uxtb	r5, r5
 80077ac:	1b76      	subs	r6, r6, r5
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	05da      	lsls	r2, r3, #23
 80077b2:	d52f      	bpl.n	8007814 <_scanf_float+0x358>
 80077b4:	055b      	lsls	r3, r3, #21
 80077b6:	d510      	bpl.n	80077da <_scanf_float+0x31e>
 80077b8:	455e      	cmp	r6, fp
 80077ba:	f67f aebf 	bls.w	800753c <_scanf_float+0x80>
 80077be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077c6:	463a      	mov	r2, r7
 80077c8:	4640      	mov	r0, r8
 80077ca:	4798      	blx	r3
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	e7f1      	b.n	80077b8 <_scanf_float+0x2fc>
 80077d4:	46aa      	mov	sl, r5
 80077d6:	9602      	str	r6, [sp, #8]
 80077d8:	e7df      	b.n	800779a <_scanf_float+0x2de>
 80077da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	2965      	cmp	r1, #101	; 0x65
 80077e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80077e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	d00c      	beq.n	8007808 <_scanf_float+0x34c>
 80077ee:	2945      	cmp	r1, #69	; 0x45
 80077f0:	d00a      	beq.n	8007808 <_scanf_float+0x34c>
 80077f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077f6:	463a      	mov	r2, r7
 80077f8:	4640      	mov	r0, r8
 80077fa:	4798      	blx	r3
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007802:	3b01      	subs	r3, #1
 8007804:	1eb5      	subs	r5, r6, #2
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800780c:	463a      	mov	r2, r7
 800780e:	4640      	mov	r0, r8
 8007810:	4798      	blx	r3
 8007812:	462e      	mov	r6, r5
 8007814:	6825      	ldr	r5, [r4, #0]
 8007816:	f015 0510 	ands.w	r5, r5, #16
 800781a:	d158      	bne.n	80078ce <_scanf_float+0x412>
 800781c:	7035      	strb	r5, [r6, #0]
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007828:	d11c      	bne.n	8007864 <_scanf_float+0x3a8>
 800782a:	9b01      	ldr	r3, [sp, #4]
 800782c:	454b      	cmp	r3, r9
 800782e:	eba3 0209 	sub.w	r2, r3, r9
 8007832:	d124      	bne.n	800787e <_scanf_float+0x3c2>
 8007834:	2200      	movs	r2, #0
 8007836:	4659      	mov	r1, fp
 8007838:	4640      	mov	r0, r8
 800783a:	f000 fe9b 	bl	8008574 <_strtod_r>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	6821      	ldr	r1, [r4, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f011 0f02 	tst.w	r1, #2
 8007848:	ec57 6b10 	vmov	r6, r7, d0
 800784c:	f103 0204 	add.w	r2, r3, #4
 8007850:	d020      	beq.n	8007894 <_scanf_float+0x3d8>
 8007852:	9903      	ldr	r1, [sp, #12]
 8007854:	600a      	str	r2, [r1, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	e9c3 6700 	strd	r6, r7, [r3]
 800785c:	68e3      	ldr	r3, [r4, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60e3      	str	r3, [r4, #12]
 8007862:	e66c      	b.n	800753e <_scanf_float+0x82>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0e4      	beq.n	8007834 <_scanf_float+0x378>
 800786a:	9905      	ldr	r1, [sp, #20]
 800786c:	230a      	movs	r3, #10
 800786e:	462a      	mov	r2, r5
 8007870:	3101      	adds	r1, #1
 8007872:	4640      	mov	r0, r8
 8007874:	f000 ff08 	bl	8008688 <_strtol_r>
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	9e05      	ldr	r6, [sp, #20]
 800787c:	1ac2      	subs	r2, r0, r3
 800787e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007882:	429e      	cmp	r6, r3
 8007884:	bf28      	it	cs
 8007886:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800788a:	4912      	ldr	r1, [pc, #72]	; (80078d4 <_scanf_float+0x418>)
 800788c:	4630      	mov	r0, r6
 800788e:	f000 f82b 	bl	80078e8 <siprintf>
 8007892:	e7cf      	b.n	8007834 <_scanf_float+0x378>
 8007894:	f011 0f04 	tst.w	r1, #4
 8007898:	9903      	ldr	r1, [sp, #12]
 800789a:	600a      	str	r2, [r1, #0]
 800789c:	d1db      	bne.n	8007856 <_scanf_float+0x39a>
 800789e:	f8d3 8000 	ldr.w	r8, [r3]
 80078a2:	ee10 2a10 	vmov	r2, s0
 80078a6:	ee10 0a10 	vmov	r0, s0
 80078aa:	463b      	mov	r3, r7
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f9 f93d 	bl	8000b2c <__aeabi_dcmpun>
 80078b2:	b128      	cbz	r0, 80078c0 <_scanf_float+0x404>
 80078b4:	4808      	ldr	r0, [pc, #32]	; (80078d8 <_scanf_float+0x41c>)
 80078b6:	f000 f811 	bl	80078dc <nanf>
 80078ba:	ed88 0a00 	vstr	s0, [r8]
 80078be:	e7cd      	b.n	800785c <_scanf_float+0x3a0>
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	f7f9 f990 	bl	8000be8 <__aeabi_d2f>
 80078c8:	f8c8 0000 	str.w	r0, [r8]
 80078cc:	e7c6      	b.n	800785c <_scanf_float+0x3a0>
 80078ce:	2500      	movs	r5, #0
 80078d0:	e635      	b.n	800753e <_scanf_float+0x82>
 80078d2:	bf00      	nop
 80078d4:	0800b6ec 	.word	0x0800b6ec
 80078d8:	0800bb08 	.word	0x0800bb08

080078dc <nanf>:
 80078dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078e4 <nanf+0x8>
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	7fc00000 	.word	0x7fc00000

080078e8 <siprintf>:
 80078e8:	b40e      	push	{r1, r2, r3}
 80078ea:	b500      	push	{lr}
 80078ec:	b09c      	sub	sp, #112	; 0x70
 80078ee:	ab1d      	add	r3, sp, #116	; 0x74
 80078f0:	9002      	str	r0, [sp, #8]
 80078f2:	9006      	str	r0, [sp, #24]
 80078f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078f8:	4809      	ldr	r0, [pc, #36]	; (8007920 <siprintf+0x38>)
 80078fa:	9107      	str	r1, [sp, #28]
 80078fc:	9104      	str	r1, [sp, #16]
 80078fe:	4909      	ldr	r1, [pc, #36]	; (8007924 <siprintf+0x3c>)
 8007900:	f853 2b04 	ldr.w	r2, [r3], #4
 8007904:	9105      	str	r1, [sp, #20]
 8007906:	6800      	ldr	r0, [r0, #0]
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	a902      	add	r1, sp, #8
 800790c:	f002 fea4 	bl	800a658 <_svfiprintf_r>
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	b01c      	add	sp, #112	; 0x70
 8007918:	f85d eb04 	ldr.w	lr, [sp], #4
 800791c:	b003      	add	sp, #12
 800791e:	4770      	bx	lr
 8007920:	2000000c 	.word	0x2000000c
 8007924:	ffff0208 	.word	0xffff0208

08007928 <sulp>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	ec45 4b10 	vmov	d0, r4, r5
 8007932:	4616      	mov	r6, r2
 8007934:	f002 fc2c 	bl	800a190 <__ulp>
 8007938:	ec51 0b10 	vmov	r0, r1, d0
 800793c:	b17e      	cbz	r6, 800795e <sulp+0x36>
 800793e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007946:	2b00      	cmp	r3, #0
 8007948:	dd09      	ble.n	800795e <sulp+0x36>
 800794a:	051b      	lsls	r3, r3, #20
 800794c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007950:	2400      	movs	r4, #0
 8007952:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007956:	4622      	mov	r2, r4
 8007958:	462b      	mov	r3, r5
 800795a:	f7f8 fe4d 	bl	80005f8 <__aeabi_dmul>
 800795e:	bd70      	pop	{r4, r5, r6, pc}

08007960 <_strtod_l>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	b0a3      	sub	sp, #140	; 0x8c
 8007966:	461f      	mov	r7, r3
 8007968:	2300      	movs	r3, #0
 800796a:	931e      	str	r3, [sp, #120]	; 0x78
 800796c:	4ba4      	ldr	r3, [pc, #656]	; (8007c00 <_strtod_l+0x2a0>)
 800796e:	9219      	str	r2, [sp, #100]	; 0x64
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	9307      	str	r3, [sp, #28]
 8007974:	4604      	mov	r4, r0
 8007976:	4618      	mov	r0, r3
 8007978:	4688      	mov	r8, r1
 800797a:	f7f8 fc29 	bl	80001d0 <strlen>
 800797e:	f04f 0a00 	mov.w	sl, #0
 8007982:	4605      	mov	r5, r0
 8007984:	f04f 0b00 	mov.w	fp, #0
 8007988:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800798c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	2a2b      	cmp	r2, #43	; 0x2b
 8007992:	d04c      	beq.n	8007a2e <_strtod_l+0xce>
 8007994:	d839      	bhi.n	8007a0a <_strtod_l+0xaa>
 8007996:	2a0d      	cmp	r2, #13
 8007998:	d832      	bhi.n	8007a00 <_strtod_l+0xa0>
 800799a:	2a08      	cmp	r2, #8
 800799c:	d832      	bhi.n	8007a04 <_strtod_l+0xa4>
 800799e:	2a00      	cmp	r2, #0
 80079a0:	d03c      	beq.n	8007a1c <_strtod_l+0xbc>
 80079a2:	2300      	movs	r3, #0
 80079a4:	930e      	str	r3, [sp, #56]	; 0x38
 80079a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80079a8:	7833      	ldrb	r3, [r6, #0]
 80079aa:	2b30      	cmp	r3, #48	; 0x30
 80079ac:	f040 80b4 	bne.w	8007b18 <_strtod_l+0x1b8>
 80079b0:	7873      	ldrb	r3, [r6, #1]
 80079b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079b6:	2b58      	cmp	r3, #88	; 0x58
 80079b8:	d16c      	bne.n	8007a94 <_strtod_l+0x134>
 80079ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	ab1e      	add	r3, sp, #120	; 0x78
 80079c0:	9702      	str	r7, [sp, #8]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	4a8f      	ldr	r2, [pc, #572]	; (8007c04 <_strtod_l+0x2a4>)
 80079c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80079c8:	a91d      	add	r1, sp, #116	; 0x74
 80079ca:	4620      	mov	r0, r4
 80079cc:	f001 fd40 	bl	8009450 <__gethex>
 80079d0:	f010 0707 	ands.w	r7, r0, #7
 80079d4:	4605      	mov	r5, r0
 80079d6:	d005      	beq.n	80079e4 <_strtod_l+0x84>
 80079d8:	2f06      	cmp	r7, #6
 80079da:	d12a      	bne.n	8007a32 <_strtod_l+0xd2>
 80079dc:	3601      	adds	r6, #1
 80079de:	2300      	movs	r3, #0
 80079e0:	961d      	str	r6, [sp, #116]	; 0x74
 80079e2:	930e      	str	r3, [sp, #56]	; 0x38
 80079e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f040 8596 	bne.w	8008518 <_strtod_l+0xbb8>
 80079ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ee:	b1db      	cbz	r3, 8007a28 <_strtod_l+0xc8>
 80079f0:	4652      	mov	r2, sl
 80079f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079f6:	ec43 2b10 	vmov	d0, r2, r3
 80079fa:	b023      	add	sp, #140	; 0x8c
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	2a20      	cmp	r2, #32
 8007a02:	d1ce      	bne.n	80079a2 <_strtod_l+0x42>
 8007a04:	3301      	adds	r3, #1
 8007a06:	931d      	str	r3, [sp, #116]	; 0x74
 8007a08:	e7c0      	b.n	800798c <_strtod_l+0x2c>
 8007a0a:	2a2d      	cmp	r2, #45	; 0x2d
 8007a0c:	d1c9      	bne.n	80079a2 <_strtod_l+0x42>
 8007a0e:	2201      	movs	r2, #1
 8007a10:	920e      	str	r2, [sp, #56]	; 0x38
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	921d      	str	r2, [sp, #116]	; 0x74
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1c4      	bne.n	80079a6 <_strtod_l+0x46>
 8007a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f040 8576 	bne.w	8008514 <_strtod_l+0xbb4>
 8007a28:	4652      	mov	r2, sl
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	e7e3      	b.n	80079f6 <_strtod_l+0x96>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	e7ee      	b.n	8007a10 <_strtod_l+0xb0>
 8007a32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a34:	b13a      	cbz	r2, 8007a46 <_strtod_l+0xe6>
 8007a36:	2135      	movs	r1, #53	; 0x35
 8007a38:	a820      	add	r0, sp, #128	; 0x80
 8007a3a:	f002 fcb4 	bl	800a3a6 <__copybits>
 8007a3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a40:	4620      	mov	r0, r4
 8007a42:	f002 f879 	bl	8009b38 <_Bfree>
 8007a46:	3f01      	subs	r7, #1
 8007a48:	2f05      	cmp	r7, #5
 8007a4a:	d807      	bhi.n	8007a5c <_strtod_l+0xfc>
 8007a4c:	e8df f007 	tbb	[pc, r7]
 8007a50:	1d180b0e 	.word	0x1d180b0e
 8007a54:	030e      	.short	0x030e
 8007a56:	f04f 0b00 	mov.w	fp, #0
 8007a5a:	46da      	mov	sl, fp
 8007a5c:	0728      	lsls	r0, r5, #28
 8007a5e:	d5c1      	bpl.n	80079e4 <_strtod_l+0x84>
 8007a60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007a64:	e7be      	b.n	80079e4 <_strtod_l+0x84>
 8007a66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007a6a:	e7f7      	b.n	8007a5c <_strtod_l+0xfc>
 8007a6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007a70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007a72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a7e:	e7ed      	b.n	8007a5c <_strtod_l+0xfc>
 8007a80:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007c08 <_strtod_l+0x2a8>
 8007a84:	f04f 0a00 	mov.w	sl, #0
 8007a88:	e7e8      	b.n	8007a5c <_strtod_l+0xfc>
 8007a8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007a8e:	f04f 3aff 	mov.w	sl, #4294967295
 8007a92:	e7e3      	b.n	8007a5c <_strtod_l+0xfc>
 8007a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	921d      	str	r2, [sp, #116]	; 0x74
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	2b30      	cmp	r3, #48	; 0x30
 8007a9e:	d0f9      	beq.n	8007a94 <_strtod_l+0x134>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d09f      	beq.n	80079e4 <_strtod_l+0x84>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f04f 0900 	mov.w	r9, #0
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007aae:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ab4:	464f      	mov	r7, r9
 8007ab6:	220a      	movs	r2, #10
 8007ab8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007aba:	7806      	ldrb	r6, [r0, #0]
 8007abc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007ac0:	b2d9      	uxtb	r1, r3
 8007ac2:	2909      	cmp	r1, #9
 8007ac4:	d92a      	bls.n	8007b1c <_strtod_l+0x1bc>
 8007ac6:	9907      	ldr	r1, [sp, #28]
 8007ac8:	462a      	mov	r2, r5
 8007aca:	f002 fedd 	bl	800a888 <strncmp>
 8007ace:	b398      	cbz	r0, 8007b38 <_strtod_l+0x1d8>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	4633      	mov	r3, r6
 8007ad4:	463d      	mov	r5, r7
 8007ad6:	9007      	str	r0, [sp, #28]
 8007ad8:	4602      	mov	r2, r0
 8007ada:	2b65      	cmp	r3, #101	; 0x65
 8007adc:	d001      	beq.n	8007ae2 <_strtod_l+0x182>
 8007ade:	2b45      	cmp	r3, #69	; 0x45
 8007ae0:	d118      	bne.n	8007b14 <_strtod_l+0x1b4>
 8007ae2:	b91d      	cbnz	r5, 8007aec <_strtod_l+0x18c>
 8007ae4:	9b04      	ldr	r3, [sp, #16]
 8007ae6:	4303      	orrs	r3, r0
 8007ae8:	d098      	beq.n	8007a1c <_strtod_l+0xbc>
 8007aea:	2500      	movs	r5, #0
 8007aec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007af0:	f108 0301 	add.w	r3, r8, #1
 8007af4:	931d      	str	r3, [sp, #116]	; 0x74
 8007af6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007afa:	2b2b      	cmp	r3, #43	; 0x2b
 8007afc:	d075      	beq.n	8007bea <_strtod_l+0x28a>
 8007afe:	2b2d      	cmp	r3, #45	; 0x2d
 8007b00:	d07b      	beq.n	8007bfa <_strtod_l+0x29a>
 8007b02:	f04f 0c00 	mov.w	ip, #0
 8007b06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007b0a:	2909      	cmp	r1, #9
 8007b0c:	f240 8082 	bls.w	8007c14 <_strtod_l+0x2b4>
 8007b10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007b14:	2600      	movs	r6, #0
 8007b16:	e09d      	b.n	8007c54 <_strtod_l+0x2f4>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e7c4      	b.n	8007aa6 <_strtod_l+0x146>
 8007b1c:	2f08      	cmp	r7, #8
 8007b1e:	bfd8      	it	le
 8007b20:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007b22:	f100 0001 	add.w	r0, r0, #1
 8007b26:	bfda      	itte	le
 8007b28:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b2c:	9309      	strle	r3, [sp, #36]	; 0x24
 8007b2e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007b32:	3701      	adds	r7, #1
 8007b34:	901d      	str	r0, [sp, #116]	; 0x74
 8007b36:	e7bf      	b.n	8007ab8 <_strtod_l+0x158>
 8007b38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b3a:	195a      	adds	r2, r3, r5
 8007b3c:	921d      	str	r2, [sp, #116]	; 0x74
 8007b3e:	5d5b      	ldrb	r3, [r3, r5]
 8007b40:	2f00      	cmp	r7, #0
 8007b42:	d037      	beq.n	8007bb4 <_strtod_l+0x254>
 8007b44:	9007      	str	r0, [sp, #28]
 8007b46:	463d      	mov	r5, r7
 8007b48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007b4c:	2a09      	cmp	r2, #9
 8007b4e:	d912      	bls.n	8007b76 <_strtod_l+0x216>
 8007b50:	2201      	movs	r2, #1
 8007b52:	e7c2      	b.n	8007ada <_strtod_l+0x17a>
 8007b54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	921d      	str	r2, [sp, #116]	; 0x74
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	2b30      	cmp	r3, #48	; 0x30
 8007b60:	d0f8      	beq.n	8007b54 <_strtod_l+0x1f4>
 8007b62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007b66:	2a08      	cmp	r2, #8
 8007b68:	f200 84db 	bhi.w	8008522 <_strtod_l+0xbc2>
 8007b6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007b6e:	9007      	str	r0, [sp, #28]
 8007b70:	2000      	movs	r0, #0
 8007b72:	920a      	str	r2, [sp, #40]	; 0x28
 8007b74:	4605      	mov	r5, r0
 8007b76:	3b30      	subs	r3, #48	; 0x30
 8007b78:	f100 0201 	add.w	r2, r0, #1
 8007b7c:	d014      	beq.n	8007ba8 <_strtod_l+0x248>
 8007b7e:	9907      	ldr	r1, [sp, #28]
 8007b80:	4411      	add	r1, r2
 8007b82:	9107      	str	r1, [sp, #28]
 8007b84:	462a      	mov	r2, r5
 8007b86:	eb00 0e05 	add.w	lr, r0, r5
 8007b8a:	210a      	movs	r1, #10
 8007b8c:	4572      	cmp	r2, lr
 8007b8e:	d113      	bne.n	8007bb8 <_strtod_l+0x258>
 8007b90:	182a      	adds	r2, r5, r0
 8007b92:	2a08      	cmp	r2, #8
 8007b94:	f105 0501 	add.w	r5, r5, #1
 8007b98:	4405      	add	r5, r0
 8007b9a:	dc1c      	bgt.n	8007bd6 <_strtod_l+0x276>
 8007b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b9e:	220a      	movs	r2, #10
 8007ba0:	fb02 3301 	mla	r3, r2, r1, r3
 8007ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007baa:	1c59      	adds	r1, r3, #1
 8007bac:	911d      	str	r1, [sp, #116]	; 0x74
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	e7c9      	b.n	8007b48 <_strtod_l+0x1e8>
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	e7d2      	b.n	8007b5e <_strtod_l+0x1fe>
 8007bb8:	2a08      	cmp	r2, #8
 8007bba:	dc04      	bgt.n	8007bc6 <_strtod_l+0x266>
 8007bbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007bbe:	434e      	muls	r6, r1
 8007bc0:	9609      	str	r6, [sp, #36]	; 0x24
 8007bc2:	3201      	adds	r2, #1
 8007bc4:	e7e2      	b.n	8007b8c <_strtod_l+0x22c>
 8007bc6:	f102 0c01 	add.w	ip, r2, #1
 8007bca:	f1bc 0f10 	cmp.w	ip, #16
 8007bce:	bfd8      	it	le
 8007bd0:	fb01 f909 	mulle.w	r9, r1, r9
 8007bd4:	e7f5      	b.n	8007bc2 <_strtod_l+0x262>
 8007bd6:	2d10      	cmp	r5, #16
 8007bd8:	bfdc      	itt	le
 8007bda:	220a      	movle	r2, #10
 8007bdc:	fb02 3909 	mlale	r9, r2, r9, r3
 8007be0:	e7e1      	b.n	8007ba6 <_strtod_l+0x246>
 8007be2:	2300      	movs	r3, #0
 8007be4:	9307      	str	r3, [sp, #28]
 8007be6:	2201      	movs	r2, #1
 8007be8:	e77c      	b.n	8007ae4 <_strtod_l+0x184>
 8007bea:	f04f 0c00 	mov.w	ip, #0
 8007bee:	f108 0302 	add.w	r3, r8, #2
 8007bf2:	931d      	str	r3, [sp, #116]	; 0x74
 8007bf4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007bf8:	e785      	b.n	8007b06 <_strtod_l+0x1a6>
 8007bfa:	f04f 0c01 	mov.w	ip, #1
 8007bfe:	e7f6      	b.n	8007bee <_strtod_l+0x28e>
 8007c00:	0800b948 	.word	0x0800b948
 8007c04:	0800b6f4 	.word	0x0800b6f4
 8007c08:	7ff00000 	.word	0x7ff00000
 8007c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	911d      	str	r1, [sp, #116]	; 0x74
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	2b30      	cmp	r3, #48	; 0x30
 8007c16:	d0f9      	beq.n	8007c0c <_strtod_l+0x2ac>
 8007c18:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007c1c:	2908      	cmp	r1, #8
 8007c1e:	f63f af79 	bhi.w	8007b14 <_strtod_l+0x1b4>
 8007c22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007c26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c2c:	1c59      	adds	r1, r3, #1
 8007c2e:	911d      	str	r1, [sp, #116]	; 0x74
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007c36:	2e09      	cmp	r6, #9
 8007c38:	d937      	bls.n	8007caa <_strtod_l+0x34a>
 8007c3a:	9e08      	ldr	r6, [sp, #32]
 8007c3c:	1b89      	subs	r1, r1, r6
 8007c3e:	2908      	cmp	r1, #8
 8007c40:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007c44:	dc02      	bgt.n	8007c4c <_strtod_l+0x2ec>
 8007c46:	4576      	cmp	r6, lr
 8007c48:	bfa8      	it	ge
 8007c4a:	4676      	movge	r6, lr
 8007c4c:	f1bc 0f00 	cmp.w	ip, #0
 8007c50:	d000      	beq.n	8007c54 <_strtod_l+0x2f4>
 8007c52:	4276      	negs	r6, r6
 8007c54:	2d00      	cmp	r5, #0
 8007c56:	d14f      	bne.n	8007cf8 <_strtod_l+0x398>
 8007c58:	9904      	ldr	r1, [sp, #16]
 8007c5a:	4301      	orrs	r1, r0
 8007c5c:	f47f aec2 	bne.w	80079e4 <_strtod_l+0x84>
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	f47f aedb 	bne.w	8007a1c <_strtod_l+0xbc>
 8007c66:	2b69      	cmp	r3, #105	; 0x69
 8007c68:	d027      	beq.n	8007cba <_strtod_l+0x35a>
 8007c6a:	dc24      	bgt.n	8007cb6 <_strtod_l+0x356>
 8007c6c:	2b49      	cmp	r3, #73	; 0x49
 8007c6e:	d024      	beq.n	8007cba <_strtod_l+0x35a>
 8007c70:	2b4e      	cmp	r3, #78	; 0x4e
 8007c72:	f47f aed3 	bne.w	8007a1c <_strtod_l+0xbc>
 8007c76:	499e      	ldr	r1, [pc, #632]	; (8007ef0 <_strtod_l+0x590>)
 8007c78:	a81d      	add	r0, sp, #116	; 0x74
 8007c7a:	f001 fe41 	bl	8009900 <__match>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f43f aecc 	beq.w	8007a1c <_strtod_l+0xbc>
 8007c84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b28      	cmp	r3, #40	; 0x28
 8007c8a:	d12d      	bne.n	8007ce8 <_strtod_l+0x388>
 8007c8c:	4999      	ldr	r1, [pc, #612]	; (8007ef4 <_strtod_l+0x594>)
 8007c8e:	aa20      	add	r2, sp, #128	; 0x80
 8007c90:	a81d      	add	r0, sp, #116	; 0x74
 8007c92:	f001 fe49 	bl	8009928 <__hexnan>
 8007c96:	2805      	cmp	r0, #5
 8007c98:	d126      	bne.n	8007ce8 <_strtod_l+0x388>
 8007c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c9c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007ca0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ca4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ca8:	e69c      	b.n	80079e4 <_strtod_l+0x84>
 8007caa:	210a      	movs	r1, #10
 8007cac:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007cb0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007cb4:	e7b9      	b.n	8007c2a <_strtod_l+0x2ca>
 8007cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8007cb8:	e7db      	b.n	8007c72 <_strtod_l+0x312>
 8007cba:	498f      	ldr	r1, [pc, #572]	; (8007ef8 <_strtod_l+0x598>)
 8007cbc:	a81d      	add	r0, sp, #116	; 0x74
 8007cbe:	f001 fe1f 	bl	8009900 <__match>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f43f aeaa 	beq.w	8007a1c <_strtod_l+0xbc>
 8007cc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cca:	498c      	ldr	r1, [pc, #560]	; (8007efc <_strtod_l+0x59c>)
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	a81d      	add	r0, sp, #116	; 0x74
 8007cd0:	931d      	str	r3, [sp, #116]	; 0x74
 8007cd2:	f001 fe15 	bl	8009900 <__match>
 8007cd6:	b910      	cbnz	r0, 8007cde <_strtod_l+0x37e>
 8007cd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cda:	3301      	adds	r3, #1
 8007cdc:	931d      	str	r3, [sp, #116]	; 0x74
 8007cde:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007f0c <_strtod_l+0x5ac>
 8007ce2:	f04f 0a00 	mov.w	sl, #0
 8007ce6:	e67d      	b.n	80079e4 <_strtod_l+0x84>
 8007ce8:	4885      	ldr	r0, [pc, #532]	; (8007f00 <_strtod_l+0x5a0>)
 8007cea:	f002 fdb5 	bl	800a858 <nan>
 8007cee:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007cf2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007cf6:	e675      	b.n	80079e4 <_strtod_l+0x84>
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cfc:	1af3      	subs	r3, r6, r3
 8007cfe:	2f00      	cmp	r7, #0
 8007d00:	bf08      	it	eq
 8007d02:	462f      	moveq	r7, r5
 8007d04:	2d10      	cmp	r5, #16
 8007d06:	9308      	str	r3, [sp, #32]
 8007d08:	46a8      	mov	r8, r5
 8007d0a:	bfa8      	it	ge
 8007d0c:	f04f 0810 	movge.w	r8, #16
 8007d10:	f7f8 fbf8 	bl	8000504 <__aeabi_ui2d>
 8007d14:	2d09      	cmp	r5, #9
 8007d16:	4682      	mov	sl, r0
 8007d18:	468b      	mov	fp, r1
 8007d1a:	dd13      	ble.n	8007d44 <_strtod_l+0x3e4>
 8007d1c:	4b79      	ldr	r3, [pc, #484]	; (8007f04 <_strtod_l+0x5a4>)
 8007d1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d26:	f7f8 fc67 	bl	80005f8 <__aeabi_dmul>
 8007d2a:	4682      	mov	sl, r0
 8007d2c:	4648      	mov	r0, r9
 8007d2e:	468b      	mov	fp, r1
 8007d30:	f7f8 fbe8 	bl	8000504 <__aeabi_ui2d>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4650      	mov	r0, sl
 8007d3a:	4659      	mov	r1, fp
 8007d3c:	f7f8 faa6 	bl	800028c <__adddf3>
 8007d40:	4682      	mov	sl, r0
 8007d42:	468b      	mov	fp, r1
 8007d44:	2d0f      	cmp	r5, #15
 8007d46:	dc38      	bgt.n	8007dba <_strtod_l+0x45a>
 8007d48:	9b08      	ldr	r3, [sp, #32]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f43f ae4a 	beq.w	80079e4 <_strtod_l+0x84>
 8007d50:	dd24      	ble.n	8007d9c <_strtod_l+0x43c>
 8007d52:	2b16      	cmp	r3, #22
 8007d54:	dc0b      	bgt.n	8007d6e <_strtod_l+0x40e>
 8007d56:	4d6b      	ldr	r5, [pc, #428]	; (8007f04 <_strtod_l+0x5a4>)
 8007d58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007d5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007d60:	4652      	mov	r2, sl
 8007d62:	465b      	mov	r3, fp
 8007d64:	f7f8 fc48 	bl	80005f8 <__aeabi_dmul>
 8007d68:	4682      	mov	sl, r0
 8007d6a:	468b      	mov	fp, r1
 8007d6c:	e63a      	b.n	80079e4 <_strtod_l+0x84>
 8007d6e:	9a08      	ldr	r2, [sp, #32]
 8007d70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007d74:	4293      	cmp	r3, r2
 8007d76:	db20      	blt.n	8007dba <_strtod_l+0x45a>
 8007d78:	4c62      	ldr	r4, [pc, #392]	; (8007f04 <_strtod_l+0x5a4>)
 8007d7a:	f1c5 050f 	rsb	r5, r5, #15
 8007d7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d82:	4652      	mov	r2, sl
 8007d84:	465b      	mov	r3, fp
 8007d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d8a:	f7f8 fc35 	bl	80005f8 <__aeabi_dmul>
 8007d8e:	9b08      	ldr	r3, [sp, #32]
 8007d90:	1b5d      	subs	r5, r3, r5
 8007d92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d9a:	e7e3      	b.n	8007d64 <_strtod_l+0x404>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	3316      	adds	r3, #22
 8007da0:	db0b      	blt.n	8007dba <_strtod_l+0x45a>
 8007da2:	9b07      	ldr	r3, [sp, #28]
 8007da4:	4a57      	ldr	r2, [pc, #348]	; (8007f04 <_strtod_l+0x5a4>)
 8007da6:	1b9e      	subs	r6, r3, r6
 8007da8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007dac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007db0:	4650      	mov	r0, sl
 8007db2:	4659      	mov	r1, fp
 8007db4:	f7f8 fd4a 	bl	800084c <__aeabi_ddiv>
 8007db8:	e7d6      	b.n	8007d68 <_strtod_l+0x408>
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	eba5 0808 	sub.w	r8, r5, r8
 8007dc0:	4498      	add	r8, r3
 8007dc2:	f1b8 0f00 	cmp.w	r8, #0
 8007dc6:	dd71      	ble.n	8007eac <_strtod_l+0x54c>
 8007dc8:	f018 030f 	ands.w	r3, r8, #15
 8007dcc:	d00a      	beq.n	8007de4 <_strtod_l+0x484>
 8007dce:	494d      	ldr	r1, [pc, #308]	; (8007f04 <_strtod_l+0x5a4>)
 8007dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	465b      	mov	r3, fp
 8007dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ddc:	f7f8 fc0c 	bl	80005f8 <__aeabi_dmul>
 8007de0:	4682      	mov	sl, r0
 8007de2:	468b      	mov	fp, r1
 8007de4:	f038 080f 	bics.w	r8, r8, #15
 8007de8:	d04d      	beq.n	8007e86 <_strtod_l+0x526>
 8007dea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007dee:	dd22      	ble.n	8007e36 <_strtod_l+0x4d6>
 8007df0:	2500      	movs	r5, #0
 8007df2:	462e      	mov	r6, r5
 8007df4:	9509      	str	r5, [sp, #36]	; 0x24
 8007df6:	9507      	str	r5, [sp, #28]
 8007df8:	2322      	movs	r3, #34	; 0x22
 8007dfa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007f0c <_strtod_l+0x5ac>
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	f04f 0a00 	mov.w	sl, #0
 8007e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f43f adec 	beq.w	80079e4 <_strtod_l+0x84>
 8007e0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f001 fe92 	bl	8009b38 <_Bfree>
 8007e14:	9907      	ldr	r1, [sp, #28]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f001 fe8e 	bl	8009b38 <_Bfree>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f001 fe8a 	bl	8009b38 <_Bfree>
 8007e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e26:	4620      	mov	r0, r4
 8007e28:	f001 fe86 	bl	8009b38 <_Bfree>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f001 fe82 	bl	8009b38 <_Bfree>
 8007e34:	e5d6      	b.n	80079e4 <_strtod_l+0x84>
 8007e36:	2300      	movs	r3, #0
 8007e38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007e3c:	4650      	mov	r0, sl
 8007e3e:	4659      	mov	r1, fp
 8007e40:	4699      	mov	r9, r3
 8007e42:	f1b8 0f01 	cmp.w	r8, #1
 8007e46:	dc21      	bgt.n	8007e8c <_strtod_l+0x52c>
 8007e48:	b10b      	cbz	r3, 8007e4e <_strtod_l+0x4ee>
 8007e4a:	4682      	mov	sl, r0
 8007e4c:	468b      	mov	fp, r1
 8007e4e:	4b2e      	ldr	r3, [pc, #184]	; (8007f08 <_strtod_l+0x5a8>)
 8007e50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007e54:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007e58:	4652      	mov	r2, sl
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007e60:	f7f8 fbca 	bl	80005f8 <__aeabi_dmul>
 8007e64:	4b29      	ldr	r3, [pc, #164]	; (8007f0c <_strtod_l+0x5ac>)
 8007e66:	460a      	mov	r2, r1
 8007e68:	400b      	ands	r3, r1
 8007e6a:	4929      	ldr	r1, [pc, #164]	; (8007f10 <_strtod_l+0x5b0>)
 8007e6c:	428b      	cmp	r3, r1
 8007e6e:	4682      	mov	sl, r0
 8007e70:	d8be      	bhi.n	8007df0 <_strtod_l+0x490>
 8007e72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e76:	428b      	cmp	r3, r1
 8007e78:	bf86      	itte	hi
 8007e7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007f14 <_strtod_l+0x5b4>
 8007e7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007e86:	2300      	movs	r3, #0
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	e081      	b.n	8007f90 <_strtod_l+0x630>
 8007e8c:	f018 0f01 	tst.w	r8, #1
 8007e90:	d007      	beq.n	8007ea2 <_strtod_l+0x542>
 8007e92:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <_strtod_l+0x5a8>)
 8007e94:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f7f8 fbac 	bl	80005f8 <__aeabi_dmul>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f109 0901 	add.w	r9, r9, #1
 8007ea6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007eaa:	e7ca      	b.n	8007e42 <_strtod_l+0x4e2>
 8007eac:	d0eb      	beq.n	8007e86 <_strtod_l+0x526>
 8007eae:	f1c8 0800 	rsb	r8, r8, #0
 8007eb2:	f018 020f 	ands.w	r2, r8, #15
 8007eb6:	d00a      	beq.n	8007ece <_strtod_l+0x56e>
 8007eb8:	4b12      	ldr	r3, [pc, #72]	; (8007f04 <_strtod_l+0x5a4>)
 8007eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fcc1 	bl	800084c <__aeabi_ddiv>
 8007eca:	4682      	mov	sl, r0
 8007ecc:	468b      	mov	fp, r1
 8007ece:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ed2:	d0d8      	beq.n	8007e86 <_strtod_l+0x526>
 8007ed4:	f1b8 0f1f 	cmp.w	r8, #31
 8007ed8:	dd1e      	ble.n	8007f18 <_strtod_l+0x5b8>
 8007eda:	2500      	movs	r5, #0
 8007edc:	462e      	mov	r6, r5
 8007ede:	9509      	str	r5, [sp, #36]	; 0x24
 8007ee0:	9507      	str	r5, [sp, #28]
 8007ee2:	2322      	movs	r3, #34	; 0x22
 8007ee4:	f04f 0a00 	mov.w	sl, #0
 8007ee8:	f04f 0b00 	mov.w	fp, #0
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	e789      	b.n	8007e04 <_strtod_l+0x4a4>
 8007ef0:	0800b6c5 	.word	0x0800b6c5
 8007ef4:	0800b708 	.word	0x0800b708
 8007ef8:	0800b6bd 	.word	0x0800b6bd
 8007efc:	0800b84c 	.word	0x0800b84c
 8007f00:	0800bb08 	.word	0x0800bb08
 8007f04:	0800b9e8 	.word	0x0800b9e8
 8007f08:	0800b9c0 	.word	0x0800b9c0
 8007f0c:	7ff00000 	.word	0x7ff00000
 8007f10:	7ca00000 	.word	0x7ca00000
 8007f14:	7fefffff 	.word	0x7fefffff
 8007f18:	f018 0310 	ands.w	r3, r8, #16
 8007f1c:	bf18      	it	ne
 8007f1e:	236a      	movne	r3, #106	; 0x6a
 8007f20:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80082d8 <_strtod_l+0x978>
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	4650      	mov	r0, sl
 8007f28:	4659      	mov	r1, fp
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f018 0f01 	tst.w	r8, #1
 8007f30:	d004      	beq.n	8007f3c <_strtod_l+0x5dc>
 8007f32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007f36:	f7f8 fb5f 	bl	80005f8 <__aeabi_dmul>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007f40:	f109 0908 	add.w	r9, r9, #8
 8007f44:	d1f2      	bne.n	8007f2c <_strtod_l+0x5cc>
 8007f46:	b10b      	cbz	r3, 8007f4c <_strtod_l+0x5ec>
 8007f48:	4682      	mov	sl, r0
 8007f4a:	468b      	mov	fp, r1
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	b1bb      	cbz	r3, 8007f80 <_strtod_l+0x620>
 8007f50:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007f54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	4659      	mov	r1, fp
 8007f5c:	dd10      	ble.n	8007f80 <_strtod_l+0x620>
 8007f5e:	2b1f      	cmp	r3, #31
 8007f60:	f340 8128 	ble.w	80081b4 <_strtod_l+0x854>
 8007f64:	2b34      	cmp	r3, #52	; 0x34
 8007f66:	bfde      	ittt	le
 8007f68:	3b20      	suble	r3, #32
 8007f6a:	f04f 32ff 	movle.w	r2, #4294967295
 8007f6e:	fa02 f303 	lslle.w	r3, r2, r3
 8007f72:	f04f 0a00 	mov.w	sl, #0
 8007f76:	bfcc      	ite	gt
 8007f78:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f7c:	ea03 0b01 	andle.w	fp, r3, r1
 8007f80:	2200      	movs	r2, #0
 8007f82:	2300      	movs	r3, #0
 8007f84:	4650      	mov	r0, sl
 8007f86:	4659      	mov	r1, fp
 8007f88:	f7f8 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1a4      	bne.n	8007eda <_strtod_l+0x57a>
 8007f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f96:	462b      	mov	r3, r5
 8007f98:	463a      	mov	r2, r7
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f001 fe38 	bl	8009c10 <__s2b>
 8007fa0:	9009      	str	r0, [sp, #36]	; 0x24
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	f43f af24 	beq.w	8007df0 <_strtod_l+0x490>
 8007fa8:	9b07      	ldr	r3, [sp, #28]
 8007faa:	1b9e      	subs	r6, r3, r6
 8007fac:	9b08      	ldr	r3, [sp, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb4      	ite	lt
 8007fb2:	4633      	movlt	r3, r6
 8007fb4:	2300      	movge	r3, #0
 8007fb6:	9310      	str	r3, [sp, #64]	; 0x40
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	2500      	movs	r5, #0
 8007fbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007fc0:	9318      	str	r3, [sp, #96]	; 0x60
 8007fc2:	462e      	mov	r6, r5
 8007fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	f001 fd75 	bl	8009ab8 <_Balloc>
 8007fce:	9007      	str	r0, [sp, #28]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f43f af11 	beq.w	8007df8 <_strtod_l+0x498>
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	3202      	adds	r2, #2
 8007fdc:	f103 010c 	add.w	r1, r3, #12
 8007fe0:	0092      	lsls	r2, r2, #2
 8007fe2:	300c      	adds	r0, #12
 8007fe4:	f001 fd5a 	bl	8009a9c <memcpy>
 8007fe8:	ec4b ab10 	vmov	d0, sl, fp
 8007fec:	aa20      	add	r2, sp, #128	; 0x80
 8007fee:	a91f      	add	r1, sp, #124	; 0x7c
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007ff6:	f002 f947 	bl	800a288 <__d2b>
 8007ffa:	901e      	str	r0, [sp, #120]	; 0x78
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f aefb 	beq.w	8007df8 <_strtod_l+0x498>
 8008002:	2101      	movs	r1, #1
 8008004:	4620      	mov	r0, r4
 8008006:	f001 fe9d 	bl	8009d44 <__i2b>
 800800a:	4606      	mov	r6, r0
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f aef3 	beq.w	8007df8 <_strtod_l+0x498>
 8008012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008014:	9904      	ldr	r1, [sp, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfab      	itete	ge
 800801a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800801c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800801e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008020:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008024:	bfac      	ite	ge
 8008026:	eb03 0902 	addge.w	r9, r3, r2
 800802a:	1ad7      	sublt	r7, r2, r3
 800802c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800802e:	eba3 0801 	sub.w	r8, r3, r1
 8008032:	4490      	add	r8, r2
 8008034:	4ba3      	ldr	r3, [pc, #652]	; (80082c4 <_strtod_l+0x964>)
 8008036:	f108 38ff 	add.w	r8, r8, #4294967295
 800803a:	4598      	cmp	r8, r3
 800803c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008040:	f280 80cc 	bge.w	80081dc <_strtod_l+0x87c>
 8008044:	eba3 0308 	sub.w	r3, r3, r8
 8008048:	2b1f      	cmp	r3, #31
 800804a:	eba2 0203 	sub.w	r2, r2, r3
 800804e:	f04f 0101 	mov.w	r1, #1
 8008052:	f300 80b6 	bgt.w	80081c2 <_strtod_l+0x862>
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	9311      	str	r3, [sp, #68]	; 0x44
 800805c:	2300      	movs	r3, #0
 800805e:	930c      	str	r3, [sp, #48]	; 0x30
 8008060:	eb09 0802 	add.w	r8, r9, r2
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	45c1      	cmp	r9, r8
 8008068:	4417      	add	r7, r2
 800806a:	441f      	add	r7, r3
 800806c:	464b      	mov	r3, r9
 800806e:	bfa8      	it	ge
 8008070:	4643      	movge	r3, r8
 8008072:	42bb      	cmp	r3, r7
 8008074:	bfa8      	it	ge
 8008076:	463b      	movge	r3, r7
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfc2      	ittt	gt
 800807c:	eba8 0803 	subgt.w	r8, r8, r3
 8008080:	1aff      	subgt	r7, r7, r3
 8008082:	eba9 0903 	subgt.w	r9, r9, r3
 8008086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	dd17      	ble.n	80080bc <_strtod_l+0x75c>
 800808c:	4631      	mov	r1, r6
 800808e:	461a      	mov	r2, r3
 8008090:	4620      	mov	r0, r4
 8008092:	f001 ff13 	bl	8009ebc <__pow5mult>
 8008096:	4606      	mov	r6, r0
 8008098:	2800      	cmp	r0, #0
 800809a:	f43f aead 	beq.w	8007df8 <_strtod_l+0x498>
 800809e:	4601      	mov	r1, r0
 80080a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80080a2:	4620      	mov	r0, r4
 80080a4:	f001 fe64 	bl	8009d70 <__multiply>
 80080a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80080aa:	2800      	cmp	r0, #0
 80080ac:	f43f aea4 	beq.w	8007df8 <_strtod_l+0x498>
 80080b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80080b2:	4620      	mov	r0, r4
 80080b4:	f001 fd40 	bl	8009b38 <_Bfree>
 80080b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080ba:	931e      	str	r3, [sp, #120]	; 0x78
 80080bc:	f1b8 0f00 	cmp.w	r8, #0
 80080c0:	f300 8091 	bgt.w	80081e6 <_strtod_l+0x886>
 80080c4:	9b08      	ldr	r3, [sp, #32]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dd08      	ble.n	80080dc <_strtod_l+0x77c>
 80080ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080cc:	9907      	ldr	r1, [sp, #28]
 80080ce:	4620      	mov	r0, r4
 80080d0:	f001 fef4 	bl	8009ebc <__pow5mult>
 80080d4:	9007      	str	r0, [sp, #28]
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f43f ae8e 	beq.w	8007df8 <_strtod_l+0x498>
 80080dc:	2f00      	cmp	r7, #0
 80080de:	dd08      	ble.n	80080f2 <_strtod_l+0x792>
 80080e0:	9907      	ldr	r1, [sp, #28]
 80080e2:	463a      	mov	r2, r7
 80080e4:	4620      	mov	r0, r4
 80080e6:	f001 ff43 	bl	8009f70 <__lshift>
 80080ea:	9007      	str	r0, [sp, #28]
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f43f ae83 	beq.w	8007df8 <_strtod_l+0x498>
 80080f2:	f1b9 0f00 	cmp.w	r9, #0
 80080f6:	dd08      	ble.n	800810a <_strtod_l+0x7aa>
 80080f8:	4631      	mov	r1, r6
 80080fa:	464a      	mov	r2, r9
 80080fc:	4620      	mov	r0, r4
 80080fe:	f001 ff37 	bl	8009f70 <__lshift>
 8008102:	4606      	mov	r6, r0
 8008104:	2800      	cmp	r0, #0
 8008106:	f43f ae77 	beq.w	8007df8 <_strtod_l+0x498>
 800810a:	9a07      	ldr	r2, [sp, #28]
 800810c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800810e:	4620      	mov	r0, r4
 8008110:	f001 ffb6 	bl	800a080 <__mdiff>
 8008114:	4605      	mov	r5, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f ae6e 	beq.w	8007df8 <_strtod_l+0x498>
 800811c:	68c3      	ldr	r3, [r0, #12]
 800811e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008120:	2300      	movs	r3, #0
 8008122:	60c3      	str	r3, [r0, #12]
 8008124:	4631      	mov	r1, r6
 8008126:	f001 ff8f 	bl	800a048 <__mcmp>
 800812a:	2800      	cmp	r0, #0
 800812c:	da65      	bge.n	80081fa <_strtod_l+0x89a>
 800812e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008130:	ea53 030a 	orrs.w	r3, r3, sl
 8008134:	f040 8087 	bne.w	8008246 <_strtod_l+0x8e6>
 8008138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800813c:	2b00      	cmp	r3, #0
 800813e:	f040 8082 	bne.w	8008246 <_strtod_l+0x8e6>
 8008142:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008146:	0d1b      	lsrs	r3, r3, #20
 8008148:	051b      	lsls	r3, r3, #20
 800814a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800814e:	d97a      	bls.n	8008246 <_strtod_l+0x8e6>
 8008150:	696b      	ldr	r3, [r5, #20]
 8008152:	b913      	cbnz	r3, 800815a <_strtod_l+0x7fa>
 8008154:	692b      	ldr	r3, [r5, #16]
 8008156:	2b01      	cmp	r3, #1
 8008158:	dd75      	ble.n	8008246 <_strtod_l+0x8e6>
 800815a:	4629      	mov	r1, r5
 800815c:	2201      	movs	r2, #1
 800815e:	4620      	mov	r0, r4
 8008160:	f001 ff06 	bl	8009f70 <__lshift>
 8008164:	4631      	mov	r1, r6
 8008166:	4605      	mov	r5, r0
 8008168:	f001 ff6e 	bl	800a048 <__mcmp>
 800816c:	2800      	cmp	r0, #0
 800816e:	dd6a      	ble.n	8008246 <_strtod_l+0x8e6>
 8008170:	9904      	ldr	r1, [sp, #16]
 8008172:	4a55      	ldr	r2, [pc, #340]	; (80082c8 <_strtod_l+0x968>)
 8008174:	465b      	mov	r3, fp
 8008176:	2900      	cmp	r1, #0
 8008178:	f000 8085 	beq.w	8008286 <_strtod_l+0x926>
 800817c:	ea02 010b 	and.w	r1, r2, fp
 8008180:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008184:	dc7f      	bgt.n	8008286 <_strtod_l+0x926>
 8008186:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800818a:	f77f aeaa 	ble.w	8007ee2 <_strtod_l+0x582>
 800818e:	4a4f      	ldr	r2, [pc, #316]	; (80082cc <_strtod_l+0x96c>)
 8008190:	2300      	movs	r3, #0
 8008192:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008196:	4650      	mov	r0, sl
 8008198:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800819c:	4659      	mov	r1, fp
 800819e:	f7f8 fa2b 	bl	80005f8 <__aeabi_dmul>
 80081a2:	460b      	mov	r3, r1
 80081a4:	4303      	orrs	r3, r0
 80081a6:	bf08      	it	eq
 80081a8:	2322      	moveq	r3, #34	; 0x22
 80081aa:	4682      	mov	sl, r0
 80081ac:	468b      	mov	fp, r1
 80081ae:	bf08      	it	eq
 80081b0:	6023      	streq	r3, [r4, #0]
 80081b2:	e62b      	b.n	8007e0c <_strtod_l+0x4ac>
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	ea03 0a0a 	and.w	sl, r3, sl
 80081c0:	e6de      	b.n	8007f80 <_strtod_l+0x620>
 80081c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80081c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80081ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80081ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80081d2:	fa01 f308 	lsl.w	r3, r1, r8
 80081d6:	930c      	str	r3, [sp, #48]	; 0x30
 80081d8:	9111      	str	r1, [sp, #68]	; 0x44
 80081da:	e741      	b.n	8008060 <_strtod_l+0x700>
 80081dc:	2300      	movs	r3, #0
 80081de:	930c      	str	r3, [sp, #48]	; 0x30
 80081e0:	2301      	movs	r3, #1
 80081e2:	9311      	str	r3, [sp, #68]	; 0x44
 80081e4:	e73c      	b.n	8008060 <_strtod_l+0x700>
 80081e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80081e8:	4642      	mov	r2, r8
 80081ea:	4620      	mov	r0, r4
 80081ec:	f001 fec0 	bl	8009f70 <__lshift>
 80081f0:	901e      	str	r0, [sp, #120]	; 0x78
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f47f af66 	bne.w	80080c4 <_strtod_l+0x764>
 80081f8:	e5fe      	b.n	8007df8 <_strtod_l+0x498>
 80081fa:	465f      	mov	r7, fp
 80081fc:	d16e      	bne.n	80082dc <_strtod_l+0x97c>
 80081fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008204:	b342      	cbz	r2, 8008258 <_strtod_l+0x8f8>
 8008206:	4a32      	ldr	r2, [pc, #200]	; (80082d0 <_strtod_l+0x970>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d128      	bne.n	800825e <_strtod_l+0x8fe>
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	4650      	mov	r0, sl
 8008210:	b1eb      	cbz	r3, 800824e <_strtod_l+0x8ee>
 8008212:	4a2d      	ldr	r2, [pc, #180]	; (80082c8 <_strtod_l+0x968>)
 8008214:	403a      	ands	r2, r7
 8008216:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800821a:	f04f 31ff 	mov.w	r1, #4294967295
 800821e:	d819      	bhi.n	8008254 <_strtod_l+0x8f4>
 8008220:	0d12      	lsrs	r2, r2, #20
 8008222:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
 800822a:	4298      	cmp	r0, r3
 800822c:	d117      	bne.n	800825e <_strtod_l+0x8fe>
 800822e:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <_strtod_l+0x974>)
 8008230:	429f      	cmp	r7, r3
 8008232:	d102      	bne.n	800823a <_strtod_l+0x8da>
 8008234:	3001      	adds	r0, #1
 8008236:	f43f addf 	beq.w	8007df8 <_strtod_l+0x498>
 800823a:	4b23      	ldr	r3, [pc, #140]	; (80082c8 <_strtod_l+0x968>)
 800823c:	403b      	ands	r3, r7
 800823e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008242:	f04f 0a00 	mov.w	sl, #0
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1a0      	bne.n	800818e <_strtod_l+0x82e>
 800824c:	e5de      	b.n	8007e0c <_strtod_l+0x4ac>
 800824e:	f04f 33ff 	mov.w	r3, #4294967295
 8008252:	e7ea      	b.n	800822a <_strtod_l+0x8ca>
 8008254:	460b      	mov	r3, r1
 8008256:	e7e8      	b.n	800822a <_strtod_l+0x8ca>
 8008258:	ea53 030a 	orrs.w	r3, r3, sl
 800825c:	d088      	beq.n	8008170 <_strtod_l+0x810>
 800825e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008260:	b1db      	cbz	r3, 800829a <_strtod_l+0x93a>
 8008262:	423b      	tst	r3, r7
 8008264:	d0ef      	beq.n	8008246 <_strtod_l+0x8e6>
 8008266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008268:	9a04      	ldr	r2, [sp, #16]
 800826a:	4650      	mov	r0, sl
 800826c:	4659      	mov	r1, fp
 800826e:	b1c3      	cbz	r3, 80082a2 <_strtod_l+0x942>
 8008270:	f7ff fb5a 	bl	8007928 <sulp>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800827c:	f7f8 f806 	bl	800028c <__adddf3>
 8008280:	4682      	mov	sl, r0
 8008282:	468b      	mov	fp, r1
 8008284:	e7df      	b.n	8008246 <_strtod_l+0x8e6>
 8008286:	4013      	ands	r3, r2
 8008288:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800828c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008290:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008294:	f04f 3aff 	mov.w	sl, #4294967295
 8008298:	e7d5      	b.n	8008246 <_strtod_l+0x8e6>
 800829a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800829c:	ea13 0f0a 	tst.w	r3, sl
 80082a0:	e7e0      	b.n	8008264 <_strtod_l+0x904>
 80082a2:	f7ff fb41 	bl	8007928 <sulp>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082ae:	f7f7 ffeb 	bl	8000288 <__aeabi_dsub>
 80082b2:	2200      	movs	r2, #0
 80082b4:	2300      	movs	r3, #0
 80082b6:	4682      	mov	sl, r0
 80082b8:	468b      	mov	fp, r1
 80082ba:	f7f8 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0c1      	beq.n	8008246 <_strtod_l+0x8e6>
 80082c2:	e60e      	b.n	8007ee2 <_strtod_l+0x582>
 80082c4:	fffffc02 	.word	0xfffffc02
 80082c8:	7ff00000 	.word	0x7ff00000
 80082cc:	39500000 	.word	0x39500000
 80082d0:	000fffff 	.word	0x000fffff
 80082d4:	7fefffff 	.word	0x7fefffff
 80082d8:	0800b720 	.word	0x0800b720
 80082dc:	4631      	mov	r1, r6
 80082de:	4628      	mov	r0, r5
 80082e0:	f002 f82e 	bl	800a340 <__ratio>
 80082e4:	ec59 8b10 	vmov	r8, r9, d0
 80082e8:	ee10 0a10 	vmov	r0, s0
 80082ec:	2200      	movs	r2, #0
 80082ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082f2:	4649      	mov	r1, r9
 80082f4:	f7f8 fbfc 	bl	8000af0 <__aeabi_dcmple>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d07c      	beq.n	80083f6 <_strtod_l+0xa96>
 80082fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d04c      	beq.n	800839c <_strtod_l+0xa3c>
 8008302:	4b95      	ldr	r3, [pc, #596]	; (8008558 <_strtod_l+0xbf8>)
 8008304:	2200      	movs	r2, #0
 8008306:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800830a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008558 <_strtod_l+0xbf8>
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	4b92      	ldr	r3, [pc, #584]	; (800855c <_strtod_l+0xbfc>)
 8008314:	403b      	ands	r3, r7
 8008316:	9311      	str	r3, [sp, #68]	; 0x44
 8008318:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800831a:	4b91      	ldr	r3, [pc, #580]	; (8008560 <_strtod_l+0xc00>)
 800831c:	429a      	cmp	r2, r3
 800831e:	f040 80b2 	bne.w	8008486 <_strtod_l+0xb26>
 8008322:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800832a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800832e:	ec4b ab10 	vmov	d0, sl, fp
 8008332:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008336:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800833a:	f001 ff29 	bl	800a190 <__ulp>
 800833e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008342:	ec53 2b10 	vmov	r2, r3, d0
 8008346:	f7f8 f957 	bl	80005f8 <__aeabi_dmul>
 800834a:	4652      	mov	r2, sl
 800834c:	465b      	mov	r3, fp
 800834e:	f7f7 ff9d 	bl	800028c <__adddf3>
 8008352:	460b      	mov	r3, r1
 8008354:	4981      	ldr	r1, [pc, #516]	; (800855c <_strtod_l+0xbfc>)
 8008356:	4a83      	ldr	r2, [pc, #524]	; (8008564 <_strtod_l+0xc04>)
 8008358:	4019      	ands	r1, r3
 800835a:	4291      	cmp	r1, r2
 800835c:	4682      	mov	sl, r0
 800835e:	d95e      	bls.n	800841e <_strtod_l+0xabe>
 8008360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008362:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008366:	4293      	cmp	r3, r2
 8008368:	d103      	bne.n	8008372 <_strtod_l+0xa12>
 800836a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800836c:	3301      	adds	r3, #1
 800836e:	f43f ad43 	beq.w	8007df8 <_strtod_l+0x498>
 8008372:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008570 <_strtod_l+0xc10>
 8008376:	f04f 3aff 	mov.w	sl, #4294967295
 800837a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800837c:	4620      	mov	r0, r4
 800837e:	f001 fbdb 	bl	8009b38 <_Bfree>
 8008382:	9907      	ldr	r1, [sp, #28]
 8008384:	4620      	mov	r0, r4
 8008386:	f001 fbd7 	bl	8009b38 <_Bfree>
 800838a:	4631      	mov	r1, r6
 800838c:	4620      	mov	r0, r4
 800838e:	f001 fbd3 	bl	8009b38 <_Bfree>
 8008392:	4629      	mov	r1, r5
 8008394:	4620      	mov	r0, r4
 8008396:	f001 fbcf 	bl	8009b38 <_Bfree>
 800839a:	e613      	b.n	8007fc4 <_strtod_l+0x664>
 800839c:	f1ba 0f00 	cmp.w	sl, #0
 80083a0:	d11b      	bne.n	80083da <_strtod_l+0xa7a>
 80083a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083a6:	b9f3      	cbnz	r3, 80083e6 <_strtod_l+0xa86>
 80083a8:	4b6b      	ldr	r3, [pc, #428]	; (8008558 <_strtod_l+0xbf8>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	4640      	mov	r0, r8
 80083ae:	4649      	mov	r1, r9
 80083b0:	f7f8 fb94 	bl	8000adc <__aeabi_dcmplt>
 80083b4:	b9d0      	cbnz	r0, 80083ec <_strtod_l+0xa8c>
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	4b6b      	ldr	r3, [pc, #428]	; (8008568 <_strtod_l+0xc08>)
 80083bc:	2200      	movs	r2, #0
 80083be:	f7f8 f91b 	bl	80005f8 <__aeabi_dmul>
 80083c2:	4680      	mov	r8, r0
 80083c4:	4689      	mov	r9, r1
 80083c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80083ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80083d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80083d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80083d8:	e79b      	b.n	8008312 <_strtod_l+0x9b2>
 80083da:	f1ba 0f01 	cmp.w	sl, #1
 80083de:	d102      	bne.n	80083e6 <_strtod_l+0xa86>
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	f43f ad7e 	beq.w	8007ee2 <_strtod_l+0x582>
 80083e6:	4b61      	ldr	r3, [pc, #388]	; (800856c <_strtod_l+0xc0c>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	e78c      	b.n	8008306 <_strtod_l+0x9a6>
 80083ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008568 <_strtod_l+0xc08>
 80083f0:	f04f 0800 	mov.w	r8, #0
 80083f4:	e7e7      	b.n	80083c6 <_strtod_l+0xa66>
 80083f6:	4b5c      	ldr	r3, [pc, #368]	; (8008568 <_strtod_l+0xc08>)
 80083f8:	4640      	mov	r0, r8
 80083fa:	4649      	mov	r1, r9
 80083fc:	2200      	movs	r2, #0
 80083fe:	f7f8 f8fb 	bl	80005f8 <__aeabi_dmul>
 8008402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008404:	4680      	mov	r8, r0
 8008406:	4689      	mov	r9, r1
 8008408:	b933      	cbnz	r3, 8008418 <_strtod_l+0xab8>
 800840a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800840e:	9012      	str	r0, [sp, #72]	; 0x48
 8008410:	9313      	str	r3, [sp, #76]	; 0x4c
 8008412:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008416:	e7dd      	b.n	80083d4 <_strtod_l+0xa74>
 8008418:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800841c:	e7f9      	b.n	8008412 <_strtod_l+0xab2>
 800841e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1a8      	bne.n	800837a <_strtod_l+0xa1a>
 8008428:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800842c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800842e:	0d1b      	lsrs	r3, r3, #20
 8008430:	051b      	lsls	r3, r3, #20
 8008432:	429a      	cmp	r2, r3
 8008434:	d1a1      	bne.n	800837a <_strtod_l+0xa1a>
 8008436:	4640      	mov	r0, r8
 8008438:	4649      	mov	r1, r9
 800843a:	f7f8 fc3d 	bl	8000cb8 <__aeabi_d2lz>
 800843e:	f7f8 f8ad 	bl	800059c <__aeabi_l2d>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4640      	mov	r0, r8
 8008448:	4649      	mov	r1, r9
 800844a:	f7f7 ff1d 	bl	8000288 <__aeabi_dsub>
 800844e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008454:	ea43 030a 	orr.w	r3, r3, sl
 8008458:	4313      	orrs	r3, r2
 800845a:	4680      	mov	r8, r0
 800845c:	4689      	mov	r9, r1
 800845e:	d053      	beq.n	8008508 <_strtod_l+0xba8>
 8008460:	a335      	add	r3, pc, #212	; (adr r3, 8008538 <_strtod_l+0xbd8>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f8 fb39 	bl	8000adc <__aeabi_dcmplt>
 800846a:	2800      	cmp	r0, #0
 800846c:	f47f acce 	bne.w	8007e0c <_strtod_l+0x4ac>
 8008470:	a333      	add	r3, pc, #204	; (adr r3, 8008540 <_strtod_l+0xbe0>)
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	f7f8 fb4d 	bl	8000b18 <__aeabi_dcmpgt>
 800847e:	2800      	cmp	r0, #0
 8008480:	f43f af7b 	beq.w	800837a <_strtod_l+0xa1a>
 8008484:	e4c2      	b.n	8007e0c <_strtod_l+0x4ac>
 8008486:	9b04      	ldr	r3, [sp, #16]
 8008488:	b333      	cbz	r3, 80084d8 <_strtod_l+0xb78>
 800848a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800848c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008490:	d822      	bhi.n	80084d8 <_strtod_l+0xb78>
 8008492:	a32d      	add	r3, pc, #180	; (adr r3, 8008548 <_strtod_l+0xbe8>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	4640      	mov	r0, r8
 800849a:	4649      	mov	r1, r9
 800849c:	f7f8 fb28 	bl	8000af0 <__aeabi_dcmple>
 80084a0:	b1a0      	cbz	r0, 80084cc <_strtod_l+0xb6c>
 80084a2:	4649      	mov	r1, r9
 80084a4:	4640      	mov	r0, r8
 80084a6:	f7f8 fb7f 	bl	8000ba8 <__aeabi_d2uiz>
 80084aa:	2801      	cmp	r0, #1
 80084ac:	bf38      	it	cc
 80084ae:	2001      	movcc	r0, #1
 80084b0:	f7f8 f828 	bl	8000504 <__aeabi_ui2d>
 80084b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	bb13      	cbnz	r3, 8008502 <_strtod_l+0xba2>
 80084bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084c0:	9014      	str	r0, [sp, #80]	; 0x50
 80084c2:	9315      	str	r3, [sp, #84]	; 0x54
 80084c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80084c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80084cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	930d      	str	r3, [sp, #52]	; 0x34
 80084d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80084e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084e4:	f001 fe54 	bl	800a190 <__ulp>
 80084e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ec:	ec53 2b10 	vmov	r2, r3, d0
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084f8:	f7f7 fec8 	bl	800028c <__adddf3>
 80084fc:	4682      	mov	sl, r0
 80084fe:	468b      	mov	fp, r1
 8008500:	e78f      	b.n	8008422 <_strtod_l+0xac2>
 8008502:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008506:	e7dd      	b.n	80084c4 <_strtod_l+0xb64>
 8008508:	a311      	add	r3, pc, #68	; (adr r3, 8008550 <_strtod_l+0xbf0>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f8 fae5 	bl	8000adc <__aeabi_dcmplt>
 8008512:	e7b4      	b.n	800847e <_strtod_l+0xb1e>
 8008514:	2300      	movs	r3, #0
 8008516:	930e      	str	r3, [sp, #56]	; 0x38
 8008518:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800851a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	f7ff ba65 	b.w	80079ec <_strtod_l+0x8c>
 8008522:	2b65      	cmp	r3, #101	; 0x65
 8008524:	f43f ab5d 	beq.w	8007be2 <_strtod_l+0x282>
 8008528:	2b45      	cmp	r3, #69	; 0x45
 800852a:	f43f ab5a 	beq.w	8007be2 <_strtod_l+0x282>
 800852e:	2201      	movs	r2, #1
 8008530:	f7ff bb92 	b.w	8007c58 <_strtod_l+0x2f8>
 8008534:	f3af 8000 	nop.w
 8008538:	94a03595 	.word	0x94a03595
 800853c:	3fdfffff 	.word	0x3fdfffff
 8008540:	35afe535 	.word	0x35afe535
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	ffc00000 	.word	0xffc00000
 800854c:	41dfffff 	.word	0x41dfffff
 8008550:	94a03595 	.word	0x94a03595
 8008554:	3fcfffff 	.word	0x3fcfffff
 8008558:	3ff00000 	.word	0x3ff00000
 800855c:	7ff00000 	.word	0x7ff00000
 8008560:	7fe00000 	.word	0x7fe00000
 8008564:	7c9fffff 	.word	0x7c9fffff
 8008568:	3fe00000 	.word	0x3fe00000
 800856c:	bff00000 	.word	0xbff00000
 8008570:	7fefffff 	.word	0x7fefffff

08008574 <_strtod_r>:
 8008574:	4b01      	ldr	r3, [pc, #4]	; (800857c <_strtod_r+0x8>)
 8008576:	f7ff b9f3 	b.w	8007960 <_strtod_l>
 800857a:	bf00      	nop
 800857c:	20000074 	.word	0x20000074

08008580 <_strtol_l.isra.0>:
 8008580:	2b01      	cmp	r3, #1
 8008582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008586:	d001      	beq.n	800858c <_strtol_l.isra.0+0xc>
 8008588:	2b24      	cmp	r3, #36	; 0x24
 800858a:	d906      	bls.n	800859a <_strtol_l.isra.0+0x1a>
 800858c:	f7fe fafa 	bl	8006b84 <__errno>
 8008590:	2316      	movs	r3, #22
 8008592:	6003      	str	r3, [r0, #0]
 8008594:	2000      	movs	r0, #0
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859a:	4f3a      	ldr	r7, [pc, #232]	; (8008684 <_strtol_l.isra.0+0x104>)
 800859c:	468e      	mov	lr, r1
 800859e:	4676      	mov	r6, lr
 80085a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80085a4:	5de5      	ldrb	r5, [r4, r7]
 80085a6:	f015 0508 	ands.w	r5, r5, #8
 80085aa:	d1f8      	bne.n	800859e <_strtol_l.isra.0+0x1e>
 80085ac:	2c2d      	cmp	r4, #45	; 0x2d
 80085ae:	d134      	bne.n	800861a <_strtol_l.isra.0+0x9a>
 80085b0:	f89e 4000 	ldrb.w	r4, [lr]
 80085b4:	f04f 0801 	mov.w	r8, #1
 80085b8:	f106 0e02 	add.w	lr, r6, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05c      	beq.n	800867a <_strtol_l.isra.0+0xfa>
 80085c0:	2b10      	cmp	r3, #16
 80085c2:	d10c      	bne.n	80085de <_strtol_l.isra.0+0x5e>
 80085c4:	2c30      	cmp	r4, #48	; 0x30
 80085c6:	d10a      	bne.n	80085de <_strtol_l.isra.0+0x5e>
 80085c8:	f89e 4000 	ldrb.w	r4, [lr]
 80085cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80085d0:	2c58      	cmp	r4, #88	; 0x58
 80085d2:	d14d      	bne.n	8008670 <_strtol_l.isra.0+0xf0>
 80085d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80085d8:	2310      	movs	r3, #16
 80085da:	f10e 0e02 	add.w	lr, lr, #2
 80085de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80085e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085e6:	2600      	movs	r6, #0
 80085e8:	fbbc f9f3 	udiv	r9, ip, r3
 80085ec:	4635      	mov	r5, r6
 80085ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80085f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80085f6:	2f09      	cmp	r7, #9
 80085f8:	d818      	bhi.n	800862c <_strtol_l.isra.0+0xac>
 80085fa:	463c      	mov	r4, r7
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	dd24      	ble.n	800864a <_strtol_l.isra.0+0xca>
 8008600:	2e00      	cmp	r6, #0
 8008602:	db1f      	blt.n	8008644 <_strtol_l.isra.0+0xc4>
 8008604:	45a9      	cmp	r9, r5
 8008606:	d31d      	bcc.n	8008644 <_strtol_l.isra.0+0xc4>
 8008608:	d101      	bne.n	800860e <_strtol_l.isra.0+0x8e>
 800860a:	45a2      	cmp	sl, r4
 800860c:	db1a      	blt.n	8008644 <_strtol_l.isra.0+0xc4>
 800860e:	fb05 4503 	mla	r5, r5, r3, r4
 8008612:	2601      	movs	r6, #1
 8008614:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008618:	e7eb      	b.n	80085f2 <_strtol_l.isra.0+0x72>
 800861a:	2c2b      	cmp	r4, #43	; 0x2b
 800861c:	bf08      	it	eq
 800861e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008622:	46a8      	mov	r8, r5
 8008624:	bf08      	it	eq
 8008626:	f106 0e02 	addeq.w	lr, r6, #2
 800862a:	e7c7      	b.n	80085bc <_strtol_l.isra.0+0x3c>
 800862c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008630:	2f19      	cmp	r7, #25
 8008632:	d801      	bhi.n	8008638 <_strtol_l.isra.0+0xb8>
 8008634:	3c37      	subs	r4, #55	; 0x37
 8008636:	e7e1      	b.n	80085fc <_strtol_l.isra.0+0x7c>
 8008638:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800863c:	2f19      	cmp	r7, #25
 800863e:	d804      	bhi.n	800864a <_strtol_l.isra.0+0xca>
 8008640:	3c57      	subs	r4, #87	; 0x57
 8008642:	e7db      	b.n	80085fc <_strtol_l.isra.0+0x7c>
 8008644:	f04f 36ff 	mov.w	r6, #4294967295
 8008648:	e7e4      	b.n	8008614 <_strtol_l.isra.0+0x94>
 800864a:	2e00      	cmp	r6, #0
 800864c:	da05      	bge.n	800865a <_strtol_l.isra.0+0xda>
 800864e:	2322      	movs	r3, #34	; 0x22
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	4665      	mov	r5, ip
 8008654:	b942      	cbnz	r2, 8008668 <_strtol_l.isra.0+0xe8>
 8008656:	4628      	mov	r0, r5
 8008658:	e79d      	b.n	8008596 <_strtol_l.isra.0+0x16>
 800865a:	f1b8 0f00 	cmp.w	r8, #0
 800865e:	d000      	beq.n	8008662 <_strtol_l.isra.0+0xe2>
 8008660:	426d      	negs	r5, r5
 8008662:	2a00      	cmp	r2, #0
 8008664:	d0f7      	beq.n	8008656 <_strtol_l.isra.0+0xd6>
 8008666:	b10e      	cbz	r6, 800866c <_strtol_l.isra.0+0xec>
 8008668:	f10e 31ff 	add.w	r1, lr, #4294967295
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	e7f2      	b.n	8008656 <_strtol_l.isra.0+0xd6>
 8008670:	2430      	movs	r4, #48	; 0x30
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1b3      	bne.n	80085de <_strtol_l.isra.0+0x5e>
 8008676:	2308      	movs	r3, #8
 8008678:	e7b1      	b.n	80085de <_strtol_l.isra.0+0x5e>
 800867a:	2c30      	cmp	r4, #48	; 0x30
 800867c:	d0a4      	beq.n	80085c8 <_strtol_l.isra.0+0x48>
 800867e:	230a      	movs	r3, #10
 8008680:	e7ad      	b.n	80085de <_strtol_l.isra.0+0x5e>
 8008682:	bf00      	nop
 8008684:	0800b749 	.word	0x0800b749

08008688 <_strtol_r>:
 8008688:	f7ff bf7a 	b.w	8008580 <_strtol_l.isra.0>

0800868c <quorem>:
 800868c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	6903      	ldr	r3, [r0, #16]
 8008692:	690c      	ldr	r4, [r1, #16]
 8008694:	42a3      	cmp	r3, r4
 8008696:	4607      	mov	r7, r0
 8008698:	f2c0 8081 	blt.w	800879e <quorem+0x112>
 800869c:	3c01      	subs	r4, #1
 800869e:	f101 0814 	add.w	r8, r1, #20
 80086a2:	f100 0514 	add.w	r5, r0, #20
 80086a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086b4:	3301      	adds	r3, #1
 80086b6:	429a      	cmp	r2, r3
 80086b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80086bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80086c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80086c4:	d331      	bcc.n	800872a <quorem+0x9e>
 80086c6:	f04f 0e00 	mov.w	lr, #0
 80086ca:	4640      	mov	r0, r8
 80086cc:	46ac      	mov	ip, r5
 80086ce:	46f2      	mov	sl, lr
 80086d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80086d4:	b293      	uxth	r3, r2
 80086d6:	fb06 e303 	mla	r3, r6, r3, lr
 80086da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086de:	b29b      	uxth	r3, r3
 80086e0:	ebaa 0303 	sub.w	r3, sl, r3
 80086e4:	0c12      	lsrs	r2, r2, #16
 80086e6:	f8dc a000 	ldr.w	sl, [ip]
 80086ea:	fb06 e202 	mla	r2, r6, r2, lr
 80086ee:	fa13 f38a 	uxtah	r3, r3, sl
 80086f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086f6:	fa1f fa82 	uxth.w	sl, r2
 80086fa:	f8dc 2000 	ldr.w	r2, [ip]
 80086fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008702:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800870c:	4581      	cmp	r9, r0
 800870e:	f84c 3b04 	str.w	r3, [ip], #4
 8008712:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008716:	d2db      	bcs.n	80086d0 <quorem+0x44>
 8008718:	f855 300b 	ldr.w	r3, [r5, fp]
 800871c:	b92b      	cbnz	r3, 800872a <quorem+0x9e>
 800871e:	9b01      	ldr	r3, [sp, #4]
 8008720:	3b04      	subs	r3, #4
 8008722:	429d      	cmp	r5, r3
 8008724:	461a      	mov	r2, r3
 8008726:	d32e      	bcc.n	8008786 <quorem+0xfa>
 8008728:	613c      	str	r4, [r7, #16]
 800872a:	4638      	mov	r0, r7
 800872c:	f001 fc8c 	bl	800a048 <__mcmp>
 8008730:	2800      	cmp	r0, #0
 8008732:	db24      	blt.n	800877e <quorem+0xf2>
 8008734:	3601      	adds	r6, #1
 8008736:	4628      	mov	r0, r5
 8008738:	f04f 0c00 	mov.w	ip, #0
 800873c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008740:	f8d0 e000 	ldr.w	lr, [r0]
 8008744:	b293      	uxth	r3, r2
 8008746:	ebac 0303 	sub.w	r3, ip, r3
 800874a:	0c12      	lsrs	r2, r2, #16
 800874c:	fa13 f38e 	uxtah	r3, r3, lr
 8008750:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008758:	b29b      	uxth	r3, r3
 800875a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800875e:	45c1      	cmp	r9, r8
 8008760:	f840 3b04 	str.w	r3, [r0], #4
 8008764:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008768:	d2e8      	bcs.n	800873c <quorem+0xb0>
 800876a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800876e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008772:	b922      	cbnz	r2, 800877e <quorem+0xf2>
 8008774:	3b04      	subs	r3, #4
 8008776:	429d      	cmp	r5, r3
 8008778:	461a      	mov	r2, r3
 800877a:	d30a      	bcc.n	8008792 <quorem+0x106>
 800877c:	613c      	str	r4, [r7, #16]
 800877e:	4630      	mov	r0, r6
 8008780:	b003      	add	sp, #12
 8008782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	3b04      	subs	r3, #4
 800878a:	2a00      	cmp	r2, #0
 800878c:	d1cc      	bne.n	8008728 <quorem+0x9c>
 800878e:	3c01      	subs	r4, #1
 8008790:	e7c7      	b.n	8008722 <quorem+0x96>
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	3b04      	subs	r3, #4
 8008796:	2a00      	cmp	r2, #0
 8008798:	d1f0      	bne.n	800877c <quorem+0xf0>
 800879a:	3c01      	subs	r4, #1
 800879c:	e7eb      	b.n	8008776 <quorem+0xea>
 800879e:	2000      	movs	r0, #0
 80087a0:	e7ee      	b.n	8008780 <quorem+0xf4>
 80087a2:	0000      	movs	r0, r0
 80087a4:	0000      	movs	r0, r0
	...

080087a8 <_dtoa_r>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	ed2d 8b02 	vpush	{d8}
 80087b0:	ec57 6b10 	vmov	r6, r7, d0
 80087b4:	b095      	sub	sp, #84	; 0x54
 80087b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80087bc:	9105      	str	r1, [sp, #20]
 80087be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80087c2:	4604      	mov	r4, r0
 80087c4:	9209      	str	r2, [sp, #36]	; 0x24
 80087c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c8:	b975      	cbnz	r5, 80087e8 <_dtoa_r+0x40>
 80087ca:	2010      	movs	r0, #16
 80087cc:	f001 f94c 	bl	8009a68 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6260      	str	r0, [r4, #36]	; 0x24
 80087d4:	b920      	cbnz	r0, 80087e0 <_dtoa_r+0x38>
 80087d6:	4bb2      	ldr	r3, [pc, #712]	; (8008aa0 <_dtoa_r+0x2f8>)
 80087d8:	21ea      	movs	r1, #234	; 0xea
 80087da:	48b2      	ldr	r0, [pc, #712]	; (8008aa4 <_dtoa_r+0x2fc>)
 80087dc:	f002 f874 	bl	800a8c8 <__assert_func>
 80087e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087e4:	6005      	str	r5, [r0, #0]
 80087e6:	60c5      	str	r5, [r0, #12]
 80087e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ea:	6819      	ldr	r1, [r3, #0]
 80087ec:	b151      	cbz	r1, 8008804 <_dtoa_r+0x5c>
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	604a      	str	r2, [r1, #4]
 80087f2:	2301      	movs	r3, #1
 80087f4:	4093      	lsls	r3, r2
 80087f6:	608b      	str	r3, [r1, #8]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f001 f99d 	bl	8009b38 <_Bfree>
 80087fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	1e3b      	subs	r3, r7, #0
 8008806:	bfb9      	ittee	lt
 8008808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800880c:	9303      	strlt	r3, [sp, #12]
 800880e:	2300      	movge	r3, #0
 8008810:	f8c8 3000 	strge.w	r3, [r8]
 8008814:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008818:	4ba3      	ldr	r3, [pc, #652]	; (8008aa8 <_dtoa_r+0x300>)
 800881a:	bfbc      	itt	lt
 800881c:	2201      	movlt	r2, #1
 800881e:	f8c8 2000 	strlt.w	r2, [r8]
 8008822:	ea33 0309 	bics.w	r3, r3, r9
 8008826:	d11b      	bne.n	8008860 <_dtoa_r+0xb8>
 8008828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800882a:	f242 730f 	movw	r3, #9999	; 0x270f
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008834:	4333      	orrs	r3, r6
 8008836:	f000 857a 	beq.w	800932e <_dtoa_r+0xb86>
 800883a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800883c:	b963      	cbnz	r3, 8008858 <_dtoa_r+0xb0>
 800883e:	4b9b      	ldr	r3, [pc, #620]	; (8008aac <_dtoa_r+0x304>)
 8008840:	e024      	b.n	800888c <_dtoa_r+0xe4>
 8008842:	4b9b      	ldr	r3, [pc, #620]	; (8008ab0 <_dtoa_r+0x308>)
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	9800      	ldr	r0, [sp, #0]
 800884e:	b015      	add	sp, #84	; 0x54
 8008850:	ecbd 8b02 	vpop	{d8}
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	4b94      	ldr	r3, [pc, #592]	; (8008aac <_dtoa_r+0x304>)
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	3303      	adds	r3, #3
 800885e:	e7f3      	b.n	8008848 <_dtoa_r+0xa0>
 8008860:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008864:	2200      	movs	r2, #0
 8008866:	ec51 0b17 	vmov	r0, r1, d7
 800886a:	2300      	movs	r3, #0
 800886c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008870:	f7f8 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008874:	4680      	mov	r8, r0
 8008876:	b158      	cbz	r0, 8008890 <_dtoa_r+0xe8>
 8008878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800887a:	2301      	movs	r3, #1
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8551 	beq.w	8009328 <_dtoa_r+0xb80>
 8008886:	488b      	ldr	r0, [pc, #556]	; (8008ab4 <_dtoa_r+0x30c>)
 8008888:	6018      	str	r0, [r3, #0]
 800888a:	1e43      	subs	r3, r0, #1
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	e7dd      	b.n	800884c <_dtoa_r+0xa4>
 8008890:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008894:	aa12      	add	r2, sp, #72	; 0x48
 8008896:	a913      	add	r1, sp, #76	; 0x4c
 8008898:	4620      	mov	r0, r4
 800889a:	f001 fcf5 	bl	800a288 <__d2b>
 800889e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088a2:	4683      	mov	fp, r0
 80088a4:	2d00      	cmp	r5, #0
 80088a6:	d07c      	beq.n	80089a2 <_dtoa_r+0x1fa>
 80088a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80088ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80088b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80088ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80088be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088c2:	4b7d      	ldr	r3, [pc, #500]	; (8008ab8 <_dtoa_r+0x310>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fcdd 	bl	8000288 <__aeabi_dsub>
 80088ce:	a36e      	add	r3, pc, #440	; (adr r3, 8008a88 <_dtoa_r+0x2e0>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 fe90 	bl	80005f8 <__aeabi_dmul>
 80088d8:	a36d      	add	r3, pc, #436	; (adr r3, 8008a90 <_dtoa_r+0x2e8>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fcd5 	bl	800028c <__adddf3>
 80088e2:	4606      	mov	r6, r0
 80088e4:	4628      	mov	r0, r5
 80088e6:	460f      	mov	r7, r1
 80088e8:	f7f7 fe1c 	bl	8000524 <__aeabi_i2d>
 80088ec:	a36a      	add	r3, pc, #424	; (adr r3, 8008a98 <_dtoa_r+0x2f0>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 fe81 	bl	80005f8 <__aeabi_dmul>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4630      	mov	r0, r6
 80088fc:	4639      	mov	r1, r7
 80088fe:	f7f7 fcc5 	bl	800028c <__adddf3>
 8008902:	4606      	mov	r6, r0
 8008904:	460f      	mov	r7, r1
 8008906:	f7f8 f927 	bl	8000b58 <__aeabi_d2iz>
 800890a:	2200      	movs	r2, #0
 800890c:	4682      	mov	sl, r0
 800890e:	2300      	movs	r3, #0
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f8 f8e2 	bl	8000adc <__aeabi_dcmplt>
 8008918:	b148      	cbz	r0, 800892e <_dtoa_r+0x186>
 800891a:	4650      	mov	r0, sl
 800891c:	f7f7 fe02 	bl	8000524 <__aeabi_i2d>
 8008920:	4632      	mov	r2, r6
 8008922:	463b      	mov	r3, r7
 8008924:	f7f8 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008928:	b908      	cbnz	r0, 800892e <_dtoa_r+0x186>
 800892a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800892e:	f1ba 0f16 	cmp.w	sl, #22
 8008932:	d854      	bhi.n	80089de <_dtoa_r+0x236>
 8008934:	4b61      	ldr	r3, [pc, #388]	; (8008abc <_dtoa_r+0x314>)
 8008936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008942:	f7f8 f8cb 	bl	8000adc <__aeabi_dcmplt>
 8008946:	2800      	cmp	r0, #0
 8008948:	d04b      	beq.n	80089e2 <_dtoa_r+0x23a>
 800894a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800894e:	2300      	movs	r3, #0
 8008950:	930e      	str	r3, [sp, #56]	; 0x38
 8008952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008954:	1b5d      	subs	r5, r3, r5
 8008956:	1e6b      	subs	r3, r5, #1
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	bf43      	ittte	mi
 800895c:	2300      	movmi	r3, #0
 800895e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008962:	9304      	strmi	r3, [sp, #16]
 8008964:	f04f 0800 	movpl.w	r8, #0
 8008968:	f1ba 0f00 	cmp.w	sl, #0
 800896c:	db3b      	blt.n	80089e6 <_dtoa_r+0x23e>
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008974:	4453      	add	r3, sl
 8008976:	9304      	str	r3, [sp, #16]
 8008978:	2300      	movs	r3, #0
 800897a:	9306      	str	r3, [sp, #24]
 800897c:	9b05      	ldr	r3, [sp, #20]
 800897e:	2b09      	cmp	r3, #9
 8008980:	d869      	bhi.n	8008a56 <_dtoa_r+0x2ae>
 8008982:	2b05      	cmp	r3, #5
 8008984:	bfc4      	itt	gt
 8008986:	3b04      	subgt	r3, #4
 8008988:	9305      	strgt	r3, [sp, #20]
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	f1a3 0302 	sub.w	r3, r3, #2
 8008990:	bfcc      	ite	gt
 8008992:	2500      	movgt	r5, #0
 8008994:	2501      	movle	r5, #1
 8008996:	2b03      	cmp	r3, #3
 8008998:	d869      	bhi.n	8008a6e <_dtoa_r+0x2c6>
 800899a:	e8df f003 	tbb	[pc, r3]
 800899e:	4e2c      	.short	0x4e2c
 80089a0:	5a4c      	.short	0x5a4c
 80089a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80089a6:	441d      	add	r5, r3
 80089a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	bfc1      	itttt	gt
 80089b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80089b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80089bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80089c0:	bfda      	itte	le
 80089c2:	f1c3 0320 	rsble	r3, r3, #32
 80089c6:	fa06 f003 	lslle.w	r0, r6, r3
 80089ca:	4318      	orrgt	r0, r3
 80089cc:	f7f7 fd9a 	bl	8000504 <__aeabi_ui2d>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4606      	mov	r6, r0
 80089d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80089d8:	3d01      	subs	r5, #1
 80089da:	9310      	str	r3, [sp, #64]	; 0x40
 80089dc:	e771      	b.n	80088c2 <_dtoa_r+0x11a>
 80089de:	2301      	movs	r3, #1
 80089e0:	e7b6      	b.n	8008950 <_dtoa_r+0x1a8>
 80089e2:	900e      	str	r0, [sp, #56]	; 0x38
 80089e4:	e7b5      	b.n	8008952 <_dtoa_r+0x1aa>
 80089e6:	f1ca 0300 	rsb	r3, sl, #0
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	2300      	movs	r3, #0
 80089ee:	eba8 080a 	sub.w	r8, r8, sl
 80089f2:	930d      	str	r3, [sp, #52]	; 0x34
 80089f4:	e7c2      	b.n	800897c <_dtoa_r+0x1d4>
 80089f6:	2300      	movs	r3, #0
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dc39      	bgt.n	8008a74 <_dtoa_r+0x2cc>
 8008a00:	f04f 0901 	mov.w	r9, #1
 8008a04:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a08:	464b      	mov	r3, r9
 8008a0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a10:	2200      	movs	r2, #0
 8008a12:	6042      	str	r2, [r0, #4]
 8008a14:	2204      	movs	r2, #4
 8008a16:	f102 0614 	add.w	r6, r2, #20
 8008a1a:	429e      	cmp	r6, r3
 8008a1c:	6841      	ldr	r1, [r0, #4]
 8008a1e:	d92f      	bls.n	8008a80 <_dtoa_r+0x2d8>
 8008a20:	4620      	mov	r0, r4
 8008a22:	f001 f849 	bl	8009ab8 <_Balloc>
 8008a26:	9000      	str	r0, [sp, #0]
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d14b      	bne.n	8008ac4 <_dtoa_r+0x31c>
 8008a2c:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <_dtoa_r+0x318>)
 8008a2e:	4602      	mov	r2, r0
 8008a30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a34:	e6d1      	b.n	80087da <_dtoa_r+0x32>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e7de      	b.n	80089f8 <_dtoa_r+0x250>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9308      	str	r3, [sp, #32]
 8008a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a40:	eb0a 0903 	add.w	r9, sl, r3
 8008a44:	f109 0301 	add.w	r3, r9, #1
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	bfb8      	it	lt
 8008a4e:	2301      	movlt	r3, #1
 8008a50:	e7dd      	b.n	8008a0e <_dtoa_r+0x266>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e7f2      	b.n	8008a3c <_dtoa_r+0x294>
 8008a56:	2501      	movs	r5, #1
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	9508      	str	r5, [sp, #32]
 8008a5e:	f04f 39ff 	mov.w	r9, #4294967295
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a68:	2312      	movs	r3, #18
 8008a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a6c:	e7cf      	b.n	8008a0e <_dtoa_r+0x266>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	e7f4      	b.n	8008a5e <_dtoa_r+0x2b6>
 8008a74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a78:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a7c:	464b      	mov	r3, r9
 8008a7e:	e7c6      	b.n	8008a0e <_dtoa_r+0x266>
 8008a80:	3101      	adds	r1, #1
 8008a82:	6041      	str	r1, [r0, #4]
 8008a84:	0052      	lsls	r2, r2, #1
 8008a86:	e7c6      	b.n	8008a16 <_dtoa_r+0x26e>
 8008a88:	636f4361 	.word	0x636f4361
 8008a8c:	3fd287a7 	.word	0x3fd287a7
 8008a90:	8b60c8b3 	.word	0x8b60c8b3
 8008a94:	3fc68a28 	.word	0x3fc68a28
 8008a98:	509f79fb 	.word	0x509f79fb
 8008a9c:	3fd34413 	.word	0x3fd34413
 8008aa0:	0800b856 	.word	0x0800b856
 8008aa4:	0800b86d 	.word	0x0800b86d
 8008aa8:	7ff00000 	.word	0x7ff00000
 8008aac:	0800b852 	.word	0x0800b852
 8008ab0:	0800b849 	.word	0x0800b849
 8008ab4:	0800b6c9 	.word	0x0800b6c9
 8008ab8:	3ff80000 	.word	0x3ff80000
 8008abc:	0800b9e8 	.word	0x0800b9e8
 8008ac0:	0800b8cc 	.word	0x0800b8cc
 8008ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac6:	9a00      	ldr	r2, [sp, #0]
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	2b0e      	cmp	r3, #14
 8008ace:	f200 80ad 	bhi.w	8008c2c <_dtoa_r+0x484>
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	f000 80aa 	beq.w	8008c2c <_dtoa_r+0x484>
 8008ad8:	f1ba 0f00 	cmp.w	sl, #0
 8008adc:	dd36      	ble.n	8008b4c <_dtoa_r+0x3a4>
 8008ade:	4ac3      	ldr	r2, [pc, #780]	; (8008dec <_dtoa_r+0x644>)
 8008ae0:	f00a 030f 	and.w	r3, sl, #15
 8008ae4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ae8:	ed93 7b00 	vldr	d7, [r3]
 8008aec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008af0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008af4:	eeb0 8a47 	vmov.f32	s16, s14
 8008af8:	eef0 8a67 	vmov.f32	s17, s15
 8008afc:	d016      	beq.n	8008b2c <_dtoa_r+0x384>
 8008afe:	4bbc      	ldr	r3, [pc, #752]	; (8008df0 <_dtoa_r+0x648>)
 8008b00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b08:	f7f7 fea0 	bl	800084c <__aeabi_ddiv>
 8008b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b10:	f007 070f 	and.w	r7, r7, #15
 8008b14:	2503      	movs	r5, #3
 8008b16:	4eb6      	ldr	r6, [pc, #728]	; (8008df0 <_dtoa_r+0x648>)
 8008b18:	b957      	cbnz	r7, 8008b30 <_dtoa_r+0x388>
 8008b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b1e:	ec53 2b18 	vmov	r2, r3, d8
 8008b22:	f7f7 fe93 	bl	800084c <__aeabi_ddiv>
 8008b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2a:	e029      	b.n	8008b80 <_dtoa_r+0x3d8>
 8008b2c:	2502      	movs	r5, #2
 8008b2e:	e7f2      	b.n	8008b16 <_dtoa_r+0x36e>
 8008b30:	07f9      	lsls	r1, r7, #31
 8008b32:	d508      	bpl.n	8008b46 <_dtoa_r+0x39e>
 8008b34:	ec51 0b18 	vmov	r0, r1, d8
 8008b38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b3c:	f7f7 fd5c 	bl	80005f8 <__aeabi_dmul>
 8008b40:	ec41 0b18 	vmov	d8, r0, r1
 8008b44:	3501      	adds	r5, #1
 8008b46:	107f      	asrs	r7, r7, #1
 8008b48:	3608      	adds	r6, #8
 8008b4a:	e7e5      	b.n	8008b18 <_dtoa_r+0x370>
 8008b4c:	f000 80a6 	beq.w	8008c9c <_dtoa_r+0x4f4>
 8008b50:	f1ca 0600 	rsb	r6, sl, #0
 8008b54:	4ba5      	ldr	r3, [pc, #660]	; (8008dec <_dtoa_r+0x644>)
 8008b56:	4fa6      	ldr	r7, [pc, #664]	; (8008df0 <_dtoa_r+0x648>)
 8008b58:	f006 020f 	and.w	r2, r6, #15
 8008b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b68:	f7f7 fd46 	bl	80005f8 <__aeabi_dmul>
 8008b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b70:	1136      	asrs	r6, r6, #4
 8008b72:	2300      	movs	r3, #0
 8008b74:	2502      	movs	r5, #2
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	f040 8085 	bne.w	8008c86 <_dtoa_r+0x4de>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1d2      	bne.n	8008b26 <_dtoa_r+0x37e>
 8008b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 808c 	beq.w	8008ca0 <_dtoa_r+0x4f8>
 8008b88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b8c:	4b99      	ldr	r3, [pc, #612]	; (8008df4 <_dtoa_r+0x64c>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 ffa2 	bl	8000adc <__aeabi_dcmplt>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f000 8081 	beq.w	8008ca0 <_dtoa_r+0x4f8>
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d07d      	beq.n	8008ca0 <_dtoa_r+0x4f8>
 8008ba4:	f1b9 0f00 	cmp.w	r9, #0
 8008ba8:	dd3c      	ble.n	8008c24 <_dtoa_r+0x47c>
 8008baa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4b91      	ldr	r3, [pc, #580]	; (8008df8 <_dtoa_r+0x650>)
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008bc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7f7 fcaa 	bl	8000524 <__aeabi_i2d>
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	f7f7 fd10 	bl	80005f8 <__aeabi_dmul>
 8008bd8:	4b88      	ldr	r3, [pc, #544]	; (8008dfc <_dtoa_r+0x654>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f7f7 fb56 	bl	800028c <__adddf3>
 8008be0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be8:	9303      	str	r3, [sp, #12]
 8008bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d15c      	bne.n	8008caa <_dtoa_r+0x502>
 8008bf0:	4b83      	ldr	r3, [pc, #524]	; (8008e00 <_dtoa_r+0x658>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	f7f7 fb46 	bl	8000288 <__aeabi_dsub>
 8008bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c00:	4606      	mov	r6, r0
 8008c02:	460f      	mov	r7, r1
 8008c04:	f7f7 ff88 	bl	8000b18 <__aeabi_dcmpgt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f040 8296 	bne.w	800913a <_dtoa_r+0x992>
 8008c0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c12:	4630      	mov	r0, r6
 8008c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7f7 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f040 8288 	bne.w	8009134 <_dtoa_r+0x98c>
 8008c24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f2c0 8158 	blt.w	8008ee4 <_dtoa_r+0x73c>
 8008c34:	f1ba 0f0e 	cmp.w	sl, #14
 8008c38:	f300 8154 	bgt.w	8008ee4 <_dtoa_r+0x73c>
 8008c3c:	4b6b      	ldr	r3, [pc, #428]	; (8008dec <_dtoa_r+0x644>)
 8008c3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f280 80e3 	bge.w	8008e14 <_dtoa_r+0x66c>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f300 80df 	bgt.w	8008e14 <_dtoa_r+0x66c>
 8008c56:	f040 826d 	bne.w	8009134 <_dtoa_r+0x98c>
 8008c5a:	4b69      	ldr	r3, [pc, #420]	; (8008e00 <_dtoa_r+0x658>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4640      	mov	r0, r8
 8008c60:	4649      	mov	r1, r9
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c6a:	f7f7 ff4b 	bl	8000b04 <__aeabi_dcmpge>
 8008c6e:	9e01      	ldr	r6, [sp, #4]
 8008c70:	4637      	mov	r7, r6
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f040 8243 	bne.w	80090fe <_dtoa_r+0x956>
 8008c78:	9d00      	ldr	r5, [sp, #0]
 8008c7a:	2331      	movs	r3, #49	; 0x31
 8008c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8008c80:	f10a 0a01 	add.w	sl, sl, #1
 8008c84:	e23f      	b.n	8009106 <_dtoa_r+0x95e>
 8008c86:	07f2      	lsls	r2, r6, #31
 8008c88:	d505      	bpl.n	8008c96 <_dtoa_r+0x4ee>
 8008c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c8e:	f7f7 fcb3 	bl	80005f8 <__aeabi_dmul>
 8008c92:	3501      	adds	r5, #1
 8008c94:	2301      	movs	r3, #1
 8008c96:	1076      	asrs	r6, r6, #1
 8008c98:	3708      	adds	r7, #8
 8008c9a:	e76c      	b.n	8008b76 <_dtoa_r+0x3ce>
 8008c9c:	2502      	movs	r5, #2
 8008c9e:	e76f      	b.n	8008b80 <_dtoa_r+0x3d8>
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ca6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ca8:	e78d      	b.n	8008bc6 <_dtoa_r+0x41e>
 8008caa:	9900      	ldr	r1, [sp, #0]
 8008cac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cb0:	4b4e      	ldr	r3, [pc, #312]	; (8008dec <_dtoa_r+0x644>)
 8008cb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cb6:	4401      	add	r1, r0
 8008cb8:	9102      	str	r1, [sp, #8]
 8008cba:	9908      	ldr	r1, [sp, #32]
 8008cbc:	eeb0 8a47 	vmov.f32	s16, s14
 8008cc0:	eef0 8a67 	vmov.f32	s17, s15
 8008cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ccc:	2900      	cmp	r1, #0
 8008cce:	d045      	beq.n	8008d5c <_dtoa_r+0x5b4>
 8008cd0:	494c      	ldr	r1, [pc, #304]	; (8008e04 <_dtoa_r+0x65c>)
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f7f7 fdba 	bl	800084c <__aeabi_ddiv>
 8008cd8:	ec53 2b18 	vmov	r2, r3, d8
 8008cdc:	f7f7 fad4 	bl	8000288 <__aeabi_dsub>
 8008ce0:	9d00      	ldr	r5, [sp, #0]
 8008ce2:	ec41 0b18 	vmov	d8, r0, r1
 8008ce6:	4639      	mov	r1, r7
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7f7 ff35 	bl	8000b58 <__aeabi_d2iz>
 8008cee:	900c      	str	r0, [sp, #48]	; 0x30
 8008cf0:	f7f7 fc18 	bl	8000524 <__aeabi_i2d>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fac4 	bl	8000288 <__aeabi_dsub>
 8008d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d02:	3330      	adds	r3, #48	; 0x30
 8008d04:	f805 3b01 	strb.w	r3, [r5], #1
 8008d08:	ec53 2b18 	vmov	r2, r3, d8
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	460f      	mov	r7, r1
 8008d10:	f7f7 fee4 	bl	8000adc <__aeabi_dcmplt>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d165      	bne.n	8008de4 <_dtoa_r+0x63c>
 8008d18:	4632      	mov	r2, r6
 8008d1a:	463b      	mov	r3, r7
 8008d1c:	4935      	ldr	r1, [pc, #212]	; (8008df4 <_dtoa_r+0x64c>)
 8008d1e:	2000      	movs	r0, #0
 8008d20:	f7f7 fab2 	bl	8000288 <__aeabi_dsub>
 8008d24:	ec53 2b18 	vmov	r2, r3, d8
 8008d28:	f7f7 fed8 	bl	8000adc <__aeabi_dcmplt>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f040 80b9 	bne.w	8008ea4 <_dtoa_r+0x6fc>
 8008d32:	9b02      	ldr	r3, [sp, #8]
 8008d34:	429d      	cmp	r5, r3
 8008d36:	f43f af75 	beq.w	8008c24 <_dtoa_r+0x47c>
 8008d3a:	4b2f      	ldr	r3, [pc, #188]	; (8008df8 <_dtoa_r+0x650>)
 8008d3c:	ec51 0b18 	vmov	r0, r1, d8
 8008d40:	2200      	movs	r2, #0
 8008d42:	f7f7 fc59 	bl	80005f8 <__aeabi_dmul>
 8008d46:	4b2c      	ldr	r3, [pc, #176]	; (8008df8 <_dtoa_r+0x650>)
 8008d48:	ec41 0b18 	vmov	d8, r0, r1
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	e7c4      	b.n	8008ce6 <_dtoa_r+0x53e>
 8008d5c:	ec51 0b17 	vmov	r0, r1, d7
 8008d60:	f7f7 fc4a 	bl	80005f8 <__aeabi_dmul>
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	9d00      	ldr	r5, [sp, #0]
 8008d68:	930c      	str	r3, [sp, #48]	; 0x30
 8008d6a:	ec41 0b18 	vmov	d8, r0, r1
 8008d6e:	4639      	mov	r1, r7
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7f7 fef1 	bl	8000b58 <__aeabi_d2iz>
 8008d76:	9011      	str	r0, [sp, #68]	; 0x44
 8008d78:	f7f7 fbd4 	bl	8000524 <__aeabi_i2d>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fa80 	bl	8000288 <__aeabi_dsub>
 8008d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d8a:	3330      	adds	r3, #48	; 0x30
 8008d8c:	f805 3b01 	strb.w	r3, [r5], #1
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	429d      	cmp	r5, r3
 8008d94:	4606      	mov	r6, r0
 8008d96:	460f      	mov	r7, r1
 8008d98:	f04f 0200 	mov.w	r2, #0
 8008d9c:	d134      	bne.n	8008e08 <_dtoa_r+0x660>
 8008d9e:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <_dtoa_r+0x65c>)
 8008da0:	ec51 0b18 	vmov	r0, r1, d8
 8008da4:	f7f7 fa72 	bl	800028c <__adddf3>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4630      	mov	r0, r6
 8008dae:	4639      	mov	r1, r7
 8008db0:	f7f7 feb2 	bl	8000b18 <__aeabi_dcmpgt>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d175      	bne.n	8008ea4 <_dtoa_r+0x6fc>
 8008db8:	ec53 2b18 	vmov	r2, r3, d8
 8008dbc:	4911      	ldr	r1, [pc, #68]	; (8008e04 <_dtoa_r+0x65c>)
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	f7f7 fa62 	bl	8000288 <__aeabi_dsub>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fe86 	bl	8000adc <__aeabi_dcmplt>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	f43f af27 	beq.w	8008c24 <_dtoa_r+0x47c>
 8008dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd8:	1e6b      	subs	r3, r5, #1
 8008dda:	930c      	str	r3, [sp, #48]	; 0x30
 8008ddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008de0:	2b30      	cmp	r3, #48	; 0x30
 8008de2:	d0f8      	beq.n	8008dd6 <_dtoa_r+0x62e>
 8008de4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008de8:	e04a      	b.n	8008e80 <_dtoa_r+0x6d8>
 8008dea:	bf00      	nop
 8008dec:	0800b9e8 	.word	0x0800b9e8
 8008df0:	0800b9c0 	.word	0x0800b9c0
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	40240000 	.word	0x40240000
 8008dfc:	401c0000 	.word	0x401c0000
 8008e00:	40140000 	.word	0x40140000
 8008e04:	3fe00000 	.word	0x3fe00000
 8008e08:	4baf      	ldr	r3, [pc, #700]	; (80090c8 <_dtoa_r+0x920>)
 8008e0a:	f7f7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	e7ac      	b.n	8008d6e <_dtoa_r+0x5c6>
 8008e14:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e18:	9d00      	ldr	r5, [sp, #0]
 8008e1a:	4642      	mov	r2, r8
 8008e1c:	464b      	mov	r3, r9
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7f7 fd13 	bl	800084c <__aeabi_ddiv>
 8008e26:	f7f7 fe97 	bl	8000b58 <__aeabi_d2iz>
 8008e2a:	9002      	str	r0, [sp, #8]
 8008e2c:	f7f7 fb7a 	bl	8000524 <__aeabi_i2d>
 8008e30:	4642      	mov	r2, r8
 8008e32:	464b      	mov	r3, r9
 8008e34:	f7f7 fbe0 	bl	80005f8 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fa22 	bl	8000288 <__aeabi_dsub>
 8008e44:	9e02      	ldr	r6, [sp, #8]
 8008e46:	9f01      	ldr	r7, [sp, #4]
 8008e48:	3630      	adds	r6, #48	; 0x30
 8008e4a:	f805 6b01 	strb.w	r6, [r5], #1
 8008e4e:	9e00      	ldr	r6, [sp, #0]
 8008e50:	1bae      	subs	r6, r5, r6
 8008e52:	42b7      	cmp	r7, r6
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	d137      	bne.n	8008eca <_dtoa_r+0x722>
 8008e5a:	f7f7 fa17 	bl	800028c <__adddf3>
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	4606      	mov	r6, r0
 8008e64:	460f      	mov	r7, r1
 8008e66:	f7f7 fe57 	bl	8000b18 <__aeabi_dcmpgt>
 8008e6a:	b9c8      	cbnz	r0, 8008ea0 <_dtoa_r+0x6f8>
 8008e6c:	4642      	mov	r2, r8
 8008e6e:	464b      	mov	r3, r9
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e78:	b110      	cbz	r0, 8008e80 <_dtoa_r+0x6d8>
 8008e7a:	9b02      	ldr	r3, [sp, #8]
 8008e7c:	07d9      	lsls	r1, r3, #31
 8008e7e:	d40f      	bmi.n	8008ea0 <_dtoa_r+0x6f8>
 8008e80:	4620      	mov	r0, r4
 8008e82:	4659      	mov	r1, fp
 8008e84:	f000 fe58 	bl	8009b38 <_Bfree>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	702b      	strb	r3, [r5, #0]
 8008e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e8e:	f10a 0001 	add.w	r0, sl, #1
 8008e92:	6018      	str	r0, [r3, #0]
 8008e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f43f acd8 	beq.w	800884c <_dtoa_r+0xa4>
 8008e9c:	601d      	str	r5, [r3, #0]
 8008e9e:	e4d5      	b.n	800884c <_dtoa_r+0xa4>
 8008ea0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	461d      	mov	r5, r3
 8008ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eac:	2a39      	cmp	r2, #57	; 0x39
 8008eae:	d108      	bne.n	8008ec2 <_dtoa_r+0x71a>
 8008eb0:	9a00      	ldr	r2, [sp, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d1f7      	bne.n	8008ea6 <_dtoa_r+0x6fe>
 8008eb6:	9a07      	ldr	r2, [sp, #28]
 8008eb8:	9900      	ldr	r1, [sp, #0]
 8008eba:	3201      	adds	r2, #1
 8008ebc:	9207      	str	r2, [sp, #28]
 8008ebe:	2230      	movs	r2, #48	; 0x30
 8008ec0:	700a      	strb	r2, [r1, #0]
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e78c      	b.n	8008de4 <_dtoa_r+0x63c>
 8008eca:	4b7f      	ldr	r3, [pc, #508]	; (80090c8 <_dtoa_r+0x920>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	f7f7 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d09b      	beq.n	8008e1a <_dtoa_r+0x672>
 8008ee2:	e7cd      	b.n	8008e80 <_dtoa_r+0x6d8>
 8008ee4:	9a08      	ldr	r2, [sp, #32]
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	f000 80c4 	beq.w	8009074 <_dtoa_r+0x8cc>
 8008eec:	9a05      	ldr	r2, [sp, #20]
 8008eee:	2a01      	cmp	r2, #1
 8008ef0:	f300 80a8 	bgt.w	8009044 <_dtoa_r+0x89c>
 8008ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	f000 80a0 	beq.w	800903c <_dtoa_r+0x894>
 8008efc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f00:	9e06      	ldr	r6, [sp, #24]
 8008f02:	4645      	mov	r5, r8
 8008f04:	9a04      	ldr	r2, [sp, #16]
 8008f06:	2101      	movs	r1, #1
 8008f08:	441a      	add	r2, r3
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4498      	add	r8, r3
 8008f0e:	9204      	str	r2, [sp, #16]
 8008f10:	f000 ff18 	bl	8009d44 <__i2b>
 8008f14:	4607      	mov	r7, r0
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	dd0b      	ble.n	8008f32 <_dtoa_r+0x78a>
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd08      	ble.n	8008f32 <_dtoa_r+0x78a>
 8008f20:	42ab      	cmp	r3, r5
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	bfa8      	it	ge
 8008f26:	462b      	movge	r3, r5
 8008f28:	eba8 0803 	sub.w	r8, r8, r3
 8008f2c:	1aed      	subs	r5, r5, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	9b06      	ldr	r3, [sp, #24]
 8008f34:	b1fb      	cbz	r3, 8008f76 <_dtoa_r+0x7ce>
 8008f36:	9b08      	ldr	r3, [sp, #32]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 809f 	beq.w	800907c <_dtoa_r+0x8d4>
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	dd11      	ble.n	8008f66 <_dtoa_r+0x7be>
 8008f42:	4639      	mov	r1, r7
 8008f44:	4632      	mov	r2, r6
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 ffb8 	bl	8009ebc <__pow5mult>
 8008f4c:	465a      	mov	r2, fp
 8008f4e:	4601      	mov	r1, r0
 8008f50:	4607      	mov	r7, r0
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 ff0c 	bl	8009d70 <__multiply>
 8008f58:	4659      	mov	r1, fp
 8008f5a:	9007      	str	r0, [sp, #28]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fdeb 	bl	8009b38 <_Bfree>
 8008f62:	9b07      	ldr	r3, [sp, #28]
 8008f64:	469b      	mov	fp, r3
 8008f66:	9b06      	ldr	r3, [sp, #24]
 8008f68:	1b9a      	subs	r2, r3, r6
 8008f6a:	d004      	beq.n	8008f76 <_dtoa_r+0x7ce>
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 ffa4 	bl	8009ebc <__pow5mult>
 8008f74:	4683      	mov	fp, r0
 8008f76:	2101      	movs	r1, #1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fee3 	bl	8009d44 <__i2b>
 8008f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	4606      	mov	r6, r0
 8008f84:	dd7c      	ble.n	8009080 <_dtoa_r+0x8d8>
 8008f86:	461a      	mov	r2, r3
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 ff96 	bl	8009ebc <__pow5mult>
 8008f90:	9b05      	ldr	r3, [sp, #20]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	4606      	mov	r6, r0
 8008f96:	dd76      	ble.n	8009086 <_dtoa_r+0x8de>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9306      	str	r3, [sp, #24]
 8008f9c:	6933      	ldr	r3, [r6, #16]
 8008f9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fa2:	6918      	ldr	r0, [r3, #16]
 8008fa4:	f000 fe7e 	bl	8009ca4 <__hi0bits>
 8008fa8:	f1c0 0020 	rsb	r0, r0, #32
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	4418      	add	r0, r3
 8008fb0:	f010 001f 	ands.w	r0, r0, #31
 8008fb4:	f000 8086 	beq.w	80090c4 <_dtoa_r+0x91c>
 8008fb8:	f1c0 0320 	rsb	r3, r0, #32
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	dd7f      	ble.n	80090c0 <_dtoa_r+0x918>
 8008fc0:	f1c0 001c 	rsb	r0, r0, #28
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	4403      	add	r3, r0
 8008fc8:	4480      	add	r8, r0
 8008fca:	4405      	add	r5, r0
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	f1b8 0f00 	cmp.w	r8, #0
 8008fd2:	dd05      	ble.n	8008fe0 <_dtoa_r+0x838>
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	4642      	mov	r2, r8
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 ffc9 	bl	8009f70 <__lshift>
 8008fde:	4683      	mov	fp, r0
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dd05      	ble.n	8008ff2 <_dtoa_r+0x84a>
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 ffc0 	bl	8009f70 <__lshift>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d069      	beq.n	80090cc <_dtoa_r+0x924>
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4658      	mov	r0, fp
 8008ffc:	f001 f824 	bl	800a048 <__mcmp>
 8009000:	2800      	cmp	r0, #0
 8009002:	da63      	bge.n	80090cc <_dtoa_r+0x924>
 8009004:	2300      	movs	r3, #0
 8009006:	4659      	mov	r1, fp
 8009008:	220a      	movs	r2, #10
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fdb6 	bl	8009b7c <__multadd>
 8009010:	9b08      	ldr	r3, [sp, #32]
 8009012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009016:	4683      	mov	fp, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 818f 	beq.w	800933c <_dtoa_r+0xb94>
 800901e:	4639      	mov	r1, r7
 8009020:	2300      	movs	r3, #0
 8009022:	220a      	movs	r2, #10
 8009024:	4620      	mov	r0, r4
 8009026:	f000 fda9 	bl	8009b7c <__multadd>
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	4607      	mov	r7, r0
 8009030:	f300 808e 	bgt.w	8009150 <_dtoa_r+0x9a8>
 8009034:	9b05      	ldr	r3, [sp, #20]
 8009036:	2b02      	cmp	r3, #2
 8009038:	dc50      	bgt.n	80090dc <_dtoa_r+0x934>
 800903a:	e089      	b.n	8009150 <_dtoa_r+0x9a8>
 800903c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800903e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009042:	e75d      	b.n	8008f00 <_dtoa_r+0x758>
 8009044:	9b01      	ldr	r3, [sp, #4]
 8009046:	1e5e      	subs	r6, r3, #1
 8009048:	9b06      	ldr	r3, [sp, #24]
 800904a:	42b3      	cmp	r3, r6
 800904c:	bfbf      	itttt	lt
 800904e:	9b06      	ldrlt	r3, [sp, #24]
 8009050:	9606      	strlt	r6, [sp, #24]
 8009052:	1af2      	sublt	r2, r6, r3
 8009054:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009056:	bfb6      	itet	lt
 8009058:	189b      	addlt	r3, r3, r2
 800905a:	1b9e      	subge	r6, r3, r6
 800905c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	bfb8      	it	lt
 8009062:	2600      	movlt	r6, #0
 8009064:	2b00      	cmp	r3, #0
 8009066:	bfb5      	itete	lt
 8009068:	eba8 0503 	sublt.w	r5, r8, r3
 800906c:	9b01      	ldrge	r3, [sp, #4]
 800906e:	2300      	movlt	r3, #0
 8009070:	4645      	movge	r5, r8
 8009072:	e747      	b.n	8008f04 <_dtoa_r+0x75c>
 8009074:	9e06      	ldr	r6, [sp, #24]
 8009076:	9f08      	ldr	r7, [sp, #32]
 8009078:	4645      	mov	r5, r8
 800907a:	e74c      	b.n	8008f16 <_dtoa_r+0x76e>
 800907c:	9a06      	ldr	r2, [sp, #24]
 800907e:	e775      	b.n	8008f6c <_dtoa_r+0x7c4>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	2b01      	cmp	r3, #1
 8009084:	dc18      	bgt.n	80090b8 <_dtoa_r+0x910>
 8009086:	9b02      	ldr	r3, [sp, #8]
 8009088:	b9b3      	cbnz	r3, 80090b8 <_dtoa_r+0x910>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009090:	b9a3      	cbnz	r3, 80090bc <_dtoa_r+0x914>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009098:	0d1b      	lsrs	r3, r3, #20
 800909a:	051b      	lsls	r3, r3, #20
 800909c:	b12b      	cbz	r3, 80090aa <_dtoa_r+0x902>
 800909e:	9b04      	ldr	r3, [sp, #16]
 80090a0:	3301      	adds	r3, #1
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	f108 0801 	add.w	r8, r8, #1
 80090a8:	2301      	movs	r3, #1
 80090aa:	9306      	str	r3, [sp, #24]
 80090ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f47f af74 	bne.w	8008f9c <_dtoa_r+0x7f4>
 80090b4:	2001      	movs	r0, #1
 80090b6:	e779      	b.n	8008fac <_dtoa_r+0x804>
 80090b8:	2300      	movs	r3, #0
 80090ba:	e7f6      	b.n	80090aa <_dtoa_r+0x902>
 80090bc:	9b02      	ldr	r3, [sp, #8]
 80090be:	e7f4      	b.n	80090aa <_dtoa_r+0x902>
 80090c0:	d085      	beq.n	8008fce <_dtoa_r+0x826>
 80090c2:	4618      	mov	r0, r3
 80090c4:	301c      	adds	r0, #28
 80090c6:	e77d      	b.n	8008fc4 <_dtoa_r+0x81c>
 80090c8:	40240000 	.word	0x40240000
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc38      	bgt.n	8009144 <_dtoa_r+0x99c>
 80090d2:	9b05      	ldr	r3, [sp, #20]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	dd35      	ble.n	8009144 <_dtoa_r+0x99c>
 80090d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090dc:	f1b9 0f00 	cmp.w	r9, #0
 80090e0:	d10d      	bne.n	80090fe <_dtoa_r+0x956>
 80090e2:	4631      	mov	r1, r6
 80090e4:	464b      	mov	r3, r9
 80090e6:	2205      	movs	r2, #5
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fd47 	bl	8009b7c <__multadd>
 80090ee:	4601      	mov	r1, r0
 80090f0:	4606      	mov	r6, r0
 80090f2:	4658      	mov	r0, fp
 80090f4:	f000 ffa8 	bl	800a048 <__mcmp>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f73f adbd 	bgt.w	8008c78 <_dtoa_r+0x4d0>
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	9d00      	ldr	r5, [sp, #0]
 8009102:	ea6f 0a03 	mvn.w	sl, r3
 8009106:	f04f 0800 	mov.w	r8, #0
 800910a:	4631      	mov	r1, r6
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fd13 	bl	8009b38 <_Bfree>
 8009112:	2f00      	cmp	r7, #0
 8009114:	f43f aeb4 	beq.w	8008e80 <_dtoa_r+0x6d8>
 8009118:	f1b8 0f00 	cmp.w	r8, #0
 800911c:	d005      	beq.n	800912a <_dtoa_r+0x982>
 800911e:	45b8      	cmp	r8, r7
 8009120:	d003      	beq.n	800912a <_dtoa_r+0x982>
 8009122:	4641      	mov	r1, r8
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fd07 	bl	8009b38 <_Bfree>
 800912a:	4639      	mov	r1, r7
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fd03 	bl	8009b38 <_Bfree>
 8009132:	e6a5      	b.n	8008e80 <_dtoa_r+0x6d8>
 8009134:	2600      	movs	r6, #0
 8009136:	4637      	mov	r7, r6
 8009138:	e7e1      	b.n	80090fe <_dtoa_r+0x956>
 800913a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800913c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009140:	4637      	mov	r7, r6
 8009142:	e599      	b.n	8008c78 <_dtoa_r+0x4d0>
 8009144:	9b08      	ldr	r3, [sp, #32]
 8009146:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 80fd 	beq.w	800934a <_dtoa_r+0xba2>
 8009150:	2d00      	cmp	r5, #0
 8009152:	dd05      	ble.n	8009160 <_dtoa_r+0x9b8>
 8009154:	4639      	mov	r1, r7
 8009156:	462a      	mov	r2, r5
 8009158:	4620      	mov	r0, r4
 800915a:	f000 ff09 	bl	8009f70 <__lshift>
 800915e:	4607      	mov	r7, r0
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d05c      	beq.n	8009220 <_dtoa_r+0xa78>
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fca5 	bl	8009ab8 <_Balloc>
 800916e:	4605      	mov	r5, r0
 8009170:	b928      	cbnz	r0, 800917e <_dtoa_r+0x9d6>
 8009172:	4b80      	ldr	r3, [pc, #512]	; (8009374 <_dtoa_r+0xbcc>)
 8009174:	4602      	mov	r2, r0
 8009176:	f240 21ea 	movw	r1, #746	; 0x2ea
 800917a:	f7ff bb2e 	b.w	80087da <_dtoa_r+0x32>
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	3202      	adds	r2, #2
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	f107 010c 	add.w	r1, r7, #12
 8009188:	300c      	adds	r0, #12
 800918a:	f000 fc87 	bl	8009a9c <memcpy>
 800918e:	2201      	movs	r2, #1
 8009190:	4629      	mov	r1, r5
 8009192:	4620      	mov	r0, r4
 8009194:	f000 feec 	bl	8009f70 <__lshift>
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	9b00      	ldr	r3, [sp, #0]
 80091a0:	444b      	add	r3, r9
 80091a2:	9307      	str	r3, [sp, #28]
 80091a4:	9b02      	ldr	r3, [sp, #8]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	46b8      	mov	r8, r7
 80091ac:	9306      	str	r3, [sp, #24]
 80091ae:	4607      	mov	r7, r0
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	4631      	mov	r1, r6
 80091b4:	3b01      	subs	r3, #1
 80091b6:	4658      	mov	r0, fp
 80091b8:	9302      	str	r3, [sp, #8]
 80091ba:	f7ff fa67 	bl	800868c <quorem>
 80091be:	4603      	mov	r3, r0
 80091c0:	3330      	adds	r3, #48	; 0x30
 80091c2:	9004      	str	r0, [sp, #16]
 80091c4:	4641      	mov	r1, r8
 80091c6:	4658      	mov	r0, fp
 80091c8:	9308      	str	r3, [sp, #32]
 80091ca:	f000 ff3d 	bl	800a048 <__mcmp>
 80091ce:	463a      	mov	r2, r7
 80091d0:	4681      	mov	r9, r0
 80091d2:	4631      	mov	r1, r6
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 ff53 	bl	800a080 <__mdiff>
 80091da:	68c2      	ldr	r2, [r0, #12]
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	4605      	mov	r5, r0
 80091e0:	bb02      	cbnz	r2, 8009224 <_dtoa_r+0xa7c>
 80091e2:	4601      	mov	r1, r0
 80091e4:	4658      	mov	r0, fp
 80091e6:	f000 ff2f 	bl	800a048 <__mcmp>
 80091ea:	9b08      	ldr	r3, [sp, #32]
 80091ec:	4602      	mov	r2, r0
 80091ee:	4629      	mov	r1, r5
 80091f0:	4620      	mov	r0, r4
 80091f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80091f6:	f000 fc9f 	bl	8009b38 <_Bfree>
 80091fa:	9b05      	ldr	r3, [sp, #20]
 80091fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091fe:	9d01      	ldr	r5, [sp, #4]
 8009200:	ea43 0102 	orr.w	r1, r3, r2
 8009204:	9b06      	ldr	r3, [sp, #24]
 8009206:	430b      	orrs	r3, r1
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	d10d      	bne.n	8009228 <_dtoa_r+0xa80>
 800920c:	2b39      	cmp	r3, #57	; 0x39
 800920e:	d029      	beq.n	8009264 <_dtoa_r+0xabc>
 8009210:	f1b9 0f00 	cmp.w	r9, #0
 8009214:	dd01      	ble.n	800921a <_dtoa_r+0xa72>
 8009216:	9b04      	ldr	r3, [sp, #16]
 8009218:	3331      	adds	r3, #49	; 0x31
 800921a:	9a02      	ldr	r2, [sp, #8]
 800921c:	7013      	strb	r3, [r2, #0]
 800921e:	e774      	b.n	800910a <_dtoa_r+0x962>
 8009220:	4638      	mov	r0, r7
 8009222:	e7b9      	b.n	8009198 <_dtoa_r+0x9f0>
 8009224:	2201      	movs	r2, #1
 8009226:	e7e2      	b.n	80091ee <_dtoa_r+0xa46>
 8009228:	f1b9 0f00 	cmp.w	r9, #0
 800922c:	db06      	blt.n	800923c <_dtoa_r+0xa94>
 800922e:	9905      	ldr	r1, [sp, #20]
 8009230:	ea41 0909 	orr.w	r9, r1, r9
 8009234:	9906      	ldr	r1, [sp, #24]
 8009236:	ea59 0101 	orrs.w	r1, r9, r1
 800923a:	d120      	bne.n	800927e <_dtoa_r+0xad6>
 800923c:	2a00      	cmp	r2, #0
 800923e:	ddec      	ble.n	800921a <_dtoa_r+0xa72>
 8009240:	4659      	mov	r1, fp
 8009242:	2201      	movs	r2, #1
 8009244:	4620      	mov	r0, r4
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	f000 fe92 	bl	8009f70 <__lshift>
 800924c:	4631      	mov	r1, r6
 800924e:	4683      	mov	fp, r0
 8009250:	f000 fefa 	bl	800a048 <__mcmp>
 8009254:	2800      	cmp	r0, #0
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	dc02      	bgt.n	8009260 <_dtoa_r+0xab8>
 800925a:	d1de      	bne.n	800921a <_dtoa_r+0xa72>
 800925c:	07da      	lsls	r2, r3, #31
 800925e:	d5dc      	bpl.n	800921a <_dtoa_r+0xa72>
 8009260:	2b39      	cmp	r3, #57	; 0x39
 8009262:	d1d8      	bne.n	8009216 <_dtoa_r+0xa6e>
 8009264:	9a02      	ldr	r2, [sp, #8]
 8009266:	2339      	movs	r3, #57	; 0x39
 8009268:	7013      	strb	r3, [r2, #0]
 800926a:	462b      	mov	r3, r5
 800926c:	461d      	mov	r5, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009274:	2a39      	cmp	r2, #57	; 0x39
 8009276:	d050      	beq.n	800931a <_dtoa_r+0xb72>
 8009278:	3201      	adds	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	e745      	b.n	800910a <_dtoa_r+0x962>
 800927e:	2a00      	cmp	r2, #0
 8009280:	dd03      	ble.n	800928a <_dtoa_r+0xae2>
 8009282:	2b39      	cmp	r3, #57	; 0x39
 8009284:	d0ee      	beq.n	8009264 <_dtoa_r+0xabc>
 8009286:	3301      	adds	r3, #1
 8009288:	e7c7      	b.n	800921a <_dtoa_r+0xa72>
 800928a:	9a01      	ldr	r2, [sp, #4]
 800928c:	9907      	ldr	r1, [sp, #28]
 800928e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009292:	428a      	cmp	r2, r1
 8009294:	d02a      	beq.n	80092ec <_dtoa_r+0xb44>
 8009296:	4659      	mov	r1, fp
 8009298:	2300      	movs	r3, #0
 800929a:	220a      	movs	r2, #10
 800929c:	4620      	mov	r0, r4
 800929e:	f000 fc6d 	bl	8009b7c <__multadd>
 80092a2:	45b8      	cmp	r8, r7
 80092a4:	4683      	mov	fp, r0
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	f04f 020a 	mov.w	r2, #10
 80092ae:	4641      	mov	r1, r8
 80092b0:	4620      	mov	r0, r4
 80092b2:	d107      	bne.n	80092c4 <_dtoa_r+0xb1c>
 80092b4:	f000 fc62 	bl	8009b7c <__multadd>
 80092b8:	4680      	mov	r8, r0
 80092ba:	4607      	mov	r7, r0
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	3301      	adds	r3, #1
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	e775      	b.n	80091b0 <_dtoa_r+0xa08>
 80092c4:	f000 fc5a 	bl	8009b7c <__multadd>
 80092c8:	4639      	mov	r1, r7
 80092ca:	4680      	mov	r8, r0
 80092cc:	2300      	movs	r3, #0
 80092ce:	220a      	movs	r2, #10
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 fc53 	bl	8009b7c <__multadd>
 80092d6:	4607      	mov	r7, r0
 80092d8:	e7f0      	b.n	80092bc <_dtoa_r+0xb14>
 80092da:	f1b9 0f00 	cmp.w	r9, #0
 80092de:	9a00      	ldr	r2, [sp, #0]
 80092e0:	bfcc      	ite	gt
 80092e2:	464d      	movgt	r5, r9
 80092e4:	2501      	movle	r5, #1
 80092e6:	4415      	add	r5, r2
 80092e8:	f04f 0800 	mov.w	r8, #0
 80092ec:	4659      	mov	r1, fp
 80092ee:	2201      	movs	r2, #1
 80092f0:	4620      	mov	r0, r4
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	f000 fe3c 	bl	8009f70 <__lshift>
 80092f8:	4631      	mov	r1, r6
 80092fa:	4683      	mov	fp, r0
 80092fc:	f000 fea4 	bl	800a048 <__mcmp>
 8009300:	2800      	cmp	r0, #0
 8009302:	dcb2      	bgt.n	800926a <_dtoa_r+0xac2>
 8009304:	d102      	bne.n	800930c <_dtoa_r+0xb64>
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	07db      	lsls	r3, r3, #31
 800930a:	d4ae      	bmi.n	800926a <_dtoa_r+0xac2>
 800930c:	462b      	mov	r3, r5
 800930e:	461d      	mov	r5, r3
 8009310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009314:	2a30      	cmp	r2, #48	; 0x30
 8009316:	d0fa      	beq.n	800930e <_dtoa_r+0xb66>
 8009318:	e6f7      	b.n	800910a <_dtoa_r+0x962>
 800931a:	9a00      	ldr	r2, [sp, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d1a5      	bne.n	800926c <_dtoa_r+0xac4>
 8009320:	f10a 0a01 	add.w	sl, sl, #1
 8009324:	2331      	movs	r3, #49	; 0x31
 8009326:	e779      	b.n	800921c <_dtoa_r+0xa74>
 8009328:	4b13      	ldr	r3, [pc, #76]	; (8009378 <_dtoa_r+0xbd0>)
 800932a:	f7ff baaf 	b.w	800888c <_dtoa_r+0xe4>
 800932e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009330:	2b00      	cmp	r3, #0
 8009332:	f47f aa86 	bne.w	8008842 <_dtoa_r+0x9a>
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <_dtoa_r+0xbd4>)
 8009338:	f7ff baa8 	b.w	800888c <_dtoa_r+0xe4>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	dc03      	bgt.n	800934a <_dtoa_r+0xba2>
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	2b02      	cmp	r3, #2
 8009346:	f73f aec9 	bgt.w	80090dc <_dtoa_r+0x934>
 800934a:	9d00      	ldr	r5, [sp, #0]
 800934c:	4631      	mov	r1, r6
 800934e:	4658      	mov	r0, fp
 8009350:	f7ff f99c 	bl	800868c <quorem>
 8009354:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009358:	f805 3b01 	strb.w	r3, [r5], #1
 800935c:	9a00      	ldr	r2, [sp, #0]
 800935e:	1aaa      	subs	r2, r5, r2
 8009360:	4591      	cmp	r9, r2
 8009362:	ddba      	ble.n	80092da <_dtoa_r+0xb32>
 8009364:	4659      	mov	r1, fp
 8009366:	2300      	movs	r3, #0
 8009368:	220a      	movs	r2, #10
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fc06 	bl	8009b7c <__multadd>
 8009370:	4683      	mov	fp, r0
 8009372:	e7eb      	b.n	800934c <_dtoa_r+0xba4>
 8009374:	0800b8cc 	.word	0x0800b8cc
 8009378:	0800b6c8 	.word	0x0800b6c8
 800937c:	0800b849 	.word	0x0800b849

08009380 <rshift>:
 8009380:	6903      	ldr	r3, [r0, #16]
 8009382:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800938a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800938e:	f100 0414 	add.w	r4, r0, #20
 8009392:	dd45      	ble.n	8009420 <rshift+0xa0>
 8009394:	f011 011f 	ands.w	r1, r1, #31
 8009398:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800939c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093a0:	d10c      	bne.n	80093bc <rshift+0x3c>
 80093a2:	f100 0710 	add.w	r7, r0, #16
 80093a6:	4629      	mov	r1, r5
 80093a8:	42b1      	cmp	r1, r6
 80093aa:	d334      	bcc.n	8009416 <rshift+0x96>
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	1eea      	subs	r2, r5, #3
 80093b2:	4296      	cmp	r6, r2
 80093b4:	bf38      	it	cc
 80093b6:	2300      	movcc	r3, #0
 80093b8:	4423      	add	r3, r4
 80093ba:	e015      	b.n	80093e8 <rshift+0x68>
 80093bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093c0:	f1c1 0820 	rsb	r8, r1, #32
 80093c4:	40cf      	lsrs	r7, r1
 80093c6:	f105 0e04 	add.w	lr, r5, #4
 80093ca:	46a1      	mov	r9, r4
 80093cc:	4576      	cmp	r6, lr
 80093ce:	46f4      	mov	ip, lr
 80093d0:	d815      	bhi.n	80093fe <rshift+0x7e>
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	009a      	lsls	r2, r3, #2
 80093d6:	3a04      	subs	r2, #4
 80093d8:	3501      	adds	r5, #1
 80093da:	42ae      	cmp	r6, r5
 80093dc:	bf38      	it	cc
 80093de:	2200      	movcc	r2, #0
 80093e0:	18a3      	adds	r3, r4, r2
 80093e2:	50a7      	str	r7, [r4, r2]
 80093e4:	b107      	cbz	r7, 80093e8 <rshift+0x68>
 80093e6:	3304      	adds	r3, #4
 80093e8:	1b1a      	subs	r2, r3, r4
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093f0:	bf08      	it	eq
 80093f2:	2300      	moveq	r3, #0
 80093f4:	6102      	str	r2, [r0, #16]
 80093f6:	bf08      	it	eq
 80093f8:	6143      	streq	r3, [r0, #20]
 80093fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fe:	f8dc c000 	ldr.w	ip, [ip]
 8009402:	fa0c fc08 	lsl.w	ip, ip, r8
 8009406:	ea4c 0707 	orr.w	r7, ip, r7
 800940a:	f849 7b04 	str.w	r7, [r9], #4
 800940e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009412:	40cf      	lsrs	r7, r1
 8009414:	e7da      	b.n	80093cc <rshift+0x4c>
 8009416:	f851 cb04 	ldr.w	ip, [r1], #4
 800941a:	f847 cf04 	str.w	ip, [r7, #4]!
 800941e:	e7c3      	b.n	80093a8 <rshift+0x28>
 8009420:	4623      	mov	r3, r4
 8009422:	e7e1      	b.n	80093e8 <rshift+0x68>

08009424 <__hexdig_fun>:
 8009424:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009428:	2b09      	cmp	r3, #9
 800942a:	d802      	bhi.n	8009432 <__hexdig_fun+0xe>
 800942c:	3820      	subs	r0, #32
 800942e:	b2c0      	uxtb	r0, r0
 8009430:	4770      	bx	lr
 8009432:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009436:	2b05      	cmp	r3, #5
 8009438:	d801      	bhi.n	800943e <__hexdig_fun+0x1a>
 800943a:	3847      	subs	r0, #71	; 0x47
 800943c:	e7f7      	b.n	800942e <__hexdig_fun+0xa>
 800943e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009442:	2b05      	cmp	r3, #5
 8009444:	d801      	bhi.n	800944a <__hexdig_fun+0x26>
 8009446:	3827      	subs	r0, #39	; 0x27
 8009448:	e7f1      	b.n	800942e <__hexdig_fun+0xa>
 800944a:	2000      	movs	r0, #0
 800944c:	4770      	bx	lr
	...

08009450 <__gethex>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	ed2d 8b02 	vpush	{d8}
 8009458:	b089      	sub	sp, #36	; 0x24
 800945a:	ee08 0a10 	vmov	s16, r0
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	4bbc      	ldr	r3, [pc, #752]	; (8009754 <__gethex+0x304>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	4618      	mov	r0, r3
 8009468:	468b      	mov	fp, r1
 800946a:	4690      	mov	r8, r2
 800946c:	f7f6 feb0 	bl	80001d0 <strlen>
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	f8db 2000 	ldr.w	r2, [fp]
 8009476:	4403      	add	r3, r0
 8009478:	4682      	mov	sl, r0
 800947a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800947e:	9305      	str	r3, [sp, #20]
 8009480:	1c93      	adds	r3, r2, #2
 8009482:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009486:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800948a:	32fe      	adds	r2, #254	; 0xfe
 800948c:	18d1      	adds	r1, r2, r3
 800948e:	461f      	mov	r7, r3
 8009490:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009494:	9100      	str	r1, [sp, #0]
 8009496:	2830      	cmp	r0, #48	; 0x30
 8009498:	d0f8      	beq.n	800948c <__gethex+0x3c>
 800949a:	f7ff ffc3 	bl	8009424 <__hexdig_fun>
 800949e:	4604      	mov	r4, r0
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d13a      	bne.n	800951a <__gethex+0xca>
 80094a4:	9901      	ldr	r1, [sp, #4]
 80094a6:	4652      	mov	r2, sl
 80094a8:	4638      	mov	r0, r7
 80094aa:	f001 f9ed 	bl	800a888 <strncmp>
 80094ae:	4605      	mov	r5, r0
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d168      	bne.n	8009586 <__gethex+0x136>
 80094b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80094b8:	eb07 060a 	add.w	r6, r7, sl
 80094bc:	f7ff ffb2 	bl	8009424 <__hexdig_fun>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d062      	beq.n	800958a <__gethex+0x13a>
 80094c4:	4633      	mov	r3, r6
 80094c6:	7818      	ldrb	r0, [r3, #0]
 80094c8:	2830      	cmp	r0, #48	; 0x30
 80094ca:	461f      	mov	r7, r3
 80094cc:	f103 0301 	add.w	r3, r3, #1
 80094d0:	d0f9      	beq.n	80094c6 <__gethex+0x76>
 80094d2:	f7ff ffa7 	bl	8009424 <__hexdig_fun>
 80094d6:	2301      	movs	r3, #1
 80094d8:	fab0 f480 	clz	r4, r0
 80094dc:	0964      	lsrs	r4, r4, #5
 80094de:	4635      	mov	r5, r6
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	463a      	mov	r2, r7
 80094e4:	4616      	mov	r6, r2
 80094e6:	3201      	adds	r2, #1
 80094e8:	7830      	ldrb	r0, [r6, #0]
 80094ea:	f7ff ff9b 	bl	8009424 <__hexdig_fun>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d1f8      	bne.n	80094e4 <__gethex+0x94>
 80094f2:	9901      	ldr	r1, [sp, #4]
 80094f4:	4652      	mov	r2, sl
 80094f6:	4630      	mov	r0, r6
 80094f8:	f001 f9c6 	bl	800a888 <strncmp>
 80094fc:	b980      	cbnz	r0, 8009520 <__gethex+0xd0>
 80094fe:	b94d      	cbnz	r5, 8009514 <__gethex+0xc4>
 8009500:	eb06 050a 	add.w	r5, r6, sl
 8009504:	462a      	mov	r2, r5
 8009506:	4616      	mov	r6, r2
 8009508:	3201      	adds	r2, #1
 800950a:	7830      	ldrb	r0, [r6, #0]
 800950c:	f7ff ff8a 	bl	8009424 <__hexdig_fun>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1f8      	bne.n	8009506 <__gethex+0xb6>
 8009514:	1bad      	subs	r5, r5, r6
 8009516:	00ad      	lsls	r5, r5, #2
 8009518:	e004      	b.n	8009524 <__gethex+0xd4>
 800951a:	2400      	movs	r4, #0
 800951c:	4625      	mov	r5, r4
 800951e:	e7e0      	b.n	80094e2 <__gethex+0x92>
 8009520:	2d00      	cmp	r5, #0
 8009522:	d1f7      	bne.n	8009514 <__gethex+0xc4>
 8009524:	7833      	ldrb	r3, [r6, #0]
 8009526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800952a:	2b50      	cmp	r3, #80	; 0x50
 800952c:	d13b      	bne.n	80095a6 <__gethex+0x156>
 800952e:	7873      	ldrb	r3, [r6, #1]
 8009530:	2b2b      	cmp	r3, #43	; 0x2b
 8009532:	d02c      	beq.n	800958e <__gethex+0x13e>
 8009534:	2b2d      	cmp	r3, #45	; 0x2d
 8009536:	d02e      	beq.n	8009596 <__gethex+0x146>
 8009538:	1c71      	adds	r1, r6, #1
 800953a:	f04f 0900 	mov.w	r9, #0
 800953e:	7808      	ldrb	r0, [r1, #0]
 8009540:	f7ff ff70 	bl	8009424 <__hexdig_fun>
 8009544:	1e43      	subs	r3, r0, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b18      	cmp	r3, #24
 800954a:	d82c      	bhi.n	80095a6 <__gethex+0x156>
 800954c:	f1a0 0210 	sub.w	r2, r0, #16
 8009550:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009554:	f7ff ff66 	bl	8009424 <__hexdig_fun>
 8009558:	1e43      	subs	r3, r0, #1
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b18      	cmp	r3, #24
 800955e:	d91d      	bls.n	800959c <__gethex+0x14c>
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	d000      	beq.n	8009568 <__gethex+0x118>
 8009566:	4252      	negs	r2, r2
 8009568:	4415      	add	r5, r2
 800956a:	f8cb 1000 	str.w	r1, [fp]
 800956e:	b1e4      	cbz	r4, 80095aa <__gethex+0x15a>
 8009570:	9b00      	ldr	r3, [sp, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2700      	movne	r7, #0
 8009578:	2706      	moveq	r7, #6
 800957a:	4638      	mov	r0, r7
 800957c:	b009      	add	sp, #36	; 0x24
 800957e:	ecbd 8b02 	vpop	{d8}
 8009582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009586:	463e      	mov	r6, r7
 8009588:	4625      	mov	r5, r4
 800958a:	2401      	movs	r4, #1
 800958c:	e7ca      	b.n	8009524 <__gethex+0xd4>
 800958e:	f04f 0900 	mov.w	r9, #0
 8009592:	1cb1      	adds	r1, r6, #2
 8009594:	e7d3      	b.n	800953e <__gethex+0xee>
 8009596:	f04f 0901 	mov.w	r9, #1
 800959a:	e7fa      	b.n	8009592 <__gethex+0x142>
 800959c:	230a      	movs	r3, #10
 800959e:	fb03 0202 	mla	r2, r3, r2, r0
 80095a2:	3a10      	subs	r2, #16
 80095a4:	e7d4      	b.n	8009550 <__gethex+0x100>
 80095a6:	4631      	mov	r1, r6
 80095a8:	e7df      	b.n	800956a <__gethex+0x11a>
 80095aa:	1bf3      	subs	r3, r6, r7
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4621      	mov	r1, r4
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	dc0b      	bgt.n	80095cc <__gethex+0x17c>
 80095b4:	ee18 0a10 	vmov	r0, s16
 80095b8:	f000 fa7e 	bl	8009ab8 <_Balloc>
 80095bc:	4604      	mov	r4, r0
 80095be:	b940      	cbnz	r0, 80095d2 <__gethex+0x182>
 80095c0:	4b65      	ldr	r3, [pc, #404]	; (8009758 <__gethex+0x308>)
 80095c2:	4602      	mov	r2, r0
 80095c4:	21de      	movs	r1, #222	; 0xde
 80095c6:	4865      	ldr	r0, [pc, #404]	; (800975c <__gethex+0x30c>)
 80095c8:	f001 f97e 	bl	800a8c8 <__assert_func>
 80095cc:	3101      	adds	r1, #1
 80095ce:	105b      	asrs	r3, r3, #1
 80095d0:	e7ee      	b.n	80095b0 <__gethex+0x160>
 80095d2:	f100 0914 	add.w	r9, r0, #20
 80095d6:	f04f 0b00 	mov.w	fp, #0
 80095da:	f1ca 0301 	rsb	r3, sl, #1
 80095de:	f8cd 9008 	str.w	r9, [sp, #8]
 80095e2:	f8cd b000 	str.w	fp, [sp]
 80095e6:	9306      	str	r3, [sp, #24]
 80095e8:	42b7      	cmp	r7, r6
 80095ea:	d340      	bcc.n	800966e <__gethex+0x21e>
 80095ec:	9802      	ldr	r0, [sp, #8]
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	f840 3b04 	str.w	r3, [r0], #4
 80095f4:	eba0 0009 	sub.w	r0, r0, r9
 80095f8:	1080      	asrs	r0, r0, #2
 80095fa:	0146      	lsls	r6, r0, #5
 80095fc:	6120      	str	r0, [r4, #16]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fb50 	bl	8009ca4 <__hi0bits>
 8009604:	1a30      	subs	r0, r6, r0
 8009606:	f8d8 6000 	ldr.w	r6, [r8]
 800960a:	42b0      	cmp	r0, r6
 800960c:	dd63      	ble.n	80096d6 <__gethex+0x286>
 800960e:	1b87      	subs	r7, r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	4620      	mov	r0, r4
 8009614:	f000 feea 	bl	800a3ec <__any_on>
 8009618:	4682      	mov	sl, r0
 800961a:	b1a8      	cbz	r0, 8009648 <__gethex+0x1f8>
 800961c:	1e7b      	subs	r3, r7, #1
 800961e:	1159      	asrs	r1, r3, #5
 8009620:	f003 021f 	and.w	r2, r3, #31
 8009624:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009628:	f04f 0a01 	mov.w	sl, #1
 800962c:	fa0a f202 	lsl.w	r2, sl, r2
 8009630:	420a      	tst	r2, r1
 8009632:	d009      	beq.n	8009648 <__gethex+0x1f8>
 8009634:	4553      	cmp	r3, sl
 8009636:	dd05      	ble.n	8009644 <__gethex+0x1f4>
 8009638:	1eb9      	subs	r1, r7, #2
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fed6 	bl	800a3ec <__any_on>
 8009640:	2800      	cmp	r0, #0
 8009642:	d145      	bne.n	80096d0 <__gethex+0x280>
 8009644:	f04f 0a02 	mov.w	sl, #2
 8009648:	4639      	mov	r1, r7
 800964a:	4620      	mov	r0, r4
 800964c:	f7ff fe98 	bl	8009380 <rshift>
 8009650:	443d      	add	r5, r7
 8009652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009656:	42ab      	cmp	r3, r5
 8009658:	da4c      	bge.n	80096f4 <__gethex+0x2a4>
 800965a:	ee18 0a10 	vmov	r0, s16
 800965e:	4621      	mov	r1, r4
 8009660:	f000 fa6a 	bl	8009b38 <_Bfree>
 8009664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009666:	2300      	movs	r3, #0
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	27a3      	movs	r7, #163	; 0xa3
 800966c:	e785      	b.n	800957a <__gethex+0x12a>
 800966e:	1e73      	subs	r3, r6, #1
 8009670:	9a05      	ldr	r2, [sp, #20]
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009678:	4293      	cmp	r3, r2
 800967a:	d019      	beq.n	80096b0 <__gethex+0x260>
 800967c:	f1bb 0f20 	cmp.w	fp, #32
 8009680:	d107      	bne.n	8009692 <__gethex+0x242>
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	9a00      	ldr	r2, [sp, #0]
 8009686:	f843 2b04 	str.w	r2, [r3], #4
 800968a:	9302      	str	r3, [sp, #8]
 800968c:	2300      	movs	r3, #0
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	469b      	mov	fp, r3
 8009692:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009696:	f7ff fec5 	bl	8009424 <__hexdig_fun>
 800969a:	9b00      	ldr	r3, [sp, #0]
 800969c:	f000 000f 	and.w	r0, r0, #15
 80096a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80096a4:	4303      	orrs	r3, r0
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	f10b 0b04 	add.w	fp, fp, #4
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	e00d      	b.n	80096cc <__gethex+0x27c>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	9a06      	ldr	r2, [sp, #24]
 80096b4:	4413      	add	r3, r2
 80096b6:	42bb      	cmp	r3, r7
 80096b8:	d3e0      	bcc.n	800967c <__gethex+0x22c>
 80096ba:	4618      	mov	r0, r3
 80096bc:	9901      	ldr	r1, [sp, #4]
 80096be:	9307      	str	r3, [sp, #28]
 80096c0:	4652      	mov	r2, sl
 80096c2:	f001 f8e1 	bl	800a888 <strncmp>
 80096c6:	9b07      	ldr	r3, [sp, #28]
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1d7      	bne.n	800967c <__gethex+0x22c>
 80096cc:	461e      	mov	r6, r3
 80096ce:	e78b      	b.n	80095e8 <__gethex+0x198>
 80096d0:	f04f 0a03 	mov.w	sl, #3
 80096d4:	e7b8      	b.n	8009648 <__gethex+0x1f8>
 80096d6:	da0a      	bge.n	80096ee <__gethex+0x29e>
 80096d8:	1a37      	subs	r7, r6, r0
 80096da:	4621      	mov	r1, r4
 80096dc:	ee18 0a10 	vmov	r0, s16
 80096e0:	463a      	mov	r2, r7
 80096e2:	f000 fc45 	bl	8009f70 <__lshift>
 80096e6:	1bed      	subs	r5, r5, r7
 80096e8:	4604      	mov	r4, r0
 80096ea:	f100 0914 	add.w	r9, r0, #20
 80096ee:	f04f 0a00 	mov.w	sl, #0
 80096f2:	e7ae      	b.n	8009652 <__gethex+0x202>
 80096f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80096f8:	42a8      	cmp	r0, r5
 80096fa:	dd72      	ble.n	80097e2 <__gethex+0x392>
 80096fc:	1b45      	subs	r5, r0, r5
 80096fe:	42ae      	cmp	r6, r5
 8009700:	dc36      	bgt.n	8009770 <__gethex+0x320>
 8009702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d02a      	beq.n	8009760 <__gethex+0x310>
 800970a:	2b03      	cmp	r3, #3
 800970c:	d02c      	beq.n	8009768 <__gethex+0x318>
 800970e:	2b01      	cmp	r3, #1
 8009710:	d115      	bne.n	800973e <__gethex+0x2ee>
 8009712:	42ae      	cmp	r6, r5
 8009714:	d113      	bne.n	800973e <__gethex+0x2ee>
 8009716:	2e01      	cmp	r6, #1
 8009718:	d10b      	bne.n	8009732 <__gethex+0x2e2>
 800971a:	9a04      	ldr	r2, [sp, #16]
 800971c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	2301      	movs	r3, #1
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	f8c9 3000 	str.w	r3, [r9]
 800972a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800972c:	2762      	movs	r7, #98	; 0x62
 800972e:	601c      	str	r4, [r3, #0]
 8009730:	e723      	b.n	800957a <__gethex+0x12a>
 8009732:	1e71      	subs	r1, r6, #1
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fe59 	bl	800a3ec <__any_on>
 800973a:	2800      	cmp	r0, #0
 800973c:	d1ed      	bne.n	800971a <__gethex+0x2ca>
 800973e:	ee18 0a10 	vmov	r0, s16
 8009742:	4621      	mov	r1, r4
 8009744:	f000 f9f8 	bl	8009b38 <_Bfree>
 8009748:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800974a:	2300      	movs	r3, #0
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	2750      	movs	r7, #80	; 0x50
 8009750:	e713      	b.n	800957a <__gethex+0x12a>
 8009752:	bf00      	nop
 8009754:	0800b948 	.word	0x0800b948
 8009758:	0800b8cc 	.word	0x0800b8cc
 800975c:	0800b8dd 	.word	0x0800b8dd
 8009760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1eb      	bne.n	800973e <__gethex+0x2ee>
 8009766:	e7d8      	b.n	800971a <__gethex+0x2ca>
 8009768:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1d5      	bne.n	800971a <__gethex+0x2ca>
 800976e:	e7e6      	b.n	800973e <__gethex+0x2ee>
 8009770:	1e6f      	subs	r7, r5, #1
 8009772:	f1ba 0f00 	cmp.w	sl, #0
 8009776:	d131      	bne.n	80097dc <__gethex+0x38c>
 8009778:	b127      	cbz	r7, 8009784 <__gethex+0x334>
 800977a:	4639      	mov	r1, r7
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fe35 	bl	800a3ec <__any_on>
 8009782:	4682      	mov	sl, r0
 8009784:	117b      	asrs	r3, r7, #5
 8009786:	2101      	movs	r1, #1
 8009788:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800978c:	f007 071f 	and.w	r7, r7, #31
 8009790:	fa01 f707 	lsl.w	r7, r1, r7
 8009794:	421f      	tst	r7, r3
 8009796:	4629      	mov	r1, r5
 8009798:	4620      	mov	r0, r4
 800979a:	bf18      	it	ne
 800979c:	f04a 0a02 	orrne.w	sl, sl, #2
 80097a0:	1b76      	subs	r6, r6, r5
 80097a2:	f7ff fded 	bl	8009380 <rshift>
 80097a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097aa:	2702      	movs	r7, #2
 80097ac:	f1ba 0f00 	cmp.w	sl, #0
 80097b0:	d048      	beq.n	8009844 <__gethex+0x3f4>
 80097b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d015      	beq.n	80097e6 <__gethex+0x396>
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d017      	beq.n	80097ee <__gethex+0x39e>
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d109      	bne.n	80097d6 <__gethex+0x386>
 80097c2:	f01a 0f02 	tst.w	sl, #2
 80097c6:	d006      	beq.n	80097d6 <__gethex+0x386>
 80097c8:	f8d9 0000 	ldr.w	r0, [r9]
 80097cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80097d0:	f01a 0f01 	tst.w	sl, #1
 80097d4:	d10e      	bne.n	80097f4 <__gethex+0x3a4>
 80097d6:	f047 0710 	orr.w	r7, r7, #16
 80097da:	e033      	b.n	8009844 <__gethex+0x3f4>
 80097dc:	f04f 0a01 	mov.w	sl, #1
 80097e0:	e7d0      	b.n	8009784 <__gethex+0x334>
 80097e2:	2701      	movs	r7, #1
 80097e4:	e7e2      	b.n	80097ac <__gethex+0x35c>
 80097e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097e8:	f1c3 0301 	rsb	r3, r3, #1
 80097ec:	9315      	str	r3, [sp, #84]	; 0x54
 80097ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0f0      	beq.n	80097d6 <__gethex+0x386>
 80097f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097f8:	f104 0314 	add.w	r3, r4, #20
 80097fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009800:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009804:	f04f 0c00 	mov.w	ip, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f853 2b04 	ldr.w	r2, [r3], #4
 800980e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009812:	d01c      	beq.n	800984e <__gethex+0x3fe>
 8009814:	3201      	adds	r2, #1
 8009816:	6002      	str	r2, [r0, #0]
 8009818:	2f02      	cmp	r7, #2
 800981a:	f104 0314 	add.w	r3, r4, #20
 800981e:	d13f      	bne.n	80098a0 <__gethex+0x450>
 8009820:	f8d8 2000 	ldr.w	r2, [r8]
 8009824:	3a01      	subs	r2, #1
 8009826:	42b2      	cmp	r2, r6
 8009828:	d10a      	bne.n	8009840 <__gethex+0x3f0>
 800982a:	1171      	asrs	r1, r6, #5
 800982c:	2201      	movs	r2, #1
 800982e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009832:	f006 061f 	and.w	r6, r6, #31
 8009836:	fa02 f606 	lsl.w	r6, r2, r6
 800983a:	421e      	tst	r6, r3
 800983c:	bf18      	it	ne
 800983e:	4617      	movne	r7, r2
 8009840:	f047 0720 	orr.w	r7, r7, #32
 8009844:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009846:	601c      	str	r4, [r3, #0]
 8009848:	9b04      	ldr	r3, [sp, #16]
 800984a:	601d      	str	r5, [r3, #0]
 800984c:	e695      	b.n	800957a <__gethex+0x12a>
 800984e:	4299      	cmp	r1, r3
 8009850:	f843 cc04 	str.w	ip, [r3, #-4]
 8009854:	d8d8      	bhi.n	8009808 <__gethex+0x3b8>
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	459b      	cmp	fp, r3
 800985a:	db19      	blt.n	8009890 <__gethex+0x440>
 800985c:	6861      	ldr	r1, [r4, #4]
 800985e:	ee18 0a10 	vmov	r0, s16
 8009862:	3101      	adds	r1, #1
 8009864:	f000 f928 	bl	8009ab8 <_Balloc>
 8009868:	4681      	mov	r9, r0
 800986a:	b918      	cbnz	r0, 8009874 <__gethex+0x424>
 800986c:	4b1a      	ldr	r3, [pc, #104]	; (80098d8 <__gethex+0x488>)
 800986e:	4602      	mov	r2, r0
 8009870:	2184      	movs	r1, #132	; 0x84
 8009872:	e6a8      	b.n	80095c6 <__gethex+0x176>
 8009874:	6922      	ldr	r2, [r4, #16]
 8009876:	3202      	adds	r2, #2
 8009878:	f104 010c 	add.w	r1, r4, #12
 800987c:	0092      	lsls	r2, r2, #2
 800987e:	300c      	adds	r0, #12
 8009880:	f000 f90c 	bl	8009a9c <memcpy>
 8009884:	4621      	mov	r1, r4
 8009886:	ee18 0a10 	vmov	r0, s16
 800988a:	f000 f955 	bl	8009b38 <_Bfree>
 800988e:	464c      	mov	r4, r9
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009898:	6122      	str	r2, [r4, #16]
 800989a:	2201      	movs	r2, #1
 800989c:	615a      	str	r2, [r3, #20]
 800989e:	e7bb      	b.n	8009818 <__gethex+0x3c8>
 80098a0:	6922      	ldr	r2, [r4, #16]
 80098a2:	455a      	cmp	r2, fp
 80098a4:	dd0b      	ble.n	80098be <__gethex+0x46e>
 80098a6:	2101      	movs	r1, #1
 80098a8:	4620      	mov	r0, r4
 80098aa:	f7ff fd69 	bl	8009380 <rshift>
 80098ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098b2:	3501      	adds	r5, #1
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	f6ff aed0 	blt.w	800965a <__gethex+0x20a>
 80098ba:	2701      	movs	r7, #1
 80098bc:	e7c0      	b.n	8009840 <__gethex+0x3f0>
 80098be:	f016 061f 	ands.w	r6, r6, #31
 80098c2:	d0fa      	beq.n	80098ba <__gethex+0x46a>
 80098c4:	449a      	add	sl, r3
 80098c6:	f1c6 0620 	rsb	r6, r6, #32
 80098ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80098ce:	f000 f9e9 	bl	8009ca4 <__hi0bits>
 80098d2:	42b0      	cmp	r0, r6
 80098d4:	dbe7      	blt.n	80098a6 <__gethex+0x456>
 80098d6:	e7f0      	b.n	80098ba <__gethex+0x46a>
 80098d8:	0800b8cc 	.word	0x0800b8cc

080098dc <L_shift>:
 80098dc:	f1c2 0208 	rsb	r2, r2, #8
 80098e0:	0092      	lsls	r2, r2, #2
 80098e2:	b570      	push	{r4, r5, r6, lr}
 80098e4:	f1c2 0620 	rsb	r6, r2, #32
 80098e8:	6843      	ldr	r3, [r0, #4]
 80098ea:	6804      	ldr	r4, [r0, #0]
 80098ec:	fa03 f506 	lsl.w	r5, r3, r6
 80098f0:	432c      	orrs	r4, r5
 80098f2:	40d3      	lsrs	r3, r2
 80098f4:	6004      	str	r4, [r0, #0]
 80098f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80098fa:	4288      	cmp	r0, r1
 80098fc:	d3f4      	bcc.n	80098e8 <L_shift+0xc>
 80098fe:	bd70      	pop	{r4, r5, r6, pc}

08009900 <__match>:
 8009900:	b530      	push	{r4, r5, lr}
 8009902:	6803      	ldr	r3, [r0, #0]
 8009904:	3301      	adds	r3, #1
 8009906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800990a:	b914      	cbnz	r4, 8009912 <__match+0x12>
 800990c:	6003      	str	r3, [r0, #0]
 800990e:	2001      	movs	r0, #1
 8009910:	bd30      	pop	{r4, r5, pc}
 8009912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009916:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800991a:	2d19      	cmp	r5, #25
 800991c:	bf98      	it	ls
 800991e:	3220      	addls	r2, #32
 8009920:	42a2      	cmp	r2, r4
 8009922:	d0f0      	beq.n	8009906 <__match+0x6>
 8009924:	2000      	movs	r0, #0
 8009926:	e7f3      	b.n	8009910 <__match+0x10>

08009928 <__hexnan>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	680b      	ldr	r3, [r1, #0]
 800992e:	6801      	ldr	r1, [r0, #0]
 8009930:	115e      	asrs	r6, r3, #5
 8009932:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009936:	f013 031f 	ands.w	r3, r3, #31
 800993a:	b087      	sub	sp, #28
 800993c:	bf18      	it	ne
 800993e:	3604      	addne	r6, #4
 8009940:	2500      	movs	r5, #0
 8009942:	1f37      	subs	r7, r6, #4
 8009944:	4682      	mov	sl, r0
 8009946:	4690      	mov	r8, r2
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	f846 5c04 	str.w	r5, [r6, #-4]
 800994e:	46b9      	mov	r9, r7
 8009950:	463c      	mov	r4, r7
 8009952:	9502      	str	r5, [sp, #8]
 8009954:	46ab      	mov	fp, r5
 8009956:	784a      	ldrb	r2, [r1, #1]
 8009958:	1c4b      	adds	r3, r1, #1
 800995a:	9303      	str	r3, [sp, #12]
 800995c:	b342      	cbz	r2, 80099b0 <__hexnan+0x88>
 800995e:	4610      	mov	r0, r2
 8009960:	9105      	str	r1, [sp, #20]
 8009962:	9204      	str	r2, [sp, #16]
 8009964:	f7ff fd5e 	bl	8009424 <__hexdig_fun>
 8009968:	2800      	cmp	r0, #0
 800996a:	d14f      	bne.n	8009a0c <__hexnan+0xe4>
 800996c:	9a04      	ldr	r2, [sp, #16]
 800996e:	9905      	ldr	r1, [sp, #20]
 8009970:	2a20      	cmp	r2, #32
 8009972:	d818      	bhi.n	80099a6 <__hexnan+0x7e>
 8009974:	9b02      	ldr	r3, [sp, #8]
 8009976:	459b      	cmp	fp, r3
 8009978:	dd13      	ble.n	80099a2 <__hexnan+0x7a>
 800997a:	454c      	cmp	r4, r9
 800997c:	d206      	bcs.n	800998c <__hexnan+0x64>
 800997e:	2d07      	cmp	r5, #7
 8009980:	dc04      	bgt.n	800998c <__hexnan+0x64>
 8009982:	462a      	mov	r2, r5
 8009984:	4649      	mov	r1, r9
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff ffa8 	bl	80098dc <L_shift>
 800998c:	4544      	cmp	r4, r8
 800998e:	d950      	bls.n	8009a32 <__hexnan+0x10a>
 8009990:	2300      	movs	r3, #0
 8009992:	f1a4 0904 	sub.w	r9, r4, #4
 8009996:	f844 3c04 	str.w	r3, [r4, #-4]
 800999a:	f8cd b008 	str.w	fp, [sp, #8]
 800999e:	464c      	mov	r4, r9
 80099a0:	461d      	mov	r5, r3
 80099a2:	9903      	ldr	r1, [sp, #12]
 80099a4:	e7d7      	b.n	8009956 <__hexnan+0x2e>
 80099a6:	2a29      	cmp	r2, #41	; 0x29
 80099a8:	d156      	bne.n	8009a58 <__hexnan+0x130>
 80099aa:	3102      	adds	r1, #2
 80099ac:	f8ca 1000 	str.w	r1, [sl]
 80099b0:	f1bb 0f00 	cmp.w	fp, #0
 80099b4:	d050      	beq.n	8009a58 <__hexnan+0x130>
 80099b6:	454c      	cmp	r4, r9
 80099b8:	d206      	bcs.n	80099c8 <__hexnan+0xa0>
 80099ba:	2d07      	cmp	r5, #7
 80099bc:	dc04      	bgt.n	80099c8 <__hexnan+0xa0>
 80099be:	462a      	mov	r2, r5
 80099c0:	4649      	mov	r1, r9
 80099c2:	4620      	mov	r0, r4
 80099c4:	f7ff ff8a 	bl	80098dc <L_shift>
 80099c8:	4544      	cmp	r4, r8
 80099ca:	d934      	bls.n	8009a36 <__hexnan+0x10e>
 80099cc:	f1a8 0204 	sub.w	r2, r8, #4
 80099d0:	4623      	mov	r3, r4
 80099d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80099d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80099da:	429f      	cmp	r7, r3
 80099dc:	d2f9      	bcs.n	80099d2 <__hexnan+0xaa>
 80099de:	1b3b      	subs	r3, r7, r4
 80099e0:	f023 0303 	bic.w	r3, r3, #3
 80099e4:	3304      	adds	r3, #4
 80099e6:	3401      	adds	r4, #1
 80099e8:	3e03      	subs	r6, #3
 80099ea:	42b4      	cmp	r4, r6
 80099ec:	bf88      	it	hi
 80099ee:	2304      	movhi	r3, #4
 80099f0:	4443      	add	r3, r8
 80099f2:	2200      	movs	r2, #0
 80099f4:	f843 2b04 	str.w	r2, [r3], #4
 80099f8:	429f      	cmp	r7, r3
 80099fa:	d2fb      	bcs.n	80099f4 <__hexnan+0xcc>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	b91b      	cbnz	r3, 8009a08 <__hexnan+0xe0>
 8009a00:	4547      	cmp	r7, r8
 8009a02:	d127      	bne.n	8009a54 <__hexnan+0x12c>
 8009a04:	2301      	movs	r3, #1
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	2005      	movs	r0, #5
 8009a0a:	e026      	b.n	8009a5a <__hexnan+0x132>
 8009a0c:	3501      	adds	r5, #1
 8009a0e:	2d08      	cmp	r5, #8
 8009a10:	f10b 0b01 	add.w	fp, fp, #1
 8009a14:	dd06      	ble.n	8009a24 <__hexnan+0xfc>
 8009a16:	4544      	cmp	r4, r8
 8009a18:	d9c3      	bls.n	80099a2 <__hexnan+0x7a>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a20:	2501      	movs	r5, #1
 8009a22:	3c04      	subs	r4, #4
 8009a24:	6822      	ldr	r2, [r4, #0]
 8009a26:	f000 000f 	and.w	r0, r0, #15
 8009a2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009a2e:	6022      	str	r2, [r4, #0]
 8009a30:	e7b7      	b.n	80099a2 <__hexnan+0x7a>
 8009a32:	2508      	movs	r5, #8
 8009a34:	e7b5      	b.n	80099a2 <__hexnan+0x7a>
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0df      	beq.n	80099fc <__hexnan+0xd4>
 8009a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a40:	f1c3 0320 	rsb	r3, r3, #32
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a4c:	401a      	ands	r2, r3
 8009a4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009a52:	e7d3      	b.n	80099fc <__hexnan+0xd4>
 8009a54:	3f04      	subs	r7, #4
 8009a56:	e7d1      	b.n	80099fc <__hexnan+0xd4>
 8009a58:	2004      	movs	r0, #4
 8009a5a:	b007      	add	sp, #28
 8009a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a60 <_localeconv_r>:
 8009a60:	4800      	ldr	r0, [pc, #0]	; (8009a64 <_localeconv_r+0x4>)
 8009a62:	4770      	bx	lr
 8009a64:	20000164 	.word	0x20000164

08009a68 <malloc>:
 8009a68:	4b02      	ldr	r3, [pc, #8]	; (8009a74 <malloc+0xc>)
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	6818      	ldr	r0, [r3, #0]
 8009a6e:	f000 bd3d 	b.w	800a4ec <_malloc_r>
 8009a72:	bf00      	nop
 8009a74:	2000000c 	.word	0x2000000c

08009a78 <__ascii_mbtowc>:
 8009a78:	b082      	sub	sp, #8
 8009a7a:	b901      	cbnz	r1, 8009a7e <__ascii_mbtowc+0x6>
 8009a7c:	a901      	add	r1, sp, #4
 8009a7e:	b142      	cbz	r2, 8009a92 <__ascii_mbtowc+0x1a>
 8009a80:	b14b      	cbz	r3, 8009a96 <__ascii_mbtowc+0x1e>
 8009a82:	7813      	ldrb	r3, [r2, #0]
 8009a84:	600b      	str	r3, [r1, #0]
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	1e10      	subs	r0, r2, #0
 8009a8a:	bf18      	it	ne
 8009a8c:	2001      	movne	r0, #1
 8009a8e:	b002      	add	sp, #8
 8009a90:	4770      	bx	lr
 8009a92:	4610      	mov	r0, r2
 8009a94:	e7fb      	b.n	8009a8e <__ascii_mbtowc+0x16>
 8009a96:	f06f 0001 	mvn.w	r0, #1
 8009a9a:	e7f8      	b.n	8009a8e <__ascii_mbtowc+0x16>

08009a9c <memcpy>:
 8009a9c:	440a      	add	r2, r1
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa4:	d100      	bne.n	8009aa8 <memcpy+0xc>
 8009aa6:	4770      	bx	lr
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab2:	4291      	cmp	r1, r2
 8009ab4:	d1f9      	bne.n	8009aaa <memcpy+0xe>
 8009ab6:	bd10      	pop	{r4, pc}

08009ab8 <_Balloc>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009abc:	4604      	mov	r4, r0
 8009abe:	460d      	mov	r5, r1
 8009ac0:	b976      	cbnz	r6, 8009ae0 <_Balloc+0x28>
 8009ac2:	2010      	movs	r0, #16
 8009ac4:	f7ff ffd0 	bl	8009a68 <malloc>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6260      	str	r0, [r4, #36]	; 0x24
 8009acc:	b920      	cbnz	r0, 8009ad8 <_Balloc+0x20>
 8009ace:	4b18      	ldr	r3, [pc, #96]	; (8009b30 <_Balloc+0x78>)
 8009ad0:	4818      	ldr	r0, [pc, #96]	; (8009b34 <_Balloc+0x7c>)
 8009ad2:	2166      	movs	r1, #102	; 0x66
 8009ad4:	f000 fef8 	bl	800a8c8 <__assert_func>
 8009ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009adc:	6006      	str	r6, [r0, #0]
 8009ade:	60c6      	str	r6, [r0, #12]
 8009ae0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ae2:	68f3      	ldr	r3, [r6, #12]
 8009ae4:	b183      	cbz	r3, 8009b08 <_Balloc+0x50>
 8009ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aee:	b9b8      	cbnz	r0, 8009b20 <_Balloc+0x68>
 8009af0:	2101      	movs	r1, #1
 8009af2:	fa01 f605 	lsl.w	r6, r1, r5
 8009af6:	1d72      	adds	r2, r6, #5
 8009af8:	0092      	lsls	r2, r2, #2
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 fc97 	bl	800a42e <_calloc_r>
 8009b00:	b160      	cbz	r0, 8009b1c <_Balloc+0x64>
 8009b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b06:	e00e      	b.n	8009b26 <_Balloc+0x6e>
 8009b08:	2221      	movs	r2, #33	; 0x21
 8009b0a:	2104      	movs	r1, #4
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fc8e 	bl	800a42e <_calloc_r>
 8009b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b14:	60f0      	str	r0, [r6, #12]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e4      	bne.n	8009ae6 <_Balloc+0x2e>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}
 8009b20:	6802      	ldr	r2, [r0, #0]
 8009b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b26:	2300      	movs	r3, #0
 8009b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b2c:	e7f7      	b.n	8009b1e <_Balloc+0x66>
 8009b2e:	bf00      	nop
 8009b30:	0800b856 	.word	0x0800b856
 8009b34:	0800b95c 	.word	0x0800b95c

08009b38 <_Bfree>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	b976      	cbnz	r6, 8009b60 <_Bfree+0x28>
 8009b42:	2010      	movs	r0, #16
 8009b44:	f7ff ff90 	bl	8009a68 <malloc>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6268      	str	r0, [r5, #36]	; 0x24
 8009b4c:	b920      	cbnz	r0, 8009b58 <_Bfree+0x20>
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <_Bfree+0x3c>)
 8009b50:	4809      	ldr	r0, [pc, #36]	; (8009b78 <_Bfree+0x40>)
 8009b52:	218a      	movs	r1, #138	; 0x8a
 8009b54:	f000 feb8 	bl	800a8c8 <__assert_func>
 8009b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b5c:	6006      	str	r6, [r0, #0]
 8009b5e:	60c6      	str	r6, [r0, #12]
 8009b60:	b13c      	cbz	r4, 8009b72 <_Bfree+0x3a>
 8009b62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b64:	6862      	ldr	r2, [r4, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b6c:	6021      	str	r1, [r4, #0]
 8009b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	0800b856 	.word	0x0800b856
 8009b78:	0800b95c 	.word	0x0800b95c

08009b7c <__multadd>:
 8009b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b80:	690e      	ldr	r6, [r1, #16]
 8009b82:	4607      	mov	r7, r0
 8009b84:	4698      	mov	r8, r3
 8009b86:	460c      	mov	r4, r1
 8009b88:	f101 0014 	add.w	r0, r1, #20
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6805      	ldr	r5, [r0, #0]
 8009b90:	b2a9      	uxth	r1, r5
 8009b92:	fb02 8101 	mla	r1, r2, r1, r8
 8009b96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009b9a:	0c2d      	lsrs	r5, r5, #16
 8009b9c:	fb02 c505 	mla	r5, r2, r5, ip
 8009ba0:	b289      	uxth	r1, r1
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ba8:	429e      	cmp	r6, r3
 8009baa:	f840 1b04 	str.w	r1, [r0], #4
 8009bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009bb2:	dcec      	bgt.n	8009b8e <__multadd+0x12>
 8009bb4:	f1b8 0f00 	cmp.w	r8, #0
 8009bb8:	d022      	beq.n	8009c00 <__multadd+0x84>
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	42b3      	cmp	r3, r6
 8009bbe:	dc19      	bgt.n	8009bf4 <__multadd+0x78>
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	f7ff ff77 	bl	8009ab8 <_Balloc>
 8009bca:	4605      	mov	r5, r0
 8009bcc:	b928      	cbnz	r0, 8009bda <__multadd+0x5e>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <__multadd+0x8c>)
 8009bd2:	480e      	ldr	r0, [pc, #56]	; (8009c0c <__multadd+0x90>)
 8009bd4:	21b5      	movs	r1, #181	; 0xb5
 8009bd6:	f000 fe77 	bl	800a8c8 <__assert_func>
 8009bda:	6922      	ldr	r2, [r4, #16]
 8009bdc:	3202      	adds	r2, #2
 8009bde:	f104 010c 	add.w	r1, r4, #12
 8009be2:	0092      	lsls	r2, r2, #2
 8009be4:	300c      	adds	r0, #12
 8009be6:	f7ff ff59 	bl	8009a9c <memcpy>
 8009bea:	4621      	mov	r1, r4
 8009bec:	4638      	mov	r0, r7
 8009bee:	f7ff ffa3 	bl	8009b38 <_Bfree>
 8009bf2:	462c      	mov	r4, r5
 8009bf4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	f8c3 8014 	str.w	r8, [r3, #20]
 8009bfe:	6126      	str	r6, [r4, #16]
 8009c00:	4620      	mov	r0, r4
 8009c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c06:	bf00      	nop
 8009c08:	0800b8cc 	.word	0x0800b8cc
 8009c0c:	0800b95c 	.word	0x0800b95c

08009c10 <__s2b>:
 8009c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c14:	460c      	mov	r4, r1
 8009c16:	4615      	mov	r5, r2
 8009c18:	461f      	mov	r7, r3
 8009c1a:	2209      	movs	r2, #9
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	4606      	mov	r6, r0
 8009c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c24:	2100      	movs	r1, #0
 8009c26:	2201      	movs	r2, #1
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	db09      	blt.n	8009c40 <__s2b+0x30>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff ff43 	bl	8009ab8 <_Balloc>
 8009c32:	b940      	cbnz	r0, 8009c46 <__s2b+0x36>
 8009c34:	4602      	mov	r2, r0
 8009c36:	4b19      	ldr	r3, [pc, #100]	; (8009c9c <__s2b+0x8c>)
 8009c38:	4819      	ldr	r0, [pc, #100]	; (8009ca0 <__s2b+0x90>)
 8009c3a:	21ce      	movs	r1, #206	; 0xce
 8009c3c:	f000 fe44 	bl	800a8c8 <__assert_func>
 8009c40:	0052      	lsls	r2, r2, #1
 8009c42:	3101      	adds	r1, #1
 8009c44:	e7f0      	b.n	8009c28 <__s2b+0x18>
 8009c46:	9b08      	ldr	r3, [sp, #32]
 8009c48:	6143      	str	r3, [r0, #20]
 8009c4a:	2d09      	cmp	r5, #9
 8009c4c:	f04f 0301 	mov.w	r3, #1
 8009c50:	6103      	str	r3, [r0, #16]
 8009c52:	dd16      	ble.n	8009c82 <__s2b+0x72>
 8009c54:	f104 0909 	add.w	r9, r4, #9
 8009c58:	46c8      	mov	r8, r9
 8009c5a:	442c      	add	r4, r5
 8009c5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c60:	4601      	mov	r1, r0
 8009c62:	3b30      	subs	r3, #48	; 0x30
 8009c64:	220a      	movs	r2, #10
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ff88 	bl	8009b7c <__multadd>
 8009c6c:	45a0      	cmp	r8, r4
 8009c6e:	d1f5      	bne.n	8009c5c <__s2b+0x4c>
 8009c70:	f1a5 0408 	sub.w	r4, r5, #8
 8009c74:	444c      	add	r4, r9
 8009c76:	1b2d      	subs	r5, r5, r4
 8009c78:	1963      	adds	r3, r4, r5
 8009c7a:	42bb      	cmp	r3, r7
 8009c7c:	db04      	blt.n	8009c88 <__s2b+0x78>
 8009c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c82:	340a      	adds	r4, #10
 8009c84:	2509      	movs	r5, #9
 8009c86:	e7f6      	b.n	8009c76 <__s2b+0x66>
 8009c88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	3b30      	subs	r3, #48	; 0x30
 8009c90:	220a      	movs	r2, #10
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ff72 	bl	8009b7c <__multadd>
 8009c98:	e7ee      	b.n	8009c78 <__s2b+0x68>
 8009c9a:	bf00      	nop
 8009c9c:	0800b8cc 	.word	0x0800b8cc
 8009ca0:	0800b95c 	.word	0x0800b95c

08009ca4 <__hi0bits>:
 8009ca4:	0c03      	lsrs	r3, r0, #16
 8009ca6:	041b      	lsls	r3, r3, #16
 8009ca8:	b9d3      	cbnz	r3, 8009ce0 <__hi0bits+0x3c>
 8009caa:	0400      	lsls	r0, r0, #16
 8009cac:	2310      	movs	r3, #16
 8009cae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cb2:	bf04      	itt	eq
 8009cb4:	0200      	lsleq	r0, r0, #8
 8009cb6:	3308      	addeq	r3, #8
 8009cb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cbc:	bf04      	itt	eq
 8009cbe:	0100      	lsleq	r0, r0, #4
 8009cc0:	3304      	addeq	r3, #4
 8009cc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009cc6:	bf04      	itt	eq
 8009cc8:	0080      	lsleq	r0, r0, #2
 8009cca:	3302      	addeq	r3, #2
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	db05      	blt.n	8009cdc <__hi0bits+0x38>
 8009cd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cd4:	f103 0301 	add.w	r3, r3, #1
 8009cd8:	bf08      	it	eq
 8009cda:	2320      	moveq	r3, #32
 8009cdc:	4618      	mov	r0, r3
 8009cde:	4770      	bx	lr
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e7e4      	b.n	8009cae <__hi0bits+0xa>

08009ce4 <__lo0bits>:
 8009ce4:	6803      	ldr	r3, [r0, #0]
 8009ce6:	f013 0207 	ands.w	r2, r3, #7
 8009cea:	4601      	mov	r1, r0
 8009cec:	d00b      	beq.n	8009d06 <__lo0bits+0x22>
 8009cee:	07da      	lsls	r2, r3, #31
 8009cf0:	d424      	bmi.n	8009d3c <__lo0bits+0x58>
 8009cf2:	0798      	lsls	r0, r3, #30
 8009cf4:	bf49      	itett	mi
 8009cf6:	085b      	lsrmi	r3, r3, #1
 8009cf8:	089b      	lsrpl	r3, r3, #2
 8009cfa:	2001      	movmi	r0, #1
 8009cfc:	600b      	strmi	r3, [r1, #0]
 8009cfe:	bf5c      	itt	pl
 8009d00:	600b      	strpl	r3, [r1, #0]
 8009d02:	2002      	movpl	r0, #2
 8009d04:	4770      	bx	lr
 8009d06:	b298      	uxth	r0, r3
 8009d08:	b9b0      	cbnz	r0, 8009d38 <__lo0bits+0x54>
 8009d0a:	0c1b      	lsrs	r3, r3, #16
 8009d0c:	2010      	movs	r0, #16
 8009d0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d12:	bf04      	itt	eq
 8009d14:	0a1b      	lsreq	r3, r3, #8
 8009d16:	3008      	addeq	r0, #8
 8009d18:	071a      	lsls	r2, r3, #28
 8009d1a:	bf04      	itt	eq
 8009d1c:	091b      	lsreq	r3, r3, #4
 8009d1e:	3004      	addeq	r0, #4
 8009d20:	079a      	lsls	r2, r3, #30
 8009d22:	bf04      	itt	eq
 8009d24:	089b      	lsreq	r3, r3, #2
 8009d26:	3002      	addeq	r0, #2
 8009d28:	07da      	lsls	r2, r3, #31
 8009d2a:	d403      	bmi.n	8009d34 <__lo0bits+0x50>
 8009d2c:	085b      	lsrs	r3, r3, #1
 8009d2e:	f100 0001 	add.w	r0, r0, #1
 8009d32:	d005      	beq.n	8009d40 <__lo0bits+0x5c>
 8009d34:	600b      	str	r3, [r1, #0]
 8009d36:	4770      	bx	lr
 8009d38:	4610      	mov	r0, r2
 8009d3a:	e7e8      	b.n	8009d0e <__lo0bits+0x2a>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	4770      	bx	lr
 8009d40:	2020      	movs	r0, #32
 8009d42:	4770      	bx	lr

08009d44 <__i2b>:
 8009d44:	b510      	push	{r4, lr}
 8009d46:	460c      	mov	r4, r1
 8009d48:	2101      	movs	r1, #1
 8009d4a:	f7ff feb5 	bl	8009ab8 <_Balloc>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	b928      	cbnz	r0, 8009d5e <__i2b+0x1a>
 8009d52:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <__i2b+0x24>)
 8009d54:	4805      	ldr	r0, [pc, #20]	; (8009d6c <__i2b+0x28>)
 8009d56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d5a:	f000 fdb5 	bl	800a8c8 <__assert_func>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6144      	str	r4, [r0, #20]
 8009d62:	6103      	str	r3, [r0, #16]
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	bf00      	nop
 8009d68:	0800b8cc 	.word	0x0800b8cc
 8009d6c:	0800b95c 	.word	0x0800b95c

08009d70 <__multiply>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	4614      	mov	r4, r2
 8009d76:	690a      	ldr	r2, [r1, #16]
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	bfb8      	it	lt
 8009d7e:	460b      	movlt	r3, r1
 8009d80:	460d      	mov	r5, r1
 8009d82:	bfbc      	itt	lt
 8009d84:	4625      	movlt	r5, r4
 8009d86:	461c      	movlt	r4, r3
 8009d88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009d8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d90:	68ab      	ldr	r3, [r5, #8]
 8009d92:	6869      	ldr	r1, [r5, #4]
 8009d94:	eb0a 0709 	add.w	r7, sl, r9
 8009d98:	42bb      	cmp	r3, r7
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	bfb8      	it	lt
 8009d9e:	3101      	addlt	r1, #1
 8009da0:	f7ff fe8a 	bl	8009ab8 <_Balloc>
 8009da4:	b930      	cbnz	r0, 8009db4 <__multiply+0x44>
 8009da6:	4602      	mov	r2, r0
 8009da8:	4b42      	ldr	r3, [pc, #264]	; (8009eb4 <__multiply+0x144>)
 8009daa:	4843      	ldr	r0, [pc, #268]	; (8009eb8 <__multiply+0x148>)
 8009dac:	f240 115d 	movw	r1, #349	; 0x15d
 8009db0:	f000 fd8a 	bl	800a8c8 <__assert_func>
 8009db4:	f100 0614 	add.w	r6, r0, #20
 8009db8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009dbc:	4633      	mov	r3, r6
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	d31e      	bcc.n	8009e02 <__multiply+0x92>
 8009dc4:	f105 0c14 	add.w	ip, r5, #20
 8009dc8:	f104 0314 	add.w	r3, r4, #20
 8009dcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009dd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009dd4:	9202      	str	r2, [sp, #8]
 8009dd6:	ebac 0205 	sub.w	r2, ip, r5
 8009dda:	3a15      	subs	r2, #21
 8009ddc:	f022 0203 	bic.w	r2, r2, #3
 8009de0:	3204      	adds	r2, #4
 8009de2:	f105 0115 	add.w	r1, r5, #21
 8009de6:	458c      	cmp	ip, r1
 8009de8:	bf38      	it	cc
 8009dea:	2204      	movcc	r2, #4
 8009dec:	9201      	str	r2, [sp, #4]
 8009dee:	9a02      	ldr	r2, [sp, #8]
 8009df0:	9303      	str	r3, [sp, #12]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d808      	bhi.n	8009e08 <__multiply+0x98>
 8009df6:	2f00      	cmp	r7, #0
 8009df8:	dc55      	bgt.n	8009ea6 <__multiply+0x136>
 8009dfa:	6107      	str	r7, [r0, #16]
 8009dfc:	b005      	add	sp, #20
 8009dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e02:	f843 2b04 	str.w	r2, [r3], #4
 8009e06:	e7db      	b.n	8009dc0 <__multiply+0x50>
 8009e08:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e0c:	f1ba 0f00 	cmp.w	sl, #0
 8009e10:	d020      	beq.n	8009e54 <__multiply+0xe4>
 8009e12:	f105 0e14 	add.w	lr, r5, #20
 8009e16:	46b1      	mov	r9, r6
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e1e:	f8d9 b000 	ldr.w	fp, [r9]
 8009e22:	b2a1      	uxth	r1, r4
 8009e24:	fa1f fb8b 	uxth.w	fp, fp
 8009e28:	fb0a b101 	mla	r1, sl, r1, fp
 8009e2c:	4411      	add	r1, r2
 8009e2e:	f8d9 2000 	ldr.w	r2, [r9]
 8009e32:	0c24      	lsrs	r4, r4, #16
 8009e34:	0c12      	lsrs	r2, r2, #16
 8009e36:	fb0a 2404 	mla	r4, sl, r4, r2
 8009e3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009e3e:	b289      	uxth	r1, r1
 8009e40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e44:	45f4      	cmp	ip, lr
 8009e46:	f849 1b04 	str.w	r1, [r9], #4
 8009e4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009e4e:	d8e4      	bhi.n	8009e1a <__multiply+0xaa>
 8009e50:	9901      	ldr	r1, [sp, #4]
 8009e52:	5072      	str	r2, [r6, r1]
 8009e54:	9a03      	ldr	r2, [sp, #12]
 8009e56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	f1b9 0f00 	cmp.w	r9, #0
 8009e60:	d01f      	beq.n	8009ea2 <__multiply+0x132>
 8009e62:	6834      	ldr	r4, [r6, #0]
 8009e64:	f105 0114 	add.w	r1, r5, #20
 8009e68:	46b6      	mov	lr, r6
 8009e6a:	f04f 0a00 	mov.w	sl, #0
 8009e6e:	880a      	ldrh	r2, [r1, #0]
 8009e70:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009e74:	fb09 b202 	mla	r2, r9, r2, fp
 8009e78:	4492      	add	sl, r2
 8009e7a:	b2a4      	uxth	r4, r4
 8009e7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009e80:	f84e 4b04 	str.w	r4, [lr], #4
 8009e84:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e88:	f8be 2000 	ldrh.w	r2, [lr]
 8009e8c:	0c24      	lsrs	r4, r4, #16
 8009e8e:	fb09 2404 	mla	r4, r9, r4, r2
 8009e92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009e96:	458c      	cmp	ip, r1
 8009e98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e9c:	d8e7      	bhi.n	8009e6e <__multiply+0xfe>
 8009e9e:	9a01      	ldr	r2, [sp, #4]
 8009ea0:	50b4      	str	r4, [r6, r2]
 8009ea2:	3604      	adds	r6, #4
 8009ea4:	e7a3      	b.n	8009dee <__multiply+0x7e>
 8009ea6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1a5      	bne.n	8009dfa <__multiply+0x8a>
 8009eae:	3f01      	subs	r7, #1
 8009eb0:	e7a1      	b.n	8009df6 <__multiply+0x86>
 8009eb2:	bf00      	nop
 8009eb4:	0800b8cc 	.word	0x0800b8cc
 8009eb8:	0800b95c 	.word	0x0800b95c

08009ebc <__pow5mult>:
 8009ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec0:	4615      	mov	r5, r2
 8009ec2:	f012 0203 	ands.w	r2, r2, #3
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	d007      	beq.n	8009edc <__pow5mult+0x20>
 8009ecc:	4c25      	ldr	r4, [pc, #148]	; (8009f64 <__pow5mult+0xa8>)
 8009ece:	3a01      	subs	r2, #1
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ed6:	f7ff fe51 	bl	8009b7c <__multadd>
 8009eda:	4607      	mov	r7, r0
 8009edc:	10ad      	asrs	r5, r5, #2
 8009ede:	d03d      	beq.n	8009f5c <__pow5mult+0xa0>
 8009ee0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ee2:	b97c      	cbnz	r4, 8009f04 <__pow5mult+0x48>
 8009ee4:	2010      	movs	r0, #16
 8009ee6:	f7ff fdbf 	bl	8009a68 <malloc>
 8009eea:	4602      	mov	r2, r0
 8009eec:	6270      	str	r0, [r6, #36]	; 0x24
 8009eee:	b928      	cbnz	r0, 8009efc <__pow5mult+0x40>
 8009ef0:	4b1d      	ldr	r3, [pc, #116]	; (8009f68 <__pow5mult+0xac>)
 8009ef2:	481e      	ldr	r0, [pc, #120]	; (8009f6c <__pow5mult+0xb0>)
 8009ef4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ef8:	f000 fce6 	bl	800a8c8 <__assert_func>
 8009efc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f00:	6004      	str	r4, [r0, #0]
 8009f02:	60c4      	str	r4, [r0, #12]
 8009f04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f0c:	b94c      	cbnz	r4, 8009f22 <__pow5mult+0x66>
 8009f0e:	f240 2171 	movw	r1, #625	; 0x271
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ff16 	bl	8009d44 <__i2b>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f1e:	4604      	mov	r4, r0
 8009f20:	6003      	str	r3, [r0, #0]
 8009f22:	f04f 0900 	mov.w	r9, #0
 8009f26:	07eb      	lsls	r3, r5, #31
 8009f28:	d50a      	bpl.n	8009f40 <__pow5mult+0x84>
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7ff ff1e 	bl	8009d70 <__multiply>
 8009f34:	4639      	mov	r1, r7
 8009f36:	4680      	mov	r8, r0
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff fdfd 	bl	8009b38 <_Bfree>
 8009f3e:	4647      	mov	r7, r8
 8009f40:	106d      	asrs	r5, r5, #1
 8009f42:	d00b      	beq.n	8009f5c <__pow5mult+0xa0>
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	b938      	cbnz	r0, 8009f58 <__pow5mult+0x9c>
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff ff0f 	bl	8009d70 <__multiply>
 8009f52:	6020      	str	r0, [r4, #0]
 8009f54:	f8c0 9000 	str.w	r9, [r0]
 8009f58:	4604      	mov	r4, r0
 8009f5a:	e7e4      	b.n	8009f26 <__pow5mult+0x6a>
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f62:	bf00      	nop
 8009f64:	0800bab0 	.word	0x0800bab0
 8009f68:	0800b856 	.word	0x0800b856
 8009f6c:	0800b95c 	.word	0x0800b95c

08009f70 <__lshift>:
 8009f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	460c      	mov	r4, r1
 8009f76:	6849      	ldr	r1, [r1, #4]
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f7e:	68a3      	ldr	r3, [r4, #8]
 8009f80:	4607      	mov	r7, r0
 8009f82:	4691      	mov	r9, r2
 8009f84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f88:	f108 0601 	add.w	r6, r8, #1
 8009f8c:	42b3      	cmp	r3, r6
 8009f8e:	db0b      	blt.n	8009fa8 <__lshift+0x38>
 8009f90:	4638      	mov	r0, r7
 8009f92:	f7ff fd91 	bl	8009ab8 <_Balloc>
 8009f96:	4605      	mov	r5, r0
 8009f98:	b948      	cbnz	r0, 8009fae <__lshift+0x3e>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4b28      	ldr	r3, [pc, #160]	; (800a040 <__lshift+0xd0>)
 8009f9e:	4829      	ldr	r0, [pc, #164]	; (800a044 <__lshift+0xd4>)
 8009fa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fa4:	f000 fc90 	bl	800a8c8 <__assert_func>
 8009fa8:	3101      	adds	r1, #1
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	e7ee      	b.n	8009f8c <__lshift+0x1c>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f100 0114 	add.w	r1, r0, #20
 8009fb4:	f100 0210 	add.w	r2, r0, #16
 8009fb8:	4618      	mov	r0, r3
 8009fba:	4553      	cmp	r3, sl
 8009fbc:	db33      	blt.n	800a026 <__lshift+0xb6>
 8009fbe:	6920      	ldr	r0, [r4, #16]
 8009fc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fc4:	f104 0314 	add.w	r3, r4, #20
 8009fc8:	f019 091f 	ands.w	r9, r9, #31
 8009fcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fd4:	d02b      	beq.n	800a02e <__lshift+0xbe>
 8009fd6:	f1c9 0e20 	rsb	lr, r9, #32
 8009fda:	468a      	mov	sl, r1
 8009fdc:	2200      	movs	r2, #0
 8009fde:	6818      	ldr	r0, [r3, #0]
 8009fe0:	fa00 f009 	lsl.w	r0, r0, r9
 8009fe4:	4302      	orrs	r2, r0
 8009fe6:	f84a 2b04 	str.w	r2, [sl], #4
 8009fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fee:	459c      	cmp	ip, r3
 8009ff0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ff4:	d8f3      	bhi.n	8009fde <__lshift+0x6e>
 8009ff6:	ebac 0304 	sub.w	r3, ip, r4
 8009ffa:	3b15      	subs	r3, #21
 8009ffc:	f023 0303 	bic.w	r3, r3, #3
 800a000:	3304      	adds	r3, #4
 800a002:	f104 0015 	add.w	r0, r4, #21
 800a006:	4584      	cmp	ip, r0
 800a008:	bf38      	it	cc
 800a00a:	2304      	movcc	r3, #4
 800a00c:	50ca      	str	r2, [r1, r3]
 800a00e:	b10a      	cbz	r2, 800a014 <__lshift+0xa4>
 800a010:	f108 0602 	add.w	r6, r8, #2
 800a014:	3e01      	subs	r6, #1
 800a016:	4638      	mov	r0, r7
 800a018:	612e      	str	r6, [r5, #16]
 800a01a:	4621      	mov	r1, r4
 800a01c:	f7ff fd8c 	bl	8009b38 <_Bfree>
 800a020:	4628      	mov	r0, r5
 800a022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a026:	f842 0f04 	str.w	r0, [r2, #4]!
 800a02a:	3301      	adds	r3, #1
 800a02c:	e7c5      	b.n	8009fba <__lshift+0x4a>
 800a02e:	3904      	subs	r1, #4
 800a030:	f853 2b04 	ldr.w	r2, [r3], #4
 800a034:	f841 2f04 	str.w	r2, [r1, #4]!
 800a038:	459c      	cmp	ip, r3
 800a03a:	d8f9      	bhi.n	800a030 <__lshift+0xc0>
 800a03c:	e7ea      	b.n	800a014 <__lshift+0xa4>
 800a03e:	bf00      	nop
 800a040:	0800b8cc 	.word	0x0800b8cc
 800a044:	0800b95c 	.word	0x0800b95c

0800a048 <__mcmp>:
 800a048:	b530      	push	{r4, r5, lr}
 800a04a:	6902      	ldr	r2, [r0, #16]
 800a04c:	690c      	ldr	r4, [r1, #16]
 800a04e:	1b12      	subs	r2, r2, r4
 800a050:	d10e      	bne.n	800a070 <__mcmp+0x28>
 800a052:	f100 0314 	add.w	r3, r0, #20
 800a056:	3114      	adds	r1, #20
 800a058:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a05c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a060:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a064:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a068:	42a5      	cmp	r5, r4
 800a06a:	d003      	beq.n	800a074 <__mcmp+0x2c>
 800a06c:	d305      	bcc.n	800a07a <__mcmp+0x32>
 800a06e:	2201      	movs	r2, #1
 800a070:	4610      	mov	r0, r2
 800a072:	bd30      	pop	{r4, r5, pc}
 800a074:	4283      	cmp	r3, r0
 800a076:	d3f3      	bcc.n	800a060 <__mcmp+0x18>
 800a078:	e7fa      	b.n	800a070 <__mcmp+0x28>
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	e7f7      	b.n	800a070 <__mcmp+0x28>

0800a080 <__mdiff>:
 800a080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	460c      	mov	r4, r1
 800a086:	4606      	mov	r6, r0
 800a088:	4611      	mov	r1, r2
 800a08a:	4620      	mov	r0, r4
 800a08c:	4617      	mov	r7, r2
 800a08e:	f7ff ffdb 	bl	800a048 <__mcmp>
 800a092:	1e05      	subs	r5, r0, #0
 800a094:	d110      	bne.n	800a0b8 <__mdiff+0x38>
 800a096:	4629      	mov	r1, r5
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff fd0d 	bl	8009ab8 <_Balloc>
 800a09e:	b930      	cbnz	r0, 800a0ae <__mdiff+0x2e>
 800a0a0:	4b39      	ldr	r3, [pc, #228]	; (800a188 <__mdiff+0x108>)
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	f240 2132 	movw	r1, #562	; 0x232
 800a0a8:	4838      	ldr	r0, [pc, #224]	; (800a18c <__mdiff+0x10c>)
 800a0aa:	f000 fc0d 	bl	800a8c8 <__assert_func>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b8:	bfa4      	itt	ge
 800a0ba:	463b      	movge	r3, r7
 800a0bc:	4627      	movge	r7, r4
 800a0be:	4630      	mov	r0, r6
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	bfa6      	itte	ge
 800a0c4:	461c      	movge	r4, r3
 800a0c6:	2500      	movge	r5, #0
 800a0c8:	2501      	movlt	r5, #1
 800a0ca:	f7ff fcf5 	bl	8009ab8 <_Balloc>
 800a0ce:	b920      	cbnz	r0, 800a0da <__mdiff+0x5a>
 800a0d0:	4b2d      	ldr	r3, [pc, #180]	; (800a188 <__mdiff+0x108>)
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0d8:	e7e6      	b.n	800a0a8 <__mdiff+0x28>
 800a0da:	693e      	ldr	r6, [r7, #16]
 800a0dc:	60c5      	str	r5, [r0, #12]
 800a0de:	6925      	ldr	r5, [r4, #16]
 800a0e0:	f107 0114 	add.w	r1, r7, #20
 800a0e4:	f104 0914 	add.w	r9, r4, #20
 800a0e8:	f100 0e14 	add.w	lr, r0, #20
 800a0ec:	f107 0210 	add.w	r2, r7, #16
 800a0f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a0f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a0f8:	46f2      	mov	sl, lr
 800a0fa:	2700      	movs	r7, #0
 800a0fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a100:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a104:	fa1f f883 	uxth.w	r8, r3
 800a108:	fa17 f78b 	uxtah	r7, r7, fp
 800a10c:	0c1b      	lsrs	r3, r3, #16
 800a10e:	eba7 0808 	sub.w	r8, r7, r8
 800a112:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a116:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a11a:	fa1f f888 	uxth.w	r8, r8
 800a11e:	141f      	asrs	r7, r3, #16
 800a120:	454d      	cmp	r5, r9
 800a122:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a126:	f84a 3b04 	str.w	r3, [sl], #4
 800a12a:	d8e7      	bhi.n	800a0fc <__mdiff+0x7c>
 800a12c:	1b2b      	subs	r3, r5, r4
 800a12e:	3b15      	subs	r3, #21
 800a130:	f023 0303 	bic.w	r3, r3, #3
 800a134:	3304      	adds	r3, #4
 800a136:	3415      	adds	r4, #21
 800a138:	42a5      	cmp	r5, r4
 800a13a:	bf38      	it	cc
 800a13c:	2304      	movcc	r3, #4
 800a13e:	4419      	add	r1, r3
 800a140:	4473      	add	r3, lr
 800a142:	469e      	mov	lr, r3
 800a144:	460d      	mov	r5, r1
 800a146:	4565      	cmp	r5, ip
 800a148:	d30e      	bcc.n	800a168 <__mdiff+0xe8>
 800a14a:	f10c 0203 	add.w	r2, ip, #3
 800a14e:	1a52      	subs	r2, r2, r1
 800a150:	f022 0203 	bic.w	r2, r2, #3
 800a154:	3903      	subs	r1, #3
 800a156:	458c      	cmp	ip, r1
 800a158:	bf38      	it	cc
 800a15a:	2200      	movcc	r2, #0
 800a15c:	441a      	add	r2, r3
 800a15e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a162:	b17b      	cbz	r3, 800a184 <__mdiff+0x104>
 800a164:	6106      	str	r6, [r0, #16]
 800a166:	e7a5      	b.n	800a0b4 <__mdiff+0x34>
 800a168:	f855 8b04 	ldr.w	r8, [r5], #4
 800a16c:	fa17 f488 	uxtah	r4, r7, r8
 800a170:	1422      	asrs	r2, r4, #16
 800a172:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a176:	b2a4      	uxth	r4, r4
 800a178:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a17c:	f84e 4b04 	str.w	r4, [lr], #4
 800a180:	1417      	asrs	r7, r2, #16
 800a182:	e7e0      	b.n	800a146 <__mdiff+0xc6>
 800a184:	3e01      	subs	r6, #1
 800a186:	e7ea      	b.n	800a15e <__mdiff+0xde>
 800a188:	0800b8cc 	.word	0x0800b8cc
 800a18c:	0800b95c 	.word	0x0800b95c

0800a190 <__ulp>:
 800a190:	b082      	sub	sp, #8
 800a192:	ed8d 0b00 	vstr	d0, [sp]
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	4912      	ldr	r1, [pc, #72]	; (800a1e4 <__ulp+0x54>)
 800a19a:	4019      	ands	r1, r3
 800a19c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a1a0:	2900      	cmp	r1, #0
 800a1a2:	dd05      	ble.n	800a1b0 <__ulp+0x20>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	ec43 2b10 	vmov	d0, r2, r3
 800a1ac:	b002      	add	sp, #8
 800a1ae:	4770      	bx	lr
 800a1b0:	4249      	negs	r1, r1
 800a1b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a1b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a1ba:	f04f 0200 	mov.w	r2, #0
 800a1be:	f04f 0300 	mov.w	r3, #0
 800a1c2:	da04      	bge.n	800a1ce <__ulp+0x3e>
 800a1c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a1c8:	fa41 f300 	asr.w	r3, r1, r0
 800a1cc:	e7ec      	b.n	800a1a8 <__ulp+0x18>
 800a1ce:	f1a0 0114 	sub.w	r1, r0, #20
 800a1d2:	291e      	cmp	r1, #30
 800a1d4:	bfda      	itte	le
 800a1d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a1da:	fa20 f101 	lsrle.w	r1, r0, r1
 800a1de:	2101      	movgt	r1, #1
 800a1e0:	460a      	mov	r2, r1
 800a1e2:	e7e1      	b.n	800a1a8 <__ulp+0x18>
 800a1e4:	7ff00000 	.word	0x7ff00000

0800a1e8 <__b2d>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	6905      	ldr	r5, [r0, #16]
 800a1ec:	f100 0714 	add.w	r7, r0, #20
 800a1f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a1f4:	1f2e      	subs	r6, r5, #4
 800a1f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff fd52 	bl	8009ca4 <__hi0bits>
 800a200:	f1c0 0320 	rsb	r3, r0, #32
 800a204:	280a      	cmp	r0, #10
 800a206:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a284 <__b2d+0x9c>
 800a20a:	600b      	str	r3, [r1, #0]
 800a20c:	dc14      	bgt.n	800a238 <__b2d+0x50>
 800a20e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a212:	fa24 f10e 	lsr.w	r1, r4, lr
 800a216:	42b7      	cmp	r7, r6
 800a218:	ea41 030c 	orr.w	r3, r1, ip
 800a21c:	bf34      	ite	cc
 800a21e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a222:	2100      	movcs	r1, #0
 800a224:	3015      	adds	r0, #21
 800a226:	fa04 f000 	lsl.w	r0, r4, r0
 800a22a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a22e:	ea40 0201 	orr.w	r2, r0, r1
 800a232:	ec43 2b10 	vmov	d0, r2, r3
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a238:	42b7      	cmp	r7, r6
 800a23a:	bf3a      	itte	cc
 800a23c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a240:	f1a5 0608 	subcc.w	r6, r5, #8
 800a244:	2100      	movcs	r1, #0
 800a246:	380b      	subs	r0, #11
 800a248:	d017      	beq.n	800a27a <__b2d+0x92>
 800a24a:	f1c0 0c20 	rsb	ip, r0, #32
 800a24e:	fa04 f500 	lsl.w	r5, r4, r0
 800a252:	42be      	cmp	r6, r7
 800a254:	fa21 f40c 	lsr.w	r4, r1, ip
 800a258:	ea45 0504 	orr.w	r5, r5, r4
 800a25c:	bf8c      	ite	hi
 800a25e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a262:	2400      	movls	r4, #0
 800a264:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a268:	fa01 f000 	lsl.w	r0, r1, r0
 800a26c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a270:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a274:	ea40 0204 	orr.w	r2, r0, r4
 800a278:	e7db      	b.n	800a232 <__b2d+0x4a>
 800a27a:	ea44 030c 	orr.w	r3, r4, ip
 800a27e:	460a      	mov	r2, r1
 800a280:	e7d7      	b.n	800a232 <__b2d+0x4a>
 800a282:	bf00      	nop
 800a284:	3ff00000 	.word	0x3ff00000

0800a288 <__d2b>:
 800a288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	4689      	mov	r9, r1
 800a28e:	2101      	movs	r1, #1
 800a290:	ec57 6b10 	vmov	r6, r7, d0
 800a294:	4690      	mov	r8, r2
 800a296:	f7ff fc0f 	bl	8009ab8 <_Balloc>
 800a29a:	4604      	mov	r4, r0
 800a29c:	b930      	cbnz	r0, 800a2ac <__d2b+0x24>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	4b25      	ldr	r3, [pc, #148]	; (800a338 <__d2b+0xb0>)
 800a2a2:	4826      	ldr	r0, [pc, #152]	; (800a33c <__d2b+0xb4>)
 800a2a4:	f240 310a 	movw	r1, #778	; 0x30a
 800a2a8:	f000 fb0e 	bl	800a8c8 <__assert_func>
 800a2ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2b4:	bb35      	cbnz	r5, 800a304 <__d2b+0x7c>
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	d028      	beq.n	800a30e <__d2b+0x86>
 800a2bc:	4668      	mov	r0, sp
 800a2be:	9600      	str	r6, [sp, #0]
 800a2c0:	f7ff fd10 	bl	8009ce4 <__lo0bits>
 800a2c4:	9900      	ldr	r1, [sp, #0]
 800a2c6:	b300      	cbz	r0, 800a30a <__d2b+0x82>
 800a2c8:	9a01      	ldr	r2, [sp, #4]
 800a2ca:	f1c0 0320 	rsb	r3, r0, #32
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	40c2      	lsrs	r2, r0
 800a2d6:	6163      	str	r3, [r4, #20]
 800a2d8:	9201      	str	r2, [sp, #4]
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	61a3      	str	r3, [r4, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	bf14      	ite	ne
 800a2e2:	2202      	movne	r2, #2
 800a2e4:	2201      	moveq	r2, #1
 800a2e6:	6122      	str	r2, [r4, #16]
 800a2e8:	b1d5      	cbz	r5, 800a320 <__d2b+0x98>
 800a2ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2ee:	4405      	add	r5, r0
 800a2f0:	f8c9 5000 	str.w	r5, [r9]
 800a2f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2f8:	f8c8 0000 	str.w	r0, [r8]
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	b003      	add	sp, #12
 800a300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a308:	e7d5      	b.n	800a2b6 <__d2b+0x2e>
 800a30a:	6161      	str	r1, [r4, #20]
 800a30c:	e7e5      	b.n	800a2da <__d2b+0x52>
 800a30e:	a801      	add	r0, sp, #4
 800a310:	f7ff fce8 	bl	8009ce4 <__lo0bits>
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	6163      	str	r3, [r4, #20]
 800a318:	2201      	movs	r2, #1
 800a31a:	6122      	str	r2, [r4, #16]
 800a31c:	3020      	adds	r0, #32
 800a31e:	e7e3      	b.n	800a2e8 <__d2b+0x60>
 800a320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a328:	f8c9 0000 	str.w	r0, [r9]
 800a32c:	6918      	ldr	r0, [r3, #16]
 800a32e:	f7ff fcb9 	bl	8009ca4 <__hi0bits>
 800a332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a336:	e7df      	b.n	800a2f8 <__d2b+0x70>
 800a338:	0800b8cc 	.word	0x0800b8cc
 800a33c:	0800b95c 	.word	0x0800b95c

0800a340 <__ratio>:
 800a340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	4688      	mov	r8, r1
 800a346:	4669      	mov	r1, sp
 800a348:	4681      	mov	r9, r0
 800a34a:	f7ff ff4d 	bl	800a1e8 <__b2d>
 800a34e:	a901      	add	r1, sp, #4
 800a350:	4640      	mov	r0, r8
 800a352:	ec55 4b10 	vmov	r4, r5, d0
 800a356:	f7ff ff47 	bl	800a1e8 <__b2d>
 800a35a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a35e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a362:	eba3 0c02 	sub.w	ip, r3, r2
 800a366:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a370:	ec51 0b10 	vmov	r0, r1, d0
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfd6      	itet	le
 800a378:	460a      	movle	r2, r1
 800a37a:	462a      	movgt	r2, r5
 800a37c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a380:	468b      	mov	fp, r1
 800a382:	462f      	mov	r7, r5
 800a384:	bfd4      	ite	le
 800a386:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a38a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a38e:	4620      	mov	r0, r4
 800a390:	ee10 2a10 	vmov	r2, s0
 800a394:	465b      	mov	r3, fp
 800a396:	4639      	mov	r1, r7
 800a398:	f7f6 fa58 	bl	800084c <__aeabi_ddiv>
 800a39c:	ec41 0b10 	vmov	d0, r0, r1
 800a3a0:	b003      	add	sp, #12
 800a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3a6 <__copybits>:
 800a3a6:	3901      	subs	r1, #1
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	1149      	asrs	r1, r1, #5
 800a3ac:	6914      	ldr	r4, [r2, #16]
 800a3ae:	3101      	adds	r1, #1
 800a3b0:	f102 0314 	add.w	r3, r2, #20
 800a3b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3bc:	1f05      	subs	r5, r0, #4
 800a3be:	42a3      	cmp	r3, r4
 800a3c0:	d30c      	bcc.n	800a3dc <__copybits+0x36>
 800a3c2:	1aa3      	subs	r3, r4, r2
 800a3c4:	3b11      	subs	r3, #17
 800a3c6:	f023 0303 	bic.w	r3, r3, #3
 800a3ca:	3211      	adds	r2, #17
 800a3cc:	42a2      	cmp	r2, r4
 800a3ce:	bf88      	it	hi
 800a3d0:	2300      	movhi	r3, #0
 800a3d2:	4418      	add	r0, r3
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4288      	cmp	r0, r1
 800a3d8:	d305      	bcc.n	800a3e6 <__copybits+0x40>
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
 800a3dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3e4:	e7eb      	b.n	800a3be <__copybits+0x18>
 800a3e6:	f840 3b04 	str.w	r3, [r0], #4
 800a3ea:	e7f4      	b.n	800a3d6 <__copybits+0x30>

0800a3ec <__any_on>:
 800a3ec:	f100 0214 	add.w	r2, r0, #20
 800a3f0:	6900      	ldr	r0, [r0, #16]
 800a3f2:	114b      	asrs	r3, r1, #5
 800a3f4:	4298      	cmp	r0, r3
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	db11      	blt.n	800a41e <__any_on+0x32>
 800a3fa:	dd0a      	ble.n	800a412 <__any_on+0x26>
 800a3fc:	f011 011f 	ands.w	r1, r1, #31
 800a400:	d007      	beq.n	800a412 <__any_on+0x26>
 800a402:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a406:	fa24 f001 	lsr.w	r0, r4, r1
 800a40a:	fa00 f101 	lsl.w	r1, r0, r1
 800a40e:	428c      	cmp	r4, r1
 800a410:	d10b      	bne.n	800a42a <__any_on+0x3e>
 800a412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a416:	4293      	cmp	r3, r2
 800a418:	d803      	bhi.n	800a422 <__any_on+0x36>
 800a41a:	2000      	movs	r0, #0
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	4603      	mov	r3, r0
 800a420:	e7f7      	b.n	800a412 <__any_on+0x26>
 800a422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a426:	2900      	cmp	r1, #0
 800a428:	d0f5      	beq.n	800a416 <__any_on+0x2a>
 800a42a:	2001      	movs	r0, #1
 800a42c:	e7f6      	b.n	800a41c <__any_on+0x30>

0800a42e <_calloc_r>:
 800a42e:	b513      	push	{r0, r1, r4, lr}
 800a430:	434a      	muls	r2, r1
 800a432:	4611      	mov	r1, r2
 800a434:	9201      	str	r2, [sp, #4]
 800a436:	f000 f859 	bl	800a4ec <_malloc_r>
 800a43a:	4604      	mov	r4, r0
 800a43c:	b118      	cbz	r0, 800a446 <_calloc_r+0x18>
 800a43e:	9a01      	ldr	r2, [sp, #4]
 800a440:	2100      	movs	r1, #0
 800a442:	f7fc fbc9 	bl	8006bd8 <memset>
 800a446:	4620      	mov	r0, r4
 800a448:	b002      	add	sp, #8
 800a44a:	bd10      	pop	{r4, pc}

0800a44c <_free_r>:
 800a44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a44e:	2900      	cmp	r1, #0
 800a450:	d048      	beq.n	800a4e4 <_free_r+0x98>
 800a452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a456:	9001      	str	r0, [sp, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f1a1 0404 	sub.w	r4, r1, #4
 800a45e:	bfb8      	it	lt
 800a460:	18e4      	addlt	r4, r4, r3
 800a462:	f000 fa7b 	bl	800a95c <__malloc_lock>
 800a466:	4a20      	ldr	r2, [pc, #128]	; (800a4e8 <_free_r+0x9c>)
 800a468:	9801      	ldr	r0, [sp, #4]
 800a46a:	6813      	ldr	r3, [r2, #0]
 800a46c:	4615      	mov	r5, r2
 800a46e:	b933      	cbnz	r3, 800a47e <_free_r+0x32>
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	6014      	str	r4, [r2, #0]
 800a474:	b003      	add	sp, #12
 800a476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a47a:	f000 ba75 	b.w	800a968 <__malloc_unlock>
 800a47e:	42a3      	cmp	r3, r4
 800a480:	d90b      	bls.n	800a49a <_free_r+0x4e>
 800a482:	6821      	ldr	r1, [r4, #0]
 800a484:	1862      	adds	r2, r4, r1
 800a486:	4293      	cmp	r3, r2
 800a488:	bf04      	itt	eq
 800a48a:	681a      	ldreq	r2, [r3, #0]
 800a48c:	685b      	ldreq	r3, [r3, #4]
 800a48e:	6063      	str	r3, [r4, #4]
 800a490:	bf04      	itt	eq
 800a492:	1852      	addeq	r2, r2, r1
 800a494:	6022      	streq	r2, [r4, #0]
 800a496:	602c      	str	r4, [r5, #0]
 800a498:	e7ec      	b.n	800a474 <_free_r+0x28>
 800a49a:	461a      	mov	r2, r3
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	b10b      	cbz	r3, 800a4a4 <_free_r+0x58>
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	d9fa      	bls.n	800a49a <_free_r+0x4e>
 800a4a4:	6811      	ldr	r1, [r2, #0]
 800a4a6:	1855      	adds	r5, r2, r1
 800a4a8:	42a5      	cmp	r5, r4
 800a4aa:	d10b      	bne.n	800a4c4 <_free_r+0x78>
 800a4ac:	6824      	ldr	r4, [r4, #0]
 800a4ae:	4421      	add	r1, r4
 800a4b0:	1854      	adds	r4, r2, r1
 800a4b2:	42a3      	cmp	r3, r4
 800a4b4:	6011      	str	r1, [r2, #0]
 800a4b6:	d1dd      	bne.n	800a474 <_free_r+0x28>
 800a4b8:	681c      	ldr	r4, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	6053      	str	r3, [r2, #4]
 800a4be:	4421      	add	r1, r4
 800a4c0:	6011      	str	r1, [r2, #0]
 800a4c2:	e7d7      	b.n	800a474 <_free_r+0x28>
 800a4c4:	d902      	bls.n	800a4cc <_free_r+0x80>
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	6003      	str	r3, [r0, #0]
 800a4ca:	e7d3      	b.n	800a474 <_free_r+0x28>
 800a4cc:	6825      	ldr	r5, [r4, #0]
 800a4ce:	1961      	adds	r1, r4, r5
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	bf04      	itt	eq
 800a4d4:	6819      	ldreq	r1, [r3, #0]
 800a4d6:	685b      	ldreq	r3, [r3, #4]
 800a4d8:	6063      	str	r3, [r4, #4]
 800a4da:	bf04      	itt	eq
 800a4dc:	1949      	addeq	r1, r1, r5
 800a4de:	6021      	streq	r1, [r4, #0]
 800a4e0:	6054      	str	r4, [r2, #4]
 800a4e2:	e7c7      	b.n	800a474 <_free_r+0x28>
 800a4e4:	b003      	add	sp, #12
 800a4e6:	bd30      	pop	{r4, r5, pc}
 800a4e8:	20000200 	.word	0x20000200

0800a4ec <_malloc_r>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	1ccd      	adds	r5, r1, #3
 800a4f0:	f025 0503 	bic.w	r5, r5, #3
 800a4f4:	3508      	adds	r5, #8
 800a4f6:	2d0c      	cmp	r5, #12
 800a4f8:	bf38      	it	cc
 800a4fa:	250c      	movcc	r5, #12
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	4606      	mov	r6, r0
 800a500:	db01      	blt.n	800a506 <_malloc_r+0x1a>
 800a502:	42a9      	cmp	r1, r5
 800a504:	d903      	bls.n	800a50e <_malloc_r+0x22>
 800a506:	230c      	movs	r3, #12
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	2000      	movs	r0, #0
 800a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a50e:	f000 fa25 	bl	800a95c <__malloc_lock>
 800a512:	4921      	ldr	r1, [pc, #132]	; (800a598 <_malloc_r+0xac>)
 800a514:	680a      	ldr	r2, [r1, #0]
 800a516:	4614      	mov	r4, r2
 800a518:	b99c      	cbnz	r4, 800a542 <_malloc_r+0x56>
 800a51a:	4f20      	ldr	r7, [pc, #128]	; (800a59c <_malloc_r+0xb0>)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	b923      	cbnz	r3, 800a52a <_malloc_r+0x3e>
 800a520:	4621      	mov	r1, r4
 800a522:	4630      	mov	r0, r6
 800a524:	f000 f9a0 	bl	800a868 <_sbrk_r>
 800a528:	6038      	str	r0, [r7, #0]
 800a52a:	4629      	mov	r1, r5
 800a52c:	4630      	mov	r0, r6
 800a52e:	f000 f99b 	bl	800a868 <_sbrk_r>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d123      	bne.n	800a57e <_malloc_r+0x92>
 800a536:	230c      	movs	r3, #12
 800a538:	6033      	str	r3, [r6, #0]
 800a53a:	4630      	mov	r0, r6
 800a53c:	f000 fa14 	bl	800a968 <__malloc_unlock>
 800a540:	e7e3      	b.n	800a50a <_malloc_r+0x1e>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	1b5b      	subs	r3, r3, r5
 800a546:	d417      	bmi.n	800a578 <_malloc_r+0x8c>
 800a548:	2b0b      	cmp	r3, #11
 800a54a:	d903      	bls.n	800a554 <_malloc_r+0x68>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	441c      	add	r4, r3
 800a550:	6025      	str	r5, [r4, #0]
 800a552:	e004      	b.n	800a55e <_malloc_r+0x72>
 800a554:	6863      	ldr	r3, [r4, #4]
 800a556:	42a2      	cmp	r2, r4
 800a558:	bf0c      	ite	eq
 800a55a:	600b      	streq	r3, [r1, #0]
 800a55c:	6053      	strne	r3, [r2, #4]
 800a55e:	4630      	mov	r0, r6
 800a560:	f000 fa02 	bl	800a968 <__malloc_unlock>
 800a564:	f104 000b 	add.w	r0, r4, #11
 800a568:	1d23      	adds	r3, r4, #4
 800a56a:	f020 0007 	bic.w	r0, r0, #7
 800a56e:	1ac2      	subs	r2, r0, r3
 800a570:	d0cc      	beq.n	800a50c <_malloc_r+0x20>
 800a572:	1a1b      	subs	r3, r3, r0
 800a574:	50a3      	str	r3, [r4, r2]
 800a576:	e7c9      	b.n	800a50c <_malloc_r+0x20>
 800a578:	4622      	mov	r2, r4
 800a57a:	6864      	ldr	r4, [r4, #4]
 800a57c:	e7cc      	b.n	800a518 <_malloc_r+0x2c>
 800a57e:	1cc4      	adds	r4, r0, #3
 800a580:	f024 0403 	bic.w	r4, r4, #3
 800a584:	42a0      	cmp	r0, r4
 800a586:	d0e3      	beq.n	800a550 <_malloc_r+0x64>
 800a588:	1a21      	subs	r1, r4, r0
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 f96c 	bl	800a868 <_sbrk_r>
 800a590:	3001      	adds	r0, #1
 800a592:	d1dd      	bne.n	800a550 <_malloc_r+0x64>
 800a594:	e7cf      	b.n	800a536 <_malloc_r+0x4a>
 800a596:	bf00      	nop
 800a598:	20000200 	.word	0x20000200
 800a59c:	20000204 	.word	0x20000204

0800a5a0 <__ssputs_r>:
 800a5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	688e      	ldr	r6, [r1, #8]
 800a5a6:	429e      	cmp	r6, r3
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	4690      	mov	r8, r2
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	d838      	bhi.n	800a624 <__ssputs_r+0x84>
 800a5b2:	898a      	ldrh	r2, [r1, #12]
 800a5b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5b8:	d032      	beq.n	800a620 <__ssputs_r+0x80>
 800a5ba:	6825      	ldr	r5, [r4, #0]
 800a5bc:	6909      	ldr	r1, [r1, #16]
 800a5be:	eba5 0901 	sub.w	r9, r5, r1
 800a5c2:	6965      	ldr	r5, [r4, #20]
 800a5c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	444b      	add	r3, r9
 800a5d0:	106d      	asrs	r5, r5, #1
 800a5d2:	429d      	cmp	r5, r3
 800a5d4:	bf38      	it	cc
 800a5d6:	461d      	movcc	r5, r3
 800a5d8:	0553      	lsls	r3, r2, #21
 800a5da:	d531      	bpl.n	800a640 <__ssputs_r+0xa0>
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7ff ff85 	bl	800a4ec <_malloc_r>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	b950      	cbnz	r0, 800a5fc <__ssputs_r+0x5c>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	f8ca 3000 	str.w	r3, [sl]
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fc:	6921      	ldr	r1, [r4, #16]
 800a5fe:	464a      	mov	r2, r9
 800a600:	f7ff fa4c 	bl	8009a9c <memcpy>
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	6126      	str	r6, [r4, #16]
 800a612:	6165      	str	r5, [r4, #20]
 800a614:	444e      	add	r6, r9
 800a616:	eba5 0509 	sub.w	r5, r5, r9
 800a61a:	6026      	str	r6, [r4, #0]
 800a61c:	60a5      	str	r5, [r4, #8]
 800a61e:	463e      	mov	r6, r7
 800a620:	42be      	cmp	r6, r7
 800a622:	d900      	bls.n	800a626 <__ssputs_r+0x86>
 800a624:	463e      	mov	r6, r7
 800a626:	4632      	mov	r2, r6
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	4641      	mov	r1, r8
 800a62c:	f000 f97c 	bl	800a928 <memmove>
 800a630:	68a3      	ldr	r3, [r4, #8]
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	4432      	add	r2, r6
 800a638:	60a3      	str	r3, [r4, #8]
 800a63a:	6022      	str	r2, [r4, #0]
 800a63c:	2000      	movs	r0, #0
 800a63e:	e7db      	b.n	800a5f8 <__ssputs_r+0x58>
 800a640:	462a      	mov	r2, r5
 800a642:	f000 f997 	bl	800a974 <_realloc_r>
 800a646:	4606      	mov	r6, r0
 800a648:	2800      	cmp	r0, #0
 800a64a:	d1e1      	bne.n	800a610 <__ssputs_r+0x70>
 800a64c:	6921      	ldr	r1, [r4, #16]
 800a64e:	4650      	mov	r0, sl
 800a650:	f7ff fefc 	bl	800a44c <_free_r>
 800a654:	e7c7      	b.n	800a5e6 <__ssputs_r+0x46>
	...

0800a658 <_svfiprintf_r>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	4698      	mov	r8, r3
 800a65e:	898b      	ldrh	r3, [r1, #12]
 800a660:	061b      	lsls	r3, r3, #24
 800a662:	b09d      	sub	sp, #116	; 0x74
 800a664:	4607      	mov	r7, r0
 800a666:	460d      	mov	r5, r1
 800a668:	4614      	mov	r4, r2
 800a66a:	d50e      	bpl.n	800a68a <_svfiprintf_r+0x32>
 800a66c:	690b      	ldr	r3, [r1, #16]
 800a66e:	b963      	cbnz	r3, 800a68a <_svfiprintf_r+0x32>
 800a670:	2140      	movs	r1, #64	; 0x40
 800a672:	f7ff ff3b 	bl	800a4ec <_malloc_r>
 800a676:	6028      	str	r0, [r5, #0]
 800a678:	6128      	str	r0, [r5, #16]
 800a67a:	b920      	cbnz	r0, 800a686 <_svfiprintf_r+0x2e>
 800a67c:	230c      	movs	r3, #12
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	e0d1      	b.n	800a82a <_svfiprintf_r+0x1d2>
 800a686:	2340      	movs	r3, #64	; 0x40
 800a688:	616b      	str	r3, [r5, #20]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9309      	str	r3, [sp, #36]	; 0x24
 800a68e:	2320      	movs	r3, #32
 800a690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a694:	f8cd 800c 	str.w	r8, [sp, #12]
 800a698:	2330      	movs	r3, #48	; 0x30
 800a69a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a844 <_svfiprintf_r+0x1ec>
 800a69e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6a2:	f04f 0901 	mov.w	r9, #1
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	469a      	mov	sl, r3
 800a6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ae:	b10a      	cbz	r2, 800a6b4 <_svfiprintf_r+0x5c>
 800a6b0:	2a25      	cmp	r2, #37	; 0x25
 800a6b2:	d1f9      	bne.n	800a6a8 <_svfiprintf_r+0x50>
 800a6b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6b8:	d00b      	beq.n	800a6d2 <_svfiprintf_r+0x7a>
 800a6ba:	465b      	mov	r3, fp
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff ff6d 	bl	800a5a0 <__ssputs_r>
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f000 80aa 	beq.w	800a820 <_svfiprintf_r+0x1c8>
 800a6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ce:	445a      	add	r2, fp
 800a6d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 80a2 	beq.w	800a820 <_svfiprintf_r+0x1c8>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6e6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	9307      	str	r3, [sp, #28]
 800a6ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6f4:	4654      	mov	r4, sl
 800a6f6:	2205      	movs	r2, #5
 800a6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fc:	4851      	ldr	r0, [pc, #324]	; (800a844 <_svfiprintf_r+0x1ec>)
 800a6fe:	f7f5 fd6f 	bl	80001e0 <memchr>
 800a702:	9a04      	ldr	r2, [sp, #16]
 800a704:	b9d8      	cbnz	r0, 800a73e <_svfiprintf_r+0xe6>
 800a706:	06d0      	lsls	r0, r2, #27
 800a708:	bf44      	itt	mi
 800a70a:	2320      	movmi	r3, #32
 800a70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a710:	0711      	lsls	r1, r2, #28
 800a712:	bf44      	itt	mi
 800a714:	232b      	movmi	r3, #43	; 0x2b
 800a716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a71a:	f89a 3000 	ldrb.w	r3, [sl]
 800a71e:	2b2a      	cmp	r3, #42	; 0x2a
 800a720:	d015      	beq.n	800a74e <_svfiprintf_r+0xf6>
 800a722:	9a07      	ldr	r2, [sp, #28]
 800a724:	4654      	mov	r4, sl
 800a726:	2000      	movs	r0, #0
 800a728:	f04f 0c0a 	mov.w	ip, #10
 800a72c:	4621      	mov	r1, r4
 800a72e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a732:	3b30      	subs	r3, #48	; 0x30
 800a734:	2b09      	cmp	r3, #9
 800a736:	d94e      	bls.n	800a7d6 <_svfiprintf_r+0x17e>
 800a738:	b1b0      	cbz	r0, 800a768 <_svfiprintf_r+0x110>
 800a73a:	9207      	str	r2, [sp, #28]
 800a73c:	e014      	b.n	800a768 <_svfiprintf_r+0x110>
 800a73e:	eba0 0308 	sub.w	r3, r0, r8
 800a742:	fa09 f303 	lsl.w	r3, r9, r3
 800a746:	4313      	orrs	r3, r2
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	46a2      	mov	sl, r4
 800a74c:	e7d2      	b.n	800a6f4 <_svfiprintf_r+0x9c>
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	1d19      	adds	r1, r3, #4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	9103      	str	r1, [sp, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfbb      	ittet	lt
 800a75a:	425b      	neglt	r3, r3
 800a75c:	f042 0202 	orrlt.w	r2, r2, #2
 800a760:	9307      	strge	r3, [sp, #28]
 800a762:	9307      	strlt	r3, [sp, #28]
 800a764:	bfb8      	it	lt
 800a766:	9204      	strlt	r2, [sp, #16]
 800a768:	7823      	ldrb	r3, [r4, #0]
 800a76a:	2b2e      	cmp	r3, #46	; 0x2e
 800a76c:	d10c      	bne.n	800a788 <_svfiprintf_r+0x130>
 800a76e:	7863      	ldrb	r3, [r4, #1]
 800a770:	2b2a      	cmp	r3, #42	; 0x2a
 800a772:	d135      	bne.n	800a7e0 <_svfiprintf_r+0x188>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	1d1a      	adds	r2, r3, #4
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	9203      	str	r2, [sp, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bfb8      	it	lt
 800a780:	f04f 33ff 	movlt.w	r3, #4294967295
 800a784:	3402      	adds	r4, #2
 800a786:	9305      	str	r3, [sp, #20]
 800a788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a854 <_svfiprintf_r+0x1fc>
 800a78c:	7821      	ldrb	r1, [r4, #0]
 800a78e:	2203      	movs	r2, #3
 800a790:	4650      	mov	r0, sl
 800a792:	f7f5 fd25 	bl	80001e0 <memchr>
 800a796:	b140      	cbz	r0, 800a7aa <_svfiprintf_r+0x152>
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	eba0 000a 	sub.w	r0, r0, sl
 800a79e:	fa03 f000 	lsl.w	r0, r3, r0
 800a7a2:	9b04      	ldr	r3, [sp, #16]
 800a7a4:	4303      	orrs	r3, r0
 800a7a6:	3401      	adds	r4, #1
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ae:	4826      	ldr	r0, [pc, #152]	; (800a848 <_svfiprintf_r+0x1f0>)
 800a7b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7b4:	2206      	movs	r2, #6
 800a7b6:	f7f5 fd13 	bl	80001e0 <memchr>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d038      	beq.n	800a830 <_svfiprintf_r+0x1d8>
 800a7be:	4b23      	ldr	r3, [pc, #140]	; (800a84c <_svfiprintf_r+0x1f4>)
 800a7c0:	bb1b      	cbnz	r3, 800a80a <_svfiprintf_r+0x1b2>
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	3307      	adds	r3, #7
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	9303      	str	r3, [sp, #12]
 800a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d0:	4433      	add	r3, r6
 800a7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d4:	e767      	b.n	800a6a6 <_svfiprintf_r+0x4e>
 800a7d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7da:	460c      	mov	r4, r1
 800a7dc:	2001      	movs	r0, #1
 800a7de:	e7a5      	b.n	800a72c <_svfiprintf_r+0xd4>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	3401      	adds	r4, #1
 800a7e4:	9305      	str	r3, [sp, #20]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	f04f 0c0a 	mov.w	ip, #10
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7f2:	3a30      	subs	r2, #48	; 0x30
 800a7f4:	2a09      	cmp	r2, #9
 800a7f6:	d903      	bls.n	800a800 <_svfiprintf_r+0x1a8>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0c5      	beq.n	800a788 <_svfiprintf_r+0x130>
 800a7fc:	9105      	str	r1, [sp, #20]
 800a7fe:	e7c3      	b.n	800a788 <_svfiprintf_r+0x130>
 800a800:	fb0c 2101 	mla	r1, ip, r1, r2
 800a804:	4604      	mov	r4, r0
 800a806:	2301      	movs	r3, #1
 800a808:	e7f0      	b.n	800a7ec <_svfiprintf_r+0x194>
 800a80a:	ab03      	add	r3, sp, #12
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	462a      	mov	r2, r5
 800a810:	4b0f      	ldr	r3, [pc, #60]	; (800a850 <_svfiprintf_r+0x1f8>)
 800a812:	a904      	add	r1, sp, #16
 800a814:	4638      	mov	r0, r7
 800a816:	f7fc fa87 	bl	8006d28 <_printf_float>
 800a81a:	1c42      	adds	r2, r0, #1
 800a81c:	4606      	mov	r6, r0
 800a81e:	d1d6      	bne.n	800a7ce <_svfiprintf_r+0x176>
 800a820:	89ab      	ldrh	r3, [r5, #12]
 800a822:	065b      	lsls	r3, r3, #25
 800a824:	f53f af2c 	bmi.w	800a680 <_svfiprintf_r+0x28>
 800a828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a82a:	b01d      	add	sp, #116	; 0x74
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	ab03      	add	r3, sp, #12
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	462a      	mov	r2, r5
 800a836:	4b06      	ldr	r3, [pc, #24]	; (800a850 <_svfiprintf_r+0x1f8>)
 800a838:	a904      	add	r1, sp, #16
 800a83a:	4638      	mov	r0, r7
 800a83c:	f7fc fd18 	bl	8007270 <_printf_i>
 800a840:	e7eb      	b.n	800a81a <_svfiprintf_r+0x1c2>
 800a842:	bf00      	nop
 800a844:	0800babc 	.word	0x0800babc
 800a848:	0800bac6 	.word	0x0800bac6
 800a84c:	08006d29 	.word	0x08006d29
 800a850:	0800a5a1 	.word	0x0800a5a1
 800a854:	0800bac2 	.word	0x0800bac2

0800a858 <nan>:
 800a858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a860 <nan+0x8>
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	00000000 	.word	0x00000000
 800a864:	7ff80000 	.word	0x7ff80000

0800a868 <_sbrk_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	; (800a884 <_sbrk_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f7 fd0e 	bl	8002294 <_sbrk>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_sbrk_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_sbrk_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20000454 	.word	0x20000454

0800a888 <strncmp>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	b16a      	cbz	r2, 800a8a8 <strncmp+0x20>
 800a88c:	3901      	subs	r1, #1
 800a88e:	1884      	adds	r4, r0, r2
 800a890:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a894:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a898:	4293      	cmp	r3, r2
 800a89a:	d103      	bne.n	800a8a4 <strncmp+0x1c>
 800a89c:	42a0      	cmp	r0, r4
 800a89e:	d001      	beq.n	800a8a4 <strncmp+0x1c>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1f5      	bne.n	800a890 <strncmp+0x8>
 800a8a4:	1a98      	subs	r0, r3, r2
 800a8a6:	bd10      	pop	{r4, pc}
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	e7fc      	b.n	800a8a6 <strncmp+0x1e>

0800a8ac <__ascii_wctomb>:
 800a8ac:	b149      	cbz	r1, 800a8c2 <__ascii_wctomb+0x16>
 800a8ae:	2aff      	cmp	r2, #255	; 0xff
 800a8b0:	bf85      	ittet	hi
 800a8b2:	238a      	movhi	r3, #138	; 0x8a
 800a8b4:	6003      	strhi	r3, [r0, #0]
 800a8b6:	700a      	strbls	r2, [r1, #0]
 800a8b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8bc:	bf98      	it	ls
 800a8be:	2001      	movls	r0, #1
 800a8c0:	4770      	bx	lr
 800a8c2:	4608      	mov	r0, r1
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <__assert_func>:
 800a8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8ca:	4614      	mov	r4, r2
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <__assert_func+0x2c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	68d8      	ldr	r0, [r3, #12]
 800a8d6:	b14c      	cbz	r4, 800a8ec <__assert_func+0x24>
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <__assert_func+0x30>)
 800a8da:	9100      	str	r1, [sp, #0]
 800a8dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8e0:	4906      	ldr	r1, [pc, #24]	; (800a8fc <__assert_func+0x34>)
 800a8e2:	462b      	mov	r3, r5
 800a8e4:	f000 f80e 	bl	800a904 <fiprintf>
 800a8e8:	f000 fa84 	bl	800adf4 <abort>
 800a8ec:	4b04      	ldr	r3, [pc, #16]	; (800a900 <__assert_func+0x38>)
 800a8ee:	461c      	mov	r4, r3
 800a8f0:	e7f3      	b.n	800a8da <__assert_func+0x12>
 800a8f2:	bf00      	nop
 800a8f4:	2000000c 	.word	0x2000000c
 800a8f8:	0800bacd 	.word	0x0800bacd
 800a8fc:	0800bada 	.word	0x0800bada
 800a900:	0800bb08 	.word	0x0800bb08

0800a904 <fiprintf>:
 800a904:	b40e      	push	{r1, r2, r3}
 800a906:	b503      	push	{r0, r1, lr}
 800a908:	4601      	mov	r1, r0
 800a90a:	ab03      	add	r3, sp, #12
 800a90c:	4805      	ldr	r0, [pc, #20]	; (800a924 <fiprintf+0x20>)
 800a90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a912:	6800      	ldr	r0, [r0, #0]
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	f000 f87d 	bl	800aa14 <_vfiprintf_r>
 800a91a:	b002      	add	sp, #8
 800a91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a920:	b003      	add	sp, #12
 800a922:	4770      	bx	lr
 800a924:	2000000c 	.word	0x2000000c

0800a928 <memmove>:
 800a928:	4288      	cmp	r0, r1
 800a92a:	b510      	push	{r4, lr}
 800a92c:	eb01 0402 	add.w	r4, r1, r2
 800a930:	d902      	bls.n	800a938 <memmove+0x10>
 800a932:	4284      	cmp	r4, r0
 800a934:	4623      	mov	r3, r4
 800a936:	d807      	bhi.n	800a948 <memmove+0x20>
 800a938:	1e43      	subs	r3, r0, #1
 800a93a:	42a1      	cmp	r1, r4
 800a93c:	d008      	beq.n	800a950 <memmove+0x28>
 800a93e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a942:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a946:	e7f8      	b.n	800a93a <memmove+0x12>
 800a948:	4402      	add	r2, r0
 800a94a:	4601      	mov	r1, r0
 800a94c:	428a      	cmp	r2, r1
 800a94e:	d100      	bne.n	800a952 <memmove+0x2a>
 800a950:	bd10      	pop	{r4, pc}
 800a952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a95a:	e7f7      	b.n	800a94c <memmove+0x24>

0800a95c <__malloc_lock>:
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <__malloc_lock+0x8>)
 800a95e:	f000 bc09 	b.w	800b174 <__retarget_lock_acquire_recursive>
 800a962:	bf00      	nop
 800a964:	2000045c 	.word	0x2000045c

0800a968 <__malloc_unlock>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__malloc_unlock+0x8>)
 800a96a:	f000 bc04 	b.w	800b176 <__retarget_lock_release_recursive>
 800a96e:	bf00      	nop
 800a970:	2000045c 	.word	0x2000045c

0800a974 <_realloc_r>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	4607      	mov	r7, r0
 800a978:	4614      	mov	r4, r2
 800a97a:	460e      	mov	r6, r1
 800a97c:	b921      	cbnz	r1, 800a988 <_realloc_r+0x14>
 800a97e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a982:	4611      	mov	r1, r2
 800a984:	f7ff bdb2 	b.w	800a4ec <_malloc_r>
 800a988:	b922      	cbnz	r2, 800a994 <_realloc_r+0x20>
 800a98a:	f7ff fd5f 	bl	800a44c <_free_r>
 800a98e:	4625      	mov	r5, r4
 800a990:	4628      	mov	r0, r5
 800a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a994:	f000 fc54 	bl	800b240 <_malloc_usable_size_r>
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d20f      	bcs.n	800a9bc <_realloc_r+0x48>
 800a99c:	4621      	mov	r1, r4
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f7ff fda4 	bl	800a4ec <_malloc_r>
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d0f2      	beq.n	800a990 <_realloc_r+0x1c>
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	f7ff f875 	bl	8009a9c <memcpy>
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4638      	mov	r0, r7
 800a9b6:	f7ff fd49 	bl	800a44c <_free_r>
 800a9ba:	e7e9      	b.n	800a990 <_realloc_r+0x1c>
 800a9bc:	4635      	mov	r5, r6
 800a9be:	e7e7      	b.n	800a990 <_realloc_r+0x1c>

0800a9c0 <__sfputc_r>:
 800a9c0:	6893      	ldr	r3, [r2, #8]
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	b410      	push	{r4}
 800a9c8:	6093      	str	r3, [r2, #8]
 800a9ca:	da08      	bge.n	800a9de <__sfputc_r+0x1e>
 800a9cc:	6994      	ldr	r4, [r2, #24]
 800a9ce:	42a3      	cmp	r3, r4
 800a9d0:	db01      	blt.n	800a9d6 <__sfputc_r+0x16>
 800a9d2:	290a      	cmp	r1, #10
 800a9d4:	d103      	bne.n	800a9de <__sfputc_r+0x1e>
 800a9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9da:	f000 b94b 	b.w	800ac74 <__swbuf_r>
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	1c58      	adds	r0, r3, #1
 800a9e2:	6010      	str	r0, [r2, #0]
 800a9e4:	7019      	strb	r1, [r3, #0]
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <__sfputs_r>:
 800a9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	460f      	mov	r7, r1
 800a9f4:	4614      	mov	r4, r2
 800a9f6:	18d5      	adds	r5, r2, r3
 800a9f8:	42ac      	cmp	r4, r5
 800a9fa:	d101      	bne.n	800aa00 <__sfputs_r+0x12>
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	e007      	b.n	800aa10 <__sfputs_r+0x22>
 800aa00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa04:	463a      	mov	r2, r7
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff ffda 	bl	800a9c0 <__sfputc_r>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d1f3      	bne.n	800a9f8 <__sfputs_r+0xa>
 800aa10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa14 <_vfiprintf_r>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	460d      	mov	r5, r1
 800aa1a:	b09d      	sub	sp, #116	; 0x74
 800aa1c:	4614      	mov	r4, r2
 800aa1e:	4698      	mov	r8, r3
 800aa20:	4606      	mov	r6, r0
 800aa22:	b118      	cbz	r0, 800aa2c <_vfiprintf_r+0x18>
 800aa24:	6983      	ldr	r3, [r0, #24]
 800aa26:	b90b      	cbnz	r3, 800aa2c <_vfiprintf_r+0x18>
 800aa28:	f000 fb06 	bl	800b038 <__sinit>
 800aa2c:	4b89      	ldr	r3, [pc, #548]	; (800ac54 <_vfiprintf_r+0x240>)
 800aa2e:	429d      	cmp	r5, r3
 800aa30:	d11b      	bne.n	800aa6a <_vfiprintf_r+0x56>
 800aa32:	6875      	ldr	r5, [r6, #4]
 800aa34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa36:	07d9      	lsls	r1, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <_vfiprintf_r+0x32>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	059a      	lsls	r2, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <_vfiprintf_r+0x32>
 800aa40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa42:	f000 fb97 	bl	800b174 <__retarget_lock_acquire_recursive>
 800aa46:	89ab      	ldrh	r3, [r5, #12]
 800aa48:	071b      	lsls	r3, r3, #28
 800aa4a:	d501      	bpl.n	800aa50 <_vfiprintf_r+0x3c>
 800aa4c:	692b      	ldr	r3, [r5, #16]
 800aa4e:	b9eb      	cbnz	r3, 800aa8c <_vfiprintf_r+0x78>
 800aa50:	4629      	mov	r1, r5
 800aa52:	4630      	mov	r0, r6
 800aa54:	f000 f960 	bl	800ad18 <__swsetup_r>
 800aa58:	b1c0      	cbz	r0, 800aa8c <_vfiprintf_r+0x78>
 800aa5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa5c:	07dc      	lsls	r4, r3, #31
 800aa5e:	d50e      	bpl.n	800aa7e <_vfiprintf_r+0x6a>
 800aa60:	f04f 30ff 	mov.w	r0, #4294967295
 800aa64:	b01d      	add	sp, #116	; 0x74
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	4b7b      	ldr	r3, [pc, #492]	; (800ac58 <_vfiprintf_r+0x244>)
 800aa6c:	429d      	cmp	r5, r3
 800aa6e:	d101      	bne.n	800aa74 <_vfiprintf_r+0x60>
 800aa70:	68b5      	ldr	r5, [r6, #8]
 800aa72:	e7df      	b.n	800aa34 <_vfiprintf_r+0x20>
 800aa74:	4b79      	ldr	r3, [pc, #484]	; (800ac5c <_vfiprintf_r+0x248>)
 800aa76:	429d      	cmp	r5, r3
 800aa78:	bf08      	it	eq
 800aa7a:	68f5      	ldreq	r5, [r6, #12]
 800aa7c:	e7da      	b.n	800aa34 <_vfiprintf_r+0x20>
 800aa7e:	89ab      	ldrh	r3, [r5, #12]
 800aa80:	0598      	lsls	r0, r3, #22
 800aa82:	d4ed      	bmi.n	800aa60 <_vfiprintf_r+0x4c>
 800aa84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa86:	f000 fb76 	bl	800b176 <__retarget_lock_release_recursive>
 800aa8a:	e7e9      	b.n	800aa60 <_vfiprintf_r+0x4c>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa90:	2320      	movs	r3, #32
 800aa92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa96:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa9a:	2330      	movs	r3, #48	; 0x30
 800aa9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac60 <_vfiprintf_r+0x24c>
 800aaa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaa4:	f04f 0901 	mov.w	r9, #1
 800aaa8:	4623      	mov	r3, r4
 800aaaa:	469a      	mov	sl, r3
 800aaac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab0:	b10a      	cbz	r2, 800aab6 <_vfiprintf_r+0xa2>
 800aab2:	2a25      	cmp	r2, #37	; 0x25
 800aab4:	d1f9      	bne.n	800aaaa <_vfiprintf_r+0x96>
 800aab6:	ebba 0b04 	subs.w	fp, sl, r4
 800aaba:	d00b      	beq.n	800aad4 <_vfiprintf_r+0xc0>
 800aabc:	465b      	mov	r3, fp
 800aabe:	4622      	mov	r2, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7ff ff93 	bl	800a9ee <__sfputs_r>
 800aac8:	3001      	adds	r0, #1
 800aaca:	f000 80aa 	beq.w	800ac22 <_vfiprintf_r+0x20e>
 800aace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad0:	445a      	add	r2, fp
 800aad2:	9209      	str	r2, [sp, #36]	; 0x24
 800aad4:	f89a 3000 	ldrb.w	r3, [sl]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80a2 	beq.w	800ac22 <_vfiprintf_r+0x20e>
 800aade:	2300      	movs	r3, #0
 800aae0:	f04f 32ff 	mov.w	r2, #4294967295
 800aae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aae8:	f10a 0a01 	add.w	sl, sl, #1
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaf4:	931a      	str	r3, [sp, #104]	; 0x68
 800aaf6:	4654      	mov	r4, sl
 800aaf8:	2205      	movs	r2, #5
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	4858      	ldr	r0, [pc, #352]	; (800ac60 <_vfiprintf_r+0x24c>)
 800ab00:	f7f5 fb6e 	bl	80001e0 <memchr>
 800ab04:	9a04      	ldr	r2, [sp, #16]
 800ab06:	b9d8      	cbnz	r0, 800ab40 <_vfiprintf_r+0x12c>
 800ab08:	06d1      	lsls	r1, r2, #27
 800ab0a:	bf44      	itt	mi
 800ab0c:	2320      	movmi	r3, #32
 800ab0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab12:	0713      	lsls	r3, r2, #28
 800ab14:	bf44      	itt	mi
 800ab16:	232b      	movmi	r3, #43	; 0x2b
 800ab18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab20:	2b2a      	cmp	r3, #42	; 0x2a
 800ab22:	d015      	beq.n	800ab50 <_vfiprintf_r+0x13c>
 800ab24:	9a07      	ldr	r2, [sp, #28]
 800ab26:	4654      	mov	r4, sl
 800ab28:	2000      	movs	r0, #0
 800ab2a:	f04f 0c0a 	mov.w	ip, #10
 800ab2e:	4621      	mov	r1, r4
 800ab30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab34:	3b30      	subs	r3, #48	; 0x30
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	d94e      	bls.n	800abd8 <_vfiprintf_r+0x1c4>
 800ab3a:	b1b0      	cbz	r0, 800ab6a <_vfiprintf_r+0x156>
 800ab3c:	9207      	str	r2, [sp, #28]
 800ab3e:	e014      	b.n	800ab6a <_vfiprintf_r+0x156>
 800ab40:	eba0 0308 	sub.w	r3, r0, r8
 800ab44:	fa09 f303 	lsl.w	r3, r9, r3
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	46a2      	mov	sl, r4
 800ab4e:	e7d2      	b.n	800aaf6 <_vfiprintf_r+0xe2>
 800ab50:	9b03      	ldr	r3, [sp, #12]
 800ab52:	1d19      	adds	r1, r3, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	9103      	str	r1, [sp, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bfbb      	ittet	lt
 800ab5c:	425b      	neglt	r3, r3
 800ab5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab62:	9307      	strge	r3, [sp, #28]
 800ab64:	9307      	strlt	r3, [sp, #28]
 800ab66:	bfb8      	it	lt
 800ab68:	9204      	strlt	r2, [sp, #16]
 800ab6a:	7823      	ldrb	r3, [r4, #0]
 800ab6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab6e:	d10c      	bne.n	800ab8a <_vfiprintf_r+0x176>
 800ab70:	7863      	ldrb	r3, [r4, #1]
 800ab72:	2b2a      	cmp	r3, #42	; 0x2a
 800ab74:	d135      	bne.n	800abe2 <_vfiprintf_r+0x1ce>
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	1d1a      	adds	r2, r3, #4
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	9203      	str	r2, [sp, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfb8      	it	lt
 800ab82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab86:	3402      	adds	r4, #2
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac70 <_vfiprintf_r+0x25c>
 800ab8e:	7821      	ldrb	r1, [r4, #0]
 800ab90:	2203      	movs	r2, #3
 800ab92:	4650      	mov	r0, sl
 800ab94:	f7f5 fb24 	bl	80001e0 <memchr>
 800ab98:	b140      	cbz	r0, 800abac <_vfiprintf_r+0x198>
 800ab9a:	2340      	movs	r3, #64	; 0x40
 800ab9c:	eba0 000a 	sub.w	r0, r0, sl
 800aba0:	fa03 f000 	lsl.w	r0, r3, r0
 800aba4:	9b04      	ldr	r3, [sp, #16]
 800aba6:	4303      	orrs	r3, r0
 800aba8:	3401      	adds	r4, #1
 800abaa:	9304      	str	r3, [sp, #16]
 800abac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb0:	482c      	ldr	r0, [pc, #176]	; (800ac64 <_vfiprintf_r+0x250>)
 800abb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abb6:	2206      	movs	r2, #6
 800abb8:	f7f5 fb12 	bl	80001e0 <memchr>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d03f      	beq.n	800ac40 <_vfiprintf_r+0x22c>
 800abc0:	4b29      	ldr	r3, [pc, #164]	; (800ac68 <_vfiprintf_r+0x254>)
 800abc2:	bb1b      	cbnz	r3, 800ac0c <_vfiprintf_r+0x1f8>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	3307      	adds	r3, #7
 800abc8:	f023 0307 	bic.w	r3, r3, #7
 800abcc:	3308      	adds	r3, #8
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd2:	443b      	add	r3, r7
 800abd4:	9309      	str	r3, [sp, #36]	; 0x24
 800abd6:	e767      	b.n	800aaa8 <_vfiprintf_r+0x94>
 800abd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abdc:	460c      	mov	r4, r1
 800abde:	2001      	movs	r0, #1
 800abe0:	e7a5      	b.n	800ab2e <_vfiprintf_r+0x11a>
 800abe2:	2300      	movs	r3, #0
 800abe4:	3401      	adds	r4, #1
 800abe6:	9305      	str	r3, [sp, #20]
 800abe8:	4619      	mov	r1, r3
 800abea:	f04f 0c0a 	mov.w	ip, #10
 800abee:	4620      	mov	r0, r4
 800abf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf4:	3a30      	subs	r2, #48	; 0x30
 800abf6:	2a09      	cmp	r2, #9
 800abf8:	d903      	bls.n	800ac02 <_vfiprintf_r+0x1ee>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0c5      	beq.n	800ab8a <_vfiprintf_r+0x176>
 800abfe:	9105      	str	r1, [sp, #20]
 800ac00:	e7c3      	b.n	800ab8a <_vfiprintf_r+0x176>
 800ac02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac06:	4604      	mov	r4, r0
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e7f0      	b.n	800abee <_vfiprintf_r+0x1da>
 800ac0c:	ab03      	add	r3, sp, #12
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	462a      	mov	r2, r5
 800ac12:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <_vfiprintf_r+0x258>)
 800ac14:	a904      	add	r1, sp, #16
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7fc f886 	bl	8006d28 <_printf_float>
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	1c78      	adds	r0, r7, #1
 800ac20:	d1d6      	bne.n	800abd0 <_vfiprintf_r+0x1bc>
 800ac22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac24:	07d9      	lsls	r1, r3, #31
 800ac26:	d405      	bmi.n	800ac34 <_vfiprintf_r+0x220>
 800ac28:	89ab      	ldrh	r3, [r5, #12]
 800ac2a:	059a      	lsls	r2, r3, #22
 800ac2c:	d402      	bmi.n	800ac34 <_vfiprintf_r+0x220>
 800ac2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac30:	f000 faa1 	bl	800b176 <__retarget_lock_release_recursive>
 800ac34:	89ab      	ldrh	r3, [r5, #12]
 800ac36:	065b      	lsls	r3, r3, #25
 800ac38:	f53f af12 	bmi.w	800aa60 <_vfiprintf_r+0x4c>
 800ac3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac3e:	e711      	b.n	800aa64 <_vfiprintf_r+0x50>
 800ac40:	ab03      	add	r3, sp, #12
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	462a      	mov	r2, r5
 800ac46:	4b09      	ldr	r3, [pc, #36]	; (800ac6c <_vfiprintf_r+0x258>)
 800ac48:	a904      	add	r1, sp, #16
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7fc fb10 	bl	8007270 <_printf_i>
 800ac50:	e7e4      	b.n	800ac1c <_vfiprintf_r+0x208>
 800ac52:	bf00      	nop
 800ac54:	0800bb2c 	.word	0x0800bb2c
 800ac58:	0800bb4c 	.word	0x0800bb4c
 800ac5c:	0800bb0c 	.word	0x0800bb0c
 800ac60:	0800babc 	.word	0x0800babc
 800ac64:	0800bac6 	.word	0x0800bac6
 800ac68:	08006d29 	.word	0x08006d29
 800ac6c:	0800a9ef 	.word	0x0800a9ef
 800ac70:	0800bac2 	.word	0x0800bac2

0800ac74 <__swbuf_r>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	460e      	mov	r6, r1
 800ac78:	4614      	mov	r4, r2
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	b118      	cbz	r0, 800ac86 <__swbuf_r+0x12>
 800ac7e:	6983      	ldr	r3, [r0, #24]
 800ac80:	b90b      	cbnz	r3, 800ac86 <__swbuf_r+0x12>
 800ac82:	f000 f9d9 	bl	800b038 <__sinit>
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <__swbuf_r+0x98>)
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	d12b      	bne.n	800ace4 <__swbuf_r+0x70>
 800ac8c:	686c      	ldr	r4, [r5, #4]
 800ac8e:	69a3      	ldr	r3, [r4, #24]
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	071a      	lsls	r2, r3, #28
 800ac96:	d52f      	bpl.n	800acf8 <__swbuf_r+0x84>
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	b36b      	cbz	r3, 800acf8 <__swbuf_r+0x84>
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	6820      	ldr	r0, [r4, #0]
 800aca0:	1ac0      	subs	r0, r0, r3
 800aca2:	6963      	ldr	r3, [r4, #20]
 800aca4:	b2f6      	uxtb	r6, r6
 800aca6:	4283      	cmp	r3, r0
 800aca8:	4637      	mov	r7, r6
 800acaa:	dc04      	bgt.n	800acb6 <__swbuf_r+0x42>
 800acac:	4621      	mov	r1, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	f000 f92e 	bl	800af10 <_fflush_r>
 800acb4:	bb30      	cbnz	r0, 800ad04 <__swbuf_r+0x90>
 800acb6:	68a3      	ldr	r3, [r4, #8]
 800acb8:	3b01      	subs	r3, #1
 800acba:	60a3      	str	r3, [r4, #8]
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	1c5a      	adds	r2, r3, #1
 800acc0:	6022      	str	r2, [r4, #0]
 800acc2:	701e      	strb	r6, [r3, #0]
 800acc4:	6963      	ldr	r3, [r4, #20]
 800acc6:	3001      	adds	r0, #1
 800acc8:	4283      	cmp	r3, r0
 800acca:	d004      	beq.n	800acd6 <__swbuf_r+0x62>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	07db      	lsls	r3, r3, #31
 800acd0:	d506      	bpl.n	800ace0 <__swbuf_r+0x6c>
 800acd2:	2e0a      	cmp	r6, #10
 800acd4:	d104      	bne.n	800ace0 <__swbuf_r+0x6c>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 f919 	bl	800af10 <_fflush_r>
 800acde:	b988      	cbnz	r0, 800ad04 <__swbuf_r+0x90>
 800ace0:	4638      	mov	r0, r7
 800ace2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace4:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <__swbuf_r+0x9c>)
 800ace6:	429c      	cmp	r4, r3
 800ace8:	d101      	bne.n	800acee <__swbuf_r+0x7a>
 800acea:	68ac      	ldr	r4, [r5, #8]
 800acec:	e7cf      	b.n	800ac8e <__swbuf_r+0x1a>
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <__swbuf_r+0xa0>)
 800acf0:	429c      	cmp	r4, r3
 800acf2:	bf08      	it	eq
 800acf4:	68ec      	ldreq	r4, [r5, #12]
 800acf6:	e7ca      	b.n	800ac8e <__swbuf_r+0x1a>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f80c 	bl	800ad18 <__swsetup_r>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d0cb      	beq.n	800ac9c <__swbuf_r+0x28>
 800ad04:	f04f 37ff 	mov.w	r7, #4294967295
 800ad08:	e7ea      	b.n	800ace0 <__swbuf_r+0x6c>
 800ad0a:	bf00      	nop
 800ad0c:	0800bb2c 	.word	0x0800bb2c
 800ad10:	0800bb4c 	.word	0x0800bb4c
 800ad14:	0800bb0c 	.word	0x0800bb0c

0800ad18 <__swsetup_r>:
 800ad18:	4b32      	ldr	r3, [pc, #200]	; (800ade4 <__swsetup_r+0xcc>)
 800ad1a:	b570      	push	{r4, r5, r6, lr}
 800ad1c:	681d      	ldr	r5, [r3, #0]
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	b125      	cbz	r5, 800ad2e <__swsetup_r+0x16>
 800ad24:	69ab      	ldr	r3, [r5, #24]
 800ad26:	b913      	cbnz	r3, 800ad2e <__swsetup_r+0x16>
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f985 	bl	800b038 <__sinit>
 800ad2e:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <__swsetup_r+0xd0>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d10f      	bne.n	800ad54 <__swsetup_r+0x3c>
 800ad34:	686c      	ldr	r4, [r5, #4]
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad3c:	0719      	lsls	r1, r3, #28
 800ad3e:	d42c      	bmi.n	800ad9a <__swsetup_r+0x82>
 800ad40:	06dd      	lsls	r5, r3, #27
 800ad42:	d411      	bmi.n	800ad68 <__swsetup_r+0x50>
 800ad44:	2309      	movs	r3, #9
 800ad46:	6033      	str	r3, [r6, #0]
 800ad48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad52:	e03e      	b.n	800add2 <__swsetup_r+0xba>
 800ad54:	4b25      	ldr	r3, [pc, #148]	; (800adec <__swsetup_r+0xd4>)
 800ad56:	429c      	cmp	r4, r3
 800ad58:	d101      	bne.n	800ad5e <__swsetup_r+0x46>
 800ad5a:	68ac      	ldr	r4, [r5, #8]
 800ad5c:	e7eb      	b.n	800ad36 <__swsetup_r+0x1e>
 800ad5e:	4b24      	ldr	r3, [pc, #144]	; (800adf0 <__swsetup_r+0xd8>)
 800ad60:	429c      	cmp	r4, r3
 800ad62:	bf08      	it	eq
 800ad64:	68ec      	ldreq	r4, [r5, #12]
 800ad66:	e7e6      	b.n	800ad36 <__swsetup_r+0x1e>
 800ad68:	0758      	lsls	r0, r3, #29
 800ad6a:	d512      	bpl.n	800ad92 <__swsetup_r+0x7a>
 800ad6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad6e:	b141      	cbz	r1, 800ad82 <__swsetup_r+0x6a>
 800ad70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad74:	4299      	cmp	r1, r3
 800ad76:	d002      	beq.n	800ad7e <__swsetup_r+0x66>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff fb67 	bl	800a44c <_free_r>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	6363      	str	r3, [r4, #52]	; 0x34
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	f043 0308 	orr.w	r3, r3, #8
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	b94b      	cbnz	r3, 800adb2 <__swsetup_r+0x9a>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ada4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada8:	d003      	beq.n	800adb2 <__swsetup_r+0x9a>
 800adaa:	4621      	mov	r1, r4
 800adac:	4630      	mov	r0, r6
 800adae:	f000 fa07 	bl	800b1c0 <__smakebuf_r>
 800adb2:	89a0      	ldrh	r0, [r4, #12]
 800adb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adb8:	f010 0301 	ands.w	r3, r0, #1
 800adbc:	d00a      	beq.n	800add4 <__swsetup_r+0xbc>
 800adbe:	2300      	movs	r3, #0
 800adc0:	60a3      	str	r3, [r4, #8]
 800adc2:	6963      	ldr	r3, [r4, #20]
 800adc4:	425b      	negs	r3, r3
 800adc6:	61a3      	str	r3, [r4, #24]
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	b943      	cbnz	r3, 800adde <__swsetup_r+0xc6>
 800adcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800add0:	d1ba      	bne.n	800ad48 <__swsetup_r+0x30>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	0781      	lsls	r1, r0, #30
 800add6:	bf58      	it	pl
 800add8:	6963      	ldrpl	r3, [r4, #20]
 800adda:	60a3      	str	r3, [r4, #8]
 800addc:	e7f4      	b.n	800adc8 <__swsetup_r+0xb0>
 800adde:	2000      	movs	r0, #0
 800ade0:	e7f7      	b.n	800add2 <__swsetup_r+0xba>
 800ade2:	bf00      	nop
 800ade4:	2000000c 	.word	0x2000000c
 800ade8:	0800bb2c 	.word	0x0800bb2c
 800adec:	0800bb4c 	.word	0x0800bb4c
 800adf0:	0800bb0c 	.word	0x0800bb0c

0800adf4 <abort>:
 800adf4:	b508      	push	{r3, lr}
 800adf6:	2006      	movs	r0, #6
 800adf8:	f000 fa52 	bl	800b2a0 <raise>
 800adfc:	2001      	movs	r0, #1
 800adfe:	f7f7 f9d1 	bl	80021a4 <_exit>
	...

0800ae04 <__sflush_r>:
 800ae04:	898a      	ldrh	r2, [r1, #12]
 800ae06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	0710      	lsls	r0, r2, #28
 800ae0e:	460c      	mov	r4, r1
 800ae10:	d458      	bmi.n	800aec4 <__sflush_r+0xc0>
 800ae12:	684b      	ldr	r3, [r1, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dc05      	bgt.n	800ae24 <__sflush_r+0x20>
 800ae18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dc02      	bgt.n	800ae24 <__sflush_r+0x20>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	d0f9      	beq.n	800ae1e <__sflush_r+0x1a>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae30:	682f      	ldr	r7, [r5, #0]
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	d032      	beq.n	800ae9c <__sflush_r+0x98>
 800ae36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	075a      	lsls	r2, r3, #29
 800ae3c:	d505      	bpl.n	800ae4a <__sflush_r+0x46>
 800ae3e:	6863      	ldr	r3, [r4, #4]
 800ae40:	1ac0      	subs	r0, r0, r3
 800ae42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae44:	b10b      	cbz	r3, 800ae4a <__sflush_r+0x46>
 800ae46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae50:	6a21      	ldr	r1, [r4, #32]
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b0      	blx	r6
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	d106      	bne.n	800ae6a <__sflush_r+0x66>
 800ae5c:	6829      	ldr	r1, [r5, #0]
 800ae5e:	291d      	cmp	r1, #29
 800ae60:	d82c      	bhi.n	800aebc <__sflush_r+0xb8>
 800ae62:	4a2a      	ldr	r2, [pc, #168]	; (800af0c <__sflush_r+0x108>)
 800ae64:	40ca      	lsrs	r2, r1
 800ae66:	07d6      	lsls	r6, r2, #31
 800ae68:	d528      	bpl.n	800aebc <__sflush_r+0xb8>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	6062      	str	r2, [r4, #4]
 800ae6e:	04d9      	lsls	r1, r3, #19
 800ae70:	6922      	ldr	r2, [r4, #16]
 800ae72:	6022      	str	r2, [r4, #0]
 800ae74:	d504      	bpl.n	800ae80 <__sflush_r+0x7c>
 800ae76:	1c42      	adds	r2, r0, #1
 800ae78:	d101      	bne.n	800ae7e <__sflush_r+0x7a>
 800ae7a:	682b      	ldr	r3, [r5, #0]
 800ae7c:	b903      	cbnz	r3, 800ae80 <__sflush_r+0x7c>
 800ae7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ae80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae82:	602f      	str	r7, [r5, #0]
 800ae84:	2900      	cmp	r1, #0
 800ae86:	d0ca      	beq.n	800ae1e <__sflush_r+0x1a>
 800ae88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	d002      	beq.n	800ae96 <__sflush_r+0x92>
 800ae90:	4628      	mov	r0, r5
 800ae92:	f7ff fadb 	bl	800a44c <_free_r>
 800ae96:	2000      	movs	r0, #0
 800ae98:	6360      	str	r0, [r4, #52]	; 0x34
 800ae9a:	e7c1      	b.n	800ae20 <__sflush_r+0x1c>
 800ae9c:	6a21      	ldr	r1, [r4, #32]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b0      	blx	r6
 800aea4:	1c41      	adds	r1, r0, #1
 800aea6:	d1c7      	bne.n	800ae38 <__sflush_r+0x34>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0c4      	beq.n	800ae38 <__sflush_r+0x34>
 800aeae:	2b1d      	cmp	r3, #29
 800aeb0:	d001      	beq.n	800aeb6 <__sflush_r+0xb2>
 800aeb2:	2b16      	cmp	r3, #22
 800aeb4:	d101      	bne.n	800aeba <__sflush_r+0xb6>
 800aeb6:	602f      	str	r7, [r5, #0]
 800aeb8:	e7b1      	b.n	800ae1e <__sflush_r+0x1a>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	e7ad      	b.n	800ae20 <__sflush_r+0x1c>
 800aec4:	690f      	ldr	r7, [r1, #16]
 800aec6:	2f00      	cmp	r7, #0
 800aec8:	d0a9      	beq.n	800ae1e <__sflush_r+0x1a>
 800aeca:	0793      	lsls	r3, r2, #30
 800aecc:	680e      	ldr	r6, [r1, #0]
 800aece:	bf08      	it	eq
 800aed0:	694b      	ldreq	r3, [r1, #20]
 800aed2:	600f      	str	r7, [r1, #0]
 800aed4:	bf18      	it	ne
 800aed6:	2300      	movne	r3, #0
 800aed8:	eba6 0807 	sub.w	r8, r6, r7
 800aedc:	608b      	str	r3, [r1, #8]
 800aede:	f1b8 0f00 	cmp.w	r8, #0
 800aee2:	dd9c      	ble.n	800ae1e <__sflush_r+0x1a>
 800aee4:	6a21      	ldr	r1, [r4, #32]
 800aee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aee8:	4643      	mov	r3, r8
 800aeea:	463a      	mov	r2, r7
 800aeec:	4628      	mov	r0, r5
 800aeee:	47b0      	blx	r6
 800aef0:	2800      	cmp	r0, #0
 800aef2:	dc06      	bgt.n	800af02 <__sflush_r+0xfe>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aefa:	81a3      	strh	r3, [r4, #12]
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295
 800af00:	e78e      	b.n	800ae20 <__sflush_r+0x1c>
 800af02:	4407      	add	r7, r0
 800af04:	eba8 0800 	sub.w	r8, r8, r0
 800af08:	e7e9      	b.n	800aede <__sflush_r+0xda>
 800af0a:	bf00      	nop
 800af0c:	20400001 	.word	0x20400001

0800af10 <_fflush_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	690b      	ldr	r3, [r1, #16]
 800af14:	4605      	mov	r5, r0
 800af16:	460c      	mov	r4, r1
 800af18:	b913      	cbnz	r3, 800af20 <_fflush_r+0x10>
 800af1a:	2500      	movs	r5, #0
 800af1c:	4628      	mov	r0, r5
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	b118      	cbz	r0, 800af2a <_fflush_r+0x1a>
 800af22:	6983      	ldr	r3, [r0, #24]
 800af24:	b90b      	cbnz	r3, 800af2a <_fflush_r+0x1a>
 800af26:	f000 f887 	bl	800b038 <__sinit>
 800af2a:	4b14      	ldr	r3, [pc, #80]	; (800af7c <_fflush_r+0x6c>)
 800af2c:	429c      	cmp	r4, r3
 800af2e:	d11b      	bne.n	800af68 <_fflush_r+0x58>
 800af30:	686c      	ldr	r4, [r5, #4]
 800af32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0ef      	beq.n	800af1a <_fflush_r+0xa>
 800af3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af3c:	07d0      	lsls	r0, r2, #31
 800af3e:	d404      	bmi.n	800af4a <_fflush_r+0x3a>
 800af40:	0599      	lsls	r1, r3, #22
 800af42:	d402      	bmi.n	800af4a <_fflush_r+0x3a>
 800af44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af46:	f000 f915 	bl	800b174 <__retarget_lock_acquire_recursive>
 800af4a:	4628      	mov	r0, r5
 800af4c:	4621      	mov	r1, r4
 800af4e:	f7ff ff59 	bl	800ae04 <__sflush_r>
 800af52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af54:	07da      	lsls	r2, r3, #31
 800af56:	4605      	mov	r5, r0
 800af58:	d4e0      	bmi.n	800af1c <_fflush_r+0xc>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	059b      	lsls	r3, r3, #22
 800af5e:	d4dd      	bmi.n	800af1c <_fflush_r+0xc>
 800af60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af62:	f000 f908 	bl	800b176 <__retarget_lock_release_recursive>
 800af66:	e7d9      	b.n	800af1c <_fflush_r+0xc>
 800af68:	4b05      	ldr	r3, [pc, #20]	; (800af80 <_fflush_r+0x70>)
 800af6a:	429c      	cmp	r4, r3
 800af6c:	d101      	bne.n	800af72 <_fflush_r+0x62>
 800af6e:	68ac      	ldr	r4, [r5, #8]
 800af70:	e7df      	b.n	800af32 <_fflush_r+0x22>
 800af72:	4b04      	ldr	r3, [pc, #16]	; (800af84 <_fflush_r+0x74>)
 800af74:	429c      	cmp	r4, r3
 800af76:	bf08      	it	eq
 800af78:	68ec      	ldreq	r4, [r5, #12]
 800af7a:	e7da      	b.n	800af32 <_fflush_r+0x22>
 800af7c:	0800bb2c 	.word	0x0800bb2c
 800af80:	0800bb4c 	.word	0x0800bb4c
 800af84:	0800bb0c 	.word	0x0800bb0c

0800af88 <std>:
 800af88:	2300      	movs	r3, #0
 800af8a:	b510      	push	{r4, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	e9c0 3300 	strd	r3, r3, [r0]
 800af92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af96:	6083      	str	r3, [r0, #8]
 800af98:	8181      	strh	r1, [r0, #12]
 800af9a:	6643      	str	r3, [r0, #100]	; 0x64
 800af9c:	81c2      	strh	r2, [r0, #14]
 800af9e:	6183      	str	r3, [r0, #24]
 800afa0:	4619      	mov	r1, r3
 800afa2:	2208      	movs	r2, #8
 800afa4:	305c      	adds	r0, #92	; 0x5c
 800afa6:	f7fb fe17 	bl	8006bd8 <memset>
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <std+0x38>)
 800afac:	6263      	str	r3, [r4, #36]	; 0x24
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <std+0x3c>)
 800afb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <std+0x40>)
 800afb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x44>)
 800afb8:	6224      	str	r4, [r4, #32]
 800afba:	6323      	str	r3, [r4, #48]	; 0x30
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	bf00      	nop
 800afc0:	0800b2d9 	.word	0x0800b2d9
 800afc4:	0800b2fb 	.word	0x0800b2fb
 800afc8:	0800b333 	.word	0x0800b333
 800afcc:	0800b357 	.word	0x0800b357

0800afd0 <_cleanup_r>:
 800afd0:	4901      	ldr	r1, [pc, #4]	; (800afd8 <_cleanup_r+0x8>)
 800afd2:	f000 b8af 	b.w	800b134 <_fwalk_reent>
 800afd6:	bf00      	nop
 800afd8:	0800af11 	.word	0x0800af11

0800afdc <__sfmoreglue>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	1e4a      	subs	r2, r1, #1
 800afe0:	2568      	movs	r5, #104	; 0x68
 800afe2:	4355      	muls	r5, r2
 800afe4:	460e      	mov	r6, r1
 800afe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afea:	f7ff fa7f 	bl	800a4ec <_malloc_r>
 800afee:	4604      	mov	r4, r0
 800aff0:	b140      	cbz	r0, 800b004 <__sfmoreglue+0x28>
 800aff2:	2100      	movs	r1, #0
 800aff4:	e9c0 1600 	strd	r1, r6, [r0]
 800aff8:	300c      	adds	r0, #12
 800affa:	60a0      	str	r0, [r4, #8]
 800affc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b000:	f7fb fdea 	bl	8006bd8 <memset>
 800b004:	4620      	mov	r0, r4
 800b006:	bd70      	pop	{r4, r5, r6, pc}

0800b008 <__sfp_lock_acquire>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__sfp_lock_acquire+0x8>)
 800b00a:	f000 b8b3 	b.w	800b174 <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20000460 	.word	0x20000460

0800b014 <__sfp_lock_release>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__sfp_lock_release+0x8>)
 800b016:	f000 b8ae 	b.w	800b176 <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20000460 	.word	0x20000460

0800b020 <__sinit_lock_acquire>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__sinit_lock_acquire+0x8>)
 800b022:	f000 b8a7 	b.w	800b174 <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	2000045b 	.word	0x2000045b

0800b02c <__sinit_lock_release>:
 800b02c:	4801      	ldr	r0, [pc, #4]	; (800b034 <__sinit_lock_release+0x8>)
 800b02e:	f000 b8a2 	b.w	800b176 <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	2000045b 	.word	0x2000045b

0800b038 <__sinit>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	4604      	mov	r4, r0
 800b03c:	f7ff fff0 	bl	800b020 <__sinit_lock_acquire>
 800b040:	69a3      	ldr	r3, [r4, #24]
 800b042:	b11b      	cbz	r3, 800b04c <__sinit+0x14>
 800b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b048:	f7ff bff0 	b.w	800b02c <__sinit_lock_release>
 800b04c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b050:	6523      	str	r3, [r4, #80]	; 0x50
 800b052:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <__sinit+0x68>)
 800b054:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <__sinit+0x6c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	62a2      	str	r2, [r4, #40]	; 0x28
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	bf04      	itt	eq
 800b05e:	2301      	moveq	r3, #1
 800b060:	61a3      	streq	r3, [r4, #24]
 800b062:	4620      	mov	r0, r4
 800b064:	f000 f820 	bl	800b0a8 <__sfp>
 800b068:	6060      	str	r0, [r4, #4]
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 f81c 	bl	800b0a8 <__sfp>
 800b070:	60a0      	str	r0, [r4, #8]
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f818 	bl	800b0a8 <__sfp>
 800b078:	2200      	movs	r2, #0
 800b07a:	60e0      	str	r0, [r4, #12]
 800b07c:	2104      	movs	r1, #4
 800b07e:	6860      	ldr	r0, [r4, #4]
 800b080:	f7ff ff82 	bl	800af88 <std>
 800b084:	68a0      	ldr	r0, [r4, #8]
 800b086:	2201      	movs	r2, #1
 800b088:	2109      	movs	r1, #9
 800b08a:	f7ff ff7d 	bl	800af88 <std>
 800b08e:	68e0      	ldr	r0, [r4, #12]
 800b090:	2202      	movs	r2, #2
 800b092:	2112      	movs	r1, #18
 800b094:	f7ff ff78 	bl	800af88 <std>
 800b098:	2301      	movs	r3, #1
 800b09a:	61a3      	str	r3, [r4, #24]
 800b09c:	e7d2      	b.n	800b044 <__sinit+0xc>
 800b09e:	bf00      	nop
 800b0a0:	0800b6b4 	.word	0x0800b6b4
 800b0a4:	0800afd1 	.word	0x0800afd1

0800b0a8 <__sfp>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f7ff ffac 	bl	800b008 <__sfp_lock_acquire>
 800b0b0:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <__sfp+0x84>)
 800b0b2:	681e      	ldr	r6, [r3, #0]
 800b0b4:	69b3      	ldr	r3, [r6, #24]
 800b0b6:	b913      	cbnz	r3, 800b0be <__sfp+0x16>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ffbd 	bl	800b038 <__sinit>
 800b0be:	3648      	adds	r6, #72	; 0x48
 800b0c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	d503      	bpl.n	800b0d0 <__sfp+0x28>
 800b0c8:	6833      	ldr	r3, [r6, #0]
 800b0ca:	b30b      	cbz	r3, 800b110 <__sfp+0x68>
 800b0cc:	6836      	ldr	r6, [r6, #0]
 800b0ce:	e7f7      	b.n	800b0c0 <__sfp+0x18>
 800b0d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0d4:	b9d5      	cbnz	r5, 800b10c <__sfp+0x64>
 800b0d6:	4b16      	ldr	r3, [pc, #88]	; (800b130 <__sfp+0x88>)
 800b0d8:	60e3      	str	r3, [r4, #12]
 800b0da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0de:	6665      	str	r5, [r4, #100]	; 0x64
 800b0e0:	f000 f847 	bl	800b172 <__retarget_lock_init_recursive>
 800b0e4:	f7ff ff96 	bl	800b014 <__sfp_lock_release>
 800b0e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0f0:	6025      	str	r5, [r4, #0]
 800b0f2:	61a5      	str	r5, [r4, #24]
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0fc:	f7fb fd6c 	bl	8006bd8 <memset>
 800b100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b108:	4620      	mov	r0, r4
 800b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b10c:	3468      	adds	r4, #104	; 0x68
 800b10e:	e7d9      	b.n	800b0c4 <__sfp+0x1c>
 800b110:	2104      	movs	r1, #4
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff ff62 	bl	800afdc <__sfmoreglue>
 800b118:	4604      	mov	r4, r0
 800b11a:	6030      	str	r0, [r6, #0]
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1d5      	bne.n	800b0cc <__sfp+0x24>
 800b120:	f7ff ff78 	bl	800b014 <__sfp_lock_release>
 800b124:	230c      	movs	r3, #12
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	e7ee      	b.n	800b108 <__sfp+0x60>
 800b12a:	bf00      	nop
 800b12c:	0800b6b4 	.word	0x0800b6b4
 800b130:	ffff0001 	.word	0xffff0001

0800b134 <_fwalk_reent>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	4606      	mov	r6, r0
 800b13a:	4688      	mov	r8, r1
 800b13c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b140:	2700      	movs	r7, #0
 800b142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b146:	f1b9 0901 	subs.w	r9, r9, #1
 800b14a:	d505      	bpl.n	800b158 <_fwalk_reent+0x24>
 800b14c:	6824      	ldr	r4, [r4, #0]
 800b14e:	2c00      	cmp	r4, #0
 800b150:	d1f7      	bne.n	800b142 <_fwalk_reent+0xe>
 800b152:	4638      	mov	r0, r7
 800b154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b158:	89ab      	ldrh	r3, [r5, #12]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d907      	bls.n	800b16e <_fwalk_reent+0x3a>
 800b15e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b162:	3301      	adds	r3, #1
 800b164:	d003      	beq.n	800b16e <_fwalk_reent+0x3a>
 800b166:	4629      	mov	r1, r5
 800b168:	4630      	mov	r0, r6
 800b16a:	47c0      	blx	r8
 800b16c:	4307      	orrs	r7, r0
 800b16e:	3568      	adds	r5, #104	; 0x68
 800b170:	e7e9      	b.n	800b146 <_fwalk_reent+0x12>

0800b172 <__retarget_lock_init_recursive>:
 800b172:	4770      	bx	lr

0800b174 <__retarget_lock_acquire_recursive>:
 800b174:	4770      	bx	lr

0800b176 <__retarget_lock_release_recursive>:
 800b176:	4770      	bx	lr

0800b178 <__swhatbuf_r>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	460e      	mov	r6, r1
 800b17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b180:	2900      	cmp	r1, #0
 800b182:	b096      	sub	sp, #88	; 0x58
 800b184:	4614      	mov	r4, r2
 800b186:	461d      	mov	r5, r3
 800b188:	da07      	bge.n	800b19a <__swhatbuf_r+0x22>
 800b18a:	2300      	movs	r3, #0
 800b18c:	602b      	str	r3, [r5, #0]
 800b18e:	89b3      	ldrh	r3, [r6, #12]
 800b190:	061a      	lsls	r2, r3, #24
 800b192:	d410      	bmi.n	800b1b6 <__swhatbuf_r+0x3e>
 800b194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b198:	e00e      	b.n	800b1b8 <__swhatbuf_r+0x40>
 800b19a:	466a      	mov	r2, sp
 800b19c:	f000 f902 	bl	800b3a4 <_fstat_r>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	dbf2      	blt.n	800b18a <__swhatbuf_r+0x12>
 800b1a4:	9a01      	ldr	r2, [sp, #4]
 800b1a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1ae:	425a      	negs	r2, r3
 800b1b0:	415a      	adcs	r2, r3
 800b1b2:	602a      	str	r2, [r5, #0]
 800b1b4:	e7ee      	b.n	800b194 <__swhatbuf_r+0x1c>
 800b1b6:	2340      	movs	r3, #64	; 0x40
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	b016      	add	sp, #88	; 0x58
 800b1be:	bd70      	pop	{r4, r5, r6, pc}

0800b1c0 <__smakebuf_r>:
 800b1c0:	898b      	ldrh	r3, [r1, #12]
 800b1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1c4:	079d      	lsls	r5, r3, #30
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	d507      	bpl.n	800b1dc <__smakebuf_r+0x1c>
 800b1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	6163      	str	r3, [r4, #20]
 800b1d8:	b002      	add	sp, #8
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	ab01      	add	r3, sp, #4
 800b1de:	466a      	mov	r2, sp
 800b1e0:	f7ff ffca 	bl	800b178 <__swhatbuf_r>
 800b1e4:	9900      	ldr	r1, [sp, #0]
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7ff f97f 	bl	800a4ec <_malloc_r>
 800b1ee:	b948      	cbnz	r0, 800b204 <__smakebuf_r+0x44>
 800b1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f4:	059a      	lsls	r2, r3, #22
 800b1f6:	d4ef      	bmi.n	800b1d8 <__smakebuf_r+0x18>
 800b1f8:	f023 0303 	bic.w	r3, r3, #3
 800b1fc:	f043 0302 	orr.w	r3, r3, #2
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	e7e3      	b.n	800b1cc <__smakebuf_r+0xc>
 800b204:	4b0d      	ldr	r3, [pc, #52]	; (800b23c <__smakebuf_r+0x7c>)
 800b206:	62b3      	str	r3, [r6, #40]	; 0x28
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	6020      	str	r0, [r4, #0]
 800b20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b210:	81a3      	strh	r3, [r4, #12]
 800b212:	9b00      	ldr	r3, [sp, #0]
 800b214:	6163      	str	r3, [r4, #20]
 800b216:	9b01      	ldr	r3, [sp, #4]
 800b218:	6120      	str	r0, [r4, #16]
 800b21a:	b15b      	cbz	r3, 800b234 <__smakebuf_r+0x74>
 800b21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b220:	4630      	mov	r0, r6
 800b222:	f000 f8d1 	bl	800b3c8 <_isatty_r>
 800b226:	b128      	cbz	r0, 800b234 <__smakebuf_r+0x74>
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	f023 0303 	bic.w	r3, r3, #3
 800b22e:	f043 0301 	orr.w	r3, r3, #1
 800b232:	81a3      	strh	r3, [r4, #12]
 800b234:	89a0      	ldrh	r0, [r4, #12]
 800b236:	4305      	orrs	r5, r0
 800b238:	81a5      	strh	r5, [r4, #12]
 800b23a:	e7cd      	b.n	800b1d8 <__smakebuf_r+0x18>
 800b23c:	0800afd1 	.word	0x0800afd1

0800b240 <_malloc_usable_size_r>:
 800b240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b244:	1f18      	subs	r0, r3, #4
 800b246:	2b00      	cmp	r3, #0
 800b248:	bfbc      	itt	lt
 800b24a:	580b      	ldrlt	r3, [r1, r0]
 800b24c:	18c0      	addlt	r0, r0, r3
 800b24e:	4770      	bx	lr

0800b250 <_raise_r>:
 800b250:	291f      	cmp	r1, #31
 800b252:	b538      	push	{r3, r4, r5, lr}
 800b254:	4604      	mov	r4, r0
 800b256:	460d      	mov	r5, r1
 800b258:	d904      	bls.n	800b264 <_raise_r+0x14>
 800b25a:	2316      	movs	r3, #22
 800b25c:	6003      	str	r3, [r0, #0]
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b266:	b112      	cbz	r2, 800b26e <_raise_r+0x1e>
 800b268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b26c:	b94b      	cbnz	r3, 800b282 <_raise_r+0x32>
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 f830 	bl	800b2d4 <_getpid_r>
 800b274:	462a      	mov	r2, r5
 800b276:	4601      	mov	r1, r0
 800b278:	4620      	mov	r0, r4
 800b27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b27e:	f000 b817 	b.w	800b2b0 <_kill_r>
 800b282:	2b01      	cmp	r3, #1
 800b284:	d00a      	beq.n	800b29c <_raise_r+0x4c>
 800b286:	1c59      	adds	r1, r3, #1
 800b288:	d103      	bne.n	800b292 <_raise_r+0x42>
 800b28a:	2316      	movs	r3, #22
 800b28c:	6003      	str	r3, [r0, #0]
 800b28e:	2001      	movs	r0, #1
 800b290:	e7e7      	b.n	800b262 <_raise_r+0x12>
 800b292:	2400      	movs	r4, #0
 800b294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b298:	4628      	mov	r0, r5
 800b29a:	4798      	blx	r3
 800b29c:	2000      	movs	r0, #0
 800b29e:	e7e0      	b.n	800b262 <_raise_r+0x12>

0800b2a0 <raise>:
 800b2a0:	4b02      	ldr	r3, [pc, #8]	; (800b2ac <raise+0xc>)
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f7ff bfd3 	b.w	800b250 <_raise_r>
 800b2aa:	bf00      	nop
 800b2ac:	2000000c 	.word	0x2000000c

0800b2b0 <_kill_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	; (800b2d0 <_kill_r+0x20>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	f7f6 ff61 	bl	8002184 <_kill>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	d102      	bne.n	800b2cc <_kill_r+0x1c>
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	b103      	cbz	r3, 800b2cc <_kill_r+0x1c>
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000454 	.word	0x20000454

0800b2d4 <_getpid_r>:
 800b2d4:	f7f6 bf4e 	b.w	8002174 <_getpid>

0800b2d8 <__sread>:
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	460c      	mov	r4, r1
 800b2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e0:	f000 f894 	bl	800b40c <_read_r>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	bfab      	itete	ge
 800b2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b2ec:	181b      	addge	r3, r3, r0
 800b2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2f2:	bfac      	ite	ge
 800b2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2f6:	81a3      	strhlt	r3, [r4, #12]
 800b2f8:	bd10      	pop	{r4, pc}

0800b2fa <__swrite>:
 800b2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fe:	461f      	mov	r7, r3
 800b300:	898b      	ldrh	r3, [r1, #12]
 800b302:	05db      	lsls	r3, r3, #23
 800b304:	4605      	mov	r5, r0
 800b306:	460c      	mov	r4, r1
 800b308:	4616      	mov	r6, r2
 800b30a:	d505      	bpl.n	800b318 <__swrite+0x1e>
 800b30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b310:	2302      	movs	r3, #2
 800b312:	2200      	movs	r2, #0
 800b314:	f000 f868 	bl	800b3e8 <_lseek_r>
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	4632      	mov	r2, r6
 800b326:	463b      	mov	r3, r7
 800b328:	4628      	mov	r0, r5
 800b32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b32e:	f000 b817 	b.w	800b360 <_write_r>

0800b332 <__sseek>:
 800b332:	b510      	push	{r4, lr}
 800b334:	460c      	mov	r4, r1
 800b336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b33a:	f000 f855 	bl	800b3e8 <_lseek_r>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	bf15      	itete	ne
 800b344:	6560      	strne	r0, [r4, #84]	; 0x54
 800b346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b34e:	81a3      	strheq	r3, [r4, #12]
 800b350:	bf18      	it	ne
 800b352:	81a3      	strhne	r3, [r4, #12]
 800b354:	bd10      	pop	{r4, pc}

0800b356 <__sclose>:
 800b356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35a:	f000 b813 	b.w	800b384 <_close_r>
	...

0800b360 <_write_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d07      	ldr	r5, [pc, #28]	; (800b380 <_write_r+0x20>)
 800b364:	4604      	mov	r4, r0
 800b366:	4608      	mov	r0, r1
 800b368:	4611      	mov	r1, r2
 800b36a:	2200      	movs	r2, #0
 800b36c:	602a      	str	r2, [r5, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f7f6 ff3f 	bl	80021f2 <_write>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_write_r+0x1e>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_write_r+0x1e>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	20000454 	.word	0x20000454

0800b384 <_close_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d06      	ldr	r5, [pc, #24]	; (800b3a0 <_close_r+0x1c>)
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	f7f6 ff4b 	bl	800222a <_close>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_close_r+0x1a>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_close_r+0x1a>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	20000454 	.word	0x20000454

0800b3a4 <_fstat_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4d07      	ldr	r5, [pc, #28]	; (800b3c4 <_fstat_r+0x20>)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	602b      	str	r3, [r5, #0]
 800b3b2:	f7f6 ff46 	bl	8002242 <_fstat>
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	d102      	bne.n	800b3c0 <_fstat_r+0x1c>
 800b3ba:	682b      	ldr	r3, [r5, #0]
 800b3bc:	b103      	cbz	r3, 800b3c0 <_fstat_r+0x1c>
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	bd38      	pop	{r3, r4, r5, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000454 	.word	0x20000454

0800b3c8 <_isatty_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4d06      	ldr	r5, [pc, #24]	; (800b3e4 <_isatty_r+0x1c>)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	4608      	mov	r0, r1
 800b3d2:	602b      	str	r3, [r5, #0]
 800b3d4:	f7f6 ff45 	bl	8002262 <_isatty>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_isatty_r+0x1a>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_isatty_r+0x1a>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	20000454 	.word	0x20000454

0800b3e8 <_lseek_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d07      	ldr	r5, [pc, #28]	; (800b408 <_lseek_r+0x20>)
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	4608      	mov	r0, r1
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f7f6 ff3e 	bl	8002278 <_lseek>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_lseek_r+0x1e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_lseek_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	20000454 	.word	0x20000454

0800b40c <_read_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4d07      	ldr	r5, [pc, #28]	; (800b42c <_read_r+0x20>)
 800b410:	4604      	mov	r4, r0
 800b412:	4608      	mov	r0, r1
 800b414:	4611      	mov	r1, r2
 800b416:	2200      	movs	r2, #0
 800b418:	602a      	str	r2, [r5, #0]
 800b41a:	461a      	mov	r2, r3
 800b41c:	f7f6 fecc 	bl	80021b8 <_read>
 800b420:	1c43      	adds	r3, r0, #1
 800b422:	d102      	bne.n	800b42a <_read_r+0x1e>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	b103      	cbz	r3, 800b42a <_read_r+0x1e>
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	bd38      	pop	{r3, r4, r5, pc}
 800b42c:	20000454 	.word	0x20000454

0800b430 <_init>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	bf00      	nop
 800b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b436:	bc08      	pop	{r3}
 800b438:	469e      	mov	lr, r3
 800b43a:	4770      	bx	lr

0800b43c <_fini>:
 800b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43e:	bf00      	nop
 800b440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b442:	bc08      	pop	{r3}
 800b444:	469e      	mov	lr, r3
 800b446:	4770      	bx	lr
