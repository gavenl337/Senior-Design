
STM32_SIM800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc0  08005cc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005cc0  08005cc0  00015cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cc8  08005cc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc8  08005cc8  00015cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ccc  08005ccc  00015ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce0  20000070  08005d40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d50  08005d40  00020d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cf7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002af9  00000000  00000000  00031d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  000354a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027e54  00000000  00000000  00035f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b784  00000000  00000000  0005ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eaf44  00000000  00000000  00069570  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001544b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  00154530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a34 	.word	0x08005a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005a34 	.word	0x08005a34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a1b      	ldrb	r3, [r3, #8]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d102      	bne.n	800059a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000594:	230c      	movs	r3, #12
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e005      	b.n	80005a6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7a1b      	ldrb	r3, [r3, #8]
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d101      	bne.n	80005a6 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80005a2:	230a      	movs	r3, #10
 80005a4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	330c      	adds	r3, #12
 80005aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005ae:	f000 fb60 	bl	8000c72 <MQTTstrlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	3302      	adds	r3, #2
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7edb      	ldrb	r3, [r3, #27]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3324      	adds	r3, #36	; 0x24
 80005c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005cc:	f000 fb51 	bl	8000c72 <MQTTstrlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	1c9c      	adds	r4, r3, #2
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3330      	adds	r3, #48	; 0x30
 80005d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005dc:	f000 fb49 	bl	8000c72 <MQTTstrlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4423      	add	r3, r4
 80005e4:	3302      	adds	r3, #2
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <MQTTSerialize_connectLength+0x7c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00a      	beq.n	8000612 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3340      	adds	r3, #64	; 0x40
 8000600:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000604:	f000 fb35 	bl	8000c72 <MQTTstrlen>
 8000608:	4603      	mov	r3, r0
 800060a:	3302      	adds	r3, #2
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <MQTTSerialize_connectLength+0xa2>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800061e:	2b00      	cmp	r3, #0
 8000620:	d00a      	beq.n	8000638 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	334c      	adds	r3, #76	; 0x4c
 8000626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062a:	f000 fb22 	bl	8000c72 <MQTTstrlen>
 800062e:	4603      	mov	r3, r0
 8000630:	3302      	adds	r3, #2
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000638:	68fb      	ldr	r3, [r7, #12]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}
	...

08000644 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff8a 	bl	8000580 <MQTTSerialize_connectLength>
 800066c:	6238      	str	r0, [r7, #32]
 800066e:	6a38      	ldr	r0, [r7, #32]
 8000670:	f000 f9b4 	bl	80009dc <MQTTPacket_len>
 8000674:	4602      	mov	r2, r0
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4293      	cmp	r3, r2
 800067a:	da03      	bge.n	8000684 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800067c:	f06f 0301 	mvn.w	r3, #1
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000682:	e0c3      	b.n	800080c <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000688:	7e3b      	ldrb	r3, [r7, #24]
 800068a:	2201      	movs	r2, #1
 800068c:	f362 1307 	bfi	r3, r2, #4, #4
 8000690:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000692:	7e3a      	ldrb	r2, [r7, #24]
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fa2d 	bl	8000afa <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	6a39      	ldr	r1, [r7, #32]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f92d 	bl	8000904 <MQTTPacket_encode>
 80006aa:	4602      	mov	r2, r0
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	4413      	add	r3, r2
 80006b0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a1b      	ldrb	r3, [r3, #8]
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d10c      	bne.n	80006d4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4956      	ldr	r1, [pc, #344]	; (8000818 <MQTTSerialize_connect+0x1d4>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fa58 	bl	8000b76 <writeCString>
		writeChar(&ptr, (char) 4);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fa14 	bl	8000afa <writeChar>
 80006d2:	e00b      	b.n	80006ec <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4950      	ldr	r1, [pc, #320]	; (800081c <MQTTSerialize_connect+0x1d8>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fa4b 	bl	8000b76 <writeCString>
		writeChar(&ptr, (char) 3);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa07 	bl	8000afa <writeChar>
	}

	flags.all = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7e9b      	ldrb	r3, [r3, #26]
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	7d3b      	ldrb	r3, [r7, #20]
 80006fc:	f362 0341 	bfi	r3, r2, #1, #1
 8000700:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7edb      	ldrb	r3, [r3, #27]
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2da      	uxtb	r2, r3
 8000710:	7d3b      	ldrb	r3, [r7, #20]
 8000712:	f362 0382 	bfi	r3, r2, #2, #1
 8000716:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8000718:	7d3b      	ldrb	r3, [r7, #20]
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800072a:	f003 0303 	and.w	r3, r3, #3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	7d3b      	ldrb	r3, [r7, #20]
 8000732:	f362 03c4 	bfi	r3, r2, #3, #2
 8000736:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7d3b      	ldrb	r3, [r7, #20]
 8000746:	f362 1345 	bfi	r3, r2, #5, #1
 800074a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	2b00      	cmp	r3, #0
 8000752:	d103      	bne.n	800075c <MQTTSerialize_connect+0x118>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800075c:	7d3b      	ldrb	r3, [r7, #20]
 800075e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000762:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <MQTTSerialize_connect+0x130>
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000774:	7d3b      	ldrb	r3, [r7, #20]
 8000776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800077c:	7d3a      	ldrb	r2, [r7, #20]
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f9b8 	bl	8000afa <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8b1b      	ldrh	r3, [r3, #24]
 800078e:	461a      	mov	r2, r3
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f9c4 	bl	8000b24 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f107 001c 	add.w	r0, r7, #28
 80007a2:	330c      	adds	r3, #12
 80007a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007a6:	f000 fa05 	bl	8000bb4 <writeMQTTString>
	if (options->willFlag)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	7edb      	ldrb	r3, [r3, #27]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00d      	beq.n	80007ce <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f107 001c 	add.w	r0, r7, #28
 80007b8:	3324      	adds	r3, #36	; 0x24
 80007ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007bc:	f000 f9fa 	bl	8000bb4 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f107 001c 	add.w	r0, r7, #28
 80007c6:	3330      	adds	r3, #48	; 0x30
 80007c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ca:	f000 f9f3 	bl	8000bb4 <writeMQTTString>
	}
	if (flags.bits.username)
 80007ce:	7d3b      	ldrb	r3, [r7, #20]
 80007d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f107 001c 	add.w	r0, r7, #28
 80007e0:	3340      	adds	r3, #64	; 0x40
 80007e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007e4:	f000 f9e6 	bl	8000bb4 <writeMQTTString>
	if (flags.bits.password)
 80007e8:	7d3b      	ldrb	r3, [r7, #20]
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d006      	beq.n	8000802 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f107 001c 	add.w	r0, r7, #28
 80007fa:	334c      	adds	r3, #76	; 0x4c
 80007fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007fe:	f000 f9d9 	bl	8000bb4 <writeMQTTString>

	rc = ptr - buf;
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	461a      	mov	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800080e:	4618      	mov	r0, r3
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	08005a4c 	.word	0x08005a4c
 800081c:	08005a54 	.word	0x08005a54

08000820 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000834:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f943 	bl	8000ad2 <readChar>
 800084c:	4603      	mov	r3, r0
 800084e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8000850:	7f3b      	ldrb	r3, [r7, #28]
 8000852:	f023 030f 	bic.w	r3, r3, #15
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b30      	cmp	r3, #48	; 0x30
 800085a:	d14b      	bne.n	80008f4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800085c:	7f3b      	ldrb	r3, [r7, #28]
 800085e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800086a:	7f3b      	ldrb	r3, [r7, #28]
 800086c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8000878:	7f3b      	ldrb	r3, [r7, #28]
 800087a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	f107 0214 	add.w	r2, r7, #20
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f8ee 	bl	8000a70 <MQTTPacket_decodeBuf>
 8000894:	6278      	str	r0, [r7, #36]	; 0x24
 8000896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	4413      	add	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	4413      	add	r3, r2
 80008a4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	6a3a      	ldr	r2, [r7, #32]
 80008ac:	4619      	mov	r1, r3
 80008ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008b0:	f000 f9ae 	bl	8000c10 <readMQTTLenString>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d01e      	beq.n	80008f8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db19      	blt.n	80008f8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dd08      	ble.n	80008de <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f8e3 	bl	8000a9c <readInt>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29a      	uxth	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	1a9a      	subs	r2, r3, r2
 80008e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ec:	601a      	str	r2, [r3, #0]
	rc = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e002      	b.n	80008fa <MQTTDeserialize_publish+0xda>
		goto exit;
 80008f4:	bf00      	nop
 80008f6:	e000      	b.n	80008fa <MQTTDeserialize_publish+0xda>
exit:
 80008f8:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	425a      	negs	r2, r3
 8000916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800091a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800091e:	bf58      	it	pl
 8000920:	4253      	negpl	r3, r2
 8000922:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	da00      	bge.n	800092c <MQTTPacket_encode+0x28>
 800092a:	337f      	adds	r3, #127	; 0x7f
 800092c:	11db      	asrs	r3, r3, #7
 800092e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	dd03      	ble.n	800093e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800093c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	60fa      	str	r2, [r7, #12]
 8000944:	461a      	mov	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	7afa      	ldrb	r2, [r7, #11]
 800094c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dcde      	bgt.n	8000912 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000954:	68fb      	ldr	r3, [r7, #12]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3301      	adds	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	2b04      	cmp	r3, #4
 800098a:	dd03      	ble.n	8000994 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	60fb      	str	r3, [r7, #12]
			goto exit;
 8000992:	e01d      	b.n	80009d0 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8000994:	f107 020b 	add.w	r2, r7, #11
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2101      	movs	r1, #1
 800099c:	4610      	mov	r0, r2
 800099e:	4798      	blx	r3
 80009a0:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d112      	bne.n	80009ce <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	7afb      	ldrb	r3, [r7, #11]
 80009ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b2:	6979      	ldr	r1, [r7, #20]
 80009b4:	fb01 f303 	mul.w	r3, r1, r3
 80009b8:	441a      	add	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	01db      	lsls	r3, r3, #7
 80009c2:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 80009c4:	7afb      	ldrb	r3, [r7, #11]
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dbd6      	blt.n	800097a <MQTTPacket_decode+0x18>
exit:
 80009cc:	e000      	b.n	80009d0 <MQTTPacket_decode+0x6e>
			goto exit;
 80009ce:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 80009d0:	693b      	ldr	r3, [r7, #16]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3301      	adds	r3, #1
 80009e8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b7f      	cmp	r3, #127	; 0x7f
 80009ee:	dc03      	bgt.n	80009f8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e012      	b.n	8000a1e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009fe:	da03      	bge.n	8000a08 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3302      	adds	r3, #2
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	e00a      	b.n	8000a1e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <MQTTPacket_len+0x50>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	dc03      	bgt.n	8000a18 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3303      	adds	r3, #3
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e002      	b.n	8000a1e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	607b      	str	r3, [r7, #4]
	return rem_len;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	001ffffe 	.word	0x001ffffe

08000a30 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00a      	b.n	8000a56 <bufchar+0x26>
		*c = *bufptr++;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <bufchar+0x3c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	4909      	ldr	r1, [pc, #36]	; (8000a6c <bufchar+0x3c>)
 8000a48:	600a      	str	r2, [r1, #0]
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dbf0      	blt.n	8000a40 <bufchar+0x10>
	return count;
 8000a5e:	683b      	ldr	r3, [r7, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000008c 	.word	0x2000008c

08000a70 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000a7a:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <MQTTPacket_decodeBuf+0x24>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000a80:	6839      	ldr	r1, [r7, #0]
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MQTTPacket_decodeBuf+0x28>)
 8000a84:	f7ff ff6d 	bl	8000962 <MQTTPacket_decode>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	08000a31 	.word	0x08000a31

08000a9c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	3201      	adds	r2, #1
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	1c9a      	adds	r2, r3, #2
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
	return len;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
	return c;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	78fa      	ldrb	r2, [r7, #3]
 8000b0c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da00      	bge.n	8000b36 <writeInt+0x12>
 8000b34:	33ff      	adds	r3, #255	; 0xff
 8000b36:	121b      	asrs	r3, r3, #8
 8000b38:	461a      	mov	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	425a      	negs	r2, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	bf58      	it	pl
 8000b56:	4253      	negpl	r3, r2
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f7ff fb25 	bl	80001d0 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8000b8a:	68f9      	ldr	r1, [r7, #12]
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffc9 	bl	8000b24 <writeInt>
	memcpy(*pptr, string, len);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	6839      	ldr	r1, [r7, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 fe4a 	bl	8004834 <memcpy>
	*pptr += len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	441a      	add	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	4638      	mov	r0, r7
 8000bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dd12      	ble.n	8000bee <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff ffa9 	bl	8000b24 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fe2a 	bl	8004834 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	441a      	add	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8000bec:	e00c      	b.n	8000c08 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff ffbc 	bl	8000b76 <writeCString>
}
 8000bfe:	e003      	b.n	8000c08 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff ff8e 	bl	8000b24 <writeInt>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	dd1a      	ble.n	8000c62 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f7ff ff35 	bl	8000a9c <readInt>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	6852      	ldr	r2, [r2, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d30c      	bcc.n	8000c62 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	6852      	ldr	r2, [r2, #4]
 8000c58:	441a      	add	r2, r3
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000c68:	697b      	ldr	r3, [r7, #20]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff faa0 	bl	80001d0 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e001      	b.n	8000c9a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	617b      	str	r3, [r7, #20]
	return rc;
 8000c9a:	697b      	ldr	r3, [r7, #20]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	4638      	mov	r0, r7
 8000cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cbc:	f7ff ffd9 	bl	8000c72 <MQTTstrlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	1c9a      	adds	r2, r3, #2
 8000cc4:	6a3b      	ldr	r3, [r7, #32]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	4413      	add	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd02      	ble.n	8000cda <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
	return len;
 8000cda:	697b      	ldr	r3, [r7, #20]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8000d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f7ff ffc8 	bl	8000ca4 <MQTTSerialize_publishLength>
 8000d14:	61b8      	str	r0, [r7, #24]
 8000d16:	69b8      	ldr	r0, [r7, #24]
 8000d18:	f7ff fe60 	bl	80009dc <MQTTPacket_len>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	4293      	cmp	r3, r2
 8000d22:	da03      	bge.n	8000d2c <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000d24:	f06f 0301 	mvn.w	r3, #1
 8000d28:	61fb      	str	r3, [r7, #28]
		goto exit;
 8000d2a:	e04d      	b.n	8000dc8 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8000d2c:	7c3b      	ldrb	r3, [r7, #16]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	f362 1307 	bfi	r3, r2, #4, #4
 8000d34:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7c3b      	ldrb	r3, [r7, #16]
 8000d40:	f362 03c3 	bfi	r3, r2, #3, #1
 8000d44:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	7c3b      	ldrb	r3, [r7, #16]
 8000d50:	f362 0342 	bfi	r3, r2, #1, #2
 8000d54:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	7c3b      	ldrb	r3, [r7, #16]
 8000d62:	f362 0300 	bfi	r3, r2, #0, #1
 8000d66:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000d68:	7c3a      	ldrb	r2, [r7, #16]
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fec2 	bl	8000afa <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	69b9      	ldr	r1, [r7, #24]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fdc2 	bl	8000904 <MQTTPacket_encode>
 8000d80:	4602      	mov	r2, r0
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	4413      	add	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	f7ff ff0f 	bl	8000bb4 <writeMQTTString>

	if (qos > 0)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dd06      	ble.n	8000daa <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000d9c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff febd 	bl	8000b24 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fd3f 	bl	8004834 <memcpy>
	ptr += payloadlen;
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dba:	4413      	add	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000dc8:	69fb      	ldr	r3, [r7, #28]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <Sim800_RxCallBack>:
/**
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <Sim800_RxCallBack+0x13c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	b291      	uxth	r1, r2
 8000de0:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <Sim800_RxCallBack+0x13c>)
 8000de2:	8011      	strh	r1, [r2, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <Sim800_RxCallBack+0x140>)
 8000de8:	7819      	ldrb	r1, [r3, #0]
 8000dea:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <Sim800_RxCallBack+0x144>)
 8000dec:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0) {
 8000dee:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <Sim800_RxCallBack+0x148>)
 8000df0:	7c9b      	ldrb	r3, [r3, #18]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d135      	bne.n	8000e62 <Sim800_RxCallBack+0x8e>
        if (strstr((char *) rx_buffer, "\r\n") != NULL && rx_index == 2) {
 8000df6:	494a      	ldr	r1, [pc, #296]	; (8000f20 <Sim800_RxCallBack+0x14c>)
 8000df8:	4847      	ldr	r0, [pc, #284]	; (8000f18 <Sim800_RxCallBack+0x144>)
 8000dfa:	f003 fd9b 	bl	8004934 <strstr>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <Sim800_RxCallBack+0x40>
 8000e04:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <Sim800_RxCallBack+0x13c>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d103      	bne.n	8000e14 <Sim800_RxCallBack+0x40>
            rx_index = 0;
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <Sim800_RxCallBack+0x13c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	801a      	strh	r2, [r3, #0]
 8000e12:	e026      	b.n	8000e62 <Sim800_RxCallBack+0x8e>
        } else if (strstr((char *) rx_buffer, "\r\n") != NULL) {
 8000e14:	4942      	ldr	r1, [pc, #264]	; (8000f20 <Sim800_RxCallBack+0x14c>)
 8000e16:	4840      	ldr	r0, [pc, #256]	; (8000f18 <Sim800_RxCallBack+0x144>)
 8000e18:	f003 fd8c 	bl	8004934 <strstr>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d01f      	beq.n	8000e62 <Sim800_RxCallBack+0x8e>
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000e22:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <Sim800_RxCallBack+0x150>)
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <Sim800_RxCallBack+0x144>)
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f003 fd00 	bl	8004834 <memcpy>
            clearRxBuffer();
 8000e34:	f000 f886 	bl	8000f44 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n")) {
 8000e38:	493b      	ldr	r1, [pc, #236]	; (8000f28 <Sim800_RxCallBack+0x154>)
 8000e3a:	483a      	ldr	r0, [pc, #232]	; (8000f24 <Sim800_RxCallBack+0x150>)
 8000e3c:	f003 fd7a 	bl	8004934 <strstr>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <Sim800_RxCallBack+0x7a>
                SIM800.mqttServer.connect = 0;
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <Sim800_RxCallBack+0x148>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	749a      	strb	r2, [r3, #18]
 8000e4c:	e009      	b.n	8000e62 <Sim800_RxCallBack+0x8e>
            } else if (strstr(mqtt_buffer, "CONNECT\r\n")) {
 8000e4e:	4937      	ldr	r1, [pc, #220]	; (8000f2c <Sim800_RxCallBack+0x158>)
 8000e50:	4834      	ldr	r0, [pc, #208]	; (8000f24 <Sim800_RxCallBack+0x150>)
 8000e52:	f003 fd6f 	bl	8004934 <strstr>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <Sim800_RxCallBack+0x8e>
                SIM800.mqttServer.connect = 1;
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <Sim800_RxCallBack+0x148>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *) rx_buffer, "CLOSED\r\n") || strstr((char *) rx_buffer, "ERROR\r\n")) {
 8000e62:	4933      	ldr	r1, [pc, #204]	; (8000f30 <Sim800_RxCallBack+0x15c>)
 8000e64:	482c      	ldr	r0, [pc, #176]	; (8000f18 <Sim800_RxCallBack+0x144>)
 8000e66:	f003 fd65 	bl	8004934 <strstr>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d106      	bne.n	8000e7e <Sim800_RxCallBack+0xaa>
 8000e70:	4930      	ldr	r1, [pc, #192]	; (8000f34 <Sim800_RxCallBack+0x160>)
 8000e72:	4829      	ldr	r0, [pc, #164]	; (8000f18 <Sim800_RxCallBack+0x144>)
 8000e74:	f003 fd5e 	bl	8004934 <strstr>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <Sim800_RxCallBack+0xb0>
        SIM800.mqttServer.connect = 0;
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <Sim800_RxCallBack+0x148>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48) {
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <Sim800_RxCallBack+0x148>)
 8000e86:	7c9b      	ldrb	r3, [r3, #18]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d106      	bne.n	8000e9a <Sim800_RxCallBack+0xc6>
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <Sim800_RxCallBack+0x140>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b30      	cmp	r3, #48	; 0x30
 8000e92:	d102      	bne.n	8000e9a <Sim800_RxCallBack+0xc6>
        mqtt_receive = 1;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <Sim800_RxCallBack+0x164>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1) {
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <Sim800_RxCallBack+0x164>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d124      	bne.n	8000eec <Sim800_RxCallBack+0x118>
        mqtt_buffer[mqtt_index++] = rx_data;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <Sim800_RxCallBack+0x168>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	b291      	uxth	r1, r2
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <Sim800_RxCallBack+0x168>)
 8000eac:	8011      	strh	r1, [r2, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <Sim800_RxCallBack+0x140>)
 8000eb2:	7819      	ldrb	r1, [r3, #0]
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <Sim800_RxCallBack+0x150>)
 8000eb6:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1]) {
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <Sim800_RxCallBack+0x168>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d90d      	bls.n	8000edc <Sim800_RxCallBack+0x108>
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <Sim800_RxCallBack+0x168>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <Sim800_RxCallBack+0x150>)
 8000ec8:	7852      	ldrb	r2, [r2, #1]
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	dd06      	ble.n	8000edc <Sim800_RxCallBack+0x108>
            MQTT_Receive((unsigned char *) mqtt_buffer);
 8000ece:	4815      	ldr	r0, [pc, #84]	; (8000f24 <Sim800_RxCallBack+0x150>)
 8000ed0:	f000 fa1a 	bl	8001308 <MQTT_Receive>
            clearRxBuffer();
 8000ed4:	f000 f836 	bl	8000f44 <clearRxBuffer>
            clearMqttBuffer();
 8000ed8:	f000 f846 	bl	8000f68 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer)) {
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <Sim800_RxCallBack+0x168>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <Sim800_RxCallBack+0x118>
            clearMqttBuffer();
 8000ee8:	f000 f83e 	bl	8000f68 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer)) {
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Sim800_RxCallBack+0x13c>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d903      	bls.n	8000f00 <Sim800_RxCallBack+0x12c>
        clearRxBuffer();
 8000ef8:	f000 f824 	bl	8000f44 <clearRxBuffer>
        clearMqttBuffer();
 8000efc:	f000 f834 	bl	8000f68 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	4904      	ldr	r1, [pc, #16]	; (8000f14 <Sim800_RxCallBack+0x140>)
 8000f04:	480e      	ldr	r0, [pc, #56]	; (8000f40 <Sim800_RxCallBack+0x16c>)
 8000f06:	f002 fd05 	bl	8003914 <HAL_UART_Receive_IT>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000648 	.word	0x20000648
 8000f14:	20000090 	.word	0x20000090
 8000f18:	20000094 	.word	0x20000094
 8000f1c:	20000c10 	.word	0x20000c10
 8000f20:	08005a5c 	.word	0x08005a5c
 8000f24:	2000064c 	.word	0x2000064c
 8000f28:	08005a60 	.word	0x08005a60
 8000f2c:	08005a70 	.word	0x08005a70
 8000f30:	08005a7c 	.word	0x08005a7c
 8000f34:	08005a88 	.word	0x08005a88
 8000f38:	2000064a 	.word	0x2000064a
 8000f3c:	20000c00 	.word	0x20000c00
 8000f40:	20000cc8 	.word	0x20000cc8

08000f44 <clearRxBuffer>:
/**
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <clearRxBuffer+0x1c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000f4e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000f52:	2100      	movs	r1, #0
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <clearRxBuffer+0x20>)
 8000f56:	f003 fc78 	bl	800484a <memset>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000648 	.word	0x20000648
 8000f64:	20000094 	.word	0x20000094

08000f68 <clearMqttBuffer>:
/**
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <clearMqttBuffer+0x20>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <clearMqttBuffer+0x24>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000f78:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <clearMqttBuffer+0x28>)
 8000f80:	f003 fc63 	bl	800484a <memset>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000064a 	.word	0x2000064a
 8000f8c:	20000c00 	.word	0x20000c00
 8000f90:	2000064c 	.word	0x2000064c

08000f94 <SIM800_SendCommand>:
 * @param command the command to be used the send AT command
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *) command,
                         (uint16_t) strlen(command));
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff f914 	bl	80001d0 <strlen>
 8000fa8:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *) command,
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <SIM800_SendCommand+0x50>)
 8000fb2:	f002 fc53 	bl	800385c <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fde7 	bl	8001b8c <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL) {
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <SIM800_SendCommand+0x54>)
 8000fc2:	f003 fcb7 	bl	8004934 <strstr>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <SIM800_SendCommand+0x40>
        clearRxBuffer();
 8000fcc:	f7ff ffba 	bl	8000f44 <clearRxBuffer>
        return 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e002      	b.n	8000fda <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 8000fd4:	f7ff ffb6 	bl	8000f44 <clearRxBuffer>
    return 1;
 8000fd8:	2301      	movs	r3, #1
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000cc8 	.word	0x20000cc8
 8000fe8:	2000064c 	.word	0x2000064c

08000fec <MQTT_Init>:
/**
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b092      	sub	sp, #72	; 0x48
 8000ff0:	af00      	add	r7, sp, #0
    SIM800.mqttServer.connect = 0;
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <MQTT_Init+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
    char str[64] = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fc21 	bl	800484a <memset>
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	492f      	ldr	r1, [pc, #188]	; (80010c8 <MQTT_Init+0xdc>)
 800100c:	482f      	ldr	r0, [pc, #188]	; (80010cc <MQTT_Init+0xe0>)
 800100e:	f002 fc81 	bl	8003914 <HAL_UART_Receive_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8001012:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001016:	492e      	ldr	r1, [pc, #184]	; (80010d0 <MQTT_Init+0xe4>)
 8001018:	482e      	ldr	r0, [pc, #184]	; (80010d4 <MQTT_Init+0xe8>)
 800101a:	f7ff ffbb 	bl	8000f94 <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 800101e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001022:	492b      	ldr	r1, [pc, #172]	; (80010d0 <MQTT_Init+0xe4>)
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <MQTT_Init+0xec>)
 8001026:	f7ff ffb5 	bl	8000f94 <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 800102a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800102e:	492b      	ldr	r1, [pc, #172]	; (80010dc <MQTT_Init+0xf0>)
 8001030:	482b      	ldr	r0, [pc, #172]	; (80010e0 <MQTT_Init+0xf4>)
 8001032:	f7ff ffaf 	bl	8000f94 <SIM800_SendCommand>
 8001036:	4602      	mov	r2, r0
 8001038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800103a:	4413      	add	r3, r2
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 800103e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001042:	4923      	ldr	r1, [pc, #140]	; (80010d0 <MQTT_Init+0xe4>)
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <MQTT_Init+0xf8>)
 8001046:	f7ff ffa5 	bl	8000f94 <SIM800_SendCommand>
 800104a:	4602      	mov	r2, r0
 800104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104e:	4413      	add	r3, r2
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8001052:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001056:	491e      	ldr	r1, [pc, #120]	; (80010d0 <MQTT_Init+0xe4>)
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <MQTT_Init+0xfc>)
 800105a:	f7ff ff9b 	bl	8000f94 <SIM800_SendCommand>
 800105e:	4602      	mov	r2, r0
 8001060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001062:	4413      	add	r3, r2
 8001064:	647b      	str	r3, [r7, #68]	; 0x44

    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"\",\"\"\r\n", SIM800.sim.apn);
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MQTT_Init+0xd8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1d38      	adds	r0, r7, #4
 800106c:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <MQTT_Init+0x100>)
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	f003 fc0c 	bl	800488c <sniprintf>
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800107a:	4915      	ldr	r1, [pc, #84]	; (80010d0 <MQTT_Init+0xe4>)
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff89 	bl	8000f94 <SIM800_SendCommand>
 8001082:	4602      	mov	r2, r0
 8001084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001086:	4413      	add	r3, r2
 8001088:	647b      	str	r3, [r7, #68]	; 0x44

    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 800108a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800108e:	4910      	ldr	r1, [pc, #64]	; (80010d0 <MQTT_Init+0xe4>)
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MQTT_Init+0x104>)
 8001092:	f7ff ff7f 	bl	8000f94 <SIM800_SendCommand>
 8001096:	4602      	mov	r2, r0
 8001098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800109a:	4413      	add	r3, r2
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 800109e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010a2:	4914      	ldr	r1, [pc, #80]	; (80010f4 <MQTT_Init+0x108>)
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <MQTT_Init+0x10c>)
 80010a6:	f7ff ff75 	bl	8000f94 <SIM800_SendCommand>
    if (error == 0) {
 80010aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d103      	bne.n	80010b8 <MQTT_Init+0xcc>
        MQTT_Connect();
 80010b0:	f000 f824 	bl	80010fc <MQTT_Connect>
        return error;
 80010b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b6:	e000      	b.n	80010ba <MQTT_Init+0xce>
    } else {
        return error;
 80010b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3748      	adds	r7, #72	; 0x48
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000c10 	.word	0x20000c10
 80010c8:	20000090 	.word	0x20000090
 80010cc:	20000cc8 	.word	0x20000cc8
 80010d0:	08005a90 	.word	0x08005a90
 80010d4:	08005a98 	.word	0x08005a98
 80010d8:	08005aa0 	.word	0x08005aa0
 80010dc:	08005aa8 	.word	0x08005aa8
 80010e0:	08005ab4 	.word	0x08005ab4
 80010e4:	08005ac4 	.word	0x08005ac4
 80010e8:	08005ad4 	.word	0x08005ad4
 80010ec:	08005ae4 	.word	0x08005ae4
 80010f0:	08005afc 	.word	0x08005afc
 80010f4:	08005b08 	.word	0x08005b08
 80010f8:	08005b0c 	.word	0x08005b0c

080010fc <MQTT_Connect>:
/**
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0d8      	sub	sp, #352	; 0x160
 8001100:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <MQTT_Connect+0xd0>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <MQTT_Connect+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8001110:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fb96 	bl	800484a <memset>
    unsigned char buf[128] = {0};
 800111e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001122:	4618      	mov	r0, r3
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	461a      	mov	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	f003 fb8e 	bl	800484a <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MQTT_Connect+0xd0>)
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MQTT_Connect+0xd0>)
 8001134:	8a1b      	ldrh	r3, [r3, #16]
 8001136:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 800113a:	4925      	ldr	r1, [pc, #148]	; (80011d0 <MQTT_Connect+0xd4>)
 800113c:	f003 fbda 	bl	80048f4 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8001140:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001144:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001148:	4922      	ldr	r1, [pc, #136]	; (80011d4 <MQTT_Connect+0xd8>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff22 	bl	8000f94 <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 8001150:	f241 3088 	movw	r0, #5000	; 0x1388
 8001154:	f000 fd1a 	bl	8001b8c <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1) {
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MQTT_Connect+0xd0>)
 800115a:	7c9b      	ldrb	r3, [r3, #18]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d130      	bne.n	80011c2 <MQTT_Connect+0xc6>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <MQTT_Connect+0xdc>)
 8001164:	4618      	mov	r0, r3
 8001166:	4611      	mov	r1, r2
 8001168:	2358      	movs	r3, #88	; 0x58
 800116a:	461a      	mov	r2, r3
 800116c:	f003 fb62 	bl	8004834 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MQTT_Connect+0xd0>)
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MQTT_Connect+0xd0>)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MQTT_Connect+0xd0>)
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MQTT_Connect+0xd0>)
 800118a:	8c1a      	ldrh	r2, [r3, #32]
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2201      	movs	r2, #1
 8001194:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8001196:	1d3a      	adds	r2, r7, #4
 8001198:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fa50 	bl	8000644 <MQTTSerialize_connect>
 80011a4:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80011a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011b2:	4619      	mov	r1, r3
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <MQTT_Connect+0xe0>)
 80011b6:	f002 fb51 	bl	800385c <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 80011ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80011be:	f000 fce5 	bl	8001b8c <HAL_Delay>
#endif
    }
}
 80011c2:	bf00      	nop
 80011c4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000c10 	.word	0x20000c10
 80011d0:	08005b18 	.word	0x08005b18
 80011d4:	08005a90 	.word	0x08005a90
 80011d8:	08005b34 	.word	0x08005b34
 80011dc:	20000cc8 	.word	0x20000cc8

080011e0 <MQTT_Pub>:
 * Public on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b0cf      	sub	sp, #316	; 0x13c
 80011e4:	af08      	add	r7, sp, #32
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	6018      	str	r0, [r3, #0]
 80011ea:	463b      	mov	r3, r7
 80011ec:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4618      	mov	r0, r3
 80011f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f8:	461a      	mov	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f003 fb25 	bl	800484a <memset>

    MQTTString topicString = MQTTString_initializer;
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	1d3a      	adds	r2, r7, #4
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *) payload, (int) strlen(payload));
 8001222:	463b      	mov	r3, r7
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f7fe ffd3 	bl	80001d0 <strlen>
 800122a:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 800122c:	f107 0414 	add.w	r4, r7, #20
 8001230:	9306      	str	r3, [sp, #24]
 8001232:	463b      	mov	r3, r7
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	9305      	str	r3, [sp, #20]
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	ab02      	add	r3, sp, #8
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001244:	2300      	movs	r3, #0
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fd45 	bl	8000ce4 <MQTTSerialize_publish>
 800125a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 800125e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001262:	b29a      	uxth	r2, r3
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <MQTT_Pub+0x9c>)
 800126c:	f002 faf6 	bl	800385c <HAL_UART_Transmit_IT>
}
 8001270:	bf00      	nop
 8001272:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	20000cc8 	.word	0x20000cc8

08001280 <MQTT_Sub>:
/**
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ca      	sub	sp, #296	; 0x128
 8001284:	af04      	add	r7, sp, #16
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4618      	mov	r0, r3
 8001290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001294:	461a      	mov	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	f003 fad7 	bl	800484a <memset>

    MQTTString topicString = MQTTString_initializer;
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	1d3a      	adds	r2, r7, #4
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 80012be:	f107 0014 	add.w	r0, r7, #20
 80012c2:	2300      	movs	r3, #0
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	f000 f887 	bl	80013ea <MQTTSerialize_subscribe>
 80012dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 80012e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MQTT_Sub+0x84>)
 80012ee:	f002 fab5 	bl	800385c <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 80012f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80012f6:	f000 fc49 	bl	8001b8c <HAL_Delay>
#endif
}
 80012fa:	bf00      	nop
 80012fc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000cc8 	.word	0x20000cc8

08001308 <MQTT_Receive>:
/**
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af06      	add	r7, sp, #24
 800130e:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	2100      	movs	r1, #0
 8001314:	4819      	ldr	r0, [pc, #100]	; (800137c <MQTT_Receive+0x74>)
 8001316:	f003 fa98 	bl	800484a <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	2100      	movs	r1, #0
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <MQTT_Receive+0x78>)
 8001320:	f003 fa93 	bl	800484a <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001324:	2304      	movs	r3, #4
 8001326:	9304      	str	r3, [sp, #16]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MQTT_Receive+0x7c>)
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MQTT_Receive+0x80>)
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <MQTT_Receive+0x84>)
 8001340:	4913      	ldr	r1, [pc, #76]	; (8001390 <MQTT_Receive+0x88>)
 8001342:	4814      	ldr	r0, [pc, #80]	; (8001394 <MQTT_Receive+0x8c>)
 8001344:	f7ff fa6c 	bl	8000820 <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4619      	mov	r1, r3
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <MQTT_Receive+0x74>)
 8001350:	f003 fa70 	bl	8004834 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <MQTT_Receive+0x90>)
 8001358:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MQTT_Receive+0x90>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	461a      	mov	r2, r3
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <MQTT_Receive+0x78>)
 8001366:	f003 fa65 	bl	8004834 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MQTT_Receive+0x90>)
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000c84 	.word	0x20000c84
 8001380:	20000c40 	.word	0x20000c40
 8001384:	20000c80 	.word	0x20000c80
 8001388:	20000c3e 	.word	0x20000c3e
 800138c:	20000c3c 	.word	0x20000c3c
 8001390:	20000c38 	.word	0x20000c38
 8001394:	20000c35 	.word	0x20000c35
 8001398:	20000c10 	.word	0x20000c10

0800139c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80013a6:	2302      	movs	r3, #2
 80013a8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	e013      	b.n	80013d8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	461a      	mov	r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013c4:	f7ff fc55 	bl	8000c72 <MQTTstrlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	3303      	adds	r3, #3
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	4413      	add	r3, r2
 80013d0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbe7      	blt.n	80013b0 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80013e0:	68bb      	ldr	r3, [r7, #8]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b08a      	sub	sp, #40	; 0x28
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	4611      	mov	r1, r2
 80013f6:	461a      	mov	r2, r3
 80013f8:	460b      	mov	r3, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001418:	f7ff ffc0 	bl	800139c <MQTTSerialize_subscribeLength>
 800141c:	61f8      	str	r0, [r7, #28]
 800141e:	69f8      	ldr	r0, [r7, #28]
 8001420:	f7ff fadc 	bl	80009dc <MQTTPacket_len>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	4293      	cmp	r3, r2
 800142a:	da03      	bge.n	8001434 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800142c:	f06f 0301 	mvn.w	r3, #1
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001432:	e052      	b.n	80014da <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8001438:	7d3b      	ldrb	r3, [r7, #20]
 800143a:	2208      	movs	r2, #8
 800143c:	f362 1307 	bfi	r3, r2, #4, #4
 8001440:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7d3b      	ldrb	r3, [r7, #20]
 800144c:	f362 03c3 	bfi	r3, r2, #3, #1
 8001450:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8001452:	7d3b      	ldrb	r3, [r7, #20]
 8001454:	2201      	movs	r2, #1
 8001456:	f362 0342 	bfi	r3, r2, #1, #2
 800145a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800145c:	7d3a      	ldrb	r2, [r7, #20]
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fb48 	bl	8000afa <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	69f9      	ldr	r1, [r7, #28]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fa48 	bl	8000904 <MQTTPacket_encode>
 8001474:	4602      	mov	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4413      	add	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800147c:	88ba      	ldrh	r2, [r7, #4]
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fb4d 	bl	8000b24 <writeInt>

	for (i = 0; i < count; ++i)
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	e01b      	b.n	80014c8 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001490:	6a3a      	ldr	r2, [r7, #32]
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	4413      	add	r3, r2
 80014a0:	f107 0018 	add.w	r0, r7, #24
 80014a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a6:	f7ff fb85 	bl	8000bb4 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014b0:	4413      	add	r3, r2
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb1c 	bl	8000afa <writeChar>
	for (i = 0; i < count; ++i)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	3301      	adds	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3a      	ldr	r2, [r7, #32]
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbdf      	blt.n	8001490 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    if (huart == UART_SIM800) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_UART_RxCpltCallback+0x1c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_UART_RxCpltCallback+0x14>
        Sim800_RxCallBack();
 80014f4:	f7ff fc6e 	bl	8000dd4 <Sim800_RxCallBack>
    }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000cc8 	.word	0x20000cc8

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 faca 	bl	8001aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f869 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 f8fd 	bl	8001710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001516:	f000 f8cb 	bl	80016b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  SIM800.sim.apn = "wireless.twilio.com";
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <main+0xb4>)
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <main+0xb8>)
 800151e:	601a      	str	r2, [r3, #0]
      SIM800.sim.apn_user = " ";
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <main+0xb4>)
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <main+0xbc>)
 8001524:	605a      	str	r2, [r3, #4]
      SIM800.sim.apn_pass = " ";
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <main+0xb4>)
 8001528:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <main+0xbc>)
 800152a:	609a      	str	r2, [r3, #8]
      SIM800.mqttServer.host = "45.17.141.18";
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <main+0xb4>)
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <main+0xc0>)
 8001530:	60da      	str	r2, [r3, #12]
      SIM800.mqttServer.port = 1883;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <main+0xb4>)
 8001534:	f240 725b 	movw	r2, #1883	; 0x75b
 8001538:	821a      	strh	r2, [r3, #16]
      SIM800.mqttClient.username = "";
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <main+0xb4>)
 800153c:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <main+0xc4>)
 800153e:	615a      	str	r2, [r3, #20]
      SIM800.mqttClient.pass = "";
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <main+0xb4>)
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <main+0xc4>)
 8001544:	619a      	str	r2, [r3, #24]
      SIM800.mqttClient.clientID = "STM32_mqtt";
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <main+0xb4>)
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <main+0xc8>)
 800154a:	61da      	str	r2, [r3, #28]
      SIM800.mqttClient.keepAliveInterval = 120;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <main+0xb4>)
 800154e:	2278      	movs	r2, #120	; 0x78
 8001550:	841a      	strh	r2, [r3, #32]

      MQTT_Init();
 8001552:	f7ff fd4b 	bl	8000fec <MQTT_Init>

      uint8_t sub = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (SIM800.mqttServer.connect == 0) {
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <main+0xb4>)
 800155c:	7c9b      	ldrb	r3, [r3, #18]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <main+0x66>
	           MQTT_Init();
 8001562:	f7ff fd43 	bl	8000fec <MQTT_Init>
	           sub = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
	       }
	       if (SIM800.mqttServer.connect == 1) {
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <main+0xb4>)
 800156c:	7c9b      	ldrb	r3, [r3, #18]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d11c      	bne.n	80015ac <main+0xa8>
	           if(sub == 0){
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d104      	bne.n	8001582 <main+0x7e>
	               MQTT_Sub("test");
 8001578:	4815      	ldr	r0, [pc, #84]	; (80015d0 <main+0xcc>)
 800157a:	f7ff fe81 	bl	8001280 <MQTT_Sub>
	               sub = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
	           }
	           MQTT_Pub("Device1", "test");
 8001582:	4913      	ldr	r1, [pc, #76]	; (80015d0 <main+0xcc>)
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <main+0xd0>)
 8001586:	f7ff fe2b 	bl	80011e0 <MQTT_Pub>

	           if(SIM800.mqttReceive.newEvent) {
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <main+0xb4>)
 800158c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00b      	beq.n	80015ac <main+0xa8>
	               unsigned char *topic = SIM800.mqttReceive.topic;
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <main+0xd4>)
 8001596:	60bb      	str	r3, [r7, #8]
	               char* payload = SIM800.mqttReceive.payload;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <main+0xd8>)
 800159a:	607b      	str	r3, [r7, #4]
	               SIM800.mqttReceive.newEvent = 0;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <main+0xb4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	               printf("%payload",payload);
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <main+0xdc>)
 80015a8:	f003 f958 	bl	800485c <iprintf>
	           }

	       }
	       HAL_Delay(1000);
 80015ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b0:	f000 faec 	bl	8001b8c <HAL_Delay>
	  if (SIM800.mqttServer.connect == 0) {
 80015b4:	e7d1      	b.n	800155a <main+0x56>
 80015b6:	bf00      	nop
 80015b8:	20000c10 	.word	0x20000c10
 80015bc:	08005b8c 	.word	0x08005b8c
 80015c0:	08005ba0 	.word	0x08005ba0
 80015c4:	08005ba4 	.word	0x08005ba4
 80015c8:	08005bb4 	.word	0x08005bb4
 80015cc:	08005bb8 	.word	0x08005bb8
 80015d0:	08005bc4 	.word	0x08005bc4
 80015d4:	08005bcc 	.word	0x08005bcc
 80015d8:	20000c84 	.word	0x20000c84
 80015dc:	20000c40 	.word	0x20000c40
 80015e0:	08005bd4 	.word	0x08005bd4

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0b8      	sub	sp, #224	; 0xe0
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ee:	2244      	movs	r2, #68	; 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f929 	bl	800484a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2288      	movs	r2, #136	; 0x88
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f91b 	bl	800484a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001614:	2310      	movs	r3, #16
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161a:	2301      	movs	r3, #1
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001626:	2360      	movs	r3, #96	; 0x60
 8001628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001632:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fe28 	bl	800228c <HAL_RCC_OscConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001642:	f000 f87d 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	230f      	movs	r3, #15
 8001648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001664:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f001 f9f4 	bl	8002a58 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001676:	f000 f863 	bl	8001740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800167a:	2302      	movs	r3, #2
 800167c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800167e:	2300      	movs	r3, #0
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fbeb 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001690:	f000 f856 	bl	8001740 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001694:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001698:	f000 fda2 	bl	80021e0 <HAL_PWREx_ControlVoltageScaling>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016a2:	f000 f84d 	bl	8001740 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	37e0      	adds	r7, #224	; 0xe0
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <MX_USART2_UART_Init+0x5c>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x58>)
 80016f4:	f002 f864 	bl	80037c0 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016fe:	f000 f81f 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000cc8 	.word	0x20000cc8
 800170c:	40004400 	.word	0x40004400

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_GPIO_Init+0x2c>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <MX_GPIO_Init+0x2c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_GPIO_Init+0x2c>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_MspInit+0x44>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6613      	str	r3, [r2, #96]	; 0x60
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_MspInit+0x44>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x44>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x44>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x44>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x8c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d130      	bne.n	800181c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_UART_MspInit+0x90>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_UART_MspInit+0x90>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	6593      	str	r3, [r2, #88]	; 0x58
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_UART_MspInit+0x90>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_UART_MspInit+0x90>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_UART_MspInit+0x90>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_UART_MspInit+0x90>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230c      	movs	r3, #12
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fa:	2307      	movs	r3, #7
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f000 fb34 	bl	8001e74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2026      	movs	r0, #38	; 0x26
 8001812:	f000 fab8 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001816:	2026      	movs	r0, #38	; 0x26
 8001818:	f000 fad1 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004400 	.word	0x40004400
 8001828:	40021000 	.word	0x40021000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 f964 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <USART2_IRQHandler+0x10>)
 800188e:	f002 f8e3 	bl	8003a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000cc8 	.word	0x20000cc8

0800189c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00a      	b.n	80018c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ae:	f3af 8000 	nop.w
 80018b2:	4601      	mov	r1, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbf0      	blt.n	80018ae <_read+0x12>
	}

return len;
 80018cc:	687b      	ldr	r3, [r7, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf1      	blt.n	80018e8 <_write+0x12>
	}
	return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
	return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001936:	605a      	str	r2, [r3, #4]
	return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f002 ff1a 	bl	80047e0 <__errno>
 80019ac:	4602      	mov	r2, r0
 80019ae:	230c      	movs	r3, #12
 80019b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20018000 	.word	0x20018000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20000c04 	.word	0x20000c04
 80019e0:	20000d50 	.word	0x20000d50

080019e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <SystemInit+0x64>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <SystemInit+0x64>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <SystemInit+0x68>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <SystemInit+0x68>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <SystemInit+0x68>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <SystemInit+0x68>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <SystemInit+0x68>)
 8001a10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <SystemInit+0x68>)
 8001a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <SystemInit+0x68>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <SystemInit+0x68>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <SystemInit+0x68>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SystemInit+0x64>)
 8001a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00
 8001a4c:	40021000 	.word	0x40021000

08001a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a54:	f7ff ffc6 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a5a:	e003      	b.n	8001a64 <LoopCopyDataInit>

08001a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a62:	3104      	adds	r1, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a64:	480a      	ldr	r0, [pc, #40]	; (8001a90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a6c:	d3f6      	bcc.n	8001a5c <CopyDataInit>
	ldr	r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a70:	e002      	b.n	8001a78 <LoopFillZerobss>

08001a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a74:	f842 3b04 	str.w	r3, [r2], #4

08001a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <LoopForever+0x16>)
	cmp	r2, r3
 8001a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a7c:	d3f9      	bcc.n	8001a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f002 feb5 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a82:	f7ff fd3f 	bl	8001504 <main>

08001a86 <LoopForever>:

LoopForever:
    b LoopForever
 8001a86:	e7fe      	b.n	8001a86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a88:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a8c:	08005cd0 	.word	0x08005cd0
	ldr	r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a94:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001a98:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001a9c:	20000d50 	.word	0x20000d50

08001aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_2_IRQHandler>

08001aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f95f 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f80e 	bl	8001ad4 <HAL_InitTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	e001      	b.n	8001ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ac4:	f7ff fe44 	bl	8001750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_InitTick+0x6c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d023      	beq.n	8001b30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_InitTick+0x70>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_InitTick+0x6c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f96b 	bl	8001dda <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10f      	bne.n	8001b2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d809      	bhi.n	8001b24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f935 	bl	8001d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_InitTick+0x74>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e007      	b.n	8001b34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e004      	b.n	8001b34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e001      	b.n	8001b34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000d48 	.word	0x20000d48

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000d48 	.word	0x20000d48

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_Delay+0x40>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d005      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e029      	b.n	8001e6a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f003 021c 	and.w	r2, r3, #28
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f202 	lsl.w	r2, r1, r2
 8001e48:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
    }
  }
  return status;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e82:	e17f      	b.n	8002184 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8171 	beq.w	800217e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d00b      	beq.n	8001ebc <HAL_GPIO_Init+0x48>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb0:	2b11      	cmp	r3, #17
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d130      	bne.n	8001f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 0201 	and.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d118      	bne.n	8001f5c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x128>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ac 	beq.w	800217e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HAL_GPIO_Init+0x32c>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202a:	4a5d      	ldr	r2, [pc, #372]	; (80021a0 <HAL_GPIO_Init+0x32c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6613      	str	r3, [r2, #96]	; 0x60
 8002032:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_GPIO_Init+0x32c>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800203e:	4a59      	ldr	r2, [pc, #356]	; (80021a4 <HAL_GPIO_Init+0x330>)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x242>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4e      	ldr	r2, [pc, #312]	; (80021a8 <HAL_GPIO_Init+0x334>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x23e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4d      	ldr	r2, [pc, #308]	; (80021ac <HAL_GPIO_Init+0x338>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x23a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_GPIO_Init+0x33c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x236>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <HAL_GPIO_Init+0x340>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x232>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <HAL_GPIO_Init+0x344>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x22e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a49      	ldr	r2, [pc, #292]	; (80021bc <HAL_GPIO_Init+0x348>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x22a>
 800209a:	2306      	movs	r3, #6
 800209c:	e00c      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00a      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e008      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020aa:	2303      	movs	r3, #3
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x244>
 80020b6:	2300      	movs	r3, #0
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020c8:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_GPIO_Init+0x330>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fa:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_GPIO_Init+0x34c>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f47f ae78 	bne.w	8001e84 <HAL_GPIO_Init+0x10>
  }
}
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	48001400 	.word	0x48001400
 80021bc:	48001800 	.word	0x48001800
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_PWREx_GetVoltageRange+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ee:	d130      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d038      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2232      	movs	r2, #50	; 0x32
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002224:	e002      	b.n	800222c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002238:	d102      	bne.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f2      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224c:	d110      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e00f      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d007      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40007000 	.word	0x40007000
 8002284:	20000000 	.word	0x20000000
 8002288:	431bde83 	.word	0x431bde83

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e3d4      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229e:	4ba1      	ldr	r3, [pc, #644]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80e4 	beq.w	8002488 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_RCC_OscConfig+0x4a>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	f040 808b 	bne.w	80023e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 8087 	bne.w	80023e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022d6:	4b93      	ldr	r3, [pc, #588]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e3ac      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_RCC_OscConfig+0x7c>
 80022fe:	4b89      	ldr	r3, [pc, #548]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002306:	e005      	b.n	8002314 <HAL_RCC_OscConfig+0x88>
 8002308:	4b86      	ldr	r3, [pc, #536]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002314:	4293      	cmp	r3, r2
 8002316:	d223      	bcs.n	8002360 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fd3f 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e38d      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232c:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4977      	ldr	r1, [pc, #476]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	4972      	ldr	r1, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
 800235e:	e025      	b.n	80023ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002360:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	496a      	ldr	r1, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237e:	4b69      	ldr	r3, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	4965      	ldr	r1, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fcff 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e34d      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ac:	f000 fc36 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80023b0:	4601      	mov	r1, r0
 80023b2:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x29c>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa21 f303 	lsr.w	r3, r1, r3
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x2a0>)
 80023ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023cc:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_RCC_OscConfig+0x2a4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fb7f 	bl	8001ad4 <HAL_InitTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d052      	beq.n	8002486 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	e331      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ec:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fbbc 	bl	8001b74 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002400:	f7ff fbb8 	bl	8001b74 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e31a      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a40      	ldr	r2, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	493b      	ldr	r1, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4936      	ldr	r1, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e01a      	b.n	8002488 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a33      	ldr	r2, [pc, #204]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800245e:	f7ff fb89 	bl	8001b74 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002466:	f7ff fb85 	bl	8001b74 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e2e7      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x1da>
 8002484:	e000      	b.n	8002488 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002486:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d074      	beq.n	800257e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x21a>
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d10e      	bne.n	80024be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d10b      	bne.n	80024be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d064      	beq.n	800257c <HAL_RCC_OscConfig+0x2f0>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d160      	bne.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e2c4      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x24a>
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e01d      	b.n	8002512 <HAL_RCC_OscConfig+0x286>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x26e>
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x286>
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01c      	beq.n	8002554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7ff fb2b 	bl	8001b74 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002520:	e011      	b.n	8002546 <HAL_RCC_OscConfig+0x2ba>
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	08005be0 	.word	0x08005be0
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff fb1e 	bl	8001b74 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e280      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002546:	4baf      	ldr	r3, [pc, #700]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x2a8>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff fb0e 	bl	8001b74 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff fb0a 	bl	8001b74 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e26c      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800256e:	4ba5      	ldr	r3, [pc, #660]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x2d0>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d060      	beq.n	800264c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x310>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d119      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x328>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e249      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b93      	ldr	r3, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4990      	ldr	r1, [pc, #576]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c8:	e040      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d023      	beq.n	800261a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8b      	ldr	r2, [pc, #556]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff fac9 	bl	8001b74 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff fac5 	bl	8001b74 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e227      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f8:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	497c      	ldr	r1, [pc, #496]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e018      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a79      	ldr	r2, [pc, #484]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7ff faa5 	bl	8001b74 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7ff faa1 	bl	8001b74 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e203      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	4a67      	ldr	r2, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7ff fa80 	bl	8001b74 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7ff fa7c 	bl	8001b74 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1de      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268a:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ef      	beq.n	8002678 <HAL_RCC_OscConfig+0x3ec>
 8002698:	e01b      	b.n	80026d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269a:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7ff fa63 	bl	8001b74 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7ff fa5f 	bl	8001b74 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1c1      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ef      	bne.n	80026b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a6 	beq.w	800282c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e4:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b44      	ldr	r3, [pc, #272]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d118      	bne.n	800274a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3a      	ldr	r2, [pc, #232]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002724:	f7ff fa26 	bl	8001b74 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7ff fa22 	bl	8001b74 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e184      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273e:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_RCC_OscConfig+0x4d8>
 8002752:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002762:	e024      	b.n	80027ae <HAL_RCC_OscConfig+0x522>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d110      	bne.n	800278e <HAL_RCC_OscConfig+0x502>
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a24      	ldr	r2, [pc, #144]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	4a20      	ldr	r2, [pc, #128]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278c:	e00f      	b.n	80027ae <HAL_RCC_OscConfig+0x522>
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7ff f9dd 	bl	8001b74 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff f9d9 	bl	8001b74 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e139      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ed      	beq.n	80027be <HAL_RCC_OscConfig+0x532>
 80027e2:	e01a      	b.n	800281a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7ff f9c6 	bl	8001b74 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ea:	e00f      	b.n	800280c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7ff f9c2 	bl	8001b74 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d906      	bls.n	800280c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e122      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800280c:	4b90      	ldr	r3, [pc, #576]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e8      	bne.n	80027ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a8a      	ldr	r2, [pc, #552]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8108 	beq.w	8002a46 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 80d0 	bne.w	80029e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002840:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	429a      	cmp	r2, r3
 8002852:	d130      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	3b01      	subs	r3, #1
 8002860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d127      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002880:	2a07      	cmp	r2, #7
 8002882:	bf14      	ite	ne
 8002884:	2201      	movne	r2, #1
 8002886:	2200      	moveq	r2, #0
 8002888:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288a:	4293      	cmp	r3, r2
 800288c:	d113      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	3b01      	subs	r3, #1
 80028b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d06e      	beq.n	8002994 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d069      	beq.n	8002990 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028c8:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b7      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028d8:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5c      	ldr	r2, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80028de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e4:	f7ff f946 	bl	8001b74 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7ff f942 	bl	8001b74 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0a4      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290a:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <HAL_RCC_OscConfig+0x7c8>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800291a:	3a01      	subs	r2, #1
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002924:	0212      	lsls	r2, r2, #8
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002938:	0852      	lsrs	r2, r2, #1
 800293a:	3a01      	subs	r2, #1
 800293c:	0652      	lsls	r2, r2, #25
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002944:	0912      	lsrs	r2, r2, #4
 8002946:	0452      	lsls	r2, r2, #17
 8002948:	430a      	orrs	r2, r1
 800294a:	4941      	ldr	r1, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a3b      	ldr	r2, [pc, #236]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002968:	f7ff f904 	bl	8001b74 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f900 	bl	8001b74 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e062      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298e:	e05a      	b.n	8002a46 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e059      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d152      	bne.n	8002a46 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b8:	f7ff f8dc 	bl	8001b74 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff f8d8 	bl	8001b74 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e03a      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x734>
 80029de:	e032      	b.n	8002a46 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d02d      	beq.n	8002a42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002a10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7ff f8ab 	bl	8001b74 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7ff f8a7 	bl	8001b74 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e009      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x7c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x796>
 8002a40:	e001      	b.n	8002a46 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	f99d808c 	.word	0xf99d808c

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0c8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b66      	ldr	r3, [pc, #408]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4961      	ldr	r1, [pc, #388]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b0      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d04c      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab0:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d121      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e09e      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d115      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e092      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e086      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af0:	4b46      	ldr	r3, [pc, #280]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e07e      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 0203 	bic.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	493f      	ldr	r1, [pc, #252]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b12:	f7ff f82f 	bl	8001b74 <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1a:	f7ff f82b 	bl	8001b74 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e066      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 020c 	and.w	r2, r3, #12
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d1eb      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	492c      	ldr	r1, [pc, #176]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d210      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4924      	ldr	r1, [pc, #144]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e036      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4918      	ldr	r1, [pc, #96]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4910      	ldr	r1, [pc, #64]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bce:	f000 f825 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bd2:	4601      	mov	r1, r0
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCC_ClockConfig+0x1b4>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe ff6e 	bl	8001ad4 <HAL_InitTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08005be0 	.word	0x08005be0
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d121      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d11e      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c50:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e005      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c78:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e004      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d133      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xaa>
 8002cbe:	e005      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cc2:	617b      	str	r3, [r7, #20]
      break;
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e002      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	3301      	adds	r3, #1
 8002cde:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	fb02 f203 	mul.w	r2, r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0e5b      	lsrs	r3, r3, #25
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	3301      	adds	r3, #1
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d12:	69bb      	ldr	r3, [r7, #24]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3724      	adds	r7, #36	; 0x24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08005bf8 	.word	0x08005bf8
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d50:	4601      	mov	r1, r0
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	08005bf0 	.word	0x08005bf0

08002d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d78:	f7ff ffda 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4601      	mov	r1, r0
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0adb      	lsrs	r3, r3, #11
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08005bf0 	.word	0x08005bf0

08002da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002db8:	f7ff fa04 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002dbc:	6178      	str	r0, [r7, #20]
 8002dbe:	e014      	b.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	6593      	str	r3, [r2, #88]	; 0x58
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dd8:	f7ff f9f4 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002ddc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df0:	d10b      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d919      	bls.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2ba0      	cmp	r3, #160	; 0xa0
 8002dfc:	d902      	bls.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dfe:	2302      	movs	r3, #2
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e013      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e010      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d902      	bls.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e10:	2303      	movs	r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e00a      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d102      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e004      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b70      	cmp	r3, #112	; 0x70
 8002e26:	d101      	bne.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e28:	2301      	movs	r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 0207 	bic.w	r2, r3, #7
 8002e34:	4909      	ldr	r1, [pc, #36]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40022000 	.word	0x40022000

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e68:	2300      	movs	r3, #0
 8002e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d03f      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e84:	d01c      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8a:	d802      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e90:	e01f      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e9c:	d01c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e9e:	e018      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea0:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a84      	ldr	r2, [pc, #528]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eac:	e015      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fab9 	bl	800342c <RCCEx_PLLSAI1_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebe:	e00c      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fba0 	bl	800360c <RCCEx_PLLSAI2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed0:	e003      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee0:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eee:	4972      	ldr	r1, [pc, #456]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d03f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d01c      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f16:	d802      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f1c:	e01f      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f22:	d003      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f28:	d01c      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f2a:	e018      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f2c:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4a61      	ldr	r2, [pc, #388]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f38:	e015      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fa73 	bl	800342c <RCCEx_PLLSAI1_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f4a:	e00c      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3320      	adds	r3, #32
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fb5a 	bl	800360c <RCCEx_PLLSAI2_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5c:	e003      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	74fb      	strb	r3, [r7, #19]
      break;
 8002f62:	e000      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f6c:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f7a:	494f      	ldr	r1, [pc, #316]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f82:	e001      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a0 	beq.w	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4a40      	ldr	r2, [pc, #256]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	; 0x58
 8002fbc:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3a      	ldr	r2, [pc, #232]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fdcc 	bl	8001b74 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fe fdc8 	bl	8001b74 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d902      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ff2:	e005      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ef      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d15c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003010:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01f      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d019      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d016      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe fd87 	bl	8001b74 <HAL_GetTick>
 8003066:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003068:	e00b      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe fd83 	bl	8001b74 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d902      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	74fb      	strb	r3, [r7, #19]
            break;
 8003080:	e006      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ec      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a6:	4904      	ldr	r1, [pc, #16]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ae:	e009      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
 80030b4:	e006      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c4:	7c7b      	ldrb	r3, [r7, #17]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4b9e      	ldr	r3, [pc, #632]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4a9d      	ldr	r2, [pc, #628]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e2:	4b98      	ldr	r3, [pc, #608]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f023 0203 	bic.w	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	4994      	ldr	r1, [pc, #592]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 020c 	bic.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	498c      	ldr	r1, [pc, #560]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003126:	4b87      	ldr	r3, [pc, #540]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4983      	ldr	r1, [pc, #524]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003148:	4b7e      	ldr	r3, [pc, #504]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	497b      	ldr	r1, [pc, #492]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	4972      	ldr	r1, [pc, #456]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318c:	4b6d      	ldr	r3, [pc, #436]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	496a      	ldr	r1, [pc, #424]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	4961      	ldr	r1, [pc, #388]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031d0:	4b5c      	ldr	r3, [pc, #368]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	4959      	ldr	r1, [pc, #356]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031f2:	4b54      	ldr	r3, [pc, #336]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003200:	4950      	ldr	r1, [pc, #320]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003214:	4b4b      	ldr	r3, [pc, #300]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	4948      	ldr	r1, [pc, #288]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	493f      	ldr	r1, [pc, #252]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d028      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003258:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	4937      	ldr	r1, [pc, #220]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003276:	d106      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003278:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800327e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003282:	60d3      	str	r3, [r2, #12]
 8003284:	e011      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800328a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800328e:	d10c      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f8c8 	bl	800342c <RCCEx_PLLSAI1_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d028      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032b6:	4b23      	ldr	r3, [pc, #140]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	491f      	ldr	r1, [pc, #124]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e0:	60d3      	str	r3, [r2, #12]
 80032e2:	e011      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 f899 	bl	800342c <RCCEx_PLLSAI1_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02b      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003332:	d109      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a02      	ldr	r2, [pc, #8]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333e:	60d3      	str	r3, [r2, #12]
 8003340:	e014      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003350:	d10c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f867 	bl	800342c <RCCEx_PLLSAI1_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02f      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003386:	4928      	ldr	r1, [pc, #160]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003396:	d10d      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	2102      	movs	r1, #2
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f844 	bl	800342c <RCCEx_PLLSAI1_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d014      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033ae:	7cfb      	ldrb	r3, [r7, #19]
 80033b0:	74bb      	strb	r3, [r7, #18]
 80033b2:	e011      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3320      	adds	r3, #32
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f921 	bl	800360c <RCCEx_PLLSAI2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f2:	490d      	ldr	r1, [pc, #52]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800341e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000

0800342c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800343a:	4b73      	ldr	r3, [pc, #460]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003446:	4b70      	ldr	r3, [pc, #448]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0203 	and.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d10d      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
       ||
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800345e:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
       ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d044      	beq.n	80034fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	e041      	b.n	80034fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d00c      	beq.n	800349a <RCCEx_PLLSAI1_Config+0x6e>
 8003480:	2b03      	cmp	r3, #3
 8003482:	d013      	beq.n	80034ac <RCCEx_PLLSAI1_Config+0x80>
 8003484:	2b01      	cmp	r3, #1
 8003486:	d120      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003488:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11d      	bne.n	80034d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e01a      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800349a:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d116      	bne.n	80034d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034aa:	e013      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10f      	bne.n	80034d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034c8:	e006      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      break;
 80034ce:	e004      	b.n	80034da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034d0:	bf00      	nop
 80034d2:	e002      	b.n	80034da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80034d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034e0:	4b49      	ldr	r3, [pc, #292]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	430b      	orrs	r3, r1
 80034f6:	4944      	ldr	r1, [pc, #272]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d17d      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800350c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350e:	f7fe fb31 	bl	8001b74 <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003514:	e009      	b.n	800352a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003516:	f7fe fb2d 	bl	8001b74 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d902      	bls.n	800352a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	73fb      	strb	r3, [r7, #15]
        break;
 8003528:	e005      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ef      	bne.n	8003516 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d160      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d111      	bne.n	8003566 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800354a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6892      	ldr	r2, [r2, #8]
 8003552:	0211      	lsls	r1, r2, #8
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68d2      	ldr	r2, [r2, #12]
 8003558:	0912      	lsrs	r2, r2, #4
 800355a:	0452      	lsls	r2, r2, #17
 800355c:	430a      	orrs	r2, r1
 800355e:	492a      	ldr	r1, [pc, #168]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	610b      	str	r3, [r1, #16]
 8003564:	e027      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d112      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	0211      	lsls	r1, r2, #8
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6912      	ldr	r2, [r2, #16]
 8003582:	0852      	lsrs	r2, r2, #1
 8003584:	3a01      	subs	r2, #1
 8003586:	0552      	lsls	r2, r2, #21
 8003588:	430a      	orrs	r2, r1
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	610b      	str	r3, [r1, #16]
 8003590:	e011      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800359a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	0211      	lsls	r1, r2, #8
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6952      	ldr	r2, [r2, #20]
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0652      	lsls	r2, r2, #25
 80035ae:	430a      	orrs	r2, r1
 80035b0:	4915      	ldr	r1, [pc, #84]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fe fad7 	bl	8001b74 <HAL_GetTick>
 80035c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035c8:	e009      	b.n	80035de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ca:	f7fe fad3 	bl	8001b74 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d902      	bls.n	80035de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	73fb      	strb	r3, [r7, #15]
          break;
 80035dc:	e005      	b.n	80035ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ef      	beq.n	80035ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000

0800360c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800361a:	4b68      	ldr	r3, [pc, #416]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d018      	beq.n	8003658 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003626:	4b65      	ldr	r3, [pc, #404]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0203 	and.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d10d      	bne.n	8003652 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
       ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800363e:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
       ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d044      	beq.n	80036dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	e041      	b.n	80036dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d00c      	beq.n	800367a <RCCEx_PLLSAI2_Config+0x6e>
 8003660:	2b03      	cmp	r3, #3
 8003662:	d013      	beq.n	800368c <RCCEx_PLLSAI2_Config+0x80>
 8003664:	2b01      	cmp	r3, #1
 8003666:	d120      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003668:	4b54      	ldr	r3, [pc, #336]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11d      	bne.n	80036b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003678:	e01a      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800367a:	4b50      	ldr	r3, [pc, #320]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368a:	e013      	b.n	80036b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10f      	bne.n	80036b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003698:	4b48      	ldr	r3, [pc, #288]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036a8:	e006      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      break;
 80036ae:	e004      	b.n	80036ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036b0:	bf00      	nop
 80036b2:	e002      	b.n	80036ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036b4:	bf00      	nop
 80036b6:	e000      	b.n	80036ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036c0:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	430b      	orrs	r3, r1
 80036d6:	4939      	ldr	r1, [pc, #228]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d167      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a35      	ldr	r2, [pc, #212]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ee:	f7fe fa41 	bl	8001b74 <HAL_GetTick>
 80036f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f4:	e009      	b.n	800370a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036f6:	f7fe fa3d 	bl	8001b74 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d902      	bls.n	800370a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	73fb      	strb	r3, [r7, #15]
        break;
 8003708:	e005      	b.n	8003716 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ef      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d14a      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d111      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6892      	ldr	r2, [r2, #8]
 8003732:	0211      	lsls	r1, r2, #8
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68d2      	ldr	r2, [r2, #12]
 8003738:	0912      	lsrs	r2, r2, #4
 800373a:	0452      	lsls	r2, r2, #17
 800373c:	430a      	orrs	r2, r1
 800373e:	491f      	ldr	r1, [pc, #124]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	614b      	str	r3, [r1, #20]
 8003744:	e011      	b.n	800376a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800374e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	0211      	lsls	r1, r2, #8
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6912      	ldr	r2, [r2, #16]
 800375c:	0852      	lsrs	r2, r2, #1
 800375e:	3a01      	subs	r2, #1
 8003760:	0652      	lsls	r2, r2, #25
 8003762:	430a      	orrs	r2, r1
 8003764:	4915      	ldr	r1, [pc, #84]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe f9fd 	bl	8001b74 <HAL_GetTick>
 800377a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800377c:	e009      	b.n	8003792 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800377e:	f7fe f9f9 	bl	8001b74 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d902      	bls.n	8003792 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	73fb      	strb	r3, [r7, #15]
          break;
 8003790:	e005      	b.n	800379e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ef      	beq.n	800377e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e040      	b.n	8003854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd ffd8 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa86 	bl	8003d10 <UART_SetConfig>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e022      	b.n	8003854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fd04 	bl	8004224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fd8b 	bl	8004368 <UART_CheckIdleState>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	2b20      	cmp	r3, #32
 8003870:	d144      	bne.n	80038fc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_UART_Transmit_IT+0x22>
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e03d      	b.n	80038fe <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit_IT+0x34>
 800388c:	2302      	movs	r3, #2
 800388e:	e036      	b.n	80038fe <HAL_UART_Transmit_IT+0xa2>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2221      	movs	r2, #33	; 0x21
 80038be:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d107      	bne.n	80038da <HAL_UART_Transmit_IT+0x7e>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <HAL_UART_Transmit_IT+0xb0>)
 80038d6:	665a      	str	r2, [r3, #100]	; 0x64
 80038d8:	e002      	b.n	80038e0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <HAL_UART_Transmit_IT+0xb4>)
 80038de:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	080045c9 	.word	0x080045c9
 8003910:	08004555 	.word	0x08004555

08003914 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003926:	2b20      	cmp	r3, #32
 8003928:	f040 808a 	bne.w	8003a40 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_UART_Receive_IT+0x24>
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e082      	b.n	8003a42 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_UART_Receive_IT+0x36>
 8003946:	2302      	movs	r3, #2
 8003948:	e07b      	b.n	8003a42 <HAL_UART_Receive_IT+0x12e>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d10e      	bne.n	8003996 <HAL_UART_Receive_IT+0x82>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_UART_Receive_IT+0x78>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003986:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398a:	e02d      	b.n	80039e8 <HAL_UART_Receive_IT+0xd4>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003994:	e028      	b.n	80039e8 <HAL_UART_Receive_IT+0xd4>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_UART_Receive_IT+0xa6>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <HAL_UART_Receive_IT+0x9c>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ae:	e01b      	b.n	80039e8 <HAL_UART_Receive_IT+0xd4>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	227f      	movs	r2, #127	; 0x7f
 80039b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b8:	e016      	b.n	80039e8 <HAL_UART_Receive_IT+0xd4>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d10d      	bne.n	80039e0 <HAL_UART_Receive_IT+0xcc>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_UART_Receive_IT+0xc2>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	227f      	movs	r2, #127	; 0x7f
 80039d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d4:	e008      	b.n	80039e8 <HAL_UART_Receive_IT+0xd4>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	223f      	movs	r2, #63	; 0x3f
 80039da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039de:	e003      	b.n	80039e8 <HAL_UART_Receive_IT+0xd4>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2222      	movs	r2, #34	; 0x22
 80039f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d107      	bne.n	8003a1e <HAL_UART_Receive_IT+0x10a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_UART_Receive_IT+0x13c>)
 8003a1a:	661a      	str	r2, [r3, #96]	; 0x60
 8003a1c:	e002      	b.n	8003a24 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <HAL_UART_Receive_IT+0x140>)
 8003a22:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003a3a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	08004721 	.word	0x08004721
 8003a54:	08004677 	.word	0x08004677

08003a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d113      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8114 	beq.w	8003cce <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
      }
      return;
 8003aae:	e10e      	b.n	8003cce <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80d6 	beq.w	8003c64 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4b86      	ldr	r3, [pc, #536]	; (8003ce0 <HAL_UART_IRQHandler+0x288>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80cb 	beq.w	8003c64 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <HAL_UART_IRQHandler+0x9e>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <HAL_UART_IRQHandler+0xc6>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <HAL_UART_IRQHandler+0xee>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2204      	movs	r2, #4
 8003b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b70:	f043 0208 	orr.w	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00f      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x14a>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8093 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d004      	beq.n	8003bee <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d031      	beq.n	8003c52 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fc7a 	bl	80044e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d123      	bne.n	8003c4a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1e:	4a31      	ldr	r2, [pc, #196]	; (8003ce4 <HAL_UART_IRQHandler+0x28c>)
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe f8e3 	bl	8001df2 <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e00e      	b.n	8003c60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f85a 	bl	8003cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00a      	b.n	8003c60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f856 	bl	8003cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e006      	b.n	8003c60 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f852 	bl	8003cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003c5e:	e038      	b.n	8003cd2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	bf00      	nop
    return;
 8003c62:	e036      	b.n	8003cd2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <HAL_UART_IRQHandler+0x232>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fda1 	bl	80047ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c88:	e026      	b.n	8003cd8 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d017      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	4798      	blx	r3
    }
    return;
 8003cae:	e012      	b.n	8003cd6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x280>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fcbd 	bl	8004644 <UART_EndTransmit_IT>
    return;
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <HAL_UART_IRQHandler+0x280>
      return;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <HAL_UART_IRQHandler+0x280>
    return;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HAL_UART_IRQHandler+0x280>
    return;
 8003cd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	04000120 	.word	0x04000120
 8003ce4:	08004529 	.word	0x08004529

08003ce8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4bac      	ldr	r3, [pc, #688]	; (8003ff0 <UART_SetConfig+0x2e0>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	69f9      	ldr	r1, [r7, #28]
 8003d46:	430b      	orrs	r3, r1
 8003d48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4aa2      	ldr	r2, [pc, #648]	; (8003ff4 <UART_SetConfig+0x2e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a99      	ldr	r2, [pc, #612]	; (8003ff8 <UART_SetConfig+0x2e8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d121      	bne.n	8003ddc <UART_SetConfig+0xcc>
 8003d98:	4b98      	ldr	r3, [pc, #608]	; (8003ffc <UART_SetConfig+0x2ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d816      	bhi.n	8003dd4 <UART_SetConfig+0xc4>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0x9c>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dc9 	.word	0x08003dc9
 8003db4:	08003dc3 	.word	0x08003dc3
 8003db8:	08003dcf 	.word	0x08003dcf
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e0e8      	b.n	8003f94 <UART_SetConfig+0x284>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	76fb      	strb	r3, [r7, #27]
 8003dc6:	e0e5      	b.n	8003f94 <UART_SetConfig+0x284>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e0e2      	b.n	8003f94 <UART_SetConfig+0x284>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	76fb      	strb	r3, [r7, #27]
 8003dd2:	e0df      	b.n	8003f94 <UART_SetConfig+0x284>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	76fb      	strb	r3, [r7, #27]
 8003dd8:	bf00      	nop
 8003dda:	e0db      	b.n	8003f94 <UART_SetConfig+0x284>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a87      	ldr	r2, [pc, #540]	; (8004000 <UART_SetConfig+0x2f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d134      	bne.n	8003e50 <UART_SetConfig+0x140>
 8003de6:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <UART_SetConfig+0x2ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	d829      	bhi.n	8003e48 <UART_SetConfig+0x138>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <UART_SetConfig+0xec>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e49 	.word	0x08003e49
 8003e04:	08003e49 	.word	0x08003e49
 8003e08:	08003e49 	.word	0x08003e49
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e49 	.word	0x08003e49
 8003e14:	08003e49 	.word	0x08003e49
 8003e18:	08003e49 	.word	0x08003e49
 8003e1c:	08003e37 	.word	0x08003e37
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003e43 	.word	0x08003e43
 8003e30:	2300      	movs	r3, #0
 8003e32:	76fb      	strb	r3, [r7, #27]
 8003e34:	e0ae      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e36:	2302      	movs	r3, #2
 8003e38:	76fb      	strb	r3, [r7, #27]
 8003e3a:	e0ab      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	76fb      	strb	r3, [r7, #27]
 8003e40:	e0a8      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e42:	2308      	movs	r3, #8
 8003e44:	76fb      	strb	r3, [r7, #27]
 8003e46:	e0a5      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	76fb      	strb	r3, [r7, #27]
 8003e4c:	bf00      	nop
 8003e4e:	e0a1      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6b      	ldr	r2, [pc, #428]	; (8004004 <UART_SetConfig+0x2f4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d120      	bne.n	8003e9c <UART_SetConfig+0x18c>
 8003e5a:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <UART_SetConfig+0x2ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d00f      	beq.n	8003e88 <UART_SetConfig+0x178>
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d802      	bhi.n	8003e72 <UART_SetConfig+0x162>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <UART_SetConfig+0x16c>
 8003e70:	e010      	b.n	8003e94 <UART_SetConfig+0x184>
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d005      	beq.n	8003e82 <UART_SetConfig+0x172>
 8003e76:	2b30      	cmp	r3, #48	; 0x30
 8003e78:	d009      	beq.n	8003e8e <UART_SetConfig+0x17e>
 8003e7a:	e00b      	b.n	8003e94 <UART_SetConfig+0x184>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	76fb      	strb	r3, [r7, #27]
 8003e80:	e088      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e82:	2302      	movs	r3, #2
 8003e84:	76fb      	strb	r3, [r7, #27]
 8003e86:	e085      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	76fb      	strb	r3, [r7, #27]
 8003e8c:	e082      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	76fb      	strb	r3, [r7, #27]
 8003e92:	e07f      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e94:	2310      	movs	r3, #16
 8003e96:	76fb      	strb	r3, [r7, #27]
 8003e98:	bf00      	nop
 8003e9a:	e07b      	b.n	8003f94 <UART_SetConfig+0x284>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a59      	ldr	r2, [pc, #356]	; (8004008 <UART_SetConfig+0x2f8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d120      	bne.n	8003ee8 <UART_SetConfig+0x1d8>
 8003ea6:	4b55      	ldr	r3, [pc, #340]	; (8003ffc <UART_SetConfig+0x2ec>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d00f      	beq.n	8003ed4 <UART_SetConfig+0x1c4>
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d802      	bhi.n	8003ebe <UART_SetConfig+0x1ae>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <UART_SetConfig+0x1b8>
 8003ebc:	e010      	b.n	8003ee0 <UART_SetConfig+0x1d0>
 8003ebe:	2b80      	cmp	r3, #128	; 0x80
 8003ec0:	d005      	beq.n	8003ece <UART_SetConfig+0x1be>
 8003ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ec4:	d009      	beq.n	8003eda <UART_SetConfig+0x1ca>
 8003ec6:	e00b      	b.n	8003ee0 <UART_SetConfig+0x1d0>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e062      	b.n	8003f94 <UART_SetConfig+0x284>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	76fb      	strb	r3, [r7, #27]
 8003ed2:	e05f      	b.n	8003f94 <UART_SetConfig+0x284>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	76fb      	strb	r3, [r7, #27]
 8003ed8:	e05c      	b.n	8003f94 <UART_SetConfig+0x284>
 8003eda:	2308      	movs	r3, #8
 8003edc:	76fb      	strb	r3, [r7, #27]
 8003ede:	e059      	b.n	8003f94 <UART_SetConfig+0x284>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	bf00      	nop
 8003ee6:	e055      	b.n	8003f94 <UART_SetConfig+0x284>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a47      	ldr	r2, [pc, #284]	; (800400c <UART_SetConfig+0x2fc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d124      	bne.n	8003f3c <UART_SetConfig+0x22c>
 8003ef2:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <UART_SetConfig+0x2ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f00:	d012      	beq.n	8003f28 <UART_SetConfig+0x218>
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d802      	bhi.n	8003f0e <UART_SetConfig+0x1fe>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <UART_SetConfig+0x20c>
 8003f0c:	e012      	b.n	8003f34 <UART_SetConfig+0x224>
 8003f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f12:	d006      	beq.n	8003f22 <UART_SetConfig+0x212>
 8003f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f18:	d009      	beq.n	8003f2e <UART_SetConfig+0x21e>
 8003f1a:	e00b      	b.n	8003f34 <UART_SetConfig+0x224>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	76fb      	strb	r3, [r7, #27]
 8003f20:	e038      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f22:	2302      	movs	r3, #2
 8003f24:	76fb      	strb	r3, [r7, #27]
 8003f26:	e035      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	76fb      	strb	r3, [r7, #27]
 8003f2c:	e032      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f2e:	2308      	movs	r3, #8
 8003f30:	76fb      	strb	r3, [r7, #27]
 8003f32:	e02f      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f34:	2310      	movs	r3, #16
 8003f36:	76fb      	strb	r3, [r7, #27]
 8003f38:	bf00      	nop
 8003f3a:	e02b      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <UART_SetConfig+0x2e4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d124      	bne.n	8003f90 <UART_SetConfig+0x280>
 8003f46:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <UART_SetConfig+0x2ec>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f54:	d012      	beq.n	8003f7c <UART_SetConfig+0x26c>
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d802      	bhi.n	8003f62 <UART_SetConfig+0x252>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <UART_SetConfig+0x260>
 8003f60:	e012      	b.n	8003f88 <UART_SetConfig+0x278>
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f66:	d006      	beq.n	8003f76 <UART_SetConfig+0x266>
 8003f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f6c:	d009      	beq.n	8003f82 <UART_SetConfig+0x272>
 8003f6e:	e00b      	b.n	8003f88 <UART_SetConfig+0x278>
 8003f70:	2300      	movs	r3, #0
 8003f72:	76fb      	strb	r3, [r7, #27]
 8003f74:	e00e      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f76:	2302      	movs	r3, #2
 8003f78:	76fb      	strb	r3, [r7, #27]
 8003f7a:	e00b      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	76fb      	strb	r3, [r7, #27]
 8003f80:	e008      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f82:	2308      	movs	r3, #8
 8003f84:	76fb      	strb	r3, [r7, #27]
 8003f86:	e005      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	76fb      	strb	r3, [r7, #27]
 8003f8c:	bf00      	nop
 8003f8e:	e001      	b.n	8003f94 <UART_SetConfig+0x284>
 8003f90:	2310      	movs	r3, #16
 8003f92:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <UART_SetConfig+0x2e4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	f040 8087 	bne.w	80040ae <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fa0:	7efb      	ldrb	r3, [r7, #27]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d836      	bhi.n	8004014 <UART_SetConfig+0x304>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x29c>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08004015 	.word	0x08004015
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08004015 	.word	0x08004015
 8003fbc:	08003fdf 	.word	0x08003fdf
 8003fc0:	08004015 	.word	0x08004015
 8003fc4:	08004015 	.word	0x08004015
 8003fc8:	08004015 	.word	0x08004015
 8003fcc:	08003fe7 	.word	0x08003fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7fe feba 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8003fd4:	6178      	str	r0, [r7, #20]
        break;
 8003fd6:	e022      	b.n	800401e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <UART_SetConfig+0x300>)
 8003fda:	617b      	str	r3, [r7, #20]
        break;
 8003fdc:	e01f      	b.n	800401e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fde:	f7fe fe1d 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8003fe2:	6178      	str	r0, [r7, #20]
        break;
 8003fe4:	e01b      	b.n	800401e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fea:	617b      	str	r3, [r7, #20]
        break;
 8003fec:	e017      	b.n	800401e <UART_SetConfig+0x30e>
 8003fee:	bf00      	nop
 8003ff0:	efff69f3 	.word	0xefff69f3
 8003ff4:	40008000 	.word	0x40008000
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40004400 	.word	0x40004400
 8004004:	40004800 	.word	0x40004800
 8004008:	40004c00 	.word	0x40004c00
 800400c:	40005000 	.word	0x40005000
 8004010:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	76bb      	strb	r3, [r7, #26]
        break;
 800401c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80f1 	beq.w	8004208 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	429a      	cmp	r2, r3
 8004034:	d305      	bcc.n	8004042 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	429a      	cmp	r2, r3
 8004040:	d902      	bls.n	8004048 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	76bb      	strb	r3, [r7, #26]
 8004046:	e0df      	b.n	8004208 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4619      	mov	r1, r3
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	0214      	lsls	r4, r2, #8
 800405a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800405e:	020b      	lsls	r3, r1, #8
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6852      	ldr	r2, [r2, #4]
 8004064:	0852      	lsrs	r2, r2, #1
 8004066:	4611      	mov	r1, r2
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	eb13 0b01 	adds.w	fp, r3, r1
 8004070:	eb44 0c02 	adc.w	ip, r4, r2
 8004074:	4658      	mov	r0, fp
 8004076:	4661      	mov	r1, ip
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	461a      	mov	r2, r3
 8004082:	4623      	mov	r3, r4
 8004084:	f7fc f8fc 	bl	8000280 <__aeabi_uldivmod>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004094:	d308      	bcc.n	80040a8 <UART_SetConfig+0x398>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409c:	d204      	bcs.n	80040a8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e0af      	b.n	8004208 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	76bb      	strb	r3, [r7, #26]
 80040ac:	e0ac      	b.n	8004208 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b6:	d15b      	bne.n	8004170 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80040b8:	7efb      	ldrb	r3, [r7, #27]
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d827      	bhi.n	800410e <UART_SetConfig+0x3fe>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x3b4>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040f1 	.word	0x080040f1
 80040cc:	080040f9 	.word	0x080040f9
 80040d0:	0800410f 	.word	0x0800410f
 80040d4:	080040ff 	.word	0x080040ff
 80040d8:	0800410f 	.word	0x0800410f
 80040dc:	0800410f 	.word	0x0800410f
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	08004107 	.word	0x08004107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7fe fe2e 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 80040ec:	6178      	str	r0, [r7, #20]
        break;
 80040ee:	e013      	b.n	8004118 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7fe fe40 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 80040f4:	6178      	str	r0, [r7, #20]
        break;
 80040f6:	e00f      	b.n	8004118 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b49      	ldr	r3, [pc, #292]	; (8004220 <UART_SetConfig+0x510>)
 80040fa:	617b      	str	r3, [r7, #20]
        break;
 80040fc:	e00c      	b.n	8004118 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fe:	f7fe fd8d 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8004102:	6178      	str	r0, [r7, #20]
        break;
 8004104:	e008      	b.n	8004118 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800410a:	617b      	str	r3, [r7, #20]
        break;
 800410c:	e004      	b.n	8004118 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	76bb      	strb	r3, [r7, #26]
        break;
 8004116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d074      	beq.n	8004208 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	005a      	lsls	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b0f      	cmp	r3, #15
 800413a:	d916      	bls.n	800416a <UART_SetConfig+0x45a>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004142:	d212      	bcs.n	800416a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f023 030f 	bic.w	r3, r3, #15
 800414c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	b29a      	uxth	r2, r3
 800415a:	89fb      	ldrh	r3, [r7, #14]
 800415c:	4313      	orrs	r3, r2
 800415e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	89fa      	ldrh	r2, [r7, #14]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e04e      	b.n	8004208 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	76bb      	strb	r3, [r7, #26]
 800416e:	e04b      	b.n	8004208 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004170:	7efb      	ldrb	r3, [r7, #27]
 8004172:	2b08      	cmp	r3, #8
 8004174:	d827      	bhi.n	80041c6 <UART_SetConfig+0x4b6>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x46c>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041c7 	.word	0x080041c7
 800418c:	080041b7 	.word	0x080041b7
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041c7 	.word	0x080041c7
 8004198:	080041c7 	.word	0x080041c7
 800419c:	080041bf 	.word	0x080041bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fe fdd2 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 80041a4:	6178      	str	r0, [r7, #20]
        break;
 80041a6:	e013      	b.n	80041d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a8:	f7fe fde4 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 80041ac:	6178      	str	r0, [r7, #20]
        break;
 80041ae:	e00f      	b.n	80041d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <UART_SetConfig+0x510>)
 80041b2:	617b      	str	r3, [r7, #20]
        break;
 80041b4:	e00c      	b.n	80041d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b6:	f7fe fd31 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80041ba:	6178      	str	r0, [r7, #20]
        break;
 80041bc:	e008      	b.n	80041d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	617b      	str	r3, [r7, #20]
        break;
 80041c4:	e004      	b.n	80041d0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	76bb      	strb	r3, [r7, #26]
        break;
 80041ce:	bf00      	nop
    }

    if (pclk != 0U)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d018      	beq.n	8004208 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	085a      	lsrs	r2, r3, #1
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	441a      	add	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b0f      	cmp	r3, #15
 80041f0:	d908      	bls.n	8004204 <UART_SetConfig+0x4f4>
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f8:	d204      	bcs.n	8004204 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	e001      	b.n	8004208 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004214:	7ebb      	ldrb	r3, [r7, #26]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004220:	00f42400 	.word	0x00f42400

08004224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01a      	beq.n	800433a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004322:	d10a      	bne.n	800433a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004376:	f7fd fbfd 	bl	8001b74 <HAL_GetTick>
 800437a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	d10e      	bne.n	80043a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f82a 	bl	80043f2 <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e020      	b.n	80043ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d10e      	bne.n	80043d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f814 	bl	80043f2 <UART_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e00a      	b.n	80043ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004402:	e05d      	b.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d059      	beq.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440c:	f7fd fbb2 	bl	8001b74 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <UART_WaitOnFlagUntilTimeout+0x30>
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11b      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004430:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e042      	b.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02b      	beq.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	d123      	bne.n	80044c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004480:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004490:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e00f      	b.n	80044e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d092      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fbd8 	bl	8003cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004560:	2b21      	cmp	r3, #33	; 0x21
 8004562:	d12b      	bne.n	80045bc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d110      	bne.n	8004592 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800457e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004590:	e014      	b.n	80045bc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b292      	uxth	r2, r2
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	2b21      	cmp	r3, #33	; 0x21
 80045d6:	d12f      	bne.n	8004638 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d110      	bne.n	8004606 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004602:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004604:	e018      	b.n	8004638 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004618:	b292      	uxth	r2, r2
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fb3d 	bl	8003ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004684:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468a:	2b22      	cmp	r3, #34	; 0x22
 800468c:	d13a      	bne.n	8004704 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004694:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004696:	89bb      	ldrh	r3, [r7, #12]
 8004698:	b2d9      	uxtb	r1, r3
 800469a:	89fb      	ldrh	r3, [r7, #14]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	400a      	ands	r2, r1
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d123      	bne.n	8004718 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046de:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fc fef1 	bl	80014e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004702:	e009      	b.n	8004718 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	8b1b      	ldrh	r3, [r3, #24]
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0208 	orr.w	r2, r2, #8
 8004714:	b292      	uxth	r2, r2
 8004716:	831a      	strh	r2, [r3, #24]
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800472e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004734:	2b22      	cmp	r3, #34	; 0x22
 8004736:	d13a      	bne.n	80047ae <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800473e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004746:	89ba      	ldrh	r2, [r7, #12]
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	4013      	ands	r3, r2
 800474c:	b29a      	uxth	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d123      	bne.n	80047c2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004788:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fe9c 	bl	80014e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ac:	e009      	b.n	80047c2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	8b1b      	ldrh	r3, [r3, #24]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0208 	orr.w	r2, r2, #8
 80047be:	b292      	uxth	r2, r2
 80047c0:	831a      	strh	r2, [r3, #24]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <__errno>:
 80047e0:	4b01      	ldr	r3, [pc, #4]	; (80047e8 <__errno+0x8>)
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	2000000c 	.word	0x2000000c

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4e0d      	ldr	r6, [pc, #52]	; (8004824 <__libc_init_array+0x38>)
 80047f0:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f2:	1ba4      	subs	r4, r4, r6
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	2500      	movs	r5, #0
 80047f8:	42a5      	cmp	r5, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	4e0b      	ldr	r6, [pc, #44]	; (800482c <__libc_init_array+0x40>)
 80047fe:	4c0c      	ldr	r4, [pc, #48]	; (8004830 <__libc_init_array+0x44>)
 8004800:	f001 f918 	bl	8005a34 <_init>
 8004804:	1ba4      	subs	r4, r4, r6
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	2500      	movs	r5, #0
 800480a:	42a5      	cmp	r5, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004814:	4798      	blx	r3
 8004816:	3501      	adds	r5, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800481e:	4798      	blx	r3
 8004820:	3501      	adds	r5, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	08005cc8 	.word	0x08005cc8
 8004828:	08005cc8 	.word	0x08005cc8
 800482c:	08005cc8 	.word	0x08005cc8
 8004830:	08005ccc 	.word	0x08005ccc

08004834 <memcpy>:
 8004834:	b510      	push	{r4, lr}
 8004836:	1e43      	subs	r3, r0, #1
 8004838:	440a      	add	r2, r1
 800483a:	4291      	cmp	r1, r2
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	bd10      	pop	{r4, pc}
 8004840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	e7f7      	b.n	800483a <memcpy+0x6>

0800484a <memset>:
 800484a:	4402      	add	r2, r0
 800484c:	4603      	mov	r3, r0
 800484e:	4293      	cmp	r3, r2
 8004850:	d100      	bne.n	8004854 <memset+0xa>
 8004852:	4770      	bx	lr
 8004854:	f803 1b01 	strb.w	r1, [r3], #1
 8004858:	e7f9      	b.n	800484e <memset+0x4>
	...

0800485c <iprintf>:
 800485c:	b40f      	push	{r0, r1, r2, r3}
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <iprintf+0x2c>)
 8004860:	b513      	push	{r0, r1, r4, lr}
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	b124      	cbz	r4, 8004870 <iprintf+0x14>
 8004866:	69a3      	ldr	r3, [r4, #24]
 8004868:	b913      	cbnz	r3, 8004870 <iprintf+0x14>
 800486a:	4620      	mov	r0, r4
 800486c:	f000 f8bc 	bl	80049e8 <__sinit>
 8004870:	ab05      	add	r3, sp, #20
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	68a1      	ldr	r1, [r4, #8]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	4620      	mov	r0, r4
 800487a:	f000 fb15 	bl	8004ea8 <_vfiprintf_r>
 800487e:	b002      	add	sp, #8
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004884:	b004      	add	sp, #16
 8004886:	4770      	bx	lr
 8004888:	2000000c 	.word	0x2000000c

0800488c <sniprintf>:
 800488c:	b40c      	push	{r2, r3}
 800488e:	b530      	push	{r4, r5, lr}
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <sniprintf+0x64>)
 8004892:	1e0c      	subs	r4, r1, #0
 8004894:	b09d      	sub	sp, #116	; 0x74
 8004896:	681d      	ldr	r5, [r3, #0]
 8004898:	da08      	bge.n	80048ac <sniprintf+0x20>
 800489a:	238b      	movs	r3, #139	; 0x8b
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	f04f 30ff 	mov.w	r0, #4294967295
 80048a2:	b01d      	add	sp, #116	; 0x74
 80048a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048a8:	b002      	add	sp, #8
 80048aa:	4770      	bx	lr
 80048ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80048b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80048b4:	bf14      	ite	ne
 80048b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80048ba:	4623      	moveq	r3, r4
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	9307      	str	r3, [sp, #28]
 80048c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048c4:	9002      	str	r0, [sp, #8]
 80048c6:	9006      	str	r0, [sp, #24]
 80048c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80048ce:	ab21      	add	r3, sp, #132	; 0x84
 80048d0:	a902      	add	r1, sp, #8
 80048d2:	4628      	mov	r0, r5
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	f000 f9c5 	bl	8004c64 <_svfiprintf_r>
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	bfbc      	itt	lt
 80048de:	238b      	movlt	r3, #139	; 0x8b
 80048e0:	602b      	strlt	r3, [r5, #0]
 80048e2:	2c00      	cmp	r4, #0
 80048e4:	d0dd      	beq.n	80048a2 <sniprintf+0x16>
 80048e6:	9b02      	ldr	r3, [sp, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e7d9      	b.n	80048a2 <sniprintf+0x16>
 80048ee:	bf00      	nop
 80048f0:	2000000c 	.word	0x2000000c

080048f4 <siprintf>:
 80048f4:	b40e      	push	{r1, r2, r3}
 80048f6:	b500      	push	{lr}
 80048f8:	b09c      	sub	sp, #112	; 0x70
 80048fa:	ab1d      	add	r3, sp, #116	; 0x74
 80048fc:	9002      	str	r0, [sp, #8]
 80048fe:	9006      	str	r0, [sp, #24]
 8004900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004904:	4809      	ldr	r0, [pc, #36]	; (800492c <siprintf+0x38>)
 8004906:	9107      	str	r1, [sp, #28]
 8004908:	9104      	str	r1, [sp, #16]
 800490a:	4909      	ldr	r1, [pc, #36]	; (8004930 <siprintf+0x3c>)
 800490c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004910:	9105      	str	r1, [sp, #20]
 8004912:	6800      	ldr	r0, [r0, #0]
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	a902      	add	r1, sp, #8
 8004918:	f000 f9a4 	bl	8004c64 <_svfiprintf_r>
 800491c:	9b02      	ldr	r3, [sp, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	b01c      	add	sp, #112	; 0x70
 8004924:	f85d eb04 	ldr.w	lr, [sp], #4
 8004928:	b003      	add	sp, #12
 800492a:	4770      	bx	lr
 800492c:	2000000c 	.word	0x2000000c
 8004930:	ffff0208 	.word	0xffff0208

08004934 <strstr>:
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004936:	7803      	ldrb	r3, [r0, #0]
 8004938:	b17b      	cbz	r3, 800495a <strstr+0x26>
 800493a:	4604      	mov	r4, r0
 800493c:	7823      	ldrb	r3, [r4, #0]
 800493e:	4620      	mov	r0, r4
 8004940:	1c66      	adds	r6, r4, #1
 8004942:	b17b      	cbz	r3, 8004964 <strstr+0x30>
 8004944:	1e4a      	subs	r2, r1, #1
 8004946:	1e63      	subs	r3, r4, #1
 8004948:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800494c:	b14d      	cbz	r5, 8004962 <strstr+0x2e>
 800494e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004952:	42af      	cmp	r7, r5
 8004954:	4634      	mov	r4, r6
 8004956:	d0f7      	beq.n	8004948 <strstr+0x14>
 8004958:	e7f0      	b.n	800493c <strstr+0x8>
 800495a:	780b      	ldrb	r3, [r1, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf18      	it	ne
 8004960:	2000      	movne	r0, #0
 8004962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004964:	4618      	mov	r0, r3
 8004966:	e7fc      	b.n	8004962 <strstr+0x2e>

08004968 <std>:
 8004968:	2300      	movs	r3, #0
 800496a:	b510      	push	{r4, lr}
 800496c:	4604      	mov	r4, r0
 800496e:	e9c0 3300 	strd	r3, r3, [r0]
 8004972:	6083      	str	r3, [r0, #8]
 8004974:	8181      	strh	r1, [r0, #12]
 8004976:	6643      	str	r3, [r0, #100]	; 0x64
 8004978:	81c2      	strh	r2, [r0, #14]
 800497a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497e:	6183      	str	r3, [r0, #24]
 8004980:	4619      	mov	r1, r3
 8004982:	2208      	movs	r2, #8
 8004984:	305c      	adds	r0, #92	; 0x5c
 8004986:	f7ff ff60 	bl	800484a <memset>
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <std+0x38>)
 800498c:	6263      	str	r3, [r4, #36]	; 0x24
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <std+0x3c>)
 8004990:	62a3      	str	r3, [r4, #40]	; 0x28
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <std+0x40>)
 8004994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <std+0x44>)
 8004998:	6224      	str	r4, [r4, #32]
 800499a:	6323      	str	r3, [r4, #48]	; 0x30
 800499c:	bd10      	pop	{r4, pc}
 800499e:	bf00      	nop
 80049a0:	08005405 	.word	0x08005405
 80049a4:	08005427 	.word	0x08005427
 80049a8:	0800545f 	.word	0x0800545f
 80049ac:	08005483 	.word	0x08005483

080049b0 <_cleanup_r>:
 80049b0:	4901      	ldr	r1, [pc, #4]	; (80049b8 <_cleanup_r+0x8>)
 80049b2:	f000 b885 	b.w	8004ac0 <_fwalk_reent>
 80049b6:	bf00      	nop
 80049b8:	0800575d 	.word	0x0800575d

080049bc <__sfmoreglue>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	1e4a      	subs	r2, r1, #1
 80049c0:	2568      	movs	r5, #104	; 0x68
 80049c2:	4355      	muls	r5, r2
 80049c4:	460e      	mov	r6, r1
 80049c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049ca:	f000 f897 	bl	8004afc <_malloc_r>
 80049ce:	4604      	mov	r4, r0
 80049d0:	b140      	cbz	r0, 80049e4 <__sfmoreglue+0x28>
 80049d2:	2100      	movs	r1, #0
 80049d4:	e9c0 1600 	strd	r1, r6, [r0]
 80049d8:	300c      	adds	r0, #12
 80049da:	60a0      	str	r0, [r4, #8]
 80049dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049e0:	f7ff ff33 	bl	800484a <memset>
 80049e4:	4620      	mov	r0, r4
 80049e6:	bd70      	pop	{r4, r5, r6, pc}

080049e8 <__sinit>:
 80049e8:	6983      	ldr	r3, [r0, #24]
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
 80049ee:	bb33      	cbnz	r3, 8004a3e <__sinit+0x56>
 80049f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80049f4:	6503      	str	r3, [r0, #80]	; 0x50
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <__sinit+0x58>)
 80049f8:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <__sinit+0x5c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6282      	str	r2, [r0, #40]	; 0x28
 80049fe:	4298      	cmp	r0, r3
 8004a00:	bf04      	itt	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	6183      	streq	r3, [r0, #24]
 8004a06:	f000 f81f 	bl	8004a48 <__sfp>
 8004a0a:	6060      	str	r0, [r4, #4]
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f000 f81b 	bl	8004a48 <__sfp>
 8004a12:	60a0      	str	r0, [r4, #8]
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 f817 	bl	8004a48 <__sfp>
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	60e0      	str	r0, [r4, #12]
 8004a1e:	2104      	movs	r1, #4
 8004a20:	6860      	ldr	r0, [r4, #4]
 8004a22:	f7ff ffa1 	bl	8004968 <std>
 8004a26:	2201      	movs	r2, #1
 8004a28:	2109      	movs	r1, #9
 8004a2a:	68a0      	ldr	r0, [r4, #8]
 8004a2c:	f7ff ff9c 	bl	8004968 <std>
 8004a30:	2202      	movs	r2, #2
 8004a32:	2112      	movs	r1, #18
 8004a34:	68e0      	ldr	r0, [r4, #12]
 8004a36:	f7ff ff97 	bl	8004968 <std>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61a3      	str	r3, [r4, #24]
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	08005c28 	.word	0x08005c28
 8004a44:	080049b1 	.word	0x080049b1

08004a48 <__sfp>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <__sfp+0x70>)
 8004a4c:	681e      	ldr	r6, [r3, #0]
 8004a4e:	69b3      	ldr	r3, [r6, #24]
 8004a50:	4607      	mov	r7, r0
 8004a52:	b913      	cbnz	r3, 8004a5a <__sfp+0x12>
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffc7 	bl	80049e8 <__sinit>
 8004a5a:	3648      	adds	r6, #72	; 0x48
 8004a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	d503      	bpl.n	8004a6c <__sfp+0x24>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	b133      	cbz	r3, 8004a76 <__sfp+0x2e>
 8004a68:	6836      	ldr	r6, [r6, #0]
 8004a6a:	e7f7      	b.n	8004a5c <__sfp+0x14>
 8004a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a70:	b16d      	cbz	r5, 8004a8e <__sfp+0x46>
 8004a72:	3468      	adds	r4, #104	; 0x68
 8004a74:	e7f4      	b.n	8004a60 <__sfp+0x18>
 8004a76:	2104      	movs	r1, #4
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f7ff ff9f 	bl	80049bc <__sfmoreglue>
 8004a7e:	6030      	str	r0, [r6, #0]
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d1f1      	bne.n	8004a68 <__sfp+0x20>
 8004a84:	230c      	movs	r3, #12
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4604      	mov	r4, r0
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <__sfp+0x74>)
 8004a90:	6665      	str	r5, [r4, #100]	; 0x64
 8004a92:	e9c4 5500 	strd	r5, r5, [r4]
 8004a96:	60a5      	str	r5, [r4, #8]
 8004a98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004a9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004aa8:	f7ff fecf 	bl	800484a <memset>
 8004aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ab4:	e7e9      	b.n	8004a8a <__sfp+0x42>
 8004ab6:	bf00      	nop
 8004ab8:	08005c28 	.word	0x08005c28
 8004abc:	ffff0001 	.word	0xffff0001

08004ac0 <_fwalk_reent>:
 8004ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	4689      	mov	r9, r1
 8004ac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004acc:	2600      	movs	r6, #0
 8004ace:	b914      	cbnz	r4, 8004ad6 <_fwalk_reent+0x16>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ada:	3f01      	subs	r7, #1
 8004adc:	d501      	bpl.n	8004ae2 <_fwalk_reent+0x22>
 8004ade:	6824      	ldr	r4, [r4, #0]
 8004ae0:	e7f5      	b.n	8004ace <_fwalk_reent+0xe>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d907      	bls.n	8004af8 <_fwalk_reent+0x38>
 8004ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aec:	3301      	adds	r3, #1
 8004aee:	d003      	beq.n	8004af8 <_fwalk_reent+0x38>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4640      	mov	r0, r8
 8004af4:	47c8      	blx	r9
 8004af6:	4306      	orrs	r6, r0
 8004af8:	3568      	adds	r5, #104	; 0x68
 8004afa:	e7ee      	b.n	8004ada <_fwalk_reent+0x1a>

08004afc <_malloc_r>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	1ccd      	adds	r5, r1, #3
 8004b00:	f025 0503 	bic.w	r5, r5, #3
 8004b04:	3508      	adds	r5, #8
 8004b06:	2d0c      	cmp	r5, #12
 8004b08:	bf38      	it	cc
 8004b0a:	250c      	movcc	r5, #12
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	4606      	mov	r6, r0
 8004b10:	db01      	blt.n	8004b16 <_malloc_r+0x1a>
 8004b12:	42a9      	cmp	r1, r5
 8004b14:	d903      	bls.n	8004b1e <_malloc_r+0x22>
 8004b16:	230c      	movs	r3, #12
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
 8004b1e:	f000 fed6 	bl	80058ce <__malloc_lock>
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <_malloc_r+0xac>)
 8004b24:	6814      	ldr	r4, [r2, #0]
 8004b26:	4621      	mov	r1, r4
 8004b28:	b991      	cbnz	r1, 8004b50 <_malloc_r+0x54>
 8004b2a:	4c20      	ldr	r4, [pc, #128]	; (8004bac <_malloc_r+0xb0>)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	b91b      	cbnz	r3, 8004b38 <_malloc_r+0x3c>
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fc57 	bl	80053e4 <_sbrk_r>
 8004b36:	6020      	str	r0, [r4, #0]
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 fc52 	bl	80053e4 <_sbrk_r>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d124      	bne.n	8004b8e <_malloc_r+0x92>
 8004b44:	230c      	movs	r3, #12
 8004b46:	6033      	str	r3, [r6, #0]
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 fec1 	bl	80058d0 <__malloc_unlock>
 8004b4e:	e7e4      	b.n	8004b1a <_malloc_r+0x1e>
 8004b50:	680b      	ldr	r3, [r1, #0]
 8004b52:	1b5b      	subs	r3, r3, r5
 8004b54:	d418      	bmi.n	8004b88 <_malloc_r+0x8c>
 8004b56:	2b0b      	cmp	r3, #11
 8004b58:	d90f      	bls.n	8004b7a <_malloc_r+0x7e>
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	50cd      	str	r5, [r1, r3]
 8004b5e:	18cc      	adds	r4, r1, r3
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 feb5 	bl	80058d0 <__malloc_unlock>
 8004b66:	f104 000b 	add.w	r0, r4, #11
 8004b6a:	1d23      	adds	r3, r4, #4
 8004b6c:	f020 0007 	bic.w	r0, r0, #7
 8004b70:	1ac3      	subs	r3, r0, r3
 8004b72:	d0d3      	beq.n	8004b1c <_malloc_r+0x20>
 8004b74:	425a      	negs	r2, r3
 8004b76:	50e2      	str	r2, [r4, r3]
 8004b78:	e7d0      	b.n	8004b1c <_malloc_r+0x20>
 8004b7a:	428c      	cmp	r4, r1
 8004b7c:	684b      	ldr	r3, [r1, #4]
 8004b7e:	bf16      	itet	ne
 8004b80:	6063      	strne	r3, [r4, #4]
 8004b82:	6013      	streq	r3, [r2, #0]
 8004b84:	460c      	movne	r4, r1
 8004b86:	e7eb      	b.n	8004b60 <_malloc_r+0x64>
 8004b88:	460c      	mov	r4, r1
 8004b8a:	6849      	ldr	r1, [r1, #4]
 8004b8c:	e7cc      	b.n	8004b28 <_malloc_r+0x2c>
 8004b8e:	1cc4      	adds	r4, r0, #3
 8004b90:	f024 0403 	bic.w	r4, r4, #3
 8004b94:	42a0      	cmp	r0, r4
 8004b96:	d005      	beq.n	8004ba4 <_malloc_r+0xa8>
 8004b98:	1a21      	subs	r1, r4, r0
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f000 fc22 	bl	80053e4 <_sbrk_r>
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d0cf      	beq.n	8004b44 <_malloc_r+0x48>
 8004ba4:	6025      	str	r5, [r4, #0]
 8004ba6:	e7db      	b.n	8004b60 <_malloc_r+0x64>
 8004ba8:	20000c08 	.word	0x20000c08
 8004bac:	20000c0c 	.word	0x20000c0c

08004bb0 <__ssputs_r>:
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	688e      	ldr	r6, [r1, #8]
 8004bb6:	429e      	cmp	r6, r3
 8004bb8:	4682      	mov	sl, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	4690      	mov	r8, r2
 8004bbe:	4699      	mov	r9, r3
 8004bc0:	d837      	bhi.n	8004c32 <__ssputs_r+0x82>
 8004bc2:	898a      	ldrh	r2, [r1, #12]
 8004bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bc8:	d031      	beq.n	8004c2e <__ssputs_r+0x7e>
 8004bca:	6825      	ldr	r5, [r4, #0]
 8004bcc:	6909      	ldr	r1, [r1, #16]
 8004bce:	1a6f      	subs	r7, r5, r1
 8004bd0:	6965      	ldr	r5, [r4, #20]
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8004bdc:	f109 0301 	add.w	r3, r9, #1
 8004be0:	443b      	add	r3, r7
 8004be2:	429d      	cmp	r5, r3
 8004be4:	bf38      	it	cc
 8004be6:	461d      	movcc	r5, r3
 8004be8:	0553      	lsls	r3, r2, #21
 8004bea:	d530      	bpl.n	8004c4e <__ssputs_r+0x9e>
 8004bec:	4629      	mov	r1, r5
 8004bee:	f7ff ff85 	bl	8004afc <_malloc_r>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	b950      	cbnz	r0, 8004c0c <__ssputs_r+0x5c>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	f8ca 3000 	str.w	r3, [sl]
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	6921      	ldr	r1, [r4, #16]
 8004c10:	f7ff fe10 	bl	8004834 <memcpy>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	6126      	str	r6, [r4, #16]
 8004c22:	6165      	str	r5, [r4, #20]
 8004c24:	443e      	add	r6, r7
 8004c26:	1bed      	subs	r5, r5, r7
 8004c28:	6026      	str	r6, [r4, #0]
 8004c2a:	60a5      	str	r5, [r4, #8]
 8004c2c:	464e      	mov	r6, r9
 8004c2e:	454e      	cmp	r6, r9
 8004c30:	d900      	bls.n	8004c34 <__ssputs_r+0x84>
 8004c32:	464e      	mov	r6, r9
 8004c34:	4632      	mov	r2, r6
 8004c36:	4641      	mov	r1, r8
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	f000 fe2f 	bl	800589c <memmove>
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	1b9b      	subs	r3, r3, r6
 8004c42:	60a3      	str	r3, [r4, #8]
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	441e      	add	r6, r3
 8004c48:	6026      	str	r6, [r4, #0]
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e7dc      	b.n	8004c08 <__ssputs_r+0x58>
 8004c4e:	462a      	mov	r2, r5
 8004c50:	f000 fe8e 	bl	8005970 <_realloc_r>
 8004c54:	4606      	mov	r6, r0
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d1e2      	bne.n	8004c20 <__ssputs_r+0x70>
 8004c5a:	6921      	ldr	r1, [r4, #16]
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f000 fe39 	bl	80058d4 <_free_r>
 8004c62:	e7c8      	b.n	8004bf6 <__ssputs_r+0x46>

08004c64 <_svfiprintf_r>:
 8004c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	461d      	mov	r5, r3
 8004c6a:	898b      	ldrh	r3, [r1, #12]
 8004c6c:	061f      	lsls	r7, r3, #24
 8004c6e:	b09d      	sub	sp, #116	; 0x74
 8004c70:	4680      	mov	r8, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	4616      	mov	r6, r2
 8004c76:	d50f      	bpl.n	8004c98 <_svfiprintf_r+0x34>
 8004c78:	690b      	ldr	r3, [r1, #16]
 8004c7a:	b96b      	cbnz	r3, 8004c98 <_svfiprintf_r+0x34>
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	f7ff ff3d 	bl	8004afc <_malloc_r>
 8004c82:	6020      	str	r0, [r4, #0]
 8004c84:	6120      	str	r0, [r4, #16]
 8004c86:	b928      	cbnz	r0, 8004c94 <_svfiprintf_r+0x30>
 8004c88:	230c      	movs	r3, #12
 8004c8a:	f8c8 3000 	str.w	r3, [r8]
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c92:	e0c8      	b.n	8004e26 <_svfiprintf_r+0x1c2>
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	6163      	str	r3, [r4, #20]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ca2:	2330      	movs	r3, #48	; 0x30
 8004ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ca8:	9503      	str	r5, [sp, #12]
 8004caa:	f04f 0b01 	mov.w	fp, #1
 8004cae:	4637      	mov	r7, r6
 8004cb0:	463d      	mov	r5, r7
 8004cb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004cb6:	b10b      	cbz	r3, 8004cbc <_svfiprintf_r+0x58>
 8004cb8:	2b25      	cmp	r3, #37	; 0x25
 8004cba:	d13e      	bne.n	8004d3a <_svfiprintf_r+0xd6>
 8004cbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8004cc0:	d00b      	beq.n	8004cda <_svfiprintf_r+0x76>
 8004cc2:	4653      	mov	r3, sl
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	4640      	mov	r0, r8
 8004cca:	f7ff ff71 	bl	8004bb0 <__ssputs_r>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	f000 80a4 	beq.w	8004e1c <_svfiprintf_r+0x1b8>
 8004cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd6:	4453      	add	r3, sl
 8004cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cda:	783b      	ldrb	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 809d 	beq.w	8004e1c <_svfiprintf_r+0x1b8>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	9307      	str	r3, [sp, #28]
 8004cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8004cf6:	462f      	mov	r7, r5
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004cfe:	4850      	ldr	r0, [pc, #320]	; (8004e40 <_svfiprintf_r+0x1dc>)
 8004d00:	f7fb fa6e 	bl	80001e0 <memchr>
 8004d04:	9b04      	ldr	r3, [sp, #16]
 8004d06:	b9d0      	cbnz	r0, 8004d3e <_svfiprintf_r+0xda>
 8004d08:	06d9      	lsls	r1, r3, #27
 8004d0a:	bf44      	itt	mi
 8004d0c:	2220      	movmi	r2, #32
 8004d0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d12:	071a      	lsls	r2, r3, #28
 8004d14:	bf44      	itt	mi
 8004d16:	222b      	movmi	r2, #43	; 0x2b
 8004d18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d1c:	782a      	ldrb	r2, [r5, #0]
 8004d1e:	2a2a      	cmp	r2, #42	; 0x2a
 8004d20:	d015      	beq.n	8004d4e <_svfiprintf_r+0xea>
 8004d22:	9a07      	ldr	r2, [sp, #28]
 8004d24:	462f      	mov	r7, r5
 8004d26:	2000      	movs	r0, #0
 8004d28:	250a      	movs	r5, #10
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d30:	3b30      	subs	r3, #48	; 0x30
 8004d32:	2b09      	cmp	r3, #9
 8004d34:	d94d      	bls.n	8004dd2 <_svfiprintf_r+0x16e>
 8004d36:	b1b8      	cbz	r0, 8004d68 <_svfiprintf_r+0x104>
 8004d38:	e00f      	b.n	8004d5a <_svfiprintf_r+0xf6>
 8004d3a:	462f      	mov	r7, r5
 8004d3c:	e7b8      	b.n	8004cb0 <_svfiprintf_r+0x4c>
 8004d3e:	4a40      	ldr	r2, [pc, #256]	; (8004e40 <_svfiprintf_r+0x1dc>)
 8004d40:	1a80      	subs	r0, r0, r2
 8004d42:	fa0b f000 	lsl.w	r0, fp, r0
 8004d46:	4318      	orrs	r0, r3
 8004d48:	9004      	str	r0, [sp, #16]
 8004d4a:	463d      	mov	r5, r7
 8004d4c:	e7d3      	b.n	8004cf6 <_svfiprintf_r+0x92>
 8004d4e:	9a03      	ldr	r2, [sp, #12]
 8004d50:	1d11      	adds	r1, r2, #4
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	9103      	str	r1, [sp, #12]
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	db01      	blt.n	8004d5e <_svfiprintf_r+0xfa>
 8004d5a:	9207      	str	r2, [sp, #28]
 8004d5c:	e004      	b.n	8004d68 <_svfiprintf_r+0x104>
 8004d5e:	4252      	negs	r2, r2
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	9207      	str	r2, [sp, #28]
 8004d66:	9304      	str	r3, [sp, #16]
 8004d68:	783b      	ldrb	r3, [r7, #0]
 8004d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d6c:	d10c      	bne.n	8004d88 <_svfiprintf_r+0x124>
 8004d6e:	787b      	ldrb	r3, [r7, #1]
 8004d70:	2b2a      	cmp	r3, #42	; 0x2a
 8004d72:	d133      	bne.n	8004ddc <_svfiprintf_r+0x178>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	1d1a      	adds	r2, r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	9203      	str	r2, [sp, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bfb8      	it	lt
 8004d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d84:	3702      	adds	r7, #2
 8004d86:	9305      	str	r3, [sp, #20]
 8004d88:	4d2e      	ldr	r5, [pc, #184]	; (8004e44 <_svfiprintf_r+0x1e0>)
 8004d8a:	7839      	ldrb	r1, [r7, #0]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f7fb fa26 	bl	80001e0 <memchr>
 8004d94:	b138      	cbz	r0, 8004da6 <_svfiprintf_r+0x142>
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	1b40      	subs	r0, r0, r5
 8004d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d9e:	9b04      	ldr	r3, [sp, #16]
 8004da0:	4303      	orrs	r3, r0
 8004da2:	3701      	adds	r7, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	7839      	ldrb	r1, [r7, #0]
 8004da8:	4827      	ldr	r0, [pc, #156]	; (8004e48 <_svfiprintf_r+0x1e4>)
 8004daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dae:	2206      	movs	r2, #6
 8004db0:	1c7e      	adds	r6, r7, #1
 8004db2:	f7fb fa15 	bl	80001e0 <memchr>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d038      	beq.n	8004e2c <_svfiprintf_r+0x1c8>
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <_svfiprintf_r+0x1e8>)
 8004dbc:	bb13      	cbnz	r3, 8004e04 <_svfiprintf_r+0x1a0>
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	3307      	adds	r3, #7
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	444b      	add	r3, r9
 8004dce:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd0:	e76d      	b.n	8004cae <_svfiprintf_r+0x4a>
 8004dd2:	fb05 3202 	mla	r2, r5, r2, r3
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	460f      	mov	r7, r1
 8004dda:	e7a6      	b.n	8004d2a <_svfiprintf_r+0xc6>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	3701      	adds	r7, #1
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	4619      	mov	r1, r3
 8004de4:	250a      	movs	r5, #10
 8004de6:	4638      	mov	r0, r7
 8004de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dec:	3a30      	subs	r2, #48	; 0x30
 8004dee:	2a09      	cmp	r2, #9
 8004df0:	d903      	bls.n	8004dfa <_svfiprintf_r+0x196>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0c8      	beq.n	8004d88 <_svfiprintf_r+0x124>
 8004df6:	9105      	str	r1, [sp, #20]
 8004df8:	e7c6      	b.n	8004d88 <_svfiprintf_r+0x124>
 8004dfa:	fb05 2101 	mla	r1, r5, r1, r2
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4607      	mov	r7, r0
 8004e02:	e7f0      	b.n	8004de6 <_svfiprintf_r+0x182>
 8004e04:	ab03      	add	r3, sp, #12
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <_svfiprintf_r+0x1ec>)
 8004e0c:	a904      	add	r1, sp, #16
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f3af 8000 	nop.w
 8004e14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e18:	4681      	mov	r9, r0
 8004e1a:	d1d6      	bne.n	8004dca <_svfiprintf_r+0x166>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	065b      	lsls	r3, r3, #25
 8004e20:	f53f af35 	bmi.w	8004c8e <_svfiprintf_r+0x2a>
 8004e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e26:	b01d      	add	sp, #116	; 0x74
 8004e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	4622      	mov	r2, r4
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <_svfiprintf_r+0x1ec>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	4640      	mov	r0, r8
 8004e38:	f000 f9c2 	bl	80051c0 <_printf_i>
 8004e3c:	e7ea      	b.n	8004e14 <_svfiprintf_r+0x1b0>
 8004e3e:	bf00      	nop
 8004e40:	08005c8c 	.word	0x08005c8c
 8004e44:	08005c92 	.word	0x08005c92
 8004e48:	08005c96 	.word	0x08005c96
 8004e4c:	00000000 	.word	0x00000000
 8004e50:	08004bb1 	.word	0x08004bb1

08004e54 <__sfputc_r>:
 8004e54:	6893      	ldr	r3, [r2, #8]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	b410      	push	{r4}
 8004e5c:	6093      	str	r3, [r2, #8]
 8004e5e:	da08      	bge.n	8004e72 <__sfputc_r+0x1e>
 8004e60:	6994      	ldr	r4, [r2, #24]
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	db01      	blt.n	8004e6a <__sfputc_r+0x16>
 8004e66:	290a      	cmp	r1, #10
 8004e68:	d103      	bne.n	8004e72 <__sfputc_r+0x1e>
 8004e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e6e:	f000 bb0d 	b.w	800548c <__swbuf_r>
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	1c58      	adds	r0, r3, #1
 8004e76:	6010      	str	r0, [r2, #0]
 8004e78:	7019      	strb	r1, [r3, #0]
 8004e7a:	4608      	mov	r0, r1
 8004e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <__sfputs_r>:
 8004e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e84:	4606      	mov	r6, r0
 8004e86:	460f      	mov	r7, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	18d5      	adds	r5, r2, r3
 8004e8c:	42ac      	cmp	r4, r5
 8004e8e:	d101      	bne.n	8004e94 <__sfputs_r+0x12>
 8004e90:	2000      	movs	r0, #0
 8004e92:	e007      	b.n	8004ea4 <__sfputs_r+0x22>
 8004e94:	463a      	mov	r2, r7
 8004e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff ffda 	bl	8004e54 <__sfputc_r>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d1f3      	bne.n	8004e8c <__sfputs_r+0xa>
 8004ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ea8 <_vfiprintf_r>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	460c      	mov	r4, r1
 8004eae:	b09d      	sub	sp, #116	; 0x74
 8004eb0:	4617      	mov	r7, r2
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	b118      	cbz	r0, 8004ec0 <_vfiprintf_r+0x18>
 8004eb8:	6983      	ldr	r3, [r0, #24]
 8004eba:	b90b      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x18>
 8004ebc:	f7ff fd94 	bl	80049e8 <__sinit>
 8004ec0:	4b7c      	ldr	r3, [pc, #496]	; (80050b4 <_vfiprintf_r+0x20c>)
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	d158      	bne.n	8004f78 <_vfiprintf_r+0xd0>
 8004ec6:	6874      	ldr	r4, [r6, #4]
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	0718      	lsls	r0, r3, #28
 8004ecc:	d55e      	bpl.n	8004f8c <_vfiprintf_r+0xe4>
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <_vfiprintf_r+0xe4>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ede:	2330      	movs	r3, #48	; 0x30
 8004ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ee4:	9503      	str	r5, [sp, #12]
 8004ee6:	f04f 0b01 	mov.w	fp, #1
 8004eea:	46b8      	mov	r8, r7
 8004eec:	4645      	mov	r5, r8
 8004eee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ef2:	b10b      	cbz	r3, 8004ef8 <_vfiprintf_r+0x50>
 8004ef4:	2b25      	cmp	r3, #37	; 0x25
 8004ef6:	d154      	bne.n	8004fa2 <_vfiprintf_r+0xfa>
 8004ef8:	ebb8 0a07 	subs.w	sl, r8, r7
 8004efc:	d00b      	beq.n	8004f16 <_vfiprintf_r+0x6e>
 8004efe:	4653      	mov	r3, sl
 8004f00:	463a      	mov	r2, r7
 8004f02:	4621      	mov	r1, r4
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ffbc 	bl	8004e82 <__sfputs_r>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	f000 80c2 	beq.w	8005094 <_vfiprintf_r+0x1ec>
 8004f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f12:	4453      	add	r3, sl
 8004f14:	9309      	str	r3, [sp, #36]	; 0x24
 8004f16:	f898 3000 	ldrb.w	r3, [r8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80ba 	beq.w	8005094 <_vfiprintf_r+0x1ec>
 8004f20:	2300      	movs	r3, #0
 8004f22:	f04f 32ff 	mov.w	r2, #4294967295
 8004f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	9307      	str	r3, [sp, #28]
 8004f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f32:	931a      	str	r3, [sp, #104]	; 0x68
 8004f34:	46a8      	mov	r8, r5
 8004f36:	2205      	movs	r2, #5
 8004f38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004f3c:	485e      	ldr	r0, [pc, #376]	; (80050b8 <_vfiprintf_r+0x210>)
 8004f3e:	f7fb f94f 	bl	80001e0 <memchr>
 8004f42:	9b04      	ldr	r3, [sp, #16]
 8004f44:	bb78      	cbnz	r0, 8004fa6 <_vfiprintf_r+0xfe>
 8004f46:	06d9      	lsls	r1, r3, #27
 8004f48:	bf44      	itt	mi
 8004f4a:	2220      	movmi	r2, #32
 8004f4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f50:	071a      	lsls	r2, r3, #28
 8004f52:	bf44      	itt	mi
 8004f54:	222b      	movmi	r2, #43	; 0x2b
 8004f56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f5a:	782a      	ldrb	r2, [r5, #0]
 8004f5c:	2a2a      	cmp	r2, #42	; 0x2a
 8004f5e:	d02a      	beq.n	8004fb6 <_vfiprintf_r+0x10e>
 8004f60:	9a07      	ldr	r2, [sp, #28]
 8004f62:	46a8      	mov	r8, r5
 8004f64:	2000      	movs	r0, #0
 8004f66:	250a      	movs	r5, #10
 8004f68:	4641      	mov	r1, r8
 8004f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6e:	3b30      	subs	r3, #48	; 0x30
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d969      	bls.n	8005048 <_vfiprintf_r+0x1a0>
 8004f74:	b360      	cbz	r0, 8004fd0 <_vfiprintf_r+0x128>
 8004f76:	e024      	b.n	8004fc2 <_vfiprintf_r+0x11a>
 8004f78:	4b50      	ldr	r3, [pc, #320]	; (80050bc <_vfiprintf_r+0x214>)
 8004f7a:	429c      	cmp	r4, r3
 8004f7c:	d101      	bne.n	8004f82 <_vfiprintf_r+0xda>
 8004f7e:	68b4      	ldr	r4, [r6, #8]
 8004f80:	e7a2      	b.n	8004ec8 <_vfiprintf_r+0x20>
 8004f82:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <_vfiprintf_r+0x218>)
 8004f84:	429c      	cmp	r4, r3
 8004f86:	bf08      	it	eq
 8004f88:	68f4      	ldreq	r4, [r6, #12]
 8004f8a:	e79d      	b.n	8004ec8 <_vfiprintf_r+0x20>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f000 fae0 	bl	8005554 <__swsetup_r>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d09d      	beq.n	8004ed4 <_vfiprintf_r+0x2c>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	b01d      	add	sp, #116	; 0x74
 8004f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa2:	46a8      	mov	r8, r5
 8004fa4:	e7a2      	b.n	8004eec <_vfiprintf_r+0x44>
 8004fa6:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <_vfiprintf_r+0x210>)
 8004fa8:	1a80      	subs	r0, r0, r2
 8004faa:	fa0b f000 	lsl.w	r0, fp, r0
 8004fae:	4318      	orrs	r0, r3
 8004fb0:	9004      	str	r0, [sp, #16]
 8004fb2:	4645      	mov	r5, r8
 8004fb4:	e7be      	b.n	8004f34 <_vfiprintf_r+0x8c>
 8004fb6:	9a03      	ldr	r2, [sp, #12]
 8004fb8:	1d11      	adds	r1, r2, #4
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	9103      	str	r1, [sp, #12]
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	db01      	blt.n	8004fc6 <_vfiprintf_r+0x11e>
 8004fc2:	9207      	str	r2, [sp, #28]
 8004fc4:	e004      	b.n	8004fd0 <_vfiprintf_r+0x128>
 8004fc6:	4252      	negs	r2, r2
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	9207      	str	r2, [sp, #28]
 8004fce:	9304      	str	r3, [sp, #16]
 8004fd0:	f898 3000 	ldrb.w	r3, [r8]
 8004fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd6:	d10e      	bne.n	8004ff6 <_vfiprintf_r+0x14e>
 8004fd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d138      	bne.n	8005052 <_vfiprintf_r+0x1aa>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bfb8      	it	lt
 8004fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ff0:	f108 0802 	add.w	r8, r8, #2
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	4d33      	ldr	r5, [pc, #204]	; (80050c4 <_vfiprintf_r+0x21c>)
 8004ff8:	f898 1000 	ldrb.w	r1, [r8]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	4628      	mov	r0, r5
 8005000:	f7fb f8ee 	bl	80001e0 <memchr>
 8005004:	b140      	cbz	r0, 8005018 <_vfiprintf_r+0x170>
 8005006:	2340      	movs	r3, #64	; 0x40
 8005008:	1b40      	subs	r0, r0, r5
 800500a:	fa03 f000 	lsl.w	r0, r3, r0
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	4303      	orrs	r3, r0
 8005012:	f108 0801 	add.w	r8, r8, #1
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	f898 1000 	ldrb.w	r1, [r8]
 800501c:	482a      	ldr	r0, [pc, #168]	; (80050c8 <_vfiprintf_r+0x220>)
 800501e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005022:	2206      	movs	r2, #6
 8005024:	f108 0701 	add.w	r7, r8, #1
 8005028:	f7fb f8da 	bl	80001e0 <memchr>
 800502c:	2800      	cmp	r0, #0
 800502e:	d037      	beq.n	80050a0 <_vfiprintf_r+0x1f8>
 8005030:	4b26      	ldr	r3, [pc, #152]	; (80050cc <_vfiprintf_r+0x224>)
 8005032:	bb1b      	cbnz	r3, 800507c <_vfiprintf_r+0x1d4>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	3307      	adds	r3, #7
 8005038:	f023 0307 	bic.w	r3, r3, #7
 800503c:	3308      	adds	r3, #8
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005042:	444b      	add	r3, r9
 8005044:	9309      	str	r3, [sp, #36]	; 0x24
 8005046:	e750      	b.n	8004eea <_vfiprintf_r+0x42>
 8005048:	fb05 3202 	mla	r2, r5, r2, r3
 800504c:	2001      	movs	r0, #1
 800504e:	4688      	mov	r8, r1
 8005050:	e78a      	b.n	8004f68 <_vfiprintf_r+0xc0>
 8005052:	2300      	movs	r3, #0
 8005054:	f108 0801 	add.w	r8, r8, #1
 8005058:	9305      	str	r3, [sp, #20]
 800505a:	4619      	mov	r1, r3
 800505c:	250a      	movs	r5, #10
 800505e:	4640      	mov	r0, r8
 8005060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005064:	3a30      	subs	r2, #48	; 0x30
 8005066:	2a09      	cmp	r2, #9
 8005068:	d903      	bls.n	8005072 <_vfiprintf_r+0x1ca>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0c3      	beq.n	8004ff6 <_vfiprintf_r+0x14e>
 800506e:	9105      	str	r1, [sp, #20]
 8005070:	e7c1      	b.n	8004ff6 <_vfiprintf_r+0x14e>
 8005072:	fb05 2101 	mla	r1, r5, r1, r2
 8005076:	2301      	movs	r3, #1
 8005078:	4680      	mov	r8, r0
 800507a:	e7f0      	b.n	800505e <_vfiprintf_r+0x1b6>
 800507c:	ab03      	add	r3, sp, #12
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4622      	mov	r2, r4
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <_vfiprintf_r+0x228>)
 8005084:	a904      	add	r1, sp, #16
 8005086:	4630      	mov	r0, r6
 8005088:	f3af 8000 	nop.w
 800508c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005090:	4681      	mov	r9, r0
 8005092:	d1d5      	bne.n	8005040 <_vfiprintf_r+0x198>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	065b      	lsls	r3, r3, #25
 8005098:	f53f af7e 	bmi.w	8004f98 <_vfiprintf_r+0xf0>
 800509c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800509e:	e77d      	b.n	8004f9c <_vfiprintf_r+0xf4>
 80050a0:	ab03      	add	r3, sp, #12
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4622      	mov	r2, r4
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <_vfiprintf_r+0x228>)
 80050a8:	a904      	add	r1, sp, #16
 80050aa:	4630      	mov	r0, r6
 80050ac:	f000 f888 	bl	80051c0 <_printf_i>
 80050b0:	e7ec      	b.n	800508c <_vfiprintf_r+0x1e4>
 80050b2:	bf00      	nop
 80050b4:	08005c4c 	.word	0x08005c4c
 80050b8:	08005c8c 	.word	0x08005c8c
 80050bc:	08005c6c 	.word	0x08005c6c
 80050c0:	08005c2c 	.word	0x08005c2c
 80050c4:	08005c92 	.word	0x08005c92
 80050c8:	08005c96 	.word	0x08005c96
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e83 	.word	0x08004e83

080050d4 <_printf_common>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	4691      	mov	r9, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	688a      	ldr	r2, [r1, #8]
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bfb8      	it	lt
 80050e8:	4613      	movlt	r3, r2
 80050ea:	f8c9 3000 	str.w	r3, [r9]
 80050ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f2:	4606      	mov	r6, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	b112      	cbz	r2, 80050fe <_printf_common+0x2a>
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c9 3000 	str.w	r3, [r9]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005108:	3302      	addmi	r3, #2
 800510a:	f8c9 3000 	strmi.w	r3, [r9]
 800510e:	6825      	ldr	r5, [r4, #0]
 8005110:	f015 0506 	ands.w	r5, r5, #6
 8005114:	d107      	bne.n	8005126 <_printf_common+0x52>
 8005116:	f104 0a19 	add.w	sl, r4, #25
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	f8d9 2000 	ldr.w	r2, [r9]
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	42ab      	cmp	r3, r5
 8005124:	dc28      	bgt.n	8005178 <_printf_common+0xa4>
 8005126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	3300      	adds	r3, #0
 800512e:	bf18      	it	ne
 8005130:	2301      	movne	r3, #1
 8005132:	0692      	lsls	r2, r2, #26
 8005134:	d42d      	bmi.n	8005192 <_printf_common+0xbe>
 8005136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513a:	4639      	mov	r1, r7
 800513c:	4630      	mov	r0, r6
 800513e:	47c0      	blx	r8
 8005140:	3001      	adds	r0, #1
 8005142:	d020      	beq.n	8005186 <_printf_common+0xb2>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	68e5      	ldr	r5, [r4, #12]
 8005148:	f8d9 2000 	ldr.w	r2, [r9]
 800514c:	f003 0306 	and.w	r3, r3, #6
 8005150:	2b04      	cmp	r3, #4
 8005152:	bf08      	it	eq
 8005154:	1aad      	subeq	r5, r5, r2
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	6922      	ldr	r2, [r4, #16]
 800515a:	bf0c      	ite	eq
 800515c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005160:	2500      	movne	r5, #0
 8005162:	4293      	cmp	r3, r2
 8005164:	bfc4      	itt	gt
 8005166:	1a9b      	subgt	r3, r3, r2
 8005168:	18ed      	addgt	r5, r5, r3
 800516a:	f04f 0900 	mov.w	r9, #0
 800516e:	341a      	adds	r4, #26
 8005170:	454d      	cmp	r5, r9
 8005172:	d11a      	bne.n	80051aa <_printf_common+0xd6>
 8005174:	2000      	movs	r0, #0
 8005176:	e008      	b.n	800518a <_printf_common+0xb6>
 8005178:	2301      	movs	r3, #1
 800517a:	4652      	mov	r2, sl
 800517c:	4639      	mov	r1, r7
 800517e:	4630      	mov	r0, r6
 8005180:	47c0      	blx	r8
 8005182:	3001      	adds	r0, #1
 8005184:	d103      	bne.n	800518e <_printf_common+0xba>
 8005186:	f04f 30ff 	mov.w	r0, #4294967295
 800518a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518e:	3501      	adds	r5, #1
 8005190:	e7c3      	b.n	800511a <_printf_common+0x46>
 8005192:	18e1      	adds	r1, r4, r3
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	2030      	movs	r0, #48	; 0x30
 8005198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800519c:	4422      	add	r2, r4
 800519e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051a6:	3302      	adds	r3, #2
 80051a8:	e7c5      	b.n	8005136 <_printf_common+0x62>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4622      	mov	r2, r4
 80051ae:	4639      	mov	r1, r7
 80051b0:	4630      	mov	r0, r6
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0e6      	beq.n	8005186 <_printf_common+0xb2>
 80051b8:	f109 0901 	add.w	r9, r9, #1
 80051bc:	e7d8      	b.n	8005170 <_printf_common+0x9c>
	...

080051c0 <_printf_i>:
 80051c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051c8:	460c      	mov	r4, r1
 80051ca:	7e09      	ldrb	r1, [r1, #24]
 80051cc:	b085      	sub	sp, #20
 80051ce:	296e      	cmp	r1, #110	; 0x6e
 80051d0:	4617      	mov	r7, r2
 80051d2:	4606      	mov	r6, r0
 80051d4:	4698      	mov	r8, r3
 80051d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d8:	f000 80b3 	beq.w	8005342 <_printf_i+0x182>
 80051dc:	d822      	bhi.n	8005224 <_printf_i+0x64>
 80051de:	2963      	cmp	r1, #99	; 0x63
 80051e0:	d036      	beq.n	8005250 <_printf_i+0x90>
 80051e2:	d80a      	bhi.n	80051fa <_printf_i+0x3a>
 80051e4:	2900      	cmp	r1, #0
 80051e6:	f000 80b9 	beq.w	800535c <_printf_i+0x19c>
 80051ea:	2958      	cmp	r1, #88	; 0x58
 80051ec:	f000 8083 	beq.w	80052f6 <_printf_i+0x136>
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051f8:	e032      	b.n	8005260 <_printf_i+0xa0>
 80051fa:	2964      	cmp	r1, #100	; 0x64
 80051fc:	d001      	beq.n	8005202 <_printf_i+0x42>
 80051fe:	2969      	cmp	r1, #105	; 0x69
 8005200:	d1f6      	bne.n	80051f0 <_printf_i+0x30>
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	0605      	lsls	r5, r0, #24
 8005208:	f103 0104 	add.w	r1, r3, #4
 800520c:	d52a      	bpl.n	8005264 <_printf_i+0xa4>
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da03      	bge.n	800521e <_printf_i+0x5e>
 8005216:	222d      	movs	r2, #45	; 0x2d
 8005218:	425b      	negs	r3, r3
 800521a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800521e:	486f      	ldr	r0, [pc, #444]	; (80053dc <_printf_i+0x21c>)
 8005220:	220a      	movs	r2, #10
 8005222:	e039      	b.n	8005298 <_printf_i+0xd8>
 8005224:	2973      	cmp	r1, #115	; 0x73
 8005226:	f000 809d 	beq.w	8005364 <_printf_i+0x1a4>
 800522a:	d808      	bhi.n	800523e <_printf_i+0x7e>
 800522c:	296f      	cmp	r1, #111	; 0x6f
 800522e:	d020      	beq.n	8005272 <_printf_i+0xb2>
 8005230:	2970      	cmp	r1, #112	; 0x70
 8005232:	d1dd      	bne.n	80051f0 <_printf_i+0x30>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	f043 0320 	orr.w	r3, r3, #32
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	e003      	b.n	8005246 <_printf_i+0x86>
 800523e:	2975      	cmp	r1, #117	; 0x75
 8005240:	d017      	beq.n	8005272 <_printf_i+0xb2>
 8005242:	2978      	cmp	r1, #120	; 0x78
 8005244:	d1d4      	bne.n	80051f0 <_printf_i+0x30>
 8005246:	2378      	movs	r3, #120	; 0x78
 8005248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524c:	4864      	ldr	r0, [pc, #400]	; (80053e0 <_printf_i+0x220>)
 800524e:	e055      	b.n	80052fc <_printf_i+0x13c>
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	1d19      	adds	r1, r3, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6011      	str	r1, [r2, #0]
 8005258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005260:	2301      	movs	r3, #1
 8005262:	e08c      	b.n	800537e <_printf_i+0x1be>
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6011      	str	r1, [r2, #0]
 8005268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800526c:	bf18      	it	ne
 800526e:	b21b      	sxthne	r3, r3
 8005270:	e7cf      	b.n	8005212 <_printf_i+0x52>
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	1d18      	adds	r0, r3, #4
 8005278:	6010      	str	r0, [r2, #0]
 800527a:	0628      	lsls	r0, r5, #24
 800527c:	d501      	bpl.n	8005282 <_printf_i+0xc2>
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	e002      	b.n	8005288 <_printf_i+0xc8>
 8005282:	0668      	lsls	r0, r5, #25
 8005284:	d5fb      	bpl.n	800527e <_printf_i+0xbe>
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	4854      	ldr	r0, [pc, #336]	; (80053dc <_printf_i+0x21c>)
 800528a:	296f      	cmp	r1, #111	; 0x6f
 800528c:	bf14      	ite	ne
 800528e:	220a      	movne	r2, #10
 8005290:	2208      	moveq	r2, #8
 8005292:	2100      	movs	r1, #0
 8005294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005298:	6865      	ldr	r5, [r4, #4]
 800529a:	60a5      	str	r5, [r4, #8]
 800529c:	2d00      	cmp	r5, #0
 800529e:	f2c0 8095 	blt.w	80053cc <_printf_i+0x20c>
 80052a2:	6821      	ldr	r1, [r4, #0]
 80052a4:	f021 0104 	bic.w	r1, r1, #4
 80052a8:	6021      	str	r1, [r4, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d13d      	bne.n	800532a <_printf_i+0x16a>
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f040 808e 	bne.w	80053d0 <_printf_i+0x210>
 80052b4:	4665      	mov	r5, ip
 80052b6:	2a08      	cmp	r2, #8
 80052b8:	d10b      	bne.n	80052d2 <_printf_i+0x112>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	07db      	lsls	r3, r3, #31
 80052be:	d508      	bpl.n	80052d2 <_printf_i+0x112>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	bfde      	ittt	le
 80052c8:	2330      	movle	r3, #48	; 0x30
 80052ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052d2:	ebac 0305 	sub.w	r3, ip, r5
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	f8cd 8000 	str.w	r8, [sp]
 80052dc:	463b      	mov	r3, r7
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff fef6 	bl	80050d4 <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14d      	bne.n	8005388 <_printf_i+0x1c8>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	b005      	add	sp, #20
 80052f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052f6:	4839      	ldr	r0, [pc, #228]	; (80053dc <_printf_i+0x21c>)
 80052f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052fc:	6813      	ldr	r3, [r2, #0]
 80052fe:	6821      	ldr	r1, [r4, #0]
 8005300:	1d1d      	adds	r5, r3, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6015      	str	r5, [r2, #0]
 8005306:	060a      	lsls	r2, r1, #24
 8005308:	d50b      	bpl.n	8005322 <_printf_i+0x162>
 800530a:	07ca      	lsls	r2, r1, #31
 800530c:	bf44      	itt	mi
 800530e:	f041 0120 	orrmi.w	r1, r1, #32
 8005312:	6021      	strmi	r1, [r4, #0]
 8005314:	b91b      	cbnz	r3, 800531e <_printf_i+0x15e>
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	f022 0220 	bic.w	r2, r2, #32
 800531c:	6022      	str	r2, [r4, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	e7b7      	b.n	8005292 <_printf_i+0xd2>
 8005322:	064d      	lsls	r5, r1, #25
 8005324:	bf48      	it	mi
 8005326:	b29b      	uxthmi	r3, r3
 8005328:	e7ef      	b.n	800530a <_printf_i+0x14a>
 800532a:	4665      	mov	r5, ip
 800532c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005330:	fb02 3311 	mls	r3, r2, r1, r3
 8005334:	5cc3      	ldrb	r3, [r0, r3]
 8005336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800533a:	460b      	mov	r3, r1
 800533c:	2900      	cmp	r1, #0
 800533e:	d1f5      	bne.n	800532c <_printf_i+0x16c>
 8005340:	e7b9      	b.n	80052b6 <_printf_i+0xf6>
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	6961      	ldr	r1, [r4, #20]
 8005348:	1d18      	adds	r0, r3, #4
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	0628      	lsls	r0, r5, #24
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	d501      	bpl.n	8005356 <_printf_i+0x196>
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	e002      	b.n	800535c <_printf_i+0x19c>
 8005356:	066a      	lsls	r2, r5, #25
 8005358:	d5fb      	bpl.n	8005352 <_printf_i+0x192>
 800535a:	8019      	strh	r1, [r3, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	4665      	mov	r5, ip
 8005362:	e7b9      	b.n	80052d8 <_printf_i+0x118>
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	1d19      	adds	r1, r3, #4
 8005368:	6011      	str	r1, [r2, #0]
 800536a:	681d      	ldr	r5, [r3, #0]
 800536c:	6862      	ldr	r2, [r4, #4]
 800536e:	2100      	movs	r1, #0
 8005370:	4628      	mov	r0, r5
 8005372:	f7fa ff35 	bl	80001e0 <memchr>
 8005376:	b108      	cbz	r0, 800537c <_printf_i+0x1bc>
 8005378:	1b40      	subs	r0, r0, r5
 800537a:	6060      	str	r0, [r4, #4]
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	2300      	movs	r3, #0
 8005382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005386:	e7a7      	b.n	80052d8 <_printf_i+0x118>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	462a      	mov	r2, r5
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	47c0      	blx	r8
 8005392:	3001      	adds	r0, #1
 8005394:	d0aa      	beq.n	80052ec <_printf_i+0x12c>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	079b      	lsls	r3, r3, #30
 800539a:	d413      	bmi.n	80053c4 <_printf_i+0x204>
 800539c:	68e0      	ldr	r0, [r4, #12]
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	4298      	cmp	r0, r3
 80053a2:	bfb8      	it	lt
 80053a4:	4618      	movlt	r0, r3
 80053a6:	e7a3      	b.n	80052f0 <_printf_i+0x130>
 80053a8:	2301      	movs	r3, #1
 80053aa:	464a      	mov	r2, r9
 80053ac:	4639      	mov	r1, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d09a      	beq.n	80052ec <_printf_i+0x12c>
 80053b6:	3501      	adds	r5, #1
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	9a03      	ldr	r2, [sp, #12]
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	42ab      	cmp	r3, r5
 80053c0:	dcf2      	bgt.n	80053a8 <_printf_i+0x1e8>
 80053c2:	e7eb      	b.n	800539c <_printf_i+0x1dc>
 80053c4:	2500      	movs	r5, #0
 80053c6:	f104 0919 	add.w	r9, r4, #25
 80053ca:	e7f5      	b.n	80053b8 <_printf_i+0x1f8>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ac      	bne.n	800532a <_printf_i+0x16a>
 80053d0:	7803      	ldrb	r3, [r0, #0]
 80053d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053da:	e76c      	b.n	80052b6 <_printf_i+0xf6>
 80053dc:	08005c9d 	.word	0x08005c9d
 80053e0:	08005cae 	.word	0x08005cae

080053e4 <_sbrk_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4c06      	ldr	r4, [pc, #24]	; (8005400 <_sbrk_r+0x1c>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4605      	mov	r5, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	f7fc fac2 	bl	8001978 <_sbrk>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_sbrk_r+0x1a>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_sbrk_r+0x1a>
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000d4c 	.word	0x20000d4c

08005404 <__sread>:
 8005404:	b510      	push	{r4, lr}
 8005406:	460c      	mov	r4, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	f000 fad6 	bl	80059bc <_read_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	bfab      	itete	ge
 8005414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005416:	89a3      	ldrhlt	r3, [r4, #12]
 8005418:	181b      	addge	r3, r3, r0
 800541a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800541e:	bfac      	ite	ge
 8005420:	6563      	strge	r3, [r4, #84]	; 0x54
 8005422:	81a3      	strhlt	r3, [r4, #12]
 8005424:	bd10      	pop	{r4, pc}

08005426 <__swrite>:
 8005426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	461f      	mov	r7, r3
 800542c:	898b      	ldrh	r3, [r1, #12]
 800542e:	05db      	lsls	r3, r3, #23
 8005430:	4605      	mov	r5, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4616      	mov	r6, r2
 8005436:	d505      	bpl.n	8005444 <__swrite+0x1e>
 8005438:	2302      	movs	r3, #2
 800543a:	2200      	movs	r2, #0
 800543c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005440:	f000 f9b6 	bl	80057b0 <_lseek_r>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	4632      	mov	r2, r6
 8005452:	463b      	mov	r3, r7
 8005454:	4628      	mov	r0, r5
 8005456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	f000 b869 	b.w	8005530 <_write_r>

0800545e <__sseek>:
 800545e:	b510      	push	{r4, lr}
 8005460:	460c      	mov	r4, r1
 8005462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005466:	f000 f9a3 	bl	80057b0 <_lseek_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	bf15      	itete	ne
 8005470:	6560      	strne	r0, [r4, #84]	; 0x54
 8005472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800547a:	81a3      	strheq	r3, [r4, #12]
 800547c:	bf18      	it	ne
 800547e:	81a3      	strhne	r3, [r4, #12]
 8005480:	bd10      	pop	{r4, pc}

08005482 <__sclose>:
 8005482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005486:	f000 b8d3 	b.w	8005630 <_close_r>
	...

0800548c <__swbuf_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	460e      	mov	r6, r1
 8005490:	4614      	mov	r4, r2
 8005492:	4605      	mov	r5, r0
 8005494:	b118      	cbz	r0, 800549e <__swbuf_r+0x12>
 8005496:	6983      	ldr	r3, [r0, #24]
 8005498:	b90b      	cbnz	r3, 800549e <__swbuf_r+0x12>
 800549a:	f7ff faa5 	bl	80049e8 <__sinit>
 800549e:	4b21      	ldr	r3, [pc, #132]	; (8005524 <__swbuf_r+0x98>)
 80054a0:	429c      	cmp	r4, r3
 80054a2:	d12a      	bne.n	80054fa <__swbuf_r+0x6e>
 80054a4:	686c      	ldr	r4, [r5, #4]
 80054a6:	69a3      	ldr	r3, [r4, #24]
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	071a      	lsls	r2, r3, #28
 80054ae:	d52e      	bpl.n	800550e <__swbuf_r+0x82>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b363      	cbz	r3, 800550e <__swbuf_r+0x82>
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	1ac0      	subs	r0, r0, r3
 80054ba:	6963      	ldr	r3, [r4, #20]
 80054bc:	b2f6      	uxtb	r6, r6
 80054be:	4283      	cmp	r3, r0
 80054c0:	4637      	mov	r7, r6
 80054c2:	dc04      	bgt.n	80054ce <__swbuf_r+0x42>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f948 	bl	800575c <_fflush_r>
 80054cc:	bb28      	cbnz	r0, 800551a <__swbuf_r+0x8e>
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60a3      	str	r3, [r4, #8]
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	6022      	str	r2, [r4, #0]
 80054da:	701e      	strb	r6, [r3, #0]
 80054dc:	6963      	ldr	r3, [r4, #20]
 80054de:	3001      	adds	r0, #1
 80054e0:	4283      	cmp	r3, r0
 80054e2:	d004      	beq.n	80054ee <__swbuf_r+0x62>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	07db      	lsls	r3, r3, #31
 80054e8:	d519      	bpl.n	800551e <__swbuf_r+0x92>
 80054ea:	2e0a      	cmp	r6, #10
 80054ec:	d117      	bne.n	800551e <__swbuf_r+0x92>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f933 	bl	800575c <_fflush_r>
 80054f6:	b190      	cbz	r0, 800551e <__swbuf_r+0x92>
 80054f8:	e00f      	b.n	800551a <__swbuf_r+0x8e>
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <__swbuf_r+0x9c>)
 80054fc:	429c      	cmp	r4, r3
 80054fe:	d101      	bne.n	8005504 <__swbuf_r+0x78>
 8005500:	68ac      	ldr	r4, [r5, #8]
 8005502:	e7d0      	b.n	80054a6 <__swbuf_r+0x1a>
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <__swbuf_r+0xa0>)
 8005506:	429c      	cmp	r4, r3
 8005508:	bf08      	it	eq
 800550a:	68ec      	ldreq	r4, [r5, #12]
 800550c:	e7cb      	b.n	80054a6 <__swbuf_r+0x1a>
 800550e:	4621      	mov	r1, r4
 8005510:	4628      	mov	r0, r5
 8005512:	f000 f81f 	bl	8005554 <__swsetup_r>
 8005516:	2800      	cmp	r0, #0
 8005518:	d0cc      	beq.n	80054b4 <__swbuf_r+0x28>
 800551a:	f04f 37ff 	mov.w	r7, #4294967295
 800551e:	4638      	mov	r0, r7
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005522:	bf00      	nop
 8005524:	08005c4c 	.word	0x08005c4c
 8005528:	08005c6c 	.word	0x08005c6c
 800552c:	08005c2c 	.word	0x08005c2c

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4c07      	ldr	r4, [pc, #28]	; (8005550 <_write_r+0x20>)
 8005534:	4605      	mov	r5, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fc f9c9 	bl	80018d6 <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20000d4c 	.word	0x20000d4c

08005554 <__swsetup_r>:
 8005554:	4b32      	ldr	r3, [pc, #200]	; (8005620 <__swsetup_r+0xcc>)
 8005556:	b570      	push	{r4, r5, r6, lr}
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	4606      	mov	r6, r0
 800555c:	460c      	mov	r4, r1
 800555e:	b125      	cbz	r5, 800556a <__swsetup_r+0x16>
 8005560:	69ab      	ldr	r3, [r5, #24]
 8005562:	b913      	cbnz	r3, 800556a <__swsetup_r+0x16>
 8005564:	4628      	mov	r0, r5
 8005566:	f7ff fa3f 	bl	80049e8 <__sinit>
 800556a:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <__swsetup_r+0xd0>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d10f      	bne.n	8005590 <__swsetup_r+0x3c>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005576:	b29a      	uxth	r2, r3
 8005578:	0715      	lsls	r5, r2, #28
 800557a:	d42c      	bmi.n	80055d6 <__swsetup_r+0x82>
 800557c:	06d0      	lsls	r0, r2, #27
 800557e:	d411      	bmi.n	80055a4 <__swsetup_r+0x50>
 8005580:	2209      	movs	r2, #9
 8005582:	6032      	str	r2, [r6, #0]
 8005584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	e03e      	b.n	800560e <__swsetup_r+0xba>
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <__swsetup_r+0xd4>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d101      	bne.n	800559a <__swsetup_r+0x46>
 8005596:	68ac      	ldr	r4, [r5, #8]
 8005598:	e7eb      	b.n	8005572 <__swsetup_r+0x1e>
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <__swsetup_r+0xd8>)
 800559c:	429c      	cmp	r4, r3
 800559e:	bf08      	it	eq
 80055a0:	68ec      	ldreq	r4, [r5, #12]
 80055a2:	e7e6      	b.n	8005572 <__swsetup_r+0x1e>
 80055a4:	0751      	lsls	r1, r2, #29
 80055a6:	d512      	bpl.n	80055ce <__swsetup_r+0x7a>
 80055a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055aa:	b141      	cbz	r1, 80055be <__swsetup_r+0x6a>
 80055ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <__swsetup_r+0x66>
 80055b4:	4630      	mov	r0, r6
 80055b6:	f000 f98d 	bl	80058d4 <_free_r>
 80055ba:	2300      	movs	r3, #0
 80055bc:	6363      	str	r3, [r4, #52]	; 0x34
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b94b      	cbnz	r3, 80055ee <__swsetup_r+0x9a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d003      	beq.n	80055ee <__swsetup_r+0x9a>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f917 	bl	800581c <__smakebuf_r>
 80055ee:	89a2      	ldrh	r2, [r4, #12]
 80055f0:	f012 0301 	ands.w	r3, r2, #1
 80055f4:	d00c      	beq.n	8005610 <__swsetup_r+0xbc>
 80055f6:	2300      	movs	r3, #0
 80055f8:	60a3      	str	r3, [r4, #8]
 80055fa:	6963      	ldr	r3, [r4, #20]
 80055fc:	425b      	negs	r3, r3
 80055fe:	61a3      	str	r3, [r4, #24]
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	b953      	cbnz	r3, 800561a <__swsetup_r+0xc6>
 8005604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005608:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800560c:	d1ba      	bne.n	8005584 <__swsetup_r+0x30>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	0792      	lsls	r2, r2, #30
 8005612:	bf58      	it	pl
 8005614:	6963      	ldrpl	r3, [r4, #20]
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	e7f2      	b.n	8005600 <__swsetup_r+0xac>
 800561a:	2000      	movs	r0, #0
 800561c:	e7f7      	b.n	800560e <__swsetup_r+0xba>
 800561e:	bf00      	nop
 8005620:	2000000c 	.word	0x2000000c
 8005624:	08005c4c 	.word	0x08005c4c
 8005628:	08005c6c 	.word	0x08005c6c
 800562c:	08005c2c 	.word	0x08005c2c

08005630 <_close_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4c06      	ldr	r4, [pc, #24]	; (800564c <_close_r+0x1c>)
 8005634:	2300      	movs	r3, #0
 8005636:	4605      	mov	r5, r0
 8005638:	4608      	mov	r0, r1
 800563a:	6023      	str	r3, [r4, #0]
 800563c:	f7fc f967 	bl	800190e <_close>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_close_r+0x1a>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	b103      	cbz	r3, 800564a <_close_r+0x1a>
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	20000d4c 	.word	0x20000d4c

08005650 <__sflush_r>:
 8005650:	898a      	ldrh	r2, [r1, #12]
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	0710      	lsls	r0, r2, #28
 800565a:	460c      	mov	r4, r1
 800565c:	d458      	bmi.n	8005710 <__sflush_r+0xc0>
 800565e:	684b      	ldr	r3, [r1, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dc05      	bgt.n	8005670 <__sflush_r+0x20>
 8005664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	dc02      	bgt.n	8005670 <__sflush_r+0x20>
 800566a:	2000      	movs	r0, #0
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005672:	2e00      	cmp	r6, #0
 8005674:	d0f9      	beq.n	800566a <__sflush_r+0x1a>
 8005676:	2300      	movs	r3, #0
 8005678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800567c:	682f      	ldr	r7, [r5, #0]
 800567e:	6a21      	ldr	r1, [r4, #32]
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	d032      	beq.n	80056ea <__sflush_r+0x9a>
 8005684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	075a      	lsls	r2, r3, #29
 800568a:	d505      	bpl.n	8005698 <__sflush_r+0x48>
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	1ac0      	subs	r0, r0, r3
 8005690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005692:	b10b      	cbz	r3, 8005698 <__sflush_r+0x48>
 8005694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005696:	1ac0      	subs	r0, r0, r3
 8005698:	2300      	movs	r3, #0
 800569a:	4602      	mov	r2, r0
 800569c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569e:	6a21      	ldr	r1, [r4, #32]
 80056a0:	4628      	mov	r0, r5
 80056a2:	47b0      	blx	r6
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	89a3      	ldrh	r3, [r4, #12]
 80056a8:	d106      	bne.n	80056b8 <__sflush_r+0x68>
 80056aa:	6829      	ldr	r1, [r5, #0]
 80056ac:	291d      	cmp	r1, #29
 80056ae:	d848      	bhi.n	8005742 <__sflush_r+0xf2>
 80056b0:	4a29      	ldr	r2, [pc, #164]	; (8005758 <__sflush_r+0x108>)
 80056b2:	40ca      	lsrs	r2, r1
 80056b4:	07d6      	lsls	r6, r2, #31
 80056b6:	d544      	bpl.n	8005742 <__sflush_r+0xf2>
 80056b8:	2200      	movs	r2, #0
 80056ba:	6062      	str	r2, [r4, #4]
 80056bc:	04d9      	lsls	r1, r3, #19
 80056be:	6922      	ldr	r2, [r4, #16]
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	d504      	bpl.n	80056ce <__sflush_r+0x7e>
 80056c4:	1c42      	adds	r2, r0, #1
 80056c6:	d101      	bne.n	80056cc <__sflush_r+0x7c>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b903      	cbnz	r3, 80056ce <__sflush_r+0x7e>
 80056cc:	6560      	str	r0, [r4, #84]	; 0x54
 80056ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d0:	602f      	str	r7, [r5, #0]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d0c9      	beq.n	800566a <__sflush_r+0x1a>
 80056d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056da:	4299      	cmp	r1, r3
 80056dc:	d002      	beq.n	80056e4 <__sflush_r+0x94>
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 f8f8 	bl	80058d4 <_free_r>
 80056e4:	2000      	movs	r0, #0
 80056e6:	6360      	str	r0, [r4, #52]	; 0x34
 80056e8:	e7c0      	b.n	800566c <__sflush_r+0x1c>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b0      	blx	r6
 80056f0:	1c41      	adds	r1, r0, #1
 80056f2:	d1c8      	bne.n	8005686 <__sflush_r+0x36>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c5      	beq.n	8005686 <__sflush_r+0x36>
 80056fa:	2b1d      	cmp	r3, #29
 80056fc:	d001      	beq.n	8005702 <__sflush_r+0xb2>
 80056fe:	2b16      	cmp	r3, #22
 8005700:	d101      	bne.n	8005706 <__sflush_r+0xb6>
 8005702:	602f      	str	r7, [r5, #0]
 8005704:	e7b1      	b.n	800566a <__sflush_r+0x1a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	e7ad      	b.n	800566c <__sflush_r+0x1c>
 8005710:	690f      	ldr	r7, [r1, #16]
 8005712:	2f00      	cmp	r7, #0
 8005714:	d0a9      	beq.n	800566a <__sflush_r+0x1a>
 8005716:	0793      	lsls	r3, r2, #30
 8005718:	680e      	ldr	r6, [r1, #0]
 800571a:	bf08      	it	eq
 800571c:	694b      	ldreq	r3, [r1, #20]
 800571e:	600f      	str	r7, [r1, #0]
 8005720:	bf18      	it	ne
 8005722:	2300      	movne	r3, #0
 8005724:	eba6 0807 	sub.w	r8, r6, r7
 8005728:	608b      	str	r3, [r1, #8]
 800572a:	f1b8 0f00 	cmp.w	r8, #0
 800572e:	dd9c      	ble.n	800566a <__sflush_r+0x1a>
 8005730:	4643      	mov	r3, r8
 8005732:	463a      	mov	r2, r7
 8005734:	6a21      	ldr	r1, [r4, #32]
 8005736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005738:	4628      	mov	r0, r5
 800573a:	47b0      	blx	r6
 800573c:	2800      	cmp	r0, #0
 800573e:	dc06      	bgt.n	800574e <__sflush_r+0xfe>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	e78e      	b.n	800566c <__sflush_r+0x1c>
 800574e:	4407      	add	r7, r0
 8005750:	eba8 0800 	sub.w	r8, r8, r0
 8005754:	e7e9      	b.n	800572a <__sflush_r+0xda>
 8005756:	bf00      	nop
 8005758:	20400001 	.word	0x20400001

0800575c <_fflush_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b1db      	cbz	r3, 800579e <_fflush_r+0x42>
 8005766:	b118      	cbz	r0, 8005770 <_fflush_r+0x14>
 8005768:	6983      	ldr	r3, [r0, #24]
 800576a:	b90b      	cbnz	r3, 8005770 <_fflush_r+0x14>
 800576c:	f7ff f93c 	bl	80049e8 <__sinit>
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <_fflush_r+0x48>)
 8005772:	429c      	cmp	r4, r3
 8005774:	d109      	bne.n	800578a <_fflush_r+0x2e>
 8005776:	686c      	ldr	r4, [r5, #4]
 8005778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577c:	b17b      	cbz	r3, 800579e <_fflush_r+0x42>
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005786:	f7ff bf63 	b.w	8005650 <__sflush_r>
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <_fflush_r+0x4c>)
 800578c:	429c      	cmp	r4, r3
 800578e:	d101      	bne.n	8005794 <_fflush_r+0x38>
 8005790:	68ac      	ldr	r4, [r5, #8]
 8005792:	e7f1      	b.n	8005778 <_fflush_r+0x1c>
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <_fflush_r+0x50>)
 8005796:	429c      	cmp	r4, r3
 8005798:	bf08      	it	eq
 800579a:	68ec      	ldreq	r4, [r5, #12]
 800579c:	e7ec      	b.n	8005778 <_fflush_r+0x1c>
 800579e:	2000      	movs	r0, #0
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	08005c4c 	.word	0x08005c4c
 80057a8:	08005c6c 	.word	0x08005c6c
 80057ac:	08005c2c 	.word	0x08005c2c

080057b0 <_lseek_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4c07      	ldr	r4, [pc, #28]	; (80057d0 <_lseek_r+0x20>)
 80057b4:	4605      	mov	r5, r0
 80057b6:	4608      	mov	r0, r1
 80057b8:	4611      	mov	r1, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	6022      	str	r2, [r4, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fc f8cc 	bl	800195c <_lseek>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_lseek_r+0x1e>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_lseek_r+0x1e>
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20000d4c 	.word	0x20000d4c

080057d4 <__swhatbuf_r>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	460e      	mov	r6, r1
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	2900      	cmp	r1, #0
 80057de:	b096      	sub	sp, #88	; 0x58
 80057e0:	4614      	mov	r4, r2
 80057e2:	461d      	mov	r5, r3
 80057e4:	da07      	bge.n	80057f6 <__swhatbuf_r+0x22>
 80057e6:	2300      	movs	r3, #0
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	89b3      	ldrh	r3, [r6, #12]
 80057ec:	061a      	lsls	r2, r3, #24
 80057ee:	d410      	bmi.n	8005812 <__swhatbuf_r+0x3e>
 80057f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f4:	e00e      	b.n	8005814 <__swhatbuf_r+0x40>
 80057f6:	466a      	mov	r2, sp
 80057f8:	f000 f8f2 	bl	80059e0 <_fstat_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	dbf2      	blt.n	80057e6 <__swhatbuf_r+0x12>
 8005800:	9a01      	ldr	r2, [sp, #4]
 8005802:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005806:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800580a:	425a      	negs	r2, r3
 800580c:	415a      	adcs	r2, r3
 800580e:	602a      	str	r2, [r5, #0]
 8005810:	e7ee      	b.n	80057f0 <__swhatbuf_r+0x1c>
 8005812:	2340      	movs	r3, #64	; 0x40
 8005814:	2000      	movs	r0, #0
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	b016      	add	sp, #88	; 0x58
 800581a:	bd70      	pop	{r4, r5, r6, pc}

0800581c <__smakebuf_r>:
 800581c:	898b      	ldrh	r3, [r1, #12]
 800581e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005820:	079d      	lsls	r5, r3, #30
 8005822:	4606      	mov	r6, r0
 8005824:	460c      	mov	r4, r1
 8005826:	d507      	bpl.n	8005838 <__smakebuf_r+0x1c>
 8005828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	2301      	movs	r3, #1
 8005832:	6163      	str	r3, [r4, #20]
 8005834:	b002      	add	sp, #8
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	ab01      	add	r3, sp, #4
 800583a:	466a      	mov	r2, sp
 800583c:	f7ff ffca 	bl	80057d4 <__swhatbuf_r>
 8005840:	9900      	ldr	r1, [sp, #0]
 8005842:	4605      	mov	r5, r0
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff f959 	bl	8004afc <_malloc_r>
 800584a:	b948      	cbnz	r0, 8005860 <__smakebuf_r+0x44>
 800584c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005850:	059a      	lsls	r2, r3, #22
 8005852:	d4ef      	bmi.n	8005834 <__smakebuf_r+0x18>
 8005854:	f023 0303 	bic.w	r3, r3, #3
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	e7e3      	b.n	8005828 <__smakebuf_r+0xc>
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <__smakebuf_r+0x7c>)
 8005862:	62b3      	str	r3, [r6, #40]	; 0x28
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	6020      	str	r0, [r4, #0]
 8005868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586c:	81a3      	strh	r3, [r4, #12]
 800586e:	9b00      	ldr	r3, [sp, #0]
 8005870:	6163      	str	r3, [r4, #20]
 8005872:	9b01      	ldr	r3, [sp, #4]
 8005874:	6120      	str	r0, [r4, #16]
 8005876:	b15b      	cbz	r3, 8005890 <__smakebuf_r+0x74>
 8005878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800587c:	4630      	mov	r0, r6
 800587e:	f000 f8c1 	bl	8005a04 <_isatty_r>
 8005882:	b128      	cbz	r0, 8005890 <__smakebuf_r+0x74>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	431d      	orrs	r5, r3
 8005894:	81a5      	strh	r5, [r4, #12]
 8005896:	e7cd      	b.n	8005834 <__smakebuf_r+0x18>
 8005898:	080049b1 	.word	0x080049b1

0800589c <memmove>:
 800589c:	4288      	cmp	r0, r1
 800589e:	b510      	push	{r4, lr}
 80058a0:	eb01 0302 	add.w	r3, r1, r2
 80058a4:	d807      	bhi.n	80058b6 <memmove+0x1a>
 80058a6:	1e42      	subs	r2, r0, #1
 80058a8:	4299      	cmp	r1, r3
 80058aa:	d00a      	beq.n	80058c2 <memmove+0x26>
 80058ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80058b4:	e7f8      	b.n	80058a8 <memmove+0xc>
 80058b6:	4283      	cmp	r3, r0
 80058b8:	d9f5      	bls.n	80058a6 <memmove+0xa>
 80058ba:	1881      	adds	r1, r0, r2
 80058bc:	1ad2      	subs	r2, r2, r3
 80058be:	42d3      	cmn	r3, r2
 80058c0:	d100      	bne.n	80058c4 <memmove+0x28>
 80058c2:	bd10      	pop	{r4, pc}
 80058c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80058cc:	e7f7      	b.n	80058be <memmove+0x22>

080058ce <__malloc_lock>:
 80058ce:	4770      	bx	lr

080058d0 <__malloc_unlock>:
 80058d0:	4770      	bx	lr
	...

080058d4 <_free_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4605      	mov	r5, r0
 80058d8:	2900      	cmp	r1, #0
 80058da:	d045      	beq.n	8005968 <_free_r+0x94>
 80058dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e0:	1f0c      	subs	r4, r1, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bfb8      	it	lt
 80058e6:	18e4      	addlt	r4, r4, r3
 80058e8:	f7ff fff1 	bl	80058ce <__malloc_lock>
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <_free_r+0x98>)
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	4610      	mov	r0, r2
 80058f2:	b933      	cbnz	r3, 8005902 <_free_r+0x2e>
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	6014      	str	r4, [r2, #0]
 80058f8:	4628      	mov	r0, r5
 80058fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058fe:	f7ff bfe7 	b.w	80058d0 <__malloc_unlock>
 8005902:	42a3      	cmp	r3, r4
 8005904:	d90c      	bls.n	8005920 <_free_r+0x4c>
 8005906:	6821      	ldr	r1, [r4, #0]
 8005908:	1862      	adds	r2, r4, r1
 800590a:	4293      	cmp	r3, r2
 800590c:	bf04      	itt	eq
 800590e:	681a      	ldreq	r2, [r3, #0]
 8005910:	685b      	ldreq	r3, [r3, #4]
 8005912:	6063      	str	r3, [r4, #4]
 8005914:	bf04      	itt	eq
 8005916:	1852      	addeq	r2, r2, r1
 8005918:	6022      	streq	r2, [r4, #0]
 800591a:	6004      	str	r4, [r0, #0]
 800591c:	e7ec      	b.n	80058f8 <_free_r+0x24>
 800591e:	4613      	mov	r3, r2
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	b10a      	cbz	r2, 8005928 <_free_r+0x54>
 8005924:	42a2      	cmp	r2, r4
 8005926:	d9fa      	bls.n	800591e <_free_r+0x4a>
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	1858      	adds	r0, r3, r1
 800592c:	42a0      	cmp	r0, r4
 800592e:	d10b      	bne.n	8005948 <_free_r+0x74>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	4401      	add	r1, r0
 8005934:	1858      	adds	r0, r3, r1
 8005936:	4282      	cmp	r2, r0
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	d1dd      	bne.n	80058f8 <_free_r+0x24>
 800593c:	6810      	ldr	r0, [r2, #0]
 800593e:	6852      	ldr	r2, [r2, #4]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	4401      	add	r1, r0
 8005944:	6019      	str	r1, [r3, #0]
 8005946:	e7d7      	b.n	80058f8 <_free_r+0x24>
 8005948:	d902      	bls.n	8005950 <_free_r+0x7c>
 800594a:	230c      	movs	r3, #12
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	e7d3      	b.n	80058f8 <_free_r+0x24>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	1821      	adds	r1, r4, r0
 8005954:	428a      	cmp	r2, r1
 8005956:	bf04      	itt	eq
 8005958:	6811      	ldreq	r1, [r2, #0]
 800595a:	6852      	ldreq	r2, [r2, #4]
 800595c:	6062      	str	r2, [r4, #4]
 800595e:	bf04      	itt	eq
 8005960:	1809      	addeq	r1, r1, r0
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	605c      	str	r4, [r3, #4]
 8005966:	e7c7      	b.n	80058f8 <_free_r+0x24>
 8005968:	bd38      	pop	{r3, r4, r5, pc}
 800596a:	bf00      	nop
 800596c:	20000c08 	.word	0x20000c08

08005970 <_realloc_r>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	4607      	mov	r7, r0
 8005974:	4614      	mov	r4, r2
 8005976:	460e      	mov	r6, r1
 8005978:	b921      	cbnz	r1, 8005984 <_realloc_r+0x14>
 800597a:	4611      	mov	r1, r2
 800597c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005980:	f7ff b8bc 	b.w	8004afc <_malloc_r>
 8005984:	b922      	cbnz	r2, 8005990 <_realloc_r+0x20>
 8005986:	f7ff ffa5 	bl	80058d4 <_free_r>
 800598a:	4625      	mov	r5, r4
 800598c:	4628      	mov	r0, r5
 800598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005990:	f000 f848 	bl	8005a24 <_malloc_usable_size_r>
 8005994:	42a0      	cmp	r0, r4
 8005996:	d20f      	bcs.n	80059b8 <_realloc_r+0x48>
 8005998:	4621      	mov	r1, r4
 800599a:	4638      	mov	r0, r7
 800599c:	f7ff f8ae 	bl	8004afc <_malloc_r>
 80059a0:	4605      	mov	r5, r0
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d0f2      	beq.n	800598c <_realloc_r+0x1c>
 80059a6:	4631      	mov	r1, r6
 80059a8:	4622      	mov	r2, r4
 80059aa:	f7fe ff43 	bl	8004834 <memcpy>
 80059ae:	4631      	mov	r1, r6
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff ff8f 	bl	80058d4 <_free_r>
 80059b6:	e7e9      	b.n	800598c <_realloc_r+0x1c>
 80059b8:	4635      	mov	r5, r6
 80059ba:	e7e7      	b.n	800598c <_realloc_r+0x1c>

080059bc <_read_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4c07      	ldr	r4, [pc, #28]	; (80059dc <_read_r+0x20>)
 80059c0:	4605      	mov	r5, r0
 80059c2:	4608      	mov	r0, r1
 80059c4:	4611      	mov	r1, r2
 80059c6:	2200      	movs	r2, #0
 80059c8:	6022      	str	r2, [r4, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f7fb ff66 	bl	800189c <_read>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_read_r+0x1e>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	b103      	cbz	r3, 80059da <_read_r+0x1e>
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	20000d4c 	.word	0x20000d4c

080059e0 <_fstat_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4c07      	ldr	r4, [pc, #28]	; (8005a00 <_fstat_r+0x20>)
 80059e4:	2300      	movs	r3, #0
 80059e6:	4605      	mov	r5, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	4611      	mov	r1, r2
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	f7fb ff9a 	bl	8001926 <_fstat>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d102      	bne.n	80059fc <_fstat_r+0x1c>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	b103      	cbz	r3, 80059fc <_fstat_r+0x1c>
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	bf00      	nop
 8005a00:	20000d4c 	.word	0x20000d4c

08005a04 <_isatty_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4c06      	ldr	r4, [pc, #24]	; (8005a20 <_isatty_r+0x1c>)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	f7fb ff99 	bl	8001946 <_isatty>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_isatty_r+0x1a>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_isatty_r+0x1a>
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	20000d4c 	.word	0x20000d4c

08005a24 <_malloc_usable_size_r>:
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f18      	subs	r0, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfbc      	itt	lt
 8005a2e:	580b      	ldrlt	r3, [r1, r0]
 8005a30:	18c0      	addlt	r0, r0, r3
 8005a32:	4770      	bx	lr

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
