
Senior Design Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a19c  0800a19c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a4  0800a1a4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  0800a23c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800a23c  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020148  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c4c  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001658  00000000  00000000  00043e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  000454b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b888  00000000  00000000  00046950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015e98  00000000  00000000  000721d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010328e  00000000  00000000  00088070  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018b2fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  0018b37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0fc 	.word	0x0800a0fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a0fc 	.word	0x0800a0fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fde5 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f845 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa0b 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f959 	bl	8000848 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000596:	f000 f997 	bl	80008c8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f9d5 	bl	8000948 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800059e:	f008 fe59 	bl	8009254 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80005a2:	f000 f8db 	bl	800075c <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Test: Set GPIO pin high
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f002 fb12 	bl	8002bd8 <HAL_GPIO_WritePin>

    // Get ADC value
    HAL_ADC_Start(&hadc1);
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <main+0x8c>)
 80005b6:	f001 f9a3 	bl	8001900 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ba:	f04f 31ff 	mov.w	r1, #4294967295
 80005be:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x8c>)
 80005c0:	f001 fa58 	bl	8001a74 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 80005c4:	4811      	ldr	r0, [pc, #68]	; (800060c <main+0x8c>)
 80005c6:	f001 fb25 	bl	8001c14 <HAL_ADC_GetValue>
 80005ca:	4603      	mov	r3, r0
 80005cc:	81fb      	strh	r3, [r7, #14]

    // Test: Set GPIO pin low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f002 fafe 	bl	8002bd8 <HAL_GPIO_WritePin>

    // Convert to string and print
    sprintf(msg, "%hu\r\n", raw);
 80005dc:	89fa      	ldrh	r2, [r7, #14]
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	490b      	ldr	r1, [pc, #44]	; (8000610 <main+0x90>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f009 fa3c 	bl	8009a60 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdf0 	bl	80001d0 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <main+0x94>)
 80005fc:	f005 fc50 	bl	8005ea0 <HAL_UART_Transmit>

    // Pretend we have to do something else for a while
    HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fe23 	bl	800124c <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000606:	f008 fe4b 	bl	80092a0 <MX_USB_HOST_Process>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800060a:	e7cc      	b.n	80005a6 <main+0x26>
 800060c:	20000158 	.word	0x20000158
 8000610:	0800a114 	.word	0x0800a114
 8000614:	200001bc 	.word	0x200001bc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f009 f95a 	bl	80098e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 f94c 	bl	80098e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f004 f8ae 	bl	80047a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <SystemClock_Config+0x140>)
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	4a41      	ldr	r2, [pc, #260]	; (8000758 <SystemClock_Config+0x140>)
 8000654:	f023 0318 	bic.w	r3, r3, #24
 8000658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800065c:	2314      	movs	r3, #20
 800065e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000680:	2301      	movs	r3, #1
 8000682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800068c:	2314      	movs	r3, #20
 800068e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 f901 	bl	80048b0 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006b4:	f000 fb66 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 fccd 	bl	800507c <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006e8:	f000 fb4c 	bl	8000d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006ec:	f246 03c2 	movw	r3, #24770	; 0x60c2
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000702:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000704:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000708:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800070a:	2301      	movs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000712:	2318      	movs	r3, #24
 8000714:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000716:	2307      	movs	r3, #7
 8000718:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000722:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000726:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f004 feaa 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000736:	f000 fb25 	bl	8000d84 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073e:	f004 f851 	bl	80047e4 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000748:	f000 fb1c 	bl	8000d84 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800074c:	f005 f980 	bl	8005a50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000750:	bf00      	nop
 8000752:	37e0      	adds	r7, #224	; 0xe0
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_ADC1_Init+0xe0>)
 8000780:	4a2f      	ldr	r2, [pc, #188]	; (8000840 <MX_ADC1_Init+0xe4>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_ADC1_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC1_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC1_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC1_Init+0xe0>)
 800079e:	2204      	movs	r2, #4
 80007a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC1_Init+0xe0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC1_Init+0xe0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC1_Init+0xe0>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC1_Init+0xe0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC1_Init+0xe0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_ADC1_Init+0xe0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_ADC1_Init+0xe0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	4817      	ldr	r0, [pc, #92]	; (800083c <MX_ADC1_Init+0xe0>)
 80007e0:	f000 ff3a 	bl	8001658 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ea:	f000 facb 	bl	8000d84 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <MX_ADC1_Init+0xe0>)
 80007fa:	f001 fe87 	bl	800250c <HAL_ADCEx_MultiModeConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000804:	f000 fabe 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_ADC1_Init+0xe8>)
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080c:	2306      	movs	r3, #6
 800080e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000814:	237f      	movs	r3, #127	; 0x7f
 8000816:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000818:	2304      	movs	r3, #4
 800081a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC1_Init+0xe0>)
 8000826:	f001 fa03 	bl	8001c30 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000830:	f000 faa8 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000158 	.word	0x20000158
 8000840:	50040000 	.word	0x50040000
 8000844:	14f00020 	.word	0x14f00020

08000848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <MX_I2C1_Init+0x74>)
 8000884:	f003 fe69 	bl	800455a <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fa79 	bl	8000d84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <MX_I2C1_Init+0x74>)
 8000896:	f003 feef 	bl	8004678 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 fa70 	bl	8000d84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_I2C1_Init+0x74>)
 80008a8:	f003 ff31 	bl	800470e <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fa67 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000c0 	.word	0x200000c0
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00404c74 	.word	0x00404c74

080008c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C2_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C2_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C2_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C2_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C2_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C2_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C2_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_I2C2_Init+0x74>)
 8000904:	f003 fe29 	bl	800455a <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fa39 	bl	8000d84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_I2C2_Init+0x74>)
 8000916:	f003 feaf 	bl	8004678 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fa30 	bl	8000d84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2C2_Init+0x74>)
 8000928:	f003 fef1 	bl	800470e <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fa27 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000010c 	.word	0x2000010c
 8000940:	40005800 	.word	0x40005800
 8000944:	00404c74 	.word	0x00404c74

08000948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART2_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800098c:	f005 fa3a 	bl	8005e04 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f9f5 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001bc 	.word	0x200001bc
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	4bb8      	ldr	r3, [pc, #736]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4ab7      	ldr	r2, [pc, #732]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4bb5      	ldr	r3, [pc, #724]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4bb2      	ldr	r3, [pc, #712]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4ab1      	ldr	r2, [pc, #708]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4baf      	ldr	r3, [pc, #700]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4bac      	ldr	r3, [pc, #688]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4aab      	ldr	r2, [pc, #684]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4ba9      	ldr	r3, [pc, #676]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4ba6      	ldr	r3, [pc, #664]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4aa5      	ldr	r2, [pc, #660]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4ba3      	ldr	r3, [pc, #652]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4ba0      	ldr	r3, [pc, #640]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a9f      	ldr	r2, [pc, #636]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b9d      	ldr	r3, [pc, #628]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b9a      	ldr	r3, [pc, #616]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a99      	ldr	r2, [pc, #612]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b97      	ldr	r3, [pc, #604]	; (8000ca0 <MX_GPIO_Init+0x2f8>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD_R_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2106      	movs	r1, #6
 8000a52:	4894      	ldr	r0, [pc, #592]	; (8000ca4 <MX_GPIO_Init+0x2fc>)
 8000a54:	f002 f8c0 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f240 1101 	movw	r1, #257	; 0x101
 8000a5e:	4892      	ldr	r0, [pc, #584]	; (8000ca8 <MX_GPIO_Init+0x300>)
 8000a60:	f002 f8ba 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	4890      	ldr	r0, [pc, #576]	; (8000cac <MX_GPIO_Init+0x304>)
 8000a6c:	f002 f8b4 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f002 f8ad 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a84:	4889      	ldr	r0, [pc, #548]	; (8000cac <MX_GPIO_Init+0x304>)
 8000a86:	f002 f8a7 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	4888      	ldr	r0, [pc, #544]	; (8000cb0 <MX_GPIO_Init+0x308>)
 8000a90:	f002 f8a2 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a94:	2308      	movs	r3, #8
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4880      	ldr	r0, [pc, #512]	; (8000ca8 <MX_GPIO_Init+0x300>)
 8000aa8:	f001 feee 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin|AUDIO_DIN_Pin;
 8000aac:	23f0      	movs	r3, #240	; 0xf0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000abc:	230d      	movs	r3, #13
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4878      	ldr	r0, [pc, #480]	; (8000ca8 <MX_GPIO_Init+0x300>)
 8000ac8:	f001 fede 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000acc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad2:	4b78      	ldr	r3, [pc, #480]	; (8000cb4 <MX_GPIO_Init+0x30c>)
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4872      	ldr	r0, [pc, #456]	; (8000cac <MX_GPIO_Init+0x304>)
 8000ae2:	f001 fed1 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	486c      	ldr	r0, [pc, #432]	; (8000cac <MX_GPIO_Init+0x304>)
 8000afa:	f001 fec5 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin
                           SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000afe:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8000b02:	61fb      	str	r3, [r7, #28]
                          |SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b10:	230b      	movs	r3, #11
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4864      	ldr	r0, [pc, #400]	; (8000cac <MX_GPIO_Init+0x304>)
 8000b1c:	f001 feb4 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 8000b20:	232e      	movs	r3, #46	; 0x2e
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f001 fea7 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <MX_GPIO_Init+0x30c>)
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f001 fe9a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin
                           SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000b54:	f248 33c0 	movw	r3, #33728	; 0x83c0
 8000b58:	61fb      	str	r3, [r7, #28]
                          |SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b66:	230b      	movs	r3, #11
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f001 fe88 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG20_Pin SEG3_Pin SEG19_Pin
                           SEG4_Pin SEG11_Pin SEG12_Pin COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG20_Pin|SEG3_Pin|SEG19_Pin
 8000b78:	f24f 2331 	movw	r3, #62001	; 0xf231
 8000b7c:	61fb      	str	r3, [r7, #28]
                          |SEG4_Pin|SEG11_Pin|SEG12_Pin|COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4843      	ldr	r0, [pc, #268]	; (8000ca4 <MX_GPIO_Init+0x2fc>)
 8000b96:	f001 fe77 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <MX_GPIO_Init+0x2fc>)
 8000bb2:	f001 fe69 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <MX_GPIO_Init+0x2fc>)
 8000bce:	f001 fe5b 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <MX_GPIO_Init+0x300>)
 8000bec:	f001 fe4c 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c02:	230d      	movs	r3, #13
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0x300>)
 8000c0e:	f001 fe3b 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8000c24:	230f      	movs	r3, #15
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481e      	ldr	r0, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0x300>)
 8000c30:	f001 fe2a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000c34:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c38:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000c46:	230b      	movs	r3, #11
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0x308>)
 8000c52:	f001 fe19 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000c56:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_GPIO_Init+0x304>)
 8000c70:	f001 fe0a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f001 fdfa 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000c94:	2305      	movs	r3, #5
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x30c>)
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	e00c      	b.n	8000cb8 <MX_GPIO_Init+0x310>
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48001000 	.word	0x48001000
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	10120000 	.word	0x10120000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482c      	ldr	r0, [pc, #176]	; (8000d74 <MX_GPIO_Init+0x3cc>)
 8000cc4:	f001 fde0 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_SCK_Pin PD3 MEMS_MOSI_Pin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|GPIO_PIN_3|MEMS_MOSI_Pin;
 8000cc8:	231a      	movs	r3, #26
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4824      	ldr	r0, [pc, #144]	; (8000d74 <MX_GPIO_Init+0x3cc>)
 8000ce4:	f001 fdd0 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481d      	ldr	r0, [pc, #116]	; (8000d74 <MX_GPIO_Init+0x3cc>)
 8000d00:	f001 fdc2 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d04:	2308      	movs	r3, #8
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_GPIO_Init+0x3d0>)
 8000d18:	f001 fdb6 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_GPIO_Init+0x3d4>)
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_GPIO_Init+0x3d0>)
 8000d32:	f001 fda9 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_GPIO_Init+0x3d8>)
 8000d4e:	f001 fd9b 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_GPIO_Init+0x3d4>)
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_GPIO_Init+0x3d8>)
 8000d66:	f001 fd8f 	bl	8002888 <HAL_GPIO_Init>

}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	; 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	10120000 	.word	0x10120000
 8000d80:	48001000 	.word	0x48001000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <Error_Handler+0x6>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x44>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_ADC_MspInit+0x74>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d124      	bne.n	8000e40 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_ADC_MspInit+0x78>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_ADC_MspInit+0x78>)
 8000dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_ADC_MspInit+0x78>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_ADC_MspInit+0x78>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_ADC_MspInit+0x78>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_ADC_MspInit+0x78>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f001 fd24 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	50040000 	.word	0x50040000
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <HAL_I2C_MspInit+0xd8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d128      	bne.n	8000ec4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4822      	ldr	r0, [pc, #136]	; (8000f30 <HAL_I2C_MspInit+0xe0>)
 8000ea6:	f001 fcef 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ec2:	e02d      	b.n	8000f20 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_I2C_MspInit+0xe4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d128      	bne.n	8000f20 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000ee6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eec:	2312      	movs	r3, #18
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_I2C_MspInit+0xe0>)
 8000f04:	f001 fcc0 	bl	8002888 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f12:	6593      	str	r3, [r2, #88]	; 0x58
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_I2C_MspInit+0xdc>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	40005800 	.word	0x40005800

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d127      	bne.n	8000faa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8a:	2360      	movs	r3, #96	; 0x60
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0x84>)
 8000fa6:	f001 fc6f 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000c00 	.word	0x48000c00

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f8fe 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <OTG_FS_IRQHandler+0x10>)
 800101a:	f002 f881 	bl	8003120 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000618 	.word	0x20000618

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f008 fc08 	bl	800986c <__errno>
 800105c:	4602      	mov	r2, r0
 800105e:	230c      	movs	r3, #12
 8001060:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20018000 	.word	0x20018000
 8001088:	00000400 	.word	0x00000400
 800108c:	200000ac 	.word	0x200000ac
 8001090:	200008e0 	.word	0x200008e0

08001094 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <SystemInit+0x64>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <SystemInit+0x64>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <SystemInit+0x68>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <SystemInit+0x68>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <SystemInit+0x68>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <SystemInit+0x68>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <SystemInit+0x68>)
 80010c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <SystemInit+0x68>)
 80010cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <SystemInit+0x68>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <SystemInit+0x68>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <SystemInit+0x68>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SystemInit+0x64>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ea:	609a      	str	r2, [r3, #8]
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	40021000 	.word	0x40021000

08001100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff ffc6 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001108:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800110a:	e003      	b.n	8001114 <LoopCopyDataInit>

0800110c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800110e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001110:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001112:	3104      	adds	r1, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001114:	480a      	ldr	r0, [pc, #40]	; (8001140 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001118:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800111a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800111c:	d3f6      	bcc.n	800110c <CopyDataInit>
	ldr	r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001120:	e002      	b.n	8001128 <LoopFillZerobss>

08001122 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001122:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001124:	f842 3b04 	str.w	r3, [r2], #4

08001128 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LoopForever+0x16>)
	cmp	r2, r3
 800112a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800112c:	d3f9      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f008 fba3 	bl	8009878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001132:	f7ff fa25 	bl	8000580 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800113c:	0800a1ac 	.word	0x0800a1ac
	ldr	r0, =_sdata
 8001140:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001144:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8001148:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 800114c:	200008e0 	.word	0x200008e0

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_Init+0x3c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_Init+0x3c>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f001 fb4a 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f80f 	bl	8001194 <HAL_InitTick>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	e001      	b.n	8001186 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001182:	f7ff fe03 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001186:	79fb      	ldrb	r3, [r7, #7]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d023      	beq.n	80011f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x70>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fb55 	bl	800286e <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d809      	bhi.n	80011e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f001 fb1f 	bl	800281a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e001      	b.n	80011f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	20000000 	.word	0x20000000
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	2000023c 	.word	0x2000023c

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000023c 	.word	0x2000023c

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_Delay+0x40>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000008 	.word	0x20000008

08001290 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3360      	adds	r3, #96	; 0x60
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <LL_ADC_SetOffset+0x44>)
 800131a:	4013      	ands	r3, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	4313      	orrs	r3, r2
 8001328:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	03fff000 	.word	0x03fff000

08001340 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3360      	adds	r3, #96	; 0x60
 800134e:	461a      	mov	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3360      	adds	r3, #96	; 0x60
 800137c:	461a      	mov	r2, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	431a      	orrs	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	461a      	mov	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	4413      	add	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	211f      	movs	r1, #31
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0e9b      	lsrs	r3, r3, #26
 8001400:	f003 011f 	and.w	r1, r3, #31
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3314      	adds	r3, #20
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	0e5b      	lsrs	r3, r3, #25
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0d1b      	lsrs	r3, r3, #20
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2107      	movs	r1, #7
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	0d1b      	lsrs	r3, r3, #20
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0318 	and.w	r3, r3, #24
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800149c:	40d9      	lsrs	r1, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	400b      	ands	r3, r1
 80014a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a6:	431a      	orrs	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	0007ffff 	.word	0x0007ffff

080014c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6093      	str	r3, [r2, #8]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800152c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001530:	d101      	bne.n	8001536 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001558:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001580:	d101      	bne.n	8001586 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <LL_ADC_IsEnabled+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_ADC_IsEnabled+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f6:	f043 0204 	orr.w	r2, r3, #4
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b04      	cmp	r3, #4
 800161c:	d101      	bne.n	8001622 <LL_ADC_REG_IsConversionOngoing+0x18>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b08      	cmp	r3, #8
 8001642:	d101      	bne.n	8001648 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e134      	b.n	80018dc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fba7 	bl	8000dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff3f 	bl	800151c <LL_ADC_IsDeepPowerDownEnabled>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d004      	beq.n	80016ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff25 	bl	80014f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff5a 	bl	800156c <LL_ADC_IsInternalRegulatorEnabled>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d113      	bne.n	80016e6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff3e 	bl	8001544 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016c8:	4b86      	ldr	r3, [pc, #536]	; (80018e4 <HAL_ADC_Init+0x28c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	099b      	lsrs	r3, r3, #6
 80016ce:	4a86      	ldr	r2, [pc, #536]	; (80018e8 <HAL_ADC_Init+0x290>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff3e 	bl	800156c <LL_ADC_IsInternalRegulatorEnabled>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10d      	bne.n	8001712 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f043 0210 	orr.w	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff77 	bl	800160a <LL_ADC_REG_IsConversionOngoing>
 800171c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80cf 	bne.w	80018ca <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80cb 	bne.w	80018ca <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff37 	bl	80015bc <LL_ADC_IsEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001754:	4865      	ldr	r0, [pc, #404]	; (80018ec <HAL_ADC_Init+0x294>)
 8001756:	f7ff ff31 	bl	80015bc <LL_ADC_IsEnabled>
 800175a:	4604      	mov	r4, r0
 800175c:	4864      	ldr	r0, [pc, #400]	; (80018f0 <HAL_ADC_Init+0x298>)
 800175e:	f7ff ff2d 	bl	80015bc <LL_ADC_IsEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	431c      	orrs	r4, r3
 8001766:	4863      	ldr	r0, [pc, #396]	; (80018f4 <HAL_ADC_Init+0x29c>)
 8001768:	f7ff ff28 	bl	80015bc <LL_ADC_IsEnabled>
 800176c:	4603      	mov	r3, r0
 800176e:	4323      	orrs	r3, r4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4619      	mov	r1, r3
 800177a:	485f      	ldr	r0, [pc, #380]	; (80018f8 <HAL_ADC_Init+0x2a0>)
 800177c:	f7ff fd88 	bl	8001290 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e5b      	ldrb	r3, [r3, #25]
 8001784:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800178a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001790:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001796:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d106      	bne.n	80017bc <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	3b01      	subs	r3, #1
 80017b4:	045b      	lsls	r3, r3, #17
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_ADC_Init+0x2a4>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff0a 	bl	800160a <LL_ADC_REG_IsConversionOngoing>
 80017f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff17 	bl	8001630 <LL_ADC_INJ_IsConversionOngoing>
 8001802:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13d      	bne.n	8001886 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d13a      	bne.n	8001886 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001814:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800182c:	f023 0302 	bic.w	r3, r3, #2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	69b9      	ldr	r1, [r7, #24]
 8001836:	430b      	orrs	r3, r1
 8001838:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001840:	2b01      	cmp	r3, #1
 8001842:	d118      	bne.n	8001876 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001860:	4311      	orrs	r1, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001866:	430a      	orrs	r2, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	e007      	b.n	8001886 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10c      	bne.n	80018a8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f023 010f 	bic.w	r1, r3, #15
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
 80018a6:	e007      	b.n	80018b8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 020f 	bic.w	r2, r2, #15
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	f023 0303 	bic.w	r3, r3, #3
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
 80018c8:	e007      	b.n	80018da <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f043 0210 	orr.w	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018da:	7ffb      	ldrb	r3, [r7, #31]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3724      	adds	r7, #36	; 0x24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	053e2d63 	.word	0x053e2d63
 80018ec:	50040000 	.word	0x50040000
 80018f0:	50040100 	.word	0x50040100
 80018f4:	50040200 	.word	0x50040200
 80018f8:	50040300 	.word	0x50040300
 80018fc:	fff0c007 	.word	0xfff0c007

08001900 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001908:	4857      	ldr	r0, [pc, #348]	; (8001a68 <HAL_ADC_Start+0x168>)
 800190a:	f7ff fdd9 	bl	80014c0 <LL_ADC_GetMultimode>
 800190e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe78 	bl	800160a <LL_ADC_REG_IsConversionOngoing>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 809c 	bne.w	8001a5a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADC_Start+0x30>
 800192c:	2302      	movs	r3, #2
 800192e:	e097      	b.n	8001a60 <HAL_ADC_Start+0x160>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fd67 	bl	800240c <ADC_Enable>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f040 8083 	bne.w	8001a50 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a42      	ldr	r2, [pc, #264]	; (8001a6c <HAL_ADC_Start+0x16c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d002      	beq.n	800196e <HAL_ADC_Start+0x6e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e000      	b.n	8001970 <HAL_ADC_Start+0x70>
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <HAL_ADC_Start+0x170>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	4293      	cmp	r3, r2
 8001976:	d002      	beq.n	800197e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001996:	d106      	bne.n	80019a6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f023 0206 	bic.w	r2, r3, #6
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	; 0x58
 80019a4:	e002      	b.n	80019ac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	221c      	movs	r2, #28
 80019b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_ADC_Start+0x16c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d002      	beq.n	80019cc <HAL_ADC_Start+0xcc>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	e000      	b.n	80019ce <HAL_ADC_Start+0xce>
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <HAL_ADC_Start+0x170>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d008      	beq.n	80019e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d002      	beq.n	80019e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d114      	bne.n	8001a12 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fde9 	bl	80015e2 <LL_ADC_REG_StartConversion>
 8001a10:	e025      	b.n	8001a5e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_ADC_Start+0x16c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d002      	beq.n	8001a2e <HAL_ADC_Start+0x12e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_Start+0x130>
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_ADC_Start+0x170>)
 8001a30:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00f      	beq.n	8001a5e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001a4e:	e006      	b.n	8001a5e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a58:	e001      	b.n	8001a5e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	50040300 	.word	0x50040300
 8001a6c:	50040100 	.word	0x50040100
 8001a70:	50040000 	.word	0x50040000

08001a74 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a7e:	4862      	ldr	r0, [pc, #392]	; (8001c08 <HAL_ADC_PollForConversion+0x194>)
 8001a80:	f7ff fd1e 	bl	80014c0 <LL_ADC_GetMultimode>
 8001a84:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d102      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e02a      	b.n	8001aea <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d002      	beq.n	8001aa6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d111      	bne.n	8001aca <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e09d      	b.n	8001c00 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ac8:	e00f      	b.n	8001aea <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001aca:	484f      	ldr	r0, [pc, #316]	; (8001c08 <HAL_ADC_PollForConversion+0x194>)
 8001acc:	f7ff fd06 	bl	80014dc <LL_ADC_GetMultiDMATransfer>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f043 0220 	orr.w	r2, r3, #32
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e08c      	b.n	8001c00 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001aea:	f7ff fba3 	bl	8001234 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001af0:	e01a      	b.n	8001b28 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d016      	beq.n	8001b28 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001afa:	f7ff fb9b 	bl	8001234 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <HAL_ADC_PollForConversion+0x9c>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	f043 0204 	orr.w	r2, r3, #4
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e06b      	b.n	8001c00 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0dd      	beq.n	8001af2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc2b 	bl	80013a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d01c      	beq.n	8001b8c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7e5b      	ldrb	r3, [r3, #25]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d111      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_ADC_PollForConversion+0x198>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d002      	beq.n	8001b9c <HAL_ADC_PollForConversion+0x128>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e000      	b.n	8001b9e <HAL_ADC_PollForConversion+0x12a>
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_ADC_PollForConversion+0x19c>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d008      	beq.n	8001bb8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d002      	beq.n	8001bb8 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	d104      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	e00c      	b.n	8001bdc <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_ADC_PollForConversion+0x198>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d002      	beq.n	8001bd2 <HAL_ADC_PollForConversion+0x15e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	e000      	b.n	8001bd4 <HAL_ADC_PollForConversion+0x160>
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_ADC_PollForConversion+0x19c>)
 8001bd4:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d104      	bne.n	8001bec <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2208      	movs	r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e008      	b.n	8001bfe <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	50040300 	.word	0x50040300
 8001c0c:	50040100 	.word	0x50040100
 8001c10:	50040000 	.word	0x50040000

08001c14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0b6      	sub	sp, #216	; 0xd8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x22>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e3c6      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x7b0>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fcd3 	bl	800160a <LL_ADC_REG_IsConversionOngoing>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 83a7 	bne.w	80023ba <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d824      	bhi.n	8001cbe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	3b02      	subs	r3, #2
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d81b      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x86>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <HAL_ADC_ConfigChannel+0x54>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cad 	.word	0x08001cad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	220c      	movs	r2, #12
 8001c98:	605a      	str	r2, [r3, #4]
          break;
 8001c9a:	e011      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2212      	movs	r2, #18
 8001ca0:	605a      	str	r2, [r3, #4]
          break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2218      	movs	r2, #24
 8001ca8:	605a      	str	r2, [r3, #4]
          break;
 8001caa:	e009      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	605a      	str	r2, [r3, #4]
          break;
 8001cb4:	e004      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2206      	movs	r2, #6
 8001cba:	605a      	str	r2, [r3, #4]
          break;
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001cbe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f7ff fb7b 	bl	80013c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc97 	bl	800160a <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fca3 	bl	8001630 <LL_ADC_INJ_IsConversionOngoing>
 8001cea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 81a6 	bne.w	8002044 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 81a1 	bne.w	8002044 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f7ff fb86 	bl	8001420 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d00a      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d46:	f7ff fad7 	bl	80012f8 <LL_ADC_SetOffset>
 8001d4a:	e17b      	b.n	8002044 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff faf4 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10a      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x148>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fae9 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	e01e      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x186>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fade 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e004      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x19e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	e018      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x1d0>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e004      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff faad 	bl	800136c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2101      	movs	r1, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fa91 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10a      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x20e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fa86 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	e01e      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x24c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fa7b 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	e004      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x264>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	e018      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x296>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ea8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e004      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d106      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa4a 	bl	800136c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fa2e 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x2d4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fa23 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 021f 	and.w	r2, r3, #31
 8001f02:	e01e      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x312>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fa18 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e004      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d105      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x32a>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	e016      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x358>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e004      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d106      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	2102      	movs	r1, #2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f9e9 	bl	800136c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f9cd 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x396>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f9c2 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	e017      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x3c6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2103      	movs	r1, #3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f9b7 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_ADC_ConfigChannel+0x3de>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	e011      	b.n	8002032 <HAL_ADC_ConfigChannel+0x402>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800201c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800201e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e003      	b.n	8002032 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002032:	429a      	cmp	r2, r3
 8002034:	d106      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	2103      	movs	r1, #3
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f994 	bl	800136c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fab7 	bl	80015bc <LL_ADC_IsEnabled>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 813f 	bne.w	80022d4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff fa08 	bl	8001478 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a8e      	ldr	r2, [pc, #568]	; (80022a8 <HAL_ADC_ConfigChannel+0x678>)
 800206e:	4293      	cmp	r3, r2
 8002070:	f040 8130 	bne.w	80022d4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <HAL_ADC_ConfigChannel+0x46c>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	3301      	adds	r3, #1
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b09      	cmp	r3, #9
 8002092:	bf94      	ite	ls
 8002094:	2301      	movls	r3, #1
 8002096:	2300      	movhi	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e019      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x4a0>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e003      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80020b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	bf94      	ite	ls
 80020ca:	2301      	movls	r3, #1
 80020cc:	2300      	movhi	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d079      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x4c0>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	3301      	adds	r3, #1
 80020e8:	069b      	lsls	r3, r3, #26
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	e015      	b.n	800211c <HAL_ADC_ConfigChannel+0x4ec>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002100:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800210c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	069b      	lsls	r3, r3, #26
 8002118:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_ADC_ConfigChannel+0x50c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0e9b      	lsrs	r3, r3, #26
 800212e:	3301      	adds	r3, #1
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	e017      	b.n	800216c <HAL_ADC_ConfigChannel+0x53c>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800214a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	ea42 0103 	orr.w	r1, r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x562>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	051b      	lsls	r3, r3, #20
 8002190:	e018      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x594>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e003      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80021ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	3301      	adds	r3, #1
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c4:	430b      	orrs	r3, r1
 80021c6:	e080      	b.n	80022ca <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x5b4>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	3301      	adds	r3, #1
 80021dc:	069b      	lsls	r3, r3, #26
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	e015      	b.n	8002210 <HAL_ADC_ConfigChannel+0x5e0>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x600>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	3301      	adds	r3, #1
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	e017      	b.n	8002260 <HAL_ADC_ConfigChannel+0x630>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	61fb      	str	r3, [r7, #28]
  return result;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_ADC_ConfigChannel+0x65c>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	3b1e      	subs	r3, #30
 8002284:	051b      	lsls	r3, r3, #20
 8002286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800228a:	e01d      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x698>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	613b      	str	r3, [r7, #16]
  return result;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e005      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x684>
 80022a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f003 021f 	and.w	r2, r3, #31
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	051b      	lsls	r3, r3, #20
 80022c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c8:	430b      	orrs	r3, r1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	6892      	ldr	r2, [r2, #8]
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7ff f8a6 	bl	8001420 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_ADC_ConfigChannel+0x7b8>)
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d079      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e0:	4842      	ldr	r0, [pc, #264]	; (80023ec <HAL_ADC_ConfigChannel+0x7bc>)
 80022e2:	f7fe fffb 	bl	80012dc <LL_ADC_GetCommonPathInternalCh>
 80022e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d12b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d125      	bne.n	800234c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x6e4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d15c      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800231c:	4619      	mov	r1, r3
 800231e:	4833      	ldr	r0, [pc, #204]	; (80023ec <HAL_ADC_ConfigChannel+0x7bc>)
 8002320:	f7fe ffc9 	bl	80012b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_ADC_ConfigChannel+0x7cc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <HAL_ADC_ConfigChannel+0x7d0>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	099a      	lsrs	r2, r3, #6
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3b01      	subs	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800234a:	e040      	b.n	80023ce <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <HAL_ADC_ConfigChannel+0x7d4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d118      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x758>
 8002356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800235a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d112      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a23      	ldr	r2, [pc, #140]	; (80023f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x746>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d12d      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	4619      	mov	r1, r3
 8002380:	481a      	ldr	r0, [pc, #104]	; (80023ec <HAL_ADC_ConfigChannel+0x7bc>)
 8002382:	f7fe ff98 	bl	80012b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002386:	e024      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_ADC_ConfigChannel+0x7d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d120      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11a      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d115      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b0:	4619      	mov	r1, r3
 80023b2:	480e      	ldr	r0, [pc, #56]	; (80023ec <HAL_ADC_ConfigChannel+0x7bc>)
 80023b4:	f7fe ff7f 	bl	80012b6 <LL_ADC_SetCommonPathInternalCh>
 80023b8:	e00c      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0220 	orr.w	r2, r3, #32
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023dc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	37d8      	adds	r7, #216	; 0xd8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	80080000 	.word	0x80080000
 80023ec:	50040300 	.word	0x50040300
 80023f0:	c7520000 	.word	0xc7520000
 80023f4:	50040000 	.word	0x50040000
 80023f8:	50040200 	.word	0x50040200
 80023fc:	20000000 	.word	0x20000000
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	cb840000 	.word	0xcb840000
 8002408:	80000001 	.word	0x80000001

0800240c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff f8cf 	bl	80015bc <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d146      	bne.n	80024b2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <ADC_Enable+0xb0>)
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f043 0210 	orr.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e032      	b.n	80024b4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f89e 	bl	8001594 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002458:	f7fe feec 	bl	8001234 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245e:	e021      	b.n	80024a4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f8a9 	bl	80015bc <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f88d 	bl	8001594 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800247a:	f7fe fedb 	bl	8001234 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d90d      	bls.n	80024a4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0210 	orr.w	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e007      	b.n	80024b4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d1d6      	bne.n	8002460 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	8000003f 	.word	0x8000003f

080024c0 <LL_ADC_IsEnabled>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <LL_ADC_IsEnabled+0x18>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_ADC_IsEnabled+0x1a>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d101      	bne.n	80024fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b09f      	sub	sp, #124	; 0x7c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002526:	2302      	movs	r3, #2
 8002528:	e08f      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800253c:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e001      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e072      	b.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ffbd 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 800256c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffb7 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d154      	bne.n	8002628 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800257e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002580:	2b00      	cmp	r3, #0
 8002582:	d151      	bne.n	8002628 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002586:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02c      	beq.n	80025ea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025a2:	035b      	lsls	r3, r3, #13
 80025a4:	430b      	orrs	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ac:	4829      	ldr	r0, [pc, #164]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80025ae:	f7ff ff87 	bl	80024c0 <LL_ADC_IsEnabled>
 80025b2:	4604      	mov	r4, r0
 80025b4:	4828      	ldr	r0, [pc, #160]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80025b6:	f7ff ff83 	bl	80024c0 <LL_ADC_IsEnabled>
 80025ba:	4603      	mov	r3, r0
 80025bc:	431c      	orrs	r4, r3
 80025be:	4828      	ldr	r0, [pc, #160]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025c0:	f7ff ff7e 	bl	80024c0 <LL_ADC_IsEnabled>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4323      	orrs	r3, r4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d137      	bne.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025d4:	f023 030f 	bic.w	r3, r3, #15
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	6811      	ldr	r1, [r2, #0]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e8:	e028      	b.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f6:	4817      	ldr	r0, [pc, #92]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80025f8:	f7ff ff62 	bl	80024c0 <LL_ADC_IsEnabled>
 80025fc:	4604      	mov	r4, r0
 80025fe:	4816      	ldr	r0, [pc, #88]	; (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002600:	f7ff ff5e 	bl	80024c0 <LL_ADC_IsEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	431c      	orrs	r4, r3
 8002608:	4815      	ldr	r0, [pc, #84]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800260a:	f7ff ff59 	bl	80024c0 <LL_ADC_IsEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	4323      	orrs	r3, r4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d112      	bne.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800261e:	f023 030f 	bic.w	r3, r3, #15
 8002622:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002624:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002626:	e009      	b.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800263a:	e000      	b.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800263c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002646:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800264a:	4618      	mov	r0, r3
 800264c:	377c      	adds	r7, #124	; 0x7c
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop
 8002654:	50040000 	.word	0x50040000
 8002658:	50040100 	.word	0x50040100
 800265c:	50040300 	.word	0x50040300
 8002660:	50040200 	.word	0x50040200

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e17f      	b.n	8002b98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8171 	beq.w	8002b92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d00b      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0201 	and.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b03      	cmp	r3, #3
 800293c:	d118      	bne.n	8002970 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002944:	2201      	movs	r2, #1
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f003 0201 	and.w	r2, r3, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x128>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	d123      	bne.n	80029f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	6939      	ldr	r1, [r7, #16]
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80ac 	beq.w	8002b92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6613      	str	r3, [r2, #96]	; 0x60
 8002a46:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a52:	4a59      	ldr	r2, [pc, #356]	; (8002bb8 <HAL_GPIO_Init+0x330>)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7c:	d025      	beq.n	8002aca <HAL_GPIO_Init+0x242>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <HAL_GPIO_Init+0x23e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <HAL_GPIO_Init+0x338>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d019      	beq.n	8002ac2 <HAL_GPIO_Init+0x23a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	; (8002bc4 <HAL_GPIO_Init+0x33c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_GPIO_Init+0x236>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_GPIO_Init+0x340>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00d      	beq.n	8002aba <HAL_GPIO_Init+0x232>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_GPIO_Init+0x344>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <HAL_GPIO_Init+0x22e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <HAL_GPIO_Init+0x348>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_GPIO_Init+0x22a>
 8002aae:	2306      	movs	r3, #6
 8002ab0:	e00c      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00a      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002aca:	2300      	movs	r3, #0
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002adc:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <HAL_GPIO_Init+0x330>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aea:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b0e:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b38:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b8c:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f47f ae78 	bne.w	8002898 <HAL_GPIO_Init+0x10>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	48000800 	.word	0x48000800
 8002bc4:	48000c00 	.word	0x48000c00
 8002bc8:	48001000 	.word	0x48001000
 8002bcc:	48001400 	.word	0x48001400
 8002bd0:	48001800 	.word	0x48001800
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b08f      	sub	sp, #60	; 0x3c
 8002c0c:	af0a      	add	r7, sp, #40	; 0x28
 8002c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e054      	b.n	8002cc4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f006 fb6b 	bl	8009310 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fe04 	bl	8006866 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	687e      	ldr	r6, [r7, #4]
 8002c66:	466d      	mov	r5, sp
 8002c68:	f106 0410 	add.w	r4, r6, #16
 8002c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c7c:	1d33      	adds	r3, r6, #4
 8002c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c80:	6838      	ldr	r0, [r7, #0]
 8002c82:	f003 fd8d 	bl	80067a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fdfb 	bl	8006888 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	687e      	ldr	r6, [r7, #4]
 8002c9a:	466d      	mov	r5, sp
 8002c9c:	f106 0410 	add.w	r4, r6, #16
 8002ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb0:	1d33      	adds	r3, r6, #4
 8002cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb4:	6838      	ldr	r0, [r7, #0]
 8002cb6:	f003 ff09 	bl	8006acc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ccc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	70fb      	strb	r3, [r7, #3]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	70bb      	strb	r3, [r7, #2]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_HCD_HC_Init+0x28>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e07f      	b.n	8002df4 <HAL_HCD_HC_Init+0x128>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	333d      	adds	r3, #61	; 0x3d
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3338      	adds	r3, #56	; 0x38
 8002d20:	787a      	ldrb	r2, [r7, #1]
 8002d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3340      	adds	r3, #64	; 0x40
 8002d34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3339      	adds	r3, #57	; 0x39
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	333f      	adds	r3, #63	; 0x3f
 8002d5c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	78bb      	ldrb	r3, [r7, #2]
 8002d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	333a      	adds	r3, #58	; 0x3a
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da0a      	bge.n	8002d9c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	333b      	adds	r3, #59	; 0x3b
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e009      	b.n	8002db0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	333b      	adds	r3, #59	; 0x3b
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333c      	adds	r3, #60	; 0x3c
 8002dc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002dc4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	787c      	ldrb	r4, [r7, #1]
 8002dcc:	78ba      	ldrb	r2, [r7, #2]
 8002dce:	78f9      	ldrb	r1, [r7, #3]
 8002dd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4623      	mov	r3, r4
 8002de2:	f003 ffb7 	bl	8006d54 <USB_HC_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_HCD_HC_Halt+0x1e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e00f      	b.n	8002e3a <HAL_HCD_HC_Halt+0x3e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 f995 	bl	800715a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	70fb      	strb	r3, [r7, #3]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70bb      	strb	r3, [r7, #2]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	333b      	adds	r3, #59	; 0x3b
 8002e6e:	78ba      	ldrb	r2, [r7, #2]
 8002e70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	333f      	adds	r3, #63	; 0x3f
 8002e82:	787a      	ldrb	r2, [r7, #1]
 8002e84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e86:	7c3b      	ldrb	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3342      	adds	r3, #66	; 0x42
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	333d      	adds	r3, #61	; 0x3d
 8002eb0:	7f3a      	ldrb	r2, [r7, #28]
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e009      	b.n	8002eca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3342      	adds	r3, #66	; 0x42
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002eca:	787b      	ldrb	r3, [r7, #1]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	f200 80d6 	bhi.w	800307e <HAL_HCD_HC_SubmitRequest+0x23a>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08003069 	.word	0x08003069
 8002ee0:	08002f55 	.word	0x08002f55
 8002ee4:	08002fdf 	.word	0x08002fdf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ee8:	7c3b      	ldrb	r3, [r7, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 80c9 	bne.w	8003082 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002ef0:	78bb      	ldrb	r3, [r7, #2]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 80c5 	bne.w	8003082 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002ef8:	8b3b      	ldrh	r3, [r7, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3351      	adds	r3, #81	; 0x51
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	3351      	adds	r3, #81	; 0x51
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3342      	adds	r3, #66	; 0x42
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f3c:	e0a1      	b.n	8003082 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3342      	adds	r3, #66	; 0x42
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]
      break;
 8002f52:	e096      	b.n	8003082 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f54:	78bb      	ldrb	r3, [r7, #2]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d120      	bne.n	8002f9c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	3351      	adds	r3, #81	; 0x51
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3342      	adds	r3, #66	; 0x42
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f84:	e07e      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	3342      	adds	r3, #66	; 0x42
 8002f96:	2202      	movs	r2, #2
 8002f98:	701a      	strb	r2, [r3, #0]
      break;
 8002f9a:	e073      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	3350      	adds	r3, #80	; 0x50
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3342      	adds	r3, #66	; 0x42
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
      break;
 8002fc6:	e05d      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3342      	adds	r3, #66	; 0x42
 8002fd8:	2202      	movs	r2, #2
 8002fda:	701a      	strb	r2, [r3, #0]
      break;
 8002fdc:	e052      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002fde:	78bb      	ldrb	r3, [r7, #2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d120      	bne.n	8003026 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3351      	adds	r3, #81	; 0x51
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	3342      	adds	r3, #66	; 0x42
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800300e:	e039      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3342      	adds	r3, #66	; 0x42
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]
      break;
 8003024:	e02e      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	3350      	adds	r3, #80	; 0x50
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	3342      	adds	r3, #66	; 0x42
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
      break;
 8003050:	e018      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	3342      	adds	r3, #66	; 0x42
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
      break;
 8003066:	e00d      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	440b      	add	r3, r1
 8003076:	3342      	adds	r3, #66	; 0x42
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
      break;
 800307c:	e002      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003082:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	3344      	adds	r3, #68	; 0x44
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	8b39      	ldrh	r1, [r7, #24]
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4403      	add	r3, r0
 80030a8:	3348      	adds	r3, #72	; 0x48
 80030aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	335c      	adds	r3, #92	; 0x5c
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	334c      	adds	r3, #76	; 0x4c
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	3339      	adds	r3, #57	; 0x39
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	335d      	adds	r3, #93	; 0x5d
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	3338      	adds	r3, #56	; 0x38
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f003 ff11 	bl	8006f38 <USB_HC_StartXfer>
 8003116:	4603      	mov	r3, r0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fc85 	bl	8006a46 <USB_GetMode>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 80ef 	bne.w	8003322 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fc69 	bl	8006a20 <USB_ReadInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80e5 	beq.w	8003320 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fc60 	bl	8006a20 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316a:	d104      	bne.n	8003176 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003174:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fc50 	bl	8006a20 <USB_ReadInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318a:	d104      	bne.n	8003196 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003194:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f003 fc40 	bl	8006a20 <USB_ReadInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031aa:	d104      	bne.n	80031b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fc30 	bl	8006a20 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d103      	bne.n	80031d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2202      	movs	r2, #2
 80031d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 fc22 	bl	8006a20 <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e6:	d115      	bne.n	8003214 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f006 f906 	bl	8009414 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fcda 	bl	8006bc8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fc01 	bl	8006a20 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d102      	bne.n	8003230 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 f922 	bl	8004474 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fbf3 	bl	8006a20 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d106      	bne.n	8003252 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f006 f8c9 	bl	80093dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2208      	movs	r2, #8
 8003250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fbe2 	bl	8006a20 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003266:	d138      	bne.n	80032da <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 ff63 	bl	8007138 <USB_HC_ReadInterrupt>
 8003272:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e025      	b.n	80032c6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d018      	beq.n	80032c0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a4:	d106      	bne.n	80032b4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f8cf 	bl	8003450 <HCD_HC_IN_IRQHandler>
 80032b2:	e005      	b.n	80032c0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fcd9 	bl	8003c72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3d4      	bcc.n	800327a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fb9e 	bl	8006a20 <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d101      	bne.n	80032f2 <HAL_HCD_IRQHandler+0x1d2>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_HCD_IRQHandler+0x1d4>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d014      	beq.n	8003322 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0210 	bic.w	r2, r2, #16
 8003306:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f001 f807 	bl	800431c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0210 	orr.w	r2, r2, #16
 800331c:	619a      	str	r2, [r3, #24]
 800331e:	e000      	b.n	8003322 <HAL_HCD_IRQHandler+0x202>
      return;
 8003320:	bf00      	nop
    }
  }
}
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_HCD_Start+0x16>
 800333a:	2302      	movs	r3, #2
 800333c:	e013      	b.n	8003366 <HAL_HCD_Start+0x3e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fa7a 	bl	8006844 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fc9a 	bl	8006c90 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_HCD_Stop+0x16>
 8003380:	2302      	movs	r3, #2
 8003382:	e00d      	b.n	80033a0 <HAL_HCD_Stop+0x32>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f003 ffe1 	bl	8007358 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 fc41 	bl	8006c3c <USB_ResetPort>
 80033ba:	4603      	mov	r3, r0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	440b      	add	r3, r1
 80033de:	335c      	adds	r3, #92	; 0x5c
 80033e0:	781b      	ldrb	r3, [r3, #0]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	334c      	adds	r3, #76	; 0x4c
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f003 fc83 	bl	8006d30 <USB_GetCurrentFrame>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fc5e 	bl	8006d02 <USB_GetHostSpeed>
 8003446:	4603      	mov	r3, r0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d119      	bne.n	80034b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	2304      	movs	r3, #4
 8003490:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4413      	add	r3, r2
 800349a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	0151      	lsls	r1, r2, #5
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	440a      	add	r2, r1
 80034a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	60d3      	str	r3, [r2, #12]
 80034b2:	e0ce      	b.n	8003652 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d12c      	bne.n	8003526 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	335d      	adds	r3, #93	; 0x5d
 80034f0:	2207      	movs	r2, #7
 80034f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	440a      	add	r2, r1
 800350a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f003 fe1b 	bl	800715a <USB_HC_Halt>
 8003524:	e095      	b.n	8003652 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d109      	bne.n	8003550 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	2320      	movs	r3, #32
 800354c:	6093      	str	r3, [r2, #8]
 800354e:	e080      	b.n	8003652 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b08      	cmp	r3, #8
 8003564:	d134      	bne.n	80035d0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	440a      	add	r2, r1
 800357c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	335d      	adds	r3, #93	; 0x5d
 8003596:	2205      	movs	r2, #5
 8003598:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a6:	461a      	mov	r2, r3
 80035a8:	2310      	movs	r3, #16
 80035aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	2308      	movs	r3, #8
 80035bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fdc6 	bl	800715a <USB_HC_Halt>
 80035ce:	e040      	b.n	8003652 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d134      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fda1 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2310      	movs	r3, #16
 8003628:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	440b      	add	r3, r1
 8003638:	335d      	adds	r3, #93	; 0x5d
 800363a:	2208      	movs	r2, #8
 800363c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003650:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d122      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f003 fd60 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036ae:	e2dc      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f040 80dd 	bne.w	8003882 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	335d      	adds	r3, #93	; 0x5d
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	3358      	adds	r3, #88	; 0x58
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	461a      	mov	r2, r3
 80036fe:	2301      	movs	r3, #1
 8003700:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	333f      	adds	r3, #63	; 0x3f
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	333f      	adds	r3, #63	; 0x3f
 8003728:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800372a:	2b02      	cmp	r3, #2
 800372c:	d121      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	0151      	lsls	r1, r2, #5
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	440a      	add	r2, r1
 8003744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003748:	f043 0302 	orr.w	r3, r3, #2
 800374c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 fcfe 	bl	800715a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	461a      	mov	r2, r3
 800376c:	2310      	movs	r3, #16
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	e070      	b.n	8003854 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	440b      	add	r3, r1
 8003780:	333f      	adds	r3, #63	; 0x3f
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d12a      	bne.n	80037de <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	440a      	add	r2, r1
 800379e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	440b      	add	r3, r1
 80037b6:	335c      	adds	r3, #92	; 0x5c
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	b2d8      	uxtb	r0, r3
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4601      	mov	r1, r0
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f005 fe2a 	bl	8009430 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037dc:	e03a      	b.n	8003854 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	333f      	adds	r3, #63	; 0x3f
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d12f      	bne.n	8003854 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	335c      	adds	r3, #92	; 0x5c
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	3350      	adds	r3, #80	; 0x50
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	f083 0301 	eor.w	r3, r3, #1
 800381e:	b2d8      	uxtb	r0, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	3350      	adds	r3, #80	; 0x50
 8003830:	4602      	mov	r2, r0
 8003832:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	b2d8      	uxtb	r0, r3
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	335c      	adds	r3, #92	; 0x5c
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4601      	mov	r1, r0
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f005 fdee 	bl	8009430 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3350      	adds	r3, #80	; 0x50
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	f083 0301 	eor.w	r3, r3, #1
 800386a:	b2d8      	uxtb	r0, r3
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	3350      	adds	r3, #80	; 0x50
 800387c:	4602      	mov	r2, r0
 800387e:	701a      	strb	r2, [r3, #0]
}
 8003880:	e1f3      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	f040 811a 	bne.w	8003ace <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	0151      	lsls	r1, r2, #5
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	440a      	add	r2, r1
 80038b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b4:	f023 0302 	bic.w	r3, r3, #2
 80038b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	335d      	adds	r3, #93	; 0x5d
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10a      	bne.n	80038e6 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e0d9      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	440b      	add	r3, r1
 80038f4:	335d      	adds	r3, #93	; 0x5d
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d10a      	bne.n	8003912 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	440b      	add	r3, r1
 800390a:	335c      	adds	r3, #92	; 0x5c
 800390c:	2205      	movs	r2, #5
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e0c3      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	440b      	add	r3, r1
 8003920:	335d      	adds	r3, #93	; 0x5d
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b06      	cmp	r3, #6
 8003926:	d00a      	beq.n	800393e <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	335d      	adds	r3, #93	; 0x5d
 8003938:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800393a:	2b08      	cmp	r3, #8
 800393c:	d156      	bne.n	80039ec <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	3358      	adds	r3, #88	; 0x58
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1c59      	adds	r1, r3, #1
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4403      	add	r3, r0
 8003960:	3358      	adds	r3, #88	; 0x58
 8003962:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	3358      	adds	r3, #88	; 0x58
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d914      	bls.n	80039a4 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3358      	adds	r3, #88	; 0x58
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	335c      	adds	r3, #92	; 0x5c
 800399e:	2204      	movs	r2, #4
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e009      	b.n	80039b8 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	335c      	adds	r3, #92	; 0x5c
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e056      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	440b      	add	r3, r1
 80039fa:	335d      	adds	r3, #93	; 0x5d
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d123      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	335c      	adds	r3, #92	; 0x5c
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a2c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a34:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e027      	b.n	8003a9a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	335d      	adds	r3, #93	; 0x5d
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b07      	cmp	r3, #7
 8003a5e:	d11c      	bne.n	8003a9a <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3358      	adds	r3, #88	; 0x58
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4403      	add	r3, r0
 8003a82:	3358      	adds	r3, #88	; 0x58
 8003a84:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	335c      	adds	r3, #92	; 0x5c
 8003a96:	2204      	movs	r2, #4
 8003a98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b2d8      	uxtb	r0, r3
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	440b      	add	r3, r1
 8003abe:	335c      	adds	r3, #92	; 0x5c
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f005 fcb2 	bl	8009430 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003acc:	e0cd      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d13e      	bne.n	8003b62 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	440b      	add	r3, r1
 8003b12:	3358      	adds	r3, #88	; 0x58
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4403      	add	r3, r0
 8003b26:	3358      	adds	r3, #88	; 0x58
 8003b28:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	335d      	adds	r3, #93	; 0x5d
 8003b3a:	2206      	movs	r2, #6
 8003b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fb06 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	6093      	str	r3, [r2, #8]
}
 8003b60:	e083      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d178      	bne.n	8003c6a <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	333f      	adds	r3, #63	; 0x3f
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d122      	bne.n	8003bd4 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3358      	adds	r3, #88	; 0x58
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fac4 	bl	800715a <USB_HC_Halt>
 8003bd2:	e041      	b.n	8003c58 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	440b      	add	r3, r1
 8003be2:	333f      	adds	r3, #63	; 0x3f
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	440b      	add	r3, r1
 8003bf8:	333f      	adds	r3, #63	; 0x3f
 8003bfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d12b      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3358      	adds	r3, #88	; 0x58
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	335d      	adds	r3, #93	; 0x5d
 8003c24:	2203      	movs	r2, #3
 8003c26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 fa81 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2310      	movs	r3, #16
 8003c68:	6093      	str	r3, [r2, #8]
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d119      	bne.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cce:	f043 0302 	orr.w	r3, r3, #2
 8003cd2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd4:	e31e      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d141      	bne.n	8003d70 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	333d      	adds	r3, #61	; 0x3d
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 82ff 	bne.w	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	333d      	adds	r3, #61	; 0x3d
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	335c      	adds	r3, #92	; 0x5c
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f003 f9f6 	bl	800715a <USB_HC_Halt>
}
 8003d6e:	e2d1      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d13f      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	335d      	adds	r3, #93	; 0x5d
 8003d96:	2204      	movs	r2, #4
 8003d98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	333d      	adds	r3, #61	; 0x3d
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3358      	adds	r3, #88	; 0x58
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 f9b4 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2340      	movs	r3, #64	; 0x40
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	e286      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d122      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 f986 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e60:	6093      	str	r3, [r2, #8]
}
 8003e62:	e257      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d135      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	3358      	adds	r3, #88	; 0x58
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 f94e 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	335d      	adds	r3, #93	; 0x5d
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	e216      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d12b      	bne.n	8003f54 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f003 f90e 	bl	800715a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	335d      	adds	r3, #93	; 0x5d
 8003f4e:	2205      	movs	r2, #5
 8003f50:	701a      	strb	r2, [r3, #0]
}
 8003f52:	e1df      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d135      	bne.n	8003fd6 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	3358      	adds	r3, #88	; 0x58
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	335d      	adds	r3, #93	; 0x5d
 8003f8e:	2203      	movs	r2, #3
 8003f90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 f8cc 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	6093      	str	r3, [r2, #8]
}
 8003fd4:	e19e      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d12b      	bne.n	8004044 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	0151      	lsls	r1, r2, #5
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	440a      	add	r2, r1
 8004002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f003 f89f 	bl	800715a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	335d      	adds	r3, #93	; 0x5d
 800402c:	2206      	movs	r2, #6
 800402e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	6093      	str	r3, [r2, #8]
}
 8004042:	e167      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d135      	bne.n	80040c8 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f003 f867 	bl	800715a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	2310      	movs	r3, #16
 800409c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	461a      	mov	r2, r3
 80040ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	335d      	adds	r3, #93	; 0x5d
 80040c2:	2208      	movs	r2, #8
 80040c4:	701a      	strb	r2, [r3, #0]
}
 80040c6:	e125      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	f040 811a 	bne.w	8004314 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040fa:	f023 0302 	bic.w	r3, r3, #2
 80040fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	335d      	adds	r3, #93	; 0x5d
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d137      	bne.n	8004186 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	335c      	adds	r3, #92	; 0x5c
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	333f      	adds	r3, #63	; 0x3f
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d00b      	beq.n	8004158 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	333f      	adds	r3, #63	; 0x3f
 8004150:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004152:	2b03      	cmp	r3, #3
 8004154:	f040 80c5 	bne.w	80042e2 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3351      	adds	r3, #81	; 0x51
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	f083 0301 	eor.w	r3, r3, #1
 800416e:	b2d8      	uxtb	r0, r3
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3351      	adds	r3, #81	; 0x51
 8004180:	4602      	mov	r2, r0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e0ad      	b.n	80042e2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	335d      	adds	r3, #93	; 0x5d
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d10a      	bne.n	80041b2 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	440b      	add	r3, r1
 80041aa:	335c      	adds	r3, #92	; 0x5c
 80041ac:	2202      	movs	r2, #2
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e097      	b.n	80042e2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	440b      	add	r3, r1
 80041c0:	335d      	adds	r3, #93	; 0x5d
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d10a      	bne.n	80041de <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	335c      	adds	r3, #92	; 0x5c
 80041d8:	2202      	movs	r2, #2
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e081      	b.n	80042e2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	440b      	add	r3, r1
 80041ec:	335d      	adds	r3, #93	; 0x5d
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10a      	bne.n	800420a <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	335c      	adds	r3, #92	; 0x5c
 8004204:	2205      	movs	r2, #5
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	e06b      	b.n	80042e2 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	335d      	adds	r3, #93	; 0x5d
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b06      	cmp	r3, #6
 800421e:	d00a      	beq.n	8004236 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	335d      	adds	r3, #93	; 0x5d
 8004230:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004232:	2b08      	cmp	r3, #8
 8004234:	d155      	bne.n	80042e2 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	440b      	add	r3, r1
 8004244:	3358      	adds	r3, #88	; 0x58
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1c59      	adds	r1, r3, #1
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4403      	add	r3, r0
 8004258:	3358      	adds	r3, #88	; 0x58
 800425a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	3358      	adds	r3, #88	; 0x58
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b03      	cmp	r3, #3
 8004270:	d914      	bls.n	800429c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3358      	adds	r3, #88	; 0x58
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	335c      	adds	r3, #92	; 0x5c
 8004296:	2204      	movs	r2, #4
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e009      	b.n	80042b0 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	440b      	add	r3, r1
 80042aa:	335c      	adds	r3, #92	; 0x5c
 80042ac:	2202      	movs	r2, #2
 80042ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	461a      	mov	r2, r3
 80042f0:	2302      	movs	r3, #2
 80042f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	b2d8      	uxtb	r0, r3
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	440b      	add	r3, r1
 8004306:	335c      	adds	r3, #92	; 0x5c
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	4601      	mov	r1, r0
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f005 f88e 	bl	8009430 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004314:	bf00      	nop
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	0c5b      	lsrs	r3, r3, #17
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004350:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d003      	beq.n	8004360 <HCD_RXQLVL_IRQHandler+0x44>
 8004358:	2b05      	cmp	r3, #5
 800435a:	f000 8082 	beq.w	8004462 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800435e:	e083      	b.n	8004468 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d07f      	beq.n	8004466 <HCD_RXQLVL_IRQHandler+0x14a>
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	3344      	adds	r3, #68	; 0x44
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d074      	beq.n	8004466 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	3344      	adds	r3, #68	; 0x44
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	b292      	uxth	r2, r2
 8004396:	4619      	mov	r1, r3
 8004398:	f002 fb19 	bl	80069ce <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	3344      	adds	r3, #68	; 0x44
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	18d1      	adds	r1, r2, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4403      	add	r3, r0
 80043c0:	3344      	adds	r3, #68	; 0x44
 80043c2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	440b      	add	r3, r1
 80043d2:	334c      	adds	r3, #76	; 0x4c
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	18d1      	adds	r1, r2, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4403      	add	r3, r0
 80043e8:	334c      	adds	r3, #76	; 0x4c
 80043ea:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HCD_RXQLVL_IRQHandler+0x154>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d031      	beq.n	8004466 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004418:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004420:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	440b      	add	r3, r1
 8004442:	3350      	adds	r3, #80	; 0x50
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	f083 0301 	eor.w	r3, r3, #1
 800444a:	b2d8      	uxtb	r0, r3
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	440b      	add	r3, r1
 800445a:	3350      	adds	r3, #80	; 0x50
 800445c:	4602      	mov	r2, r0
 800445e:	701a      	strb	r2, [r3, #0]
      break;
 8004460:	e001      	b.n	8004466 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004466:	bf00      	nop
  }
}
 8004468:	bf00      	nop
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	1ff80000 	.word	0x1ff80000

08004474 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d10b      	bne.n	80044c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f004 ff9e 	bl	80093f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f043 0302 	orr.w	r3, r3, #2
 80044c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d132      	bne.n	8004534 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f043 0308 	orr.w	r3, r3, #8
 80044d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d126      	bne.n	800452e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d113      	bne.n	8004510 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f2:	d106      	bne.n	8004502 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2102      	movs	r1, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f002 fb64 	bl	8006bc8 <USB_InitFSLSPClkSel>
 8004500:	e011      	b.n	8004526 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f002 fb5d 	bl	8006bc8 <USB_InitFSLSPClkSel>
 800450e:	e00a      	b.n	8004526 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	461a      	mov	r2, r3
 8004520:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004524:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f004 ff90 	bl	800944c <HAL_HCD_PortEnabled_Callback>
 800452c:	e002      	b.n	8004534 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f004 ff9a 	bl	8009468 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d103      	bne.n	8004546 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f043 0320 	orr.w	r3, r3, #32
 8004544:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800454c:	461a      	mov	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6013      	str	r3, [r2, #0]
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e081      	b.n	8004670 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fc65 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	e006      	b.n	80045e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d104      	bne.n	80045f4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004616:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	ea42 0103 	orr.w	r1, r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69d9      	ldr	r1, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	d138      	bne.n	8004700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004698:	2302      	movs	r3, #2
 800469a:	e032      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b20      	cmp	r3, #32
 8004722:	d139      	bne.n	8004798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800472e:	2302      	movs	r3, #2
 8004730:	e033      	b.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2224      	movs	r2, #36	; 0x24
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b6:	6013      	str	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40007000 	.word	0x40007000

080047e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f2:	d130      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f4:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004800:	d038      	beq.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004802:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800480a:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2232      	movs	r2, #50	; 0x32
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0c9b      	lsrs	r3, r3, #18
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004828:	e002      	b.n	8004830 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b01      	subs	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483c:	d102      	bne.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x60>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f2      	bne.n	800482a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004850:	d110      	bne.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00f      	b.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004862:	d007      	beq.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800486c:	4a05      	ldr	r2, [pc, #20]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004872:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40007000 	.word	0x40007000
 8004888:	20000000 	.word	0x20000000
 800488c:	431bde83 	.word	0x431bde83

08004890 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a04      	ldr	r2, [pc, #16]	; (80048ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800489a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800489e:	6053      	str	r3, [r2, #4]
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40007000 	.word	0x40007000

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e3d4      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c2:	4ba1      	ldr	r3, [pc, #644]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048cc:	4b9e      	ldr	r3, [pc, #632]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80e4 	beq.w	8004aac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_RCC_OscConfig+0x4a>
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	f040 808b 	bne.w	8004a08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 8087 	bne.w	8004a08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048fa:	4b93      	ldr	r3, [pc, #588]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCC_OscConfig+0x62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e3ac      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	4b8c      	ldr	r3, [pc, #560]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <HAL_RCC_OscConfig+0x7c>
 8004922:	4b89      	ldr	r3, [pc, #548]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800492a:	e005      	b.n	8004938 <HAL_RCC_OscConfig+0x88>
 800492c:	4b86      	ldr	r3, [pc, #536]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 800492e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004938:	4293      	cmp	r3, r2
 800493a:	d223      	bcs.n	8004984 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fd3f 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e38d      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004950:	4b7d      	ldr	r3, [pc, #500]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7c      	ldr	r2, [pc, #496]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004956:	f043 0308 	orr.w	r3, r3, #8
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	4b7a      	ldr	r3, [pc, #488]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	4977      	ldr	r1, [pc, #476]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	4972      	ldr	r1, [pc, #456]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
 8004982:	e025      	b.n	80049d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004984:	4b70      	ldr	r3, [pc, #448]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6f      	ldr	r2, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 800498a:	f043 0308 	orr.w	r3, r3, #8
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	496a      	ldr	r1, [pc, #424]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a2:	4b69      	ldr	r3, [pc, #420]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	4965      	ldr	r1, [pc, #404]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fcff 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e34d      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d0:	f000 fc36 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80049d4:	4601      	mov	r1, r0
 80049d6:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	4a5a      	ldr	r2, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x29c>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	fa21 f303 	lsr.w	r3, r1, r3
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_OscConfig+0x2a0>)
 80049ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049f0:	4b58      	ldr	r3, [pc, #352]	; (8004b54 <HAL_RCC_OscConfig+0x2a4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fc fbcd 	bl	8001194 <HAL_InitTick>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d052      	beq.n	8004aaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	e331      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d032      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a10:	4b4d      	ldr	r3, [pc, #308]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a4c      	ldr	r2, [pc, #304]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a1c:	f7fc fc0a 	bl	8001234 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a24:	f7fc fc06 	bl	8001234 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e31a      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a36:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a40      	ldr	r2, [pc, #256]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	493b      	ldr	r1, [pc, #236]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a60:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	4936      	ldr	r1, [pc, #216]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
 8004a74:	e01a      	b.n	8004aac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a76:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a82:	f7fc fbd7 	bl	8001234 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a8a:	f7fc fbd3 	bl	8001234 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e2e7      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x1da>
 8004aa8:	e000      	b.n	8004aac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d074      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x21a>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d10e      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aca:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d064      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x2f0>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d160      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e2c4      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x24a>
 8004aec:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e01d      	b.n	8004b36 <HAL_RCC_OscConfig+0x286>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b02:	d10c      	bne.n	8004b1e <HAL_RCC_OscConfig+0x26e>
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0c      	ldr	r2, [pc, #48]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e00b      	b.n	8004b36 <HAL_RCC_OscConfig+0x286>
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a06      	ldr	r2, [pc, #24]	; (8004b48 <HAL_RCC_OscConfig+0x298>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01c      	beq.n	8004b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fb79 	bl	8001234 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b44:	e011      	b.n	8004b6a <HAL_RCC_OscConfig+0x2ba>
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	0800a120 	.word	0x0800a120
 8004b50:	20000000 	.word	0x20000000
 8004b54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fc fb6c 	bl	8001234 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e280      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6a:	4baf      	ldr	r3, [pc, #700]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x2a8>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fc fb5c 	bl	8001234 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fc fb58 	bl	8001234 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e26c      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b92:	4ba5      	ldr	r3, [pc, #660]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x2d0>
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d060      	beq.n	8004c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x310>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d119      	bne.n	8004bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d116      	bne.n	8004bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc0:	4b99      	ldr	r3, [pc, #612]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x328>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e249      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	4b93      	ldr	r3, [pc, #588]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	4990      	ldr	r1, [pc, #576]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bec:	e040      	b.n	8004c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d023      	beq.n	8004c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf6:	4b8c      	ldr	r3, [pc, #560]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a8b      	ldr	r2, [pc, #556]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fc fb17 	bl	8001234 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7fc fb13 	bl	8001234 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e227      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c1c:	4b82      	ldr	r3, [pc, #520]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	4b7f      	ldr	r3, [pc, #508]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	497c      	ldr	r1, [pc, #496]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	e018      	b.n	8004c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3e:	4b7a      	ldr	r3, [pc, #488]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a79      	ldr	r2, [pc, #484]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fc faf3 	bl	8001234 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fc faef 	bl	8001234 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e203      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c64:	4b70      	ldr	r3, [pc, #448]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d03c      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c84:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8a:	4a67      	ldr	r2, [pc, #412]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fc face 	bl	8001234 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fc faca 	bl	8001234 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e1de      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cae:	4b5e      	ldr	r3, [pc, #376]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ef      	beq.n	8004c9c <HAL_RCC_OscConfig+0x3ec>
 8004cbc:	e01b      	b.n	8004cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	4b5a      	ldr	r3, [pc, #360]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc4:	4a58      	ldr	r2, [pc, #352]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fc fab1 	bl	8001234 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fc faad 	bl	8001234 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1c1      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce8:	4b4f      	ldr	r3, [pc, #316]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ef      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a6 	beq.w	8004e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d04:	2300      	movs	r3, #0
 8004d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d08:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10d      	bne.n	8004d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d14:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	4a43      	ldr	r2, [pc, #268]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d20:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d30:	4b3e      	ldr	r3, [pc, #248]	; (8004e2c <HAL_RCC_OscConfig+0x57c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d118      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_OscConfig+0x57c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3a      	ldr	r2, [pc, #232]	; (8004e2c <HAL_RCC_OscConfig+0x57c>)
 8004d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d48:	f7fc fa74 	bl	8001234 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d50:	f7fc fa70 	bl	8001234 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e184      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <HAL_RCC_OscConfig+0x57c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d108      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4d8>
 8004d76:	4b2c      	ldr	r3, [pc, #176]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d86:	e024      	b.n	8004dd2 <HAL_RCC_OscConfig+0x522>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d110      	bne.n	8004db2 <HAL_RCC_OscConfig+0x502>
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004da0:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db0:	e00f      	b.n	8004dd2 <HAL_RCC_OscConfig+0x522>
 8004db2:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc2:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004dca:	f023 0304 	bic.w	r3, r3, #4
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fc fa2b 	bl	8001234 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fc fa27 	bl	8001234 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e139      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_OscConfig+0x578>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ed      	beq.n	8004de2 <HAL_RCC_OscConfig+0x532>
 8004e06:	e01a      	b.n	8004e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fc fa14 	bl	8001234 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e0e:	e00f      	b.n	8004e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fc fa10 	bl	8001234 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d906      	bls.n	8004e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e122      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
 8004e26:	bf00      	nop
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e30:	4b90      	ldr	r3, [pc, #576]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e8      	bne.n	8004e10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d105      	bne.n	8004e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e44:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	4a8a      	ldr	r2, [pc, #552]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8108 	beq.w	800506a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	f040 80d0 	bne.w	8005004 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e64:	4b83      	ldr	r3, [pc, #524]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f003 0203 	and.w	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d130      	bne.n	8004eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	3b01      	subs	r3, #1
 8004e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d127      	bne.n	8004eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d11f      	bne.n	8004eda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea4:	2a07      	cmp	r2, #7
 8004ea6:	bf14      	ite	ne
 8004ea8:	2201      	movne	r2, #1
 8004eaa:	2200      	moveq	r2, #0
 8004eac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d113      	bne.n	8004eda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d109      	bne.n	8004eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d06e      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d069      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ee0:	4b64      	ldr	r3, [pc, #400]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004eec:	4b61      	ldr	r3, [pc, #388]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0b7      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004efc:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5c      	ldr	r2, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f08:	f7fc f994 	bl	8001234 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fc f990 	bl	8001234 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0a4      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f22:	4b54      	ldr	r3, [pc, #336]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2e:	4b51      	ldr	r3, [pc, #324]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_RCC_OscConfig+0x7c8>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f3e:	3a01      	subs	r2, #1
 8004f40:	0112      	lsls	r2, r2, #4
 8004f42:	4311      	orrs	r1, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f48:	0212      	lsls	r2, r2, #8
 8004f4a:	4311      	orrs	r1, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f50:	0852      	lsrs	r2, r2, #1
 8004f52:	3a01      	subs	r2, #1
 8004f54:	0552      	lsls	r2, r2, #21
 8004f56:	4311      	orrs	r1, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f5c:	0852      	lsrs	r2, r2, #1
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	0652      	lsls	r2, r2, #25
 8004f62:	4311      	orrs	r1, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f68:	0912      	lsrs	r2, r2, #4
 8004f6a:	0452      	lsls	r2, r2, #17
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	4941      	ldr	r1, [pc, #260]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f74:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3e      	ldr	r2, [pc, #248]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f80:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f8c:	f7fc f952 	bl	8001234 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fc f94e 	bl	8001234 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e062      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa6:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fb2:	e05a      	b.n	800506a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e059      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d152      	bne.n	800506a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fdc:	f7fc f92a 	bl	8001234 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc f926 	bl	8001234 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e03a      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x734>
 8005002:	e032      	b.n	800506a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d02d      	beq.n	8005066 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8005010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005014:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005016:	4b17      	ldr	r3, [pc, #92]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4a13      	ldr	r2, [pc, #76]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8005028:	f023 0303 	bic.w	r3, r3, #3
 800502c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800502e:	4b11      	ldr	r3, [pc, #68]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4a10      	ldr	r2, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 8005034:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fc f8f9 	bl	8001234 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005046:	f7fc f8f5 	bl	8001234 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e009      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_RCC_OscConfig+0x7c4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x796>
 8005064:	e001      	b.n	800506a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	f99d808c 	.word	0xf99d808c

0800507c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0c8      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b66      	ldr	r3, [pc, #408]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d910      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b63      	ldr	r3, [pc, #396]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 0207 	bic.w	r2, r3, #7
 80050a6:	4961      	ldr	r1, [pc, #388]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b5f      	ldr	r3, [pc, #380]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0b0      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d04c      	beq.n	8005166 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d4:	4b56      	ldr	r3, [pc, #344]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d121      	bne.n	8005124 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e09e      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ec:	4b50      	ldr	r3, [pc, #320]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d115      	bne.n	8005124 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e092      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d107      	bne.n	8005114 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005104:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e086      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005114:	4b46      	ldr	r3, [pc, #280]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e07e      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 0203 	bic.w	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	493f      	ldr	r1, [pc, #252]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005136:	f7fc f87d 	bl	8001234 <HAL_GetTick>
 800513a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513c:	e00a      	b.n	8005154 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513e:	f7fc f879 	bl	8001234 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	; 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e066      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005154:	4b36      	ldr	r3, [pc, #216]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 020c 	and.w	r2, r3, #12
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	429a      	cmp	r2, r3
 8005164:	d1eb      	bne.n	800513e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	492c      	ldr	r1, [pc, #176]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b29      	ldr	r3, [pc, #164]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d210      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b26      	ldr	r3, [pc, #152]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	4924      	ldr	r1, [pc, #144]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <HAL_RCC_ClockConfig+0x1b0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e036      	b.n	8005222 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4918      	ldr	r1, [pc, #96]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051de:	4b14      	ldr	r3, [pc, #80]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4910      	ldr	r1, [pc, #64]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051f2:	f000 f825 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051f6:	4601      	mov	r1, r0
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <HAL_RCC_ClockConfig+0x1b4>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	fa21 f303 	lsr.w	r3, r1, r3
 800520e:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_RCC_ClockConfig+0x1c0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb ffbc 	bl	8001194 <HAL_InitTick>
 800521c:	4603      	mov	r3, r0
 800521e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005220:	7afb      	ldrb	r3, [r7, #11]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40022000 	.word	0x40022000
 8005230:	40021000 	.word	0x40021000
 8005234:	0800a120 	.word	0x0800a120
 8005238:	20000000 	.word	0x20000000
 800523c:	20000004 	.word	0x20000004

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	; 0x24
 8005244:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524e:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005258:	4b3a      	ldr	r3, [pc, #232]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x34>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d121      	bne.n	80052b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d11e      	bne.n	80052b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005274:	4b33      	ldr	r3, [pc, #204]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d107      	bne.n	8005290 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005280:	4b30      	ldr	r3, [pc, #192]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e005      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005290:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <HAL_RCC_GetSysClockFreq+0x108>)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d102      	bne.n	80052be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e004      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052c4:	4b22      	ldr	r3, [pc, #136]	; (8005350 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d133      	bne.n	8005336 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d002      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d003      	beq.n	80052ea <HAL_RCC_GetSysClockFreq+0xaa>
 80052e2:	e005      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052e6:	617b      	str	r3, [r7, #20]
      break;
 80052e8:	e005      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_GetSysClockFreq+0x110>)
 80052ec:	617b      	str	r3, [r7, #20]
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	617b      	str	r3, [r7, #20]
      break;
 80052f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f6:	4b13      	ldr	r3, [pc, #76]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	3301      	adds	r3, #1
 8005302:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	fb02 f203 	mul.w	r2, r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_GetSysClockFreq+0x104>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	0e5b      	lsrs	r3, r3, #25
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	3301      	adds	r3, #1
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005336:	69bb      	ldr	r3, [r7, #24]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3724      	adds	r7, #36	; 0x24
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40021000 	.word	0x40021000
 8005348:	0800a138 	.word	0x0800a138
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000000 	.word	0x20000000

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005370:	f7ff fff0 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005374:	4601      	mov	r1, r0
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4a04      	ldr	r2, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	0800a130 	.word	0x0800a130

08005398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800539c:	f7ff ffda 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053a0:	4601      	mov	r1, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0adb      	lsrs	r3, r3, #11
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ae:	5cd3      	ldrb	r3, [r2, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000
 80053c0:	0800a130 	.word	0x0800a130

080053c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053d0:	4b2a      	ldr	r3, [pc, #168]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053dc:	f7ff f9f4 	bl	80047c8 <HAL_PWREx_GetVoltageRange>
 80053e0:	6178      	str	r0, [r7, #20]
 80053e2:	e014      	b.n	800540e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	4a24      	ldr	r2, [pc, #144]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ee:	6593      	str	r3, [r2, #88]	; 0x58
 80053f0:	4b22      	ldr	r3, [pc, #136]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053fc:	f7ff f9e4 	bl	80047c8 <HAL_PWREx_GetVoltageRange>
 8005400:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4b1e      	ldr	r3, [pc, #120]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d10b      	bne.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d919      	bls.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2ba0      	cmp	r3, #160	; 0xa0
 8005420:	d902      	bls.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005422:	2302      	movs	r3, #2
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	e013      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005428:	2301      	movs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e010      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d902      	bls.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005434:	2303      	movs	r3, #3
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e00a      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d102      	bne.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005440:	2302      	movs	r3, #2
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e004      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b70      	cmp	r3, #112	; 0x70
 800544a:	d101      	bne.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800544c:	2301      	movs	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 0207 	bic.w	r2, r3, #7
 8005458:	4909      	ldr	r1, [pc, #36]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d001      	beq.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000
 8005480:	40022000 	.word	0x40022000

08005484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800548c:	2300      	movs	r3, #0
 800548e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005490:	2300      	movs	r3, #0
 8005492:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549c:	2b00      	cmp	r3, #0
 800549e:	d03f      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a8:	d01c      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80054aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ae:	d802      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80054b4:	e01f      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80054b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ba:	d003      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80054bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054c0:	d01c      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80054c2:	e018      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054c4:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4a84      	ldr	r2, [pc, #528]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054d0:	e015      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fac9 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054e2:	e00c      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3320      	adds	r3, #32
 80054e8:	2100      	movs	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fbb0 	bl	8005c50 <RCCEx_PLLSAI2_Config>
 80054f0:	4603      	mov	r3, r0
 80054f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f4:	e003      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	74fb      	strb	r3, [r7, #19]
      break;
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80054fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005504:	4b75      	ldr	r3, [pc, #468]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005512:	4972      	ldr	r1, [pc, #456]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800551a:	e001      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d03f      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005534:	d01c      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800553a:	d802      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005540:	e01f      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005546:	d003      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005548:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800554c:	d01c      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800554e:	e018      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005550:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4a61      	ldr	r2, [pc, #388]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800555c:	e015      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3304      	adds	r3, #4
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fa83 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800556e:	e00c      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3320      	adds	r3, #32
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fb6a 	bl	8005c50 <RCCEx_PLLSAI2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005580:	e003      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	74fb      	strb	r3, [r7, #19]
      break;
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005590:	4b52      	ldr	r3, [pc, #328]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559e:	494f      	ldr	r1, [pc, #316]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055a6:	e001      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80a0 	beq.w	80056fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055be:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d4:	4b41      	ldr	r3, [pc, #260]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d8:	4a40      	ldr	r2, [pc, #256]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055de:	6593      	str	r3, [r2, #88]	; 0x58
 80055e0:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ec:	2301      	movs	r3, #1
 80055ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f0:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3a      	ldr	r2, [pc, #232]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80055f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055fc:	f7fb fe1a 	bl	8001234 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005602:	e009      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005604:	f7fb fe16 	bl	8001234 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d902      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	74fb      	strb	r3, [r7, #19]
        break;
 8005616:	e005      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005618:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ef      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d15c      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800562a:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01f      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	429a      	cmp	r2, r3
 8005646:	d019      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005654:	4b21      	ldr	r3, [pc, #132]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	4a20      	ldr	r2, [pc, #128]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800566c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005674:	4a19      	ldr	r2, [pc, #100]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fb fdd5 	bl	8001234 <HAL_GetTick>
 800568a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800568c:	e00b      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568e:	f7fb fdd1 	bl	8001234 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	; 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d902      	bls.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	74fb      	strb	r3, [r7, #19]
            break;
 80056a4:	e006      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ec      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	4904      	ldr	r1, [pc, #16]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056d2:	e009      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	74bb      	strb	r3, [r7, #18]
 80056d8:	e006      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e8:	7c7b      	ldrb	r3, [r7, #17]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ee:	4b9e      	ldr	r3, [pc, #632]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	4a9d      	ldr	r2, [pc, #628]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005706:	4b98      	ldr	r3, [pc, #608]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570c:	f023 0203 	bic.w	r2, r3, #3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	4994      	ldr	r1, [pc, #592]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005728:	4b8f      	ldr	r3, [pc, #572]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	f023 020c 	bic.w	r2, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	498c      	ldr	r1, [pc, #560]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800574a:	4b87      	ldr	r3, [pc, #540]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	4983      	ldr	r1, [pc, #524]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800576c:	4b7e      	ldr	r3, [pc, #504]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577a:	497b      	ldr	r1, [pc, #492]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800578e:	4b76      	ldr	r3, [pc, #472]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	4972      	ldr	r1, [pc, #456]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057b0:	4b6d      	ldr	r3, [pc, #436]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	496a      	ldr	r1, [pc, #424]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057d2:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e0:	4961      	ldr	r1, [pc, #388]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057f4:	4b5c      	ldr	r3, [pc, #368]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005802:	4959      	ldr	r1, [pc, #356]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005816:	4b54      	ldr	r3, [pc, #336]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005824:	4950      	ldr	r1, [pc, #320]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005838:	4b4b      	ldr	r3, [pc, #300]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	4948      	ldr	r1, [pc, #288]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800585a:	4b43      	ldr	r3, [pc, #268]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	493f      	ldr	r1, [pc, #252]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d028      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587c:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588a:	4937      	ldr	r1, [pc, #220]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589a:	d106      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589c:	4b32      	ldr	r3, [pc, #200]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4a31      	ldr	r2, [pc, #196]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a6:	60d3      	str	r3, [r2, #12]
 80058a8:	e011      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b2:	d10c      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	2101      	movs	r1, #1
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f8d8 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80058ca:	7cfb      	ldrb	r3, [r7, #19]
 80058cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d028      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058da:	4b23      	ldr	r3, [pc, #140]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	491f      	ldr	r1, [pc, #124]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f8:	d106      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005904:	60d3      	str	r3, [r2, #12]
 8005906:	e011      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005910:	d10c      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	2101      	movs	r1, #1
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f8a9 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d02b      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005946:	4908      	ldr	r1, [pc, #32]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005956:	d109      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a02      	ldr	r2, [pc, #8]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800595e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005962:	60d3      	str	r3, [r2, #12]
 8005964:	e014      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f877 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059aa:	4928      	ldr	r1, [pc, #160]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ba:	d10d      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	2102      	movs	r1, #2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f854 	bl	8005a70 <RCCEx_PLLSAI1_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d014      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	74bb      	strb	r3, [r7, #18]
 80059d6:	e011      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e0:	d10c      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3320      	adds	r3, #32
 80059e6:	2102      	movs	r1, #2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 f931 	bl	8005c50 <RCCEx_PLLSAI2_Config>
 80059ee:	4603      	mov	r3, r0
 80059f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f2:	7cfb      	ldrb	r3, [r7, #19]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a16:	490d      	ldr	r1, [pc, #52]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a3a:	4904      	ldr	r1, [pc, #16]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a42:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40021000 	.word	0x40021000

08005a50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000

08005a70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a7e:	4b73      	ldr	r3, [pc, #460]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a8a:	4b70      	ldr	r3, [pc, #448]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0203 	and.w	r2, r3, #3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d10d      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005aa2:	4b6a      	ldr	r3, [pc, #424]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d044      	beq.n	8005b40 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	e041      	b.n	8005b40 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d00c      	beq.n	8005ade <RCCEx_PLLSAI1_Config+0x6e>
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d013      	beq.n	8005af0 <RCCEx_PLLSAI1_Config+0x80>
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d120      	bne.n	8005b0e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005acc:	4b5f      	ldr	r3, [pc, #380]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11d      	bne.n	8005b14 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005adc:	e01a      	b.n	8005b14 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ade:	4b5b      	ldr	r3, [pc, #364]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d116      	bne.n	8005b18 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aee:	e013      	b.n	8005b18 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005af0:	4b56      	ldr	r3, [pc, #344]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10f      	bne.n	8005b1c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005afc:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b0c:	e006      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
      break;
 8005b12:	e004      	b.n	8005b1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005b14:	bf00      	nop
 8005b16:	e002      	b.n	8005b1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005b1c:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10d      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b24:	4b49      	ldr	r3, [pc, #292]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	4944      	ldr	r1, [pc, #272]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d17d      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b46:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b52:	f7fb fb6f 	bl	8001234 <HAL_GetTick>
 8005b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b58:	e009      	b.n	8005b6e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b5a:	f7fb fb6b 	bl	8001234 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d902      	bls.n	8005b6e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b6c:	e005      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b6e:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1ef      	bne.n	8005b5a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d160      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d111      	bne.n	8005baa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b86:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6892      	ldr	r2, [r2, #8]
 8005b96:	0211      	lsls	r1, r2, #8
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68d2      	ldr	r2, [r2, #12]
 8005b9c:	0912      	lsrs	r2, r2, #4
 8005b9e:	0452      	lsls	r2, r2, #17
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	492a      	ldr	r1, [pc, #168]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	610b      	str	r3, [r1, #16]
 8005ba8:	e027      	b.n	8005bfa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d112      	bne.n	8005bd6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb0:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	0211      	lsls	r1, r2, #8
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6912      	ldr	r2, [r2, #16]
 8005bc6:	0852      	lsrs	r2, r2, #1
 8005bc8:	3a01      	subs	r2, #1
 8005bca:	0552      	lsls	r2, r2, #21
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	491f      	ldr	r1, [pc, #124]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	610b      	str	r3, [r1, #16]
 8005bd4:	e011      	b.n	8005bfa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6892      	ldr	r2, [r2, #8]
 8005be6:	0211      	lsls	r1, r2, #8
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6952      	ldr	r2, [r2, #20]
 8005bec:	0852      	lsrs	r2, r2, #1
 8005bee:	3a01      	subs	r2, #1
 8005bf0:	0652      	lsls	r2, r2, #25
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	4915      	ldr	r1, [pc, #84]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fb fb15 	bl	8001234 <HAL_GetTick>
 8005c0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c0c:	e009      	b.n	8005c22 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c0e:	f7fb fb11 	bl	8001234 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d902      	bls.n	8005c22 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c20:	e005      	b.n	8005c2e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0ef      	beq.n	8005c0e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	4903      	ldr	r1, [pc, #12]	; (8005c4c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000

08005c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c5e:	4b68      	ldr	r3, [pc, #416]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c6a:	4b65      	ldr	r3, [pc, #404]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0203 	and.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d10d      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c82:	4b5f      	ldr	r3, [pc, #380]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	091b      	lsrs	r3, r3, #4
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
       ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d044      	beq.n	8005d20 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
 8005c9a:	e041      	b.n	8005d20 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d00c      	beq.n	8005cbe <RCCEx_PLLSAI2_Config+0x6e>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d013      	beq.n	8005cd0 <RCCEx_PLLSAI2_Config+0x80>
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d120      	bne.n	8005cee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cac:	4b54      	ldr	r3, [pc, #336]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11d      	bne.n	8005cf4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cbc:	e01a      	b.n	8005cf4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cbe:	4b50      	ldr	r3, [pc, #320]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d116      	bne.n	8005cf8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cce:	e013      	b.n	8005cf8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cd0:	4b4b      	ldr	r3, [pc, #300]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10f      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cdc:	4b48      	ldr	r3, [pc, #288]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cec:	e006      	b.n	8005cfc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf2:	e004      	b.n	8005cfe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005cfc:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10d      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d04:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	4939      	ldr	r1, [pc, #228]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d167      	bne.n	8005df6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d26:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d32:	f7fb fa7f 	bl	8001234 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d38:	e009      	b.n	8005d4e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d3a:	f7fb fa7b 	bl	8001234 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d902      	bls.n	8005d4e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4c:	e005      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d4e:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ef      	bne.n	8005d3a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d14a      	bne.n	8005df6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d111      	bne.n	8005d8a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6892      	ldr	r2, [r2, #8]
 8005d76:	0211      	lsls	r1, r2, #8
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68d2      	ldr	r2, [r2, #12]
 8005d7c:	0912      	lsrs	r2, r2, #4
 8005d7e:	0452      	lsls	r2, r2, #17
 8005d80:	430a      	orrs	r2, r1
 8005d82:	491f      	ldr	r1, [pc, #124]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	614b      	str	r3, [r1, #20]
 8005d88:	e011      	b.n	8005dae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6892      	ldr	r2, [r2, #8]
 8005d9a:	0211      	lsls	r1, r2, #8
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6912      	ldr	r2, [r2, #16]
 8005da0:	0852      	lsrs	r2, r2, #1
 8005da2:	3a01      	subs	r2, #1
 8005da4:	0652      	lsls	r2, r2, #25
 8005da6:	430a      	orrs	r2, r1
 8005da8:	4915      	ldr	r1, [pc, #84]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005dae:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dba:	f7fb fa3b 	bl	8001234 <HAL_GetTick>
 8005dbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dc0:	e009      	b.n	8005dd6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dc2:	f7fb fa37 	bl	8001234 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d902      	bls.n	8005dd6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	73fb      	strb	r3, [r7, #15]
          break;
 8005dd4:	e005      	b.n	8005de2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0ef      	beq.n	8005dc2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	4903      	ldr	r1, [pc, #12]	; (8005e00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40021000 	.word	0x40021000

08005e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e040      	b.n	8005e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb f886 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8c0 	bl	8005fc8 <UART_SetConfig>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e022      	b.n	8005e98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fb3e 	bl	80064dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fbc5 	bl	8006620 <UART_CheckIdleState>
 8005e96:	4603      	mov	r3, r0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	f040 8081 	bne.w	8005fbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Transmit+0x26>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e079      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit+0x38>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e072      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2221      	movs	r2, #33	; 0x21
 8005eea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005eec:	f7fb f9a2 	bl	8001234 <HAL_GetTick>
 8005ef0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d108      	bne.n	8005f1e <HAL_UART_Transmit+0x7e>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	e003      	b.n	8005f26 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005f2e:	e02d      	b.n	8005f8c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	2180      	movs	r1, #128	; 0x80
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fbb5 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e039      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	881a      	ldrh	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f5c:	b292      	uxth	r2, r2
 8005f5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	3302      	adds	r3, #2
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	e008      	b.n	8005f7a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	781a      	ldrb	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	b292      	uxth	r2, r2
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1cb      	bne.n	8005f30 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2140      	movs	r1, #64	; 0x40
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fb81 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e005      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005fcc:	b088      	sub	sp, #32
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4bac      	ldr	r3, [pc, #688]	; (80062a8 <UART_SetConfig+0x2e0>)
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	430b      	orrs	r3, r1
 8006000:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4aa2      	ldr	r2, [pc, #648]	; (80062ac <UART_SetConfig+0x2e4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	4313      	orrs	r3, r2
 8006030:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	430a      	orrs	r2, r1
 8006044:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a99      	ldr	r2, [pc, #612]	; (80062b0 <UART_SetConfig+0x2e8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d121      	bne.n	8006094 <UART_SetConfig+0xcc>
 8006050:	4b98      	ldr	r3, [pc, #608]	; (80062b4 <UART_SetConfig+0x2ec>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b03      	cmp	r3, #3
 800605c:	d816      	bhi.n	800608c <UART_SetConfig+0xc4>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x9c>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006075 	.word	0x08006075
 8006068:	08006081 	.word	0x08006081
 800606c:	0800607b 	.word	0x0800607b
 8006070:	08006087 	.word	0x08006087
 8006074:	2301      	movs	r3, #1
 8006076:	76fb      	strb	r3, [r7, #27]
 8006078:	e0e8      	b.n	800624c <UART_SetConfig+0x284>
 800607a:	2302      	movs	r3, #2
 800607c:	76fb      	strb	r3, [r7, #27]
 800607e:	e0e5      	b.n	800624c <UART_SetConfig+0x284>
 8006080:	2304      	movs	r3, #4
 8006082:	76fb      	strb	r3, [r7, #27]
 8006084:	e0e2      	b.n	800624c <UART_SetConfig+0x284>
 8006086:	2308      	movs	r3, #8
 8006088:	76fb      	strb	r3, [r7, #27]
 800608a:	e0df      	b.n	800624c <UART_SetConfig+0x284>
 800608c:	2310      	movs	r3, #16
 800608e:	76fb      	strb	r3, [r7, #27]
 8006090:	bf00      	nop
 8006092:	e0db      	b.n	800624c <UART_SetConfig+0x284>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a87      	ldr	r2, [pc, #540]	; (80062b8 <UART_SetConfig+0x2f0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d134      	bne.n	8006108 <UART_SetConfig+0x140>
 800609e:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <UART_SetConfig+0x2ec>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	2b0c      	cmp	r3, #12
 80060aa:	d829      	bhi.n	8006100 <UART_SetConfig+0x138>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0xec>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060e9 	.word	0x080060e9
 80060b8:	08006101 	.word	0x08006101
 80060bc:	08006101 	.word	0x08006101
 80060c0:	08006101 	.word	0x08006101
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	08006101 	.word	0x08006101
 80060cc:	08006101 	.word	0x08006101
 80060d0:	08006101 	.word	0x08006101
 80060d4:	080060ef 	.word	0x080060ef
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006101 	.word	0x08006101
 80060e0:	08006101 	.word	0x08006101
 80060e4:	080060fb 	.word	0x080060fb
 80060e8:	2300      	movs	r3, #0
 80060ea:	76fb      	strb	r3, [r7, #27]
 80060ec:	e0ae      	b.n	800624c <UART_SetConfig+0x284>
 80060ee:	2302      	movs	r3, #2
 80060f0:	76fb      	strb	r3, [r7, #27]
 80060f2:	e0ab      	b.n	800624c <UART_SetConfig+0x284>
 80060f4:	2304      	movs	r3, #4
 80060f6:	76fb      	strb	r3, [r7, #27]
 80060f8:	e0a8      	b.n	800624c <UART_SetConfig+0x284>
 80060fa:	2308      	movs	r3, #8
 80060fc:	76fb      	strb	r3, [r7, #27]
 80060fe:	e0a5      	b.n	800624c <UART_SetConfig+0x284>
 8006100:	2310      	movs	r3, #16
 8006102:	76fb      	strb	r3, [r7, #27]
 8006104:	bf00      	nop
 8006106:	e0a1      	b.n	800624c <UART_SetConfig+0x284>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a6b      	ldr	r2, [pc, #428]	; (80062bc <UART_SetConfig+0x2f4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d120      	bne.n	8006154 <UART_SetConfig+0x18c>
 8006112:	4b68      	ldr	r3, [pc, #416]	; (80062b4 <UART_SetConfig+0x2ec>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800611c:	2b10      	cmp	r3, #16
 800611e:	d00f      	beq.n	8006140 <UART_SetConfig+0x178>
 8006120:	2b10      	cmp	r3, #16
 8006122:	d802      	bhi.n	800612a <UART_SetConfig+0x162>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <UART_SetConfig+0x16c>
 8006128:	e010      	b.n	800614c <UART_SetConfig+0x184>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d005      	beq.n	800613a <UART_SetConfig+0x172>
 800612e:	2b30      	cmp	r3, #48	; 0x30
 8006130:	d009      	beq.n	8006146 <UART_SetConfig+0x17e>
 8006132:	e00b      	b.n	800614c <UART_SetConfig+0x184>
 8006134:	2300      	movs	r3, #0
 8006136:	76fb      	strb	r3, [r7, #27]
 8006138:	e088      	b.n	800624c <UART_SetConfig+0x284>
 800613a:	2302      	movs	r3, #2
 800613c:	76fb      	strb	r3, [r7, #27]
 800613e:	e085      	b.n	800624c <UART_SetConfig+0x284>
 8006140:	2304      	movs	r3, #4
 8006142:	76fb      	strb	r3, [r7, #27]
 8006144:	e082      	b.n	800624c <UART_SetConfig+0x284>
 8006146:	2308      	movs	r3, #8
 8006148:	76fb      	strb	r3, [r7, #27]
 800614a:	e07f      	b.n	800624c <UART_SetConfig+0x284>
 800614c:	2310      	movs	r3, #16
 800614e:	76fb      	strb	r3, [r7, #27]
 8006150:	bf00      	nop
 8006152:	e07b      	b.n	800624c <UART_SetConfig+0x284>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a59      	ldr	r2, [pc, #356]	; (80062c0 <UART_SetConfig+0x2f8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d120      	bne.n	80061a0 <UART_SetConfig+0x1d8>
 800615e:	4b55      	ldr	r3, [pc, #340]	; (80062b4 <UART_SetConfig+0x2ec>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d00f      	beq.n	800618c <UART_SetConfig+0x1c4>
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d802      	bhi.n	8006176 <UART_SetConfig+0x1ae>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <UART_SetConfig+0x1b8>
 8006174:	e010      	b.n	8006198 <UART_SetConfig+0x1d0>
 8006176:	2b80      	cmp	r3, #128	; 0x80
 8006178:	d005      	beq.n	8006186 <UART_SetConfig+0x1be>
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d009      	beq.n	8006192 <UART_SetConfig+0x1ca>
 800617e:	e00b      	b.n	8006198 <UART_SetConfig+0x1d0>
 8006180:	2300      	movs	r3, #0
 8006182:	76fb      	strb	r3, [r7, #27]
 8006184:	e062      	b.n	800624c <UART_SetConfig+0x284>
 8006186:	2302      	movs	r3, #2
 8006188:	76fb      	strb	r3, [r7, #27]
 800618a:	e05f      	b.n	800624c <UART_SetConfig+0x284>
 800618c:	2304      	movs	r3, #4
 800618e:	76fb      	strb	r3, [r7, #27]
 8006190:	e05c      	b.n	800624c <UART_SetConfig+0x284>
 8006192:	2308      	movs	r3, #8
 8006194:	76fb      	strb	r3, [r7, #27]
 8006196:	e059      	b.n	800624c <UART_SetConfig+0x284>
 8006198:	2310      	movs	r3, #16
 800619a:	76fb      	strb	r3, [r7, #27]
 800619c:	bf00      	nop
 800619e:	e055      	b.n	800624c <UART_SetConfig+0x284>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a47      	ldr	r2, [pc, #284]	; (80062c4 <UART_SetConfig+0x2fc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d124      	bne.n	80061f4 <UART_SetConfig+0x22c>
 80061aa:	4b42      	ldr	r3, [pc, #264]	; (80062b4 <UART_SetConfig+0x2ec>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b8:	d012      	beq.n	80061e0 <UART_SetConfig+0x218>
 80061ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061be:	d802      	bhi.n	80061c6 <UART_SetConfig+0x1fe>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <UART_SetConfig+0x20c>
 80061c4:	e012      	b.n	80061ec <UART_SetConfig+0x224>
 80061c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ca:	d006      	beq.n	80061da <UART_SetConfig+0x212>
 80061cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d0:	d009      	beq.n	80061e6 <UART_SetConfig+0x21e>
 80061d2:	e00b      	b.n	80061ec <UART_SetConfig+0x224>
 80061d4:	2300      	movs	r3, #0
 80061d6:	76fb      	strb	r3, [r7, #27]
 80061d8:	e038      	b.n	800624c <UART_SetConfig+0x284>
 80061da:	2302      	movs	r3, #2
 80061dc:	76fb      	strb	r3, [r7, #27]
 80061de:	e035      	b.n	800624c <UART_SetConfig+0x284>
 80061e0:	2304      	movs	r3, #4
 80061e2:	76fb      	strb	r3, [r7, #27]
 80061e4:	e032      	b.n	800624c <UART_SetConfig+0x284>
 80061e6:	2308      	movs	r3, #8
 80061e8:	76fb      	strb	r3, [r7, #27]
 80061ea:	e02f      	b.n	800624c <UART_SetConfig+0x284>
 80061ec:	2310      	movs	r3, #16
 80061ee:	76fb      	strb	r3, [r7, #27]
 80061f0:	bf00      	nop
 80061f2:	e02b      	b.n	800624c <UART_SetConfig+0x284>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a2c      	ldr	r2, [pc, #176]	; (80062ac <UART_SetConfig+0x2e4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d124      	bne.n	8006248 <UART_SetConfig+0x280>
 80061fe:	4b2d      	ldr	r3, [pc, #180]	; (80062b4 <UART_SetConfig+0x2ec>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620c:	d012      	beq.n	8006234 <UART_SetConfig+0x26c>
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006212:	d802      	bhi.n	800621a <UART_SetConfig+0x252>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <UART_SetConfig+0x260>
 8006218:	e012      	b.n	8006240 <UART_SetConfig+0x278>
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621e:	d006      	beq.n	800622e <UART_SetConfig+0x266>
 8006220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006224:	d009      	beq.n	800623a <UART_SetConfig+0x272>
 8006226:	e00b      	b.n	8006240 <UART_SetConfig+0x278>
 8006228:	2300      	movs	r3, #0
 800622a:	76fb      	strb	r3, [r7, #27]
 800622c:	e00e      	b.n	800624c <UART_SetConfig+0x284>
 800622e:	2302      	movs	r3, #2
 8006230:	76fb      	strb	r3, [r7, #27]
 8006232:	e00b      	b.n	800624c <UART_SetConfig+0x284>
 8006234:	2304      	movs	r3, #4
 8006236:	76fb      	strb	r3, [r7, #27]
 8006238:	e008      	b.n	800624c <UART_SetConfig+0x284>
 800623a:	2308      	movs	r3, #8
 800623c:	76fb      	strb	r3, [r7, #27]
 800623e:	e005      	b.n	800624c <UART_SetConfig+0x284>
 8006240:	2310      	movs	r3, #16
 8006242:	76fb      	strb	r3, [r7, #27]
 8006244:	bf00      	nop
 8006246:	e001      	b.n	800624c <UART_SetConfig+0x284>
 8006248:	2310      	movs	r3, #16
 800624a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a16      	ldr	r2, [pc, #88]	; (80062ac <UART_SetConfig+0x2e4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	f040 8087 	bne.w	8006366 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006258:	7efb      	ldrb	r3, [r7, #27]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d836      	bhi.n	80062cc <UART_SetConfig+0x304>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <UART_SetConfig+0x29c>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006289 	.word	0x08006289
 8006268:	080062cd 	.word	0x080062cd
 800626c:	08006291 	.word	0x08006291
 8006270:	080062cd 	.word	0x080062cd
 8006274:	08006297 	.word	0x08006297
 8006278:	080062cd 	.word	0x080062cd
 800627c:	080062cd 	.word	0x080062cd
 8006280:	080062cd 	.word	0x080062cd
 8006284:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006288:	f7ff f870 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 800628c:	6178      	str	r0, [r7, #20]
        break;
 800628e:	e022      	b.n	80062d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <UART_SetConfig+0x300>)
 8006292:	617b      	str	r3, [r7, #20]
        break;
 8006294:	e01f      	b.n	80062d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fe ffd3 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 800629a:	6178      	str	r0, [r7, #20]
        break;
 800629c:	e01b      	b.n	80062d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	617b      	str	r3, [r7, #20]
        break;
 80062a4:	e017      	b.n	80062d6 <UART_SetConfig+0x30e>
 80062a6:	bf00      	nop
 80062a8:	efff69f3 	.word	0xefff69f3
 80062ac:	40008000 	.word	0x40008000
 80062b0:	40013800 	.word	0x40013800
 80062b4:	40021000 	.word	0x40021000
 80062b8:	40004400 	.word	0x40004400
 80062bc:	40004800 	.word	0x40004800
 80062c0:	40004c00 	.word	0x40004c00
 80062c4:	40005000 	.word	0x40005000
 80062c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	76bb      	strb	r3, [r7, #26]
        break;
 80062d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80f1 	beq.w	80064c0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	4413      	add	r3, r2
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d305      	bcc.n	80062fa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d902      	bls.n	8006300 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	76bb      	strb	r3, [r7, #26]
 80062fe:	e0df      	b.n	80064c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4619      	mov	r1, r3
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	f04f 0400 	mov.w	r4, #0
 8006310:	0214      	lsls	r4, r2, #8
 8006312:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006316:	020b      	lsls	r3, r1, #8
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	0852      	lsrs	r2, r2, #1
 800631e:	4611      	mov	r1, r2
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	eb13 0b01 	adds.w	fp, r3, r1
 8006328:	eb44 0c02 	adc.w	ip, r4, r2
 800632c:	4658      	mov	r0, fp
 800632e:	4661      	mov	r1, ip
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f04f 0400 	mov.w	r4, #0
 8006338:	461a      	mov	r2, r3
 800633a:	4623      	mov	r3, r4
 800633c:	f7f9 ffa0 	bl	8000280 <__aeabi_uldivmod>
 8006340:	4603      	mov	r3, r0
 8006342:	460c      	mov	r4, r1
 8006344:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634c:	d308      	bcc.n	8006360 <UART_SetConfig+0x398>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006354:	d204      	bcs.n	8006360 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e0af      	b.n	80064c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	76bb      	strb	r3, [r7, #26]
 8006364:	e0ac      	b.n	80064c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636e:	d15b      	bne.n	8006428 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006370:	7efb      	ldrb	r3, [r7, #27]
 8006372:	2b08      	cmp	r3, #8
 8006374:	d827      	bhi.n	80063c6 <UART_SetConfig+0x3fe>
 8006376:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x3b4>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	080063a1 	.word	0x080063a1
 8006380:	080063a9 	.word	0x080063a9
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063c7 	.word	0x080063c7
 800638c:	080063b7 	.word	0x080063b7
 8006390:	080063c7 	.word	0x080063c7
 8006394:	080063c7 	.word	0x080063c7
 8006398:	080063c7 	.word	0x080063c7
 800639c:	080063bf 	.word	0x080063bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063a0:	f7fe ffe4 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 80063a4:	6178      	str	r0, [r7, #20]
        break;
 80063a6:	e013      	b.n	80063d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a8:	f7fe fff6 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 80063ac:	6178      	str	r0, [r7, #20]
        break;
 80063ae:	e00f      	b.n	80063d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063b0:	4b49      	ldr	r3, [pc, #292]	; (80064d8 <UART_SetConfig+0x510>)
 80063b2:	617b      	str	r3, [r7, #20]
        break;
 80063b4:	e00c      	b.n	80063d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063b6:	f7fe ff43 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80063ba:	6178      	str	r0, [r7, #20]
        break;
 80063bc:	e008      	b.n	80063d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c2:	617b      	str	r3, [r7, #20]
        break;
 80063c4:	e004      	b.n	80063d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	76bb      	strb	r3, [r7, #26]
        break;
 80063ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d074      	beq.n	80064c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	005a      	lsls	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	441a      	add	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b0f      	cmp	r3, #15
 80063f2:	d916      	bls.n	8006422 <UART_SetConfig+0x45a>
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063fa:	d212      	bcs.n	8006422 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f023 030f 	bic.w	r3, r3, #15
 8006404:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	b29b      	uxth	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	b29a      	uxth	r2, r3
 8006412:	89fb      	ldrh	r3, [r7, #14]
 8006414:	4313      	orrs	r3, r2
 8006416:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	89fa      	ldrh	r2, [r7, #14]
 800641e:	60da      	str	r2, [r3, #12]
 8006420:	e04e      	b.n	80064c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	76bb      	strb	r3, [r7, #26]
 8006426:	e04b      	b.n	80064c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006428:	7efb      	ldrb	r3, [r7, #27]
 800642a:	2b08      	cmp	r3, #8
 800642c:	d827      	bhi.n	800647e <UART_SetConfig+0x4b6>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <UART_SetConfig+0x46c>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006459 	.word	0x08006459
 8006438:	08006461 	.word	0x08006461
 800643c:	08006469 	.word	0x08006469
 8006440:	0800647f 	.word	0x0800647f
 8006444:	0800646f 	.word	0x0800646f
 8006448:	0800647f 	.word	0x0800647f
 800644c:	0800647f 	.word	0x0800647f
 8006450:	0800647f 	.word	0x0800647f
 8006454:	08006477 	.word	0x08006477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006458:	f7fe ff88 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 800645c:	6178      	str	r0, [r7, #20]
        break;
 800645e:	e013      	b.n	8006488 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006460:	f7fe ff9a 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 8006464:	6178      	str	r0, [r7, #20]
        break;
 8006466:	e00f      	b.n	8006488 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006468:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <UART_SetConfig+0x510>)
 800646a:	617b      	str	r3, [r7, #20]
        break;
 800646c:	e00c      	b.n	8006488 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646e:	f7fe fee7 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 8006472:	6178      	str	r0, [r7, #20]
        break;
 8006474:	e008      	b.n	8006488 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647a:	617b      	str	r3, [r7, #20]
        break;
 800647c:	e004      	b.n	8006488 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	76bb      	strb	r3, [r7, #26]
        break;
 8006486:	bf00      	nop
    }

    if (pclk != 0U)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	085a      	lsrs	r2, r3, #1
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	441a      	add	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d908      	bls.n	80064bc <UART_SetConfig+0x4f4>
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d204      	bcs.n	80064bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	e001      	b.n	80064c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80064cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80064d8:	00f42400 	.word	0x00f42400

080064dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065da:	d10a      	bne.n	80065f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af02      	add	r7, sp, #8
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800662e:	f7fa fe01 	bl	8001234 <HAL_GetTick>
 8006632:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b08      	cmp	r3, #8
 8006640:	d10e      	bne.n	8006660 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006642:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f82a 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e020      	b.n	80066a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d10e      	bne.n	800668c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f814 	bl	80066aa <UART_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e00a      	b.n	80066a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	4613      	mov	r3, r2
 80066b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ba:	e05d      	b.n	8006778 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d059      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c4:	f7fa fdb6 	bl	8001234 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <UART_WaitOnFlagUntilTimeout+0x30>
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d11b      	bne.n	8006712 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2220      	movs	r2, #32
 8006704:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e042      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d02b      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800672a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672e:	d123      	bne.n	8006778 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006738:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006748:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e00f      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	d092      	beq.n	80066bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a0:	b084      	sub	sp, #16
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	f107 001c 	add.w	r0, r7, #28
 80067ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d122      	bne.n	80067fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d105      	bne.n	80067f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f936 	bl	8006a64 <USB_CoreReset>
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e01a      	b.n	8006834 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f92a 	bl	8006a64 <USB_CoreReset>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
 8006826:	e005      	b.n	8006834 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006840:	b004      	add	sp, #16
 8006842:	4770      	bx	lr

08006844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f043 0201 	orr.w	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d106      	bne.n	80068b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	e00b      	b.n	80068cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	e001      	b.n	80068cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e003      	b.n	80068d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80068cc:	2032      	movs	r0, #50	; 0x32
 80068ce:	f7fa fcbd 	bl	800124c <HAL_Delay>

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <USB_FlushTxFifo+0x48>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e006      	b.n	8006916 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b20      	cmp	r3, #32
 8006912:	d0f0      	beq.n	80068f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	00030d40 	.word	0x00030d40

08006928 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2210      	movs	r2, #16
 8006938:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3301      	adds	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a09      	ldr	r2, [pc, #36]	; (8006968 <USB_FlushRxFifo+0x40>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e006      	b.n	800695a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b10      	cmp	r3, #16
 8006956:	d0f0      	beq.n	800693a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	00030d40 	.word	0x00030d40

0800696c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800696c:	b480      	push	{r7}
 800696e:	b089      	sub	sp, #36	; 0x24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4611      	mov	r1, r2
 8006978:	461a      	mov	r2, r3
 800697a:	460b      	mov	r3, r1
 800697c:	71fb      	strb	r3, [r7, #7]
 800697e:	4613      	mov	r3, r2
 8006980:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800698a:	88bb      	ldrh	r3, [r7, #4]
 800698c:	3303      	adds	r3, #3
 800698e:	089b      	lsrs	r3, r3, #2
 8006990:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006992:	2300      	movs	r3, #0
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e00f      	b.n	80069b8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	031a      	lsls	r2, r3, #12
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a4:	461a      	mov	r2, r3
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6013      	str	r3, [r2, #0]
    pSrc++;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	3304      	adds	r3, #4
 80069b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	3301      	adds	r3, #1
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3eb      	bcc.n	8006998 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3724      	adds	r7, #36	; 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b089      	sub	sp, #36	; 0x24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	3303      	adds	r3, #3
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e00b      	b.n	8006a0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	3304      	adds	r3, #4
 8006a02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	3301      	adds	r3, #1
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3ef      	bcc.n	80069f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006a12:	69fb      	ldr	r3, [r7, #28]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3724      	adds	r7, #36	; 0x24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f003 0301 	and.w	r3, r3, #1
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <USB_CoreReset+0x64>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e01b      	b.n	8006aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	daf2      	bge.n	8006a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f043 0201 	orr.w	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <USB_CoreReset+0x64>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e006      	b.n	8006aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d0f0      	beq.n	8006a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	00030d40 	.word	0x00030d40

08006acc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006acc:	b084      	sub	sp, #16
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	f107 001c 	add.w	r0, r7, #28
 8006ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2300      	movs	r3, #0
 8006aec:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006b1a:	2110      	movs	r1, #16
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff fedd 	bl	80068dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff ff00 	bl	8006928 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e015      	b.n	8006b5a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4e:	461a      	mov	r2, r3
 8006b50:	2300      	movs	r3, #0
 8006b52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d3e5      	bcc.n	8006b2e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006b62:	2101      	movs	r1, #1
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f893 	bl	8006c90 <USB_DriveVbus>

  HAL_Delay(200U);
 8006b6a:	20c8      	movs	r0, #200	; 0xc8
 8006b6c:	f7fa fb6e 	bl	800124c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a0d      	ldr	r2, [pc, #52]	; (8006bbc <USB_HostInit+0xf0>)
 8006b88:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a0c      	ldr	r2, [pc, #48]	; (8006bc0 <USB_HostInit+0xf4>)
 8006b8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f043 0210 	orr.w	r2, r3, #16
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <USB_HostInit+0xf8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bb6:	b004      	add	sp, #16
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	00600080 	.word	0x00600080
 8006bc0:	004000e0 	.word	0x004000e0
 8006bc4:	a3200008 	.word	0xa3200008

08006bc8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d107      	bne.n	8006c1a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c10:	461a      	mov	r2, r3
 8006c12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c16:	6053      	str	r3, [r2, #4]
 8006c18:	e009      	b.n	8006c2e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d106      	bne.n	8006c2e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c26:	461a      	mov	r2, r3
 8006c28:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c2c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c6c:	2064      	movs	r0, #100	; 0x64
 8006c6e:	f7fa faed 	bl	800124c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c7e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c80:	200a      	movs	r0, #10
 8006c82:	f7fa fae3 	bl	800124c <HAL_Delay>

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <USB_DriveVbus+0x44>
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d106      	bne.n	8006cd4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cd2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cde:	d109      	bne.n	8006cf4 <USB_DriveVbus+0x64>
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	0c5b      	lsrs	r3, r3, #17
 8006d20:	f003 0303 	and.w	r3, r3, #3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	b29b      	uxth	r3, r3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	70fb      	strb	r3, [r7, #3]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70bb      	strb	r3, [r7, #2]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d82:	461a      	mov	r2, r3
 8006d84:	f04f 33ff 	mov.w	r3, #4294967295
 8006d88:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d867      	bhi.n	8006e62 <USB_HC_Init+0x10e>
 8006d92:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <USB_HC_Init+0x44>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006e25 	.word	0x08006e25
 8006da0:	08006da9 	.word	0x08006da9
 8006da4:	08006de7 	.word	0x08006de7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db4:	461a      	mov	r2, r3
 8006db6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006dba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006dbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da51      	bge.n	8006e68 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de2:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006de4:	e040      	b.n	8006e68 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	461a      	mov	r2, r3
 8006df4:	f240 639d 	movw	r3, #1693	; 0x69d
 8006df8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006dfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	da34      	bge.n	8006e6c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e20:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e22:	e023      	b.n	8006e6c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e30:	461a      	mov	r2, r3
 8006e32:	f240 2325 	movw	r3, #549	; 0x225
 8006e36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da17      	bge.n	8006e70 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006e5e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e60:	e006      	b.n	8006e70 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	e004      	b.n	8006e72 <USB_HC_Init+0x11e>
      break;
 8006e68:	bf00      	nop
 8006e6a:	e002      	b.n	8006e72 <USB_HC_Init+0x11e>
      break;
 8006e6c:	bf00      	nop
 8006e6e:	e000      	b.n	8006e72 <USB_HC_Init+0x11e>
      break;
 8006e70:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f303 	lsl.w	r3, r1, r3
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	da03      	bge.n	8006eac <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e001      	b.n	8006eb0 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d103      	bne.n	8006ec0 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e001      	b.n	8006ec4 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ec4:	787b      	ldrb	r3, [r7, #1]
 8006ec6:	059b      	lsls	r3, r3, #22
 8006ec8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ecc:	78bb      	ldrb	r3, [r7, #2]
 8006ece:	02db      	lsls	r3, r3, #11
 8006ed0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ed4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ed6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006eda:	049b      	lsls	r3, r3, #18
 8006edc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ee0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ee8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	0159      	lsls	r1, r3, #5
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f00:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006f02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d10f      	bne.n	8006f2a <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f28:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b088      	sub	sp, #32
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f50:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	8912      	ldrh	r2, [r2, #8]
 8006f62:	4413      	add	r3, r2
 8006f64:	3b01      	subs	r3, #1
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	8912      	ldrh	r2, [r2, #8]
 8006f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006f70:	8bfa      	ldrh	r2, [r7, #30]
 8006f72:	8a7b      	ldrh	r3, [r7, #18]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d90b      	bls.n	8006f90 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006f78:	8a7b      	ldrh	r3, [r7, #18]
 8006f7a:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006f7c:	8bfb      	ldrh	r3, [r7, #30]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	8912      	ldrh	r2, [r2, #8]
 8006f82:	fb02 f203 	mul.w	r2, r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	611a      	str	r2, [r3, #16]
 8006f8a:	e001      	b.n	8006f90 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006f98:	8bfb      	ldrh	r3, [r7, #30]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	8912      	ldrh	r2, [r2, #8]
 8006f9e:	fb02 f203 	mul.w	r2, r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fae:	8bfb      	ldrh	r3, [r7, #30]
 8006fb0:	04d9      	lsls	r1, r3, #19
 8006fb2:	4b5f      	ldr	r3, [pc, #380]	; (8007130 <USB_HC_StartXfer+0x1f8>)
 8006fb4:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fb6:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	7a9b      	ldrb	r3, [r3, #10]
 8006fbc:	075b      	lsls	r3, r3, #29
 8006fbe:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	0148      	lsls	r0, r1, #5
 8006fc6:	69b9      	ldr	r1, [r7, #24]
 8006fc8:	4401      	add	r1, r0
 8006fca:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fce:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fd0:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bf0c      	ite	eq
 8006fe2:	2301      	moveq	r3, #1
 8006fe4:	2300      	movne	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007008:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	7c7b      	ldrb	r3, [r7, #17]
 800701a:	075b      	lsls	r3, r3, #29
 800701c:	6979      	ldr	r1, [r7, #20]
 800701e:	0148      	lsls	r0, r1, #5
 8007020:	69b9      	ldr	r1, [r7, #24]
 8007022:	4401      	add	r1, r0
 8007024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	4413      	add	r3, r2
 8007034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3e      	ldr	r2, [pc, #248]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 800703c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800703e:	4b3d      	ldr	r3, [pc, #244]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007046:	4a3b      	ldr	r2, [pc, #236]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 8007048:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	78db      	ldrb	r3, [r3, #3]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d006      	beq.n	8007060 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007052:	4b38      	ldr	r3, [pc, #224]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800705a:	4a36      	ldr	r2, [pc, #216]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e005      	b.n	800706c <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007060:	4b34      	ldr	r3, [pc, #208]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007068:	4a32      	ldr	r2, [pc, #200]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 800706a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800706c:	4b31      	ldr	r3, [pc, #196]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007074:	4a2f      	ldr	r2, [pc, #188]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 8007076:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007084:	461a      	mov	r2, r3
 8007086:	4b2b      	ldr	r3, [pc, #172]	; (8007134 <USB_HC_StartXfer+0x1fc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	78db      	ldrb	r3, [r3, #3]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d148      	bne.n	8007126 <USB_HC_StartXfer+0x1ee>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d044      	beq.n	8007126 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	79db      	ldrb	r3, [r3, #7]
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d831      	bhi.n	8007108 <USB_HC_StartXfer+0x1d0>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <USB_HC_StartXfer+0x174>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070e1 	.word	0x080070e1
 80070b4:	080070bd 	.word	0x080070bd
 80070b8:	080070e1 	.word	0x080070e1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	3303      	adds	r3, #3
 80070c2:	089b      	lsrs	r3, r3, #2
 80070c4:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80070c6:	89fa      	ldrh	r2, [r7, #14]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d91c      	bls.n	800710c <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	619a      	str	r2, [r3, #24]
          }
          break;
 80070de:	e015      	b.n	800710c <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	3303      	adds	r3, #3
 80070e6:	089b      	lsrs	r3, r3, #2
 80070e8:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070ea:	89fa      	ldrh	r2, [r7, #14]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d90a      	bls.n	8007110 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	619a      	str	r2, [r3, #24]
          }
          break;
 8007106:	e003      	b.n	8007110 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <USB_HC_StartXfer+0x1da>
          break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <USB_HC_StartXfer+0x1da>
          break;
 8007110:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68d9      	ldr	r1, [r3, #12]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	785a      	ldrb	r2, [r3, #1]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	b29b      	uxth	r3, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff fc23 	bl	800696c <USB_WritePacket>
    }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	1ff80000 	.word	0x1ff80000
 8007134:	200000b0 	.word	0x200000b0

08007138 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	b29b      	uxth	r3, r3
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800715a:	b480      	push	{r7}
 800715c:	b087      	sub	sp, #28
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	0c9b      	lsrs	r3, r3, #18
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <USB_HC_Halt+0x3a>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d16c      	bne.n	800726e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d143      	bne.n	8007248 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	440a      	add	r2, r1
 8007216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800721e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	3301      	adds	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722c:	d81d      	bhi.n	800726a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007244:	d0ec      	beq.n	8007220 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007246:	e080      	b.n	800734a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	4413      	add	r3, r2
 8007250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	440a      	add	r2, r1
 800725e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007266:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007268:	e06f      	b.n	800734a <USB_HC_Halt+0x1f0>
          break;
 800726a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800726c:	e06d      	b.n	800734a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	440a      	add	r2, r1
 8007284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800728c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d143      	bne.n	8007326 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072fc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800730a:	d81d      	bhi.n	8007348 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007322:	d0ec      	beq.n	80072fe <USB_HC_Halt+0x1a4>
 8007324:	e011      	b.n	800734a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	440a      	add	r2, r1
 800733c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e000      	b.n	800734a <USB_HC_Halt+0x1f0>
          break;
 8007348:	bf00      	nop
    }
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fa7c 	bl	8006866 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800736e:	2110      	movs	r1, #16
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff fab3 	bl	80068dc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fad6 	bl	8006928 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e01f      	b.n	80073c2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b0f      	cmp	r3, #15
 80073c6:	d9dc      	bls.n	8007382 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	e034      	b.n	8007438 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	461a      	mov	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3301      	adds	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007414:	d80c      	bhi.n	8007430 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800742c:	d0ec      	beq.n	8007408 <USB_StopHost+0xb0>
 800742e:	e000      	b.n	8007432 <USB_StopHost+0xda>
        break;
 8007430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d9c7      	bls.n	80073ce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007444:	461a      	mov	r2, r3
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f04f 32ff 	mov.w	r2, #4294967295
 8007452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff f9f5 	bl	8006844 <USB_EnableGlobalInt>

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b089      	sub	sp, #36	; 0x24
 8007468:	af04      	add	r7, sp, #16
 800746a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800746c:	2301      	movs	r3, #1
 800746e:	2202      	movs	r2, #2
 8007470:	2102      	movs	r1, #2
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fc68 	bl	8007d48 <USBH_FindInterface>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2bff      	cmp	r3, #255	; 0xff
 8007480:	d002      	beq.n	8007488 <USBH_CDC_InterfaceInit+0x24>
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d901      	bls.n	800748c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007488:	2302      	movs	r3, #2
 800748a:	e13d      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fc3d 	bl	8007d10 <USBH_SelectInterface>
 8007496:	4603      	mov	r3, r0
 8007498:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80074a0:	2302      	movs	r3, #2
 80074a2:	e131      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80074aa:	2050      	movs	r0, #80	; 0x50
 80074ac:	f002 fa08 	bl	80098c0 <malloc>
 80074b0:	4603      	mov	r3, r0
 80074b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80074c4:	2302      	movs	r3, #2
 80074c6:	e11f      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80074c8:	2250      	movs	r2, #80	; 0x50
 80074ca:	2100      	movs	r1, #0
 80074cc:	68b8      	ldr	r0, [r7, #8]
 80074ce:	f002 fa07 	bl	80098e0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	211a      	movs	r1, #26
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da15      	bge.n	8007516 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	211a      	movs	r1, #26
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	211a      	movs	r1, #26
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	4413      	add	r3, r2
 800750c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007510:	881a      	ldrh	r2, [r3, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fe36 	bl	800918e <USBH_AllocPipe>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7819      	ldrb	r1, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	7858      	ldrb	r0, [r3, #1]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	8952      	ldrh	r2, [r2, #10]
 8007542:	9202      	str	r2, [sp, #8]
 8007544:	2203      	movs	r2, #3
 8007546:	9201      	str	r2, [sp, #4]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4623      	mov	r3, r4
 800754c:	4602      	mov	r2, r0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fdee 	bl	8009130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2200      	movs	r2, #0
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f002 f8ff 	bl	8009760 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	210a      	movs	r1, #10
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fbed 	bl	8007d48 <USBH_FindInterface>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2bff      	cmp	r3, #255	; 0xff
 8007576:	d002      	beq.n	800757e <USBH_CDC_InterfaceInit+0x11a>
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d901      	bls.n	8007582 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	e0c2      	b.n	8007708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	211a      	movs	r1, #26
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
 800758e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b25b      	sxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	da16      	bge.n	80075c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	211a      	movs	r1, #26
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	211a      	movs	r1, #26
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	835a      	strh	r2, [r3, #26]
 80075c6:	e015      	b.n	80075f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	211a      	movs	r1, #26
 80075ce:	fb01 f303 	mul.w	r3, r1, r3
 80075d2:	4413      	add	r3, r2
 80075d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	211a      	movs	r1, #26
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075ee:	881a      	ldrh	r2, [r3, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	211a      	movs	r1, #26
 80075fa:	fb01 f303 	mul.w	r3, r1, r3
 80075fe:	4413      	add	r3, r2
 8007600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b25b      	sxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	da16      	bge.n	800763a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	211a      	movs	r1, #26
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	f203 3356 	addw	r3, r3, #854	; 0x356
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	211a      	movs	r1, #26
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007632:	881a      	ldrh	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	835a      	strh	r2, [r3, #26]
 8007638:	e015      	b.n	8007666 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	211a      	movs	r1, #26
 8007640:	fb01 f303 	mul.w	r3, r1, r3
 8007644:	4413      	add	r3, r2
 8007646:	f203 3356 	addw	r3, r3, #854	; 0x356
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	211a      	movs	r1, #26
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	4413      	add	r3, r2
 800765c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007660:	881a      	ldrh	r2, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	7b9b      	ldrb	r3, [r3, #14]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fd8e 	bl	800918e <USBH_AllocPipe>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	7bdb      	ldrb	r3, [r3, #15]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fd84 	bl	800918e <USBH_AllocPipe>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	7b59      	ldrb	r1, [r3, #13]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	7b98      	ldrb	r0, [r3, #14]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	8b12      	ldrh	r2, [r2, #24]
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	2202      	movs	r2, #2
 80076aa:	9201      	str	r2, [sp, #4]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4623      	mov	r3, r4
 80076b0:	4602      	mov	r2, r0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fd3c 	bl	8009130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	7b19      	ldrb	r1, [r3, #12]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	7bd8      	ldrb	r0, [r3, #15]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	8b52      	ldrh	r2, [r2, #26]
 80076d0:	9202      	str	r2, [sp, #8]
 80076d2:	2202      	movs	r2, #2
 80076d4:	9201      	str	r2, [sp, #4]
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	4623      	mov	r3, r4
 80076da:	4602      	mov	r2, r0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fd27 	bl	8009130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	7b5b      	ldrb	r3, [r3, #13]
 80076ee:	2200      	movs	r2, #0
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f002 f834 	bl	8009760 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	7b1b      	ldrb	r3, [r3, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f002 f82d 	bl	8009760 <USBH_LL_SetToggle>

  return USBH_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	bd90      	pop	{r4, r7, pc}

08007710 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 fd1c 	bl	800916e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fd47 	bl	80091d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	7b1b      	ldrb	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	7b1b      	ldrb	r3, [r3, #12]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 fd09 	bl	800916e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7b1b      	ldrb	r3, [r3, #12]
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 fd34 	bl	80091d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	7b5b      	ldrb	r3, [r3, #13]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00e      	beq.n	8007794 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7b5b      	ldrb	r3, [r3, #13]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fcf6 	bl	800916e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	7b5b      	ldrb	r3, [r3, #13]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fd21 	bl	80091d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f002 f891 	bl	80098d0 <free>
    phost->pActiveClass->pData = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077b4:	2200      	movs	r2, #0
 80077b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3340      	adds	r3, #64	; 0x40
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8b1 	bl	8007942 <GetLineCoding>
 80077e0:	4603      	mov	r3, r0
 80077e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077f0:	2102      	movs	r1, #2
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077f6:	7afb      	ldrb	r3, [r7, #11]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007820:	2b04      	cmp	r3, #4
 8007822:	d877      	bhi.n	8007914 <USBH_CDC_Process+0x114>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <USBH_CDC_Process+0x2c>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007841 	.word	0x08007841
 8007830:	08007847 	.word	0x08007847
 8007834:	08007877 	.word	0x08007877
 8007838:	080078eb 	.word	0x080078eb
 800783c:	080078f9 	.word	0x080078f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
      break;
 8007844:	e06d      	b.n	8007922 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f897 	bl	8007980 <SetLineCoding>
 8007852:	4603      	mov	r3, r0
 8007854:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007864:	e058      	b.n	8007918 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d055      	beq.n	8007918 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2204      	movs	r2, #4
 8007870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007874:	e050      	b.n	8007918 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	3340      	adds	r3, #64	; 0x40
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f860 	bl	8007942 <GetLineCoding>
 8007882:	4603      	mov	r3, r0
 8007884:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d126      	bne.n	80078da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	791b      	ldrb	r3, [r3, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d13b      	bne.n	800791c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d133      	bne.n	800791c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d12b      	bne.n	800791c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d124      	bne.n	800791c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f95a 	bl	8007b8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078d8:	e020      	b.n	800791c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d01d      	beq.n	800791c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2204      	movs	r2, #4
 80078e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078e8:	e018      	b.n	800791c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f867 	bl	80079be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8dc 	bl	8007aae <CDC_ProcessReception>
      break;
 80078f6:	e014      	b.n	8007922 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078f8:	2100      	movs	r1, #0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 ffe5 	bl	80088ca <USBH_ClrFeature>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007912:	e005      	b.n	8007920 <USBH_CDC_Process+0x120>

    default:
      break;
 8007914:	bf00      	nop
 8007916:	e004      	b.n	8007922 <USBH_CDC_Process+0x122>
      break;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <USBH_CDC_Process+0x122>
      break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <USBH_CDC_Process+0x122>
      break;
 8007920:	bf00      	nop

  }

  return status;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	22a1      	movs	r2, #161	; 0xa1
 8007950:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2207      	movs	r2, #7
 8007968:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2207      	movs	r2, #7
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 f98a 	bl	8008c8a <USBH_CtlReq>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2221      	movs	r2, #33	; 0x21
 800798e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2207      	movs	r2, #7
 80079a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2207      	movs	r2, #7
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f96b 	bl	8008c8a <USBH_CtlReq>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d002      	beq.n	80079e4 <CDC_ProcessTransmission+0x26>
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d025      	beq.n	8007a2e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80079e2:	e060      	b.n	8007aa6 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	8b12      	ldrh	r2, [r2, #24]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d90c      	bls.n	8007a0a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	69d9      	ldr	r1, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8b1a      	ldrh	r2, [r3, #24]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	7b58      	ldrb	r0, [r3, #13]
 80079fc:	2301      	movs	r3, #1
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4603      	mov	r3, r0
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fb51 	bl	80090aa <USBH_BulkSendData>
 8007a08:	e00c      	b.n	8007a24 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	7b58      	ldrb	r0, [r3, #13]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fb43 	bl	80090aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a2c:	e03b      	b.n	8007aa6 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	7b5b      	ldrb	r3, [r3, #13]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fe69 	bl	800970c <USBH_LL_GetURBState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d128      	bne.n	8007a96 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	8b12      	ldrh	r2, [r2, #24]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d90e      	bls.n	8007a6e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	8b12      	ldrh	r2, [r2, #24]
 8007a58:	1a9a      	subs	r2, r3, r2
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	8b12      	ldrh	r2, [r2, #24]
 8007a66:	441a      	add	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	61da      	str	r2, [r3, #28]
 8007a6c:	e002      	b.n	8007a74 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a84:	e00e      	b.n	8007aa4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f868 	bl	8007b64 <USBH_CDC_TransmitCallback>
      break;
 8007a94:	e006      	b.n	8007aa4 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d103      	bne.n	8007aa4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007aa4:	bf00      	nop
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b086      	sub	sp, #24
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d002      	beq.n	8007ad4 <CDC_ProcessReception+0x26>
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d00e      	beq.n	8007af0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007ad2:	e043      	b.n	8007b5c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	6a19      	ldr	r1, [r3, #32]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	8b5a      	ldrh	r2, [r3, #26]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	7b1b      	ldrb	r3, [r3, #12]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fb07 	bl	80090f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007aee:	e035      	b.n	8007b5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	7b1b      	ldrb	r3, [r3, #12]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fe08 	bl	800970c <USBH_LL_GetURBState>
 8007afc:	4603      	mov	r3, r0
 8007afe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b00:	7cfb      	ldrb	r3, [r7, #19]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d129      	bne.n	8007b5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	7b1b      	ldrb	r3, [r3, #12]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fd6b 	bl	80095e8 <USBH_LL_GetLastXferSize>
 8007b12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d016      	beq.n	8007b4c <CDC_ProcessReception+0x9e>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	8b5b      	ldrh	r3, [r3, #26]
 8007b22:	461a      	mov	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d910      	bls.n	8007b4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad2      	subs	r2, r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	441a      	add	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2203      	movs	r2, #3
 8007b46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b4a:	e006      	b.n	8007b5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f80f 	bl	8007b78 <USBH_CDC_ReceiveCallback>
      break;
 8007b5a:	bf00      	nop
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e029      	b.n	8007c0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	79fa      	ldrb	r2, [r7, #7]
 8007bbc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f81f 	bl	8007c14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f001 fc3d 	bl	8009484 <USBH_LL_Init>

  return USBH_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e009      	b.n	8007c3a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	33e0      	adds	r3, #224	; 0xe0
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	2200      	movs	r2, #0
 8007c32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b0e      	cmp	r3, #14
 8007c3e:	d9f2      	bls.n	8007c26 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e009      	b.n	8007c5a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c60:	d3f1      	bcc.n	8007c46 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2240      	movs	r2, #64	; 0x40
 8007c86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d016      	beq.n	8007cfe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10e      	bne.n	8007cf8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	33de      	adds	r3, #222	; 0xde
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	e004      	b.n	8007d02 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	73fb      	strb	r3, [r7, #15]
 8007cfc:	e001      	b.n	8007d02 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d204      	bcs.n	8007d36 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	78fa      	ldrb	r2, [r7, #3]
 8007d30:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007d34:	e001      	b.n	8007d3a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d36:	2302      	movs	r3, #2
 8007d38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	70fb      	strb	r3, [r7, #3]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70bb      	strb	r3, [r7, #2]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d70:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d72:	e025      	b.n	8007dc0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	221a      	movs	r2, #26
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	3302      	adds	r3, #2
 8007d84:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	795b      	ldrb	r3, [r3, #5]
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d002      	beq.n	8007d96 <USBH_FindInterface+0x4e>
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2bff      	cmp	r3, #255	; 0xff
 8007d94:	d111      	bne.n	8007dba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d9a:	78ba      	ldrb	r2, [r7, #2]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d002      	beq.n	8007da6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007da0:	78bb      	ldrb	r3, [r7, #2]
 8007da2:	2bff      	cmp	r3, #255	; 0xff
 8007da4:	d109      	bne.n	8007dba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007daa:	787a      	ldrb	r2, [r7, #1]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d002      	beq.n	8007db6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007db0:	787b      	ldrb	r3, [r7, #1]
 8007db2:	2bff      	cmp	r3, #255	; 0xff
 8007db4:	d101      	bne.n	8007dba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	e006      	b.n	8007dc8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d9d6      	bls.n	8007d74 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dc6:	23ff      	movs	r3, #255	; 0xff
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fb8d 	bl	80094fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007de2:	2101      	movs	r1, #1
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 fca4 	bl	8009732 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af04      	add	r7, sp, #16
 8007dfa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d102      	bne.n	8007e16 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2203      	movs	r2, #3
 8007e14:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b0b      	cmp	r3, #11
 8007e1e:	f200 81b3 	bhi.w	8008188 <USBH_Process+0x394>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <USBH_Process+0x34>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e59 	.word	0x08007e59
 8007e2c:	08007e8b 	.word	0x08007e8b
 8007e30:	08007ef3 	.word	0x08007ef3
 8007e34:	08008123 	.word	0x08008123
 8007e38:	08008189 	.word	0x08008189
 8007e3c:	08007f97 	.word	0x08007f97
 8007e40:	080080c9 	.word	0x080080c9
 8007e44:	08007fcd 	.word	0x08007fcd
 8007e48:	08007fed 	.word	0x08007fed
 8007e4c:	0800800d 	.word	0x0800800d
 8007e50:	0800803b 	.word	0x0800803b
 8007e54:	0800810b 	.word	0x0800810b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8193 	beq.w	800818c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e6c:	20c8      	movs	r0, #200	; 0xc8
 8007e6e:	f001 fcaa 	bl	80097c6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 fb9d 	bl	80095b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e88:	e180      	b.n	800818c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d107      	bne.n	8007ea4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ea2:	e182      	b.n	80081aa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eae:	d914      	bls.n	8007eda <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d903      	bls.n	8007ed2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	220d      	movs	r2, #13
 8007ece:	701a      	strb	r2, [r3, #0]
      break;
 8007ed0:	e16b      	b.n	80081aa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
      break;
 8007ed8:	e167      	b.n	80081aa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ee0:	f103 020a 	add.w	r2, r3, #10
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007eea:	200a      	movs	r0, #10
 8007eec:	f001 fc6b 	bl	80097c6 <USBH_Delay>
      break;
 8007ef0:	e15b      	b.n	80081aa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f02:	2104      	movs	r1, #4
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f08:	2064      	movs	r0, #100	; 0x64
 8007f0a:	f001 fc5c 	bl	80097c6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fb2a 	bl	8009568 <USBH_LL_GetSpeed>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2205      	movs	r2, #5
 8007f22:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 f931 	bl	800918e <USBH_AllocPipe>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f34:	2180      	movs	r1, #128	; 0x80
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f929 	bl	800918e <USBH_AllocPipe>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7919      	ldrb	r1, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	9202      	str	r2, [sp, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4603      	mov	r3, r0
 8007f64:	2280      	movs	r2, #128	; 0x80
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f8e2 	bl	8009130 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7959      	ldrb	r1, [r3, #5]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f80:	b292      	uxth	r2, r2
 8007f82:	9202      	str	r2, [sp, #8]
 8007f84:	2200      	movs	r2, #0
 8007f86:	9201      	str	r2, [sp, #4]
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 f8ce 	bl	8009130 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f94:	e109      	b.n	80081aa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f90c 	bl	80081b4 <USBH_HandleEnum>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f040 80f3 	bne.w	8008190 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d103      	bne.n	8007fc4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007fc2:	e0e5      	b.n	8008190 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	701a      	strb	r2, [r3, #0]
      break;
 8007fca:	e0e1      	b.n	8008190 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80de 	beq.w	8008194 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fde:	2101      	movs	r1, #1
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007fea:	e0d3      	b.n	8008194 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc20 	bl	800883c <USBH_SetCfg>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 80ca 	bne.w	8008198 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2209      	movs	r2, #9
 8008008:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800800a:	e0c5      	b.n	8008198 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800801a:	2101      	movs	r1, #1
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc30 	bl	8008882 <USBH_SetFeature>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	f040 80b9 	bne.w	800819c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220a      	movs	r2, #10
 800802e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008030:	e0b4      	b.n	800819c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	220a      	movs	r2, #10
 8008036:	701a      	strb	r2, [r3, #0]
      break;
 8008038:	e0b0      	b.n	800819c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80ad 	beq.w	80081a0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
 8008052:	e016      	b.n	8008082 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008054:	7bfa      	ldrb	r2, [r7, #15]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	32de      	adds	r2, #222	; 0xde
 800805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805e:	791a      	ldrb	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008066:	429a      	cmp	r2, r3
 8008068:	d108      	bne.n	800807c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800806a:	7bfa      	ldrb	r2, [r7, #15]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	32de      	adds	r2, #222	; 0xde
 8008070:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800807a:	e005      	b.n	8008088 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	3301      	adds	r3, #1
 8008080:	73fb      	strb	r3, [r7, #15]
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0e5      	beq.n	8008054 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d016      	beq.n	80080c0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2206      	movs	r2, #6
 80080a8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080b0:	2103      	movs	r1, #3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080b6:	e073      	b.n	80081a0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	220d      	movs	r2, #13
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e06f      	b.n	80081a0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	220d      	movs	r2, #13
 80080c4:	701a      	strb	r2, [r3, #0]
      break;
 80080c6:	e06b      	b.n	80081a0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d017      	beq.n	8008102 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	220b      	movs	r2, #11
 80080ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080f0:	e058      	b.n	80081a4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d154      	bne.n	80081a4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	220d      	movs	r2, #13
 80080fe:	701a      	strb	r2, [r3, #0]
      break;
 8008100:	e050      	b.n	80081a4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	220d      	movs	r2, #13
 8008106:	701a      	strb	r2, [r3, #0]
      break;
 8008108:	e04c      	b.n	80081a4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d049      	beq.n	80081a8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
      }
      break;
 8008120:	e042      	b.n	80081a8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff fd72 	bl	8007c14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800815e:	2105      	movs	r1, #5
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b01      	cmp	r3, #1
 800816e:	d107      	bne.n	8008180 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fe2b 	bl	8007dd4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800817e:	e014      	b.n	80081aa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 f9bb 	bl	80094fc <USBH_LL_Start>
      break;
 8008186:	e010      	b.n	80081aa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008188:	bf00      	nop
 800818a:	e00e      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 800818c:	bf00      	nop
 800818e:	e00c      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 8008190:	bf00      	nop
 8008192:	e00a      	b.n	80081aa <USBH_Process+0x3b6>
    break;
 8008194:	bf00      	nop
 8008196:	e008      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 8008198:	bf00      	nop
 800819a:	e006      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 800819c:	bf00      	nop
 800819e:	e004      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <USBH_Process+0x3b6>
      break;
 80081a8:	bf00      	nop
  }
  return USBH_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80081bc:	2301      	movs	r3, #1
 80081be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	f200 81c1 	bhi.w	8008550 <USBH_HandleEnum+0x39c>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <USBH_HandleEnum+0x20>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	080081f5 	.word	0x080081f5
 80081d8:	080082b3 	.word	0x080082b3
 80081dc:	0800831d 	.word	0x0800831d
 80081e0:	080083ab 	.word	0x080083ab
 80081e4:	08008415 	.word	0x08008415
 80081e8:	08008485 	.word	0x08008485
 80081ec:	080084cb 	.word	0x080084cb
 80081f0:	08008511 	.word	0x08008511
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80081f4:	2108      	movs	r1, #8
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa50 	bl	800869c <USBH_Get_DevDesc>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d130      	bne.n	8008268 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7919      	ldrb	r1, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800822a:	b292      	uxth	r2, r2
 800822c:	9202      	str	r2, [sp, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	9201      	str	r2, [sp, #4]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	4603      	mov	r3, r0
 8008236:	2280      	movs	r2, #128	; 0x80
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 ff79 	bl	8009130 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7959      	ldrb	r1, [r3, #5]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008252:	b292      	uxth	r2, r2
 8008254:	9202      	str	r2, [sp, #8]
 8008256:	2200      	movs	r2, #0
 8008258:	9201      	str	r2, [sp, #4]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	4603      	mov	r3, r0
 800825e:	2200      	movs	r2, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ff65 	bl	8009130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008266:	e175      	b.n	8008554 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b03      	cmp	r3, #3
 800826c:	f040 8172 	bne.w	8008554 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008276:	3301      	adds	r3, #1
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008286:	2b03      	cmp	r3, #3
 8008288:	d903      	bls.n	8008292 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	220d      	movs	r2, #13
 800828e:	701a      	strb	r2, [r3, #0]
      break;
 8008290:	e160      	b.n	8008554 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	795b      	ldrb	r3, [r3, #5]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 ff99 	bl	80091d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	791b      	ldrb	r3, [r3, #4]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 ff93 	bl	80091d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
      break;
 80082b0:	e150      	b.n	8008554 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80082b2:	2112      	movs	r1, #18
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f9f1 	bl	800869c <USBH_Get_DevDesc>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082ca:	e145      	b.n	8008558 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	f040 8142 	bne.w	8008558 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082da:	3301      	adds	r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d903      	bls.n	80082f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	220d      	movs	r2, #13
 80082f2:	701a      	strb	r2, [r3, #0]
      break;
 80082f4:	e130      	b.n	8008558 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 ff67 	bl	80091d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	791b      	ldrb	r3, [r3, #4]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 ff61 	bl	80091d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
      break;
 800831a:	e11d      	b.n	8008558 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800831c:	2101      	movs	r1, #1
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa68 	bl	80087f4 <USBH_SetAddress>
 8008324:	4603      	mov	r3, r0
 8008326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d132      	bne.n	8008394 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800832e:	2002      	movs	r0, #2
 8008330:	f001 fa49 	bl	80097c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2203      	movs	r2, #3
 8008340:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	7919      	ldrb	r1, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008356:	b292      	uxth	r2, r2
 8008358:	9202      	str	r2, [sp, #8]
 800835a:	2200      	movs	r2, #0
 800835c:	9201      	str	r2, [sp, #4]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4603      	mov	r3, r0
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fee3 	bl	8009130 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7959      	ldrb	r1, [r3, #5]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800837e:	b292      	uxth	r2, r2
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	9201      	str	r2, [sp, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	2200      	movs	r2, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fecf 	bl	8009130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008392:	e0e3      	b.n	800855c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b03      	cmp	r3, #3
 8008398:	f040 80e0 	bne.w	800855c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	220d      	movs	r2, #13
 80083a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	705a      	strb	r2, [r3, #1]
      break;
 80083a8:	e0d8      	b.n	800855c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80083aa:	2109      	movs	r1, #9
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f99d 	bl	80086ec <USBH_Get_CfgDesc>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2204      	movs	r2, #4
 80083c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083c2:	e0cd      	b.n	8008560 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	f040 80ca 	bne.w	8008560 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083d2:	3301      	adds	r3, #1
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d903      	bls.n	80083ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	220d      	movs	r2, #13
 80083ea:	701a      	strb	r2, [r3, #0]
      break;
 80083ec:	e0b8      	b.n	8008560 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	795b      	ldrb	r3, [r3, #5]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 feeb 	bl	80091d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	791b      	ldrb	r3, [r3, #4]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fee5 	bl	80091d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
      break;
 8008412:	e0a5      	b.n	8008560 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f965 	bl	80086ec <USBH_Get_CfgDesc>
 8008422:	4603      	mov	r3, r0
 8008424:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2205      	movs	r2, #5
 8008430:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008432:	e097      	b.n	8008564 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2b03      	cmp	r3, #3
 8008438:	f040 8094 	bne.w	8008564 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008442:	3301      	adds	r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008452:	2b03      	cmp	r3, #3
 8008454:	d903      	bls.n	800845e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	220d      	movs	r2, #13
 800845a:	701a      	strb	r2, [r3, #0]
      break;
 800845c:	e082      	b.n	8008564 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	795b      	ldrb	r3, [r3, #5]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 feb3 	bl	80091d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	791b      	ldrb	r3, [r3, #4]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fead 	bl	80091d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
      break;
 8008482:	e06f      	b.n	8008564 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800848a:	2b00      	cmp	r3, #0
 800848c:	d019      	beq.n	80084c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800849a:	23ff      	movs	r3, #255	; 0xff
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f949 	bl	8008734 <USBH_Get_StringDesc>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2206      	movs	r2, #6
 80084b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084b2:	e059      	b.n	8008568 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d156      	bne.n	8008568 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2206      	movs	r2, #6
 80084be:	705a      	strb	r2, [r3, #1]
      break;
 80084c0:	e052      	b.n	8008568 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2206      	movs	r2, #6
 80084c6:	705a      	strb	r2, [r3, #1]
      break;
 80084c8:	e04e      	b.n	8008568 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d019      	beq.n	8008508 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084e0:	23ff      	movs	r3, #255	; 0xff
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f926 	bl	8008734 <USBH_Get_StringDesc>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2207      	movs	r2, #7
 80084f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084f8:	e038      	b.n	800856c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d135      	bne.n	800856c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2207      	movs	r2, #7
 8008504:	705a      	strb	r2, [r3, #1]
      break;
 8008506:	e031      	b.n	800856c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2207      	movs	r2, #7
 800850c:	705a      	strb	r2, [r3, #1]
      break;
 800850e:	e02d      	b.n	800856c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008516:	2b00      	cmp	r3, #0
 8008518:	d017      	beq.n	800854a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008526:	23ff      	movs	r3, #255	; 0xff
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f903 	bl	8008734 <USBH_Get_StringDesc>
 800852e:	4603      	mov	r3, r0
 8008530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800853c:	e018      	b.n	8008570 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d115      	bne.n	8008570 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
      break;
 8008548:	e012      	b.n	8008570 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	e00f      	b.n	8008570 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008550:	bf00      	nop
 8008552:	e00e      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 8008554:	bf00      	nop
 8008556:	e00c      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 8008558:	bf00      	nop
 800855a:	e00a      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 800855c:	bf00      	nop
 800855e:	e008      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 8008560:	bf00      	nop
 8008562:	e006      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 8008564:	bf00      	nop
 8008566:	e004      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 8008568:	bf00      	nop
 800856a:	e002      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 800856c:	bf00      	nop
 800856e:	e000      	b.n	8008572 <USBH_HandleEnum+0x3be>
      break;
 8008570:	bf00      	nop
  }
  return Status;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f804 	bl	80085be <USBH_HandleSof>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b0b      	cmp	r3, #11
 80085ce:	d10a      	bne.n	80085e6 <USBH_HandleSof+0x28>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
  }
}
 80085e6:	bf00      	nop
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80085fe:	bf00      	nop
}
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800861a:	bf00      	nop
}
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 ff5c 	bl	8009532 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fda5 	bl	80091d0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	795b      	ldrb	r3, [r3, #5]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fd9f 	bl	80091d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	4613      	mov	r3, r2
 80086b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086ba:	2100      	movs	r1, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f864 	bl	800878a <USBH_GetDescriptor>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73fb      	strb	r3, [r7, #15]
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086d8:	78fa      	ldrb	r2, [r7, #3]
 80086da:	b292      	uxth	r2, r2
 80086dc:	4619      	mov	r1, r3
 80086de:	f000 f918 	bl	8008912 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	331c      	adds	r3, #28
 80086fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80086fe:	887b      	ldrh	r3, [r7, #2]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008708:	2100      	movs	r1, #0
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f83d 	bl	800878a <USBH_GetDescriptor>
 8008710:	4603      	mov	r3, r0
 8008712:	72fb      	strb	r3, [r7, #11]
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d107      	bne.n	800872a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008720:	887a      	ldrh	r2, [r7, #2]
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f964 	bl	80089f2 <USBH_ParseCfgDesc>
  }

  return status;
 800872a:	7afb      	ldrb	r3, [r7, #11]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	461a      	mov	r2, r3
 8008740:	460b      	mov	r3, r1
 8008742:	72fb      	strb	r3, [r7, #11]
 8008744:	4613      	mov	r3, r2
 8008746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	b29b      	uxth	r3, r3
 800874c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008750:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008758:	893b      	ldrh	r3, [r7, #8]
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	460b      	mov	r3, r1
 800875e:	2100      	movs	r1, #0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f812 	bl	800878a <USBH_GetDescriptor>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d107      	bne.n	8008780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008776:	893a      	ldrh	r2, [r7, #8]
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 fa37 	bl	8008bee <USBH_ParseStringDesc>
  }

  return status;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	607b      	str	r3, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	72fb      	strb	r3, [r7, #11]
 8008798:	4613      	mov	r3, r2
 800879a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	789b      	ldrb	r3, [r3, #2]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d11c      	bne.n	80087de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2206      	movs	r2, #6
 80087b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	893a      	ldrh	r2, [r7, #8]
 80087ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80087bc:	893b      	ldrh	r3, [r7, #8]
 80087be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c6:	d104      	bne.n	80087d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f240 4209 	movw	r2, #1033	; 0x409
 80087ce:	829a      	strh	r2, [r3, #20]
 80087d0:	e002      	b.n	80087d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8b3a      	ldrh	r2, [r7, #24]
 80087dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80087de:	8b3b      	ldrh	r3, [r7, #24]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6879      	ldr	r1, [r7, #4]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fa50 	bl	8008c8a <USBH_CtlReq>
 80087ea:	4603      	mov	r3, r0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	789b      	ldrb	r3, [r3, #2]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d10f      	bne.n	8008828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2205      	movs	r2, #5
 8008812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa2c 	bl	8008c8a <USBH_CtlReq>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	789b      	ldrb	r3, [r3, #2]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10e      	bne.n	800886e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2209      	movs	r2, #9
 800885a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	887a      	ldrh	r2, [r7, #2]
 8008860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800886e:	2200      	movs	r2, #0
 8008870:	2100      	movs	r1, #0
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa09 	bl	8008c8a <USBH_CtlReq>
 8008878:	4603      	mov	r3, r0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	789b      	ldrb	r3, [r3, #2]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d10f      	bne.n	80088b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2203      	movs	r2, #3
 80088a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f9e5 	bl	8008c8a <USBH_CtlReq>
 80088c0:	4603      	mov	r3, r0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	789b      	ldrb	r3, [r3, #2]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d10f      	bne.n	80088fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2202      	movs	r2, #2
 80088e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f9c1 	bl	8008c8a <USBH_CtlReq>
 8008908:	4603      	mov	r3, r0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	4613      	mov	r3, r2
 800891e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	785a      	ldrb	r2, [r3, #1]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3302      	adds	r3, #2
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	b29a      	uxth	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	3303      	adds	r3, #3
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	b29b      	uxth	r3, r3
 8008944:	4313      	orrs	r3, r2
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	791a      	ldrb	r2, [r3, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	795a      	ldrb	r2, [r3, #5]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	799a      	ldrb	r2, [r3, #6]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	79da      	ldrb	r2, [r3, #7]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d939      	bls.n	80089e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3308      	adds	r3, #8
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	b29a      	uxth	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	3309      	adds	r3, #9
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b29b      	uxth	r3, r3
 8008982:	021b      	lsls	r3, r3, #8
 8008984:	b29b      	uxth	r3, r3
 8008986:	4313      	orrs	r3, r2
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	330a      	adds	r3, #10
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b29a      	uxth	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	330b      	adds	r3, #11
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4313      	orrs	r3, r2
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	330c      	adds	r3, #12
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	330d      	adds	r3, #13
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	b29b      	uxth	r3, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	7b9a      	ldrb	r2, [r3, #14]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	7bda      	ldrb	r2, [r3, #15]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	7c1a      	ldrb	r2, [r3, #16]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	7c5a      	ldrb	r2, [r3, #17]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	745a      	strb	r2, [r3, #17]
  }
}
 80089e6:	bf00      	nop
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b08a      	sub	sp, #40	; 0x28
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	60b9      	str	r1, [r7, #8]
 80089fc:	4613      	mov	r3, r2
 80089fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	785a      	ldrb	r2, [r3, #1]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	3302      	adds	r3, #2
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3303      	adds	r3, #3
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	791a      	ldrb	r2, [r3, #4]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	795a      	ldrb	r2, [r3, #5]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	799a      	ldrb	r2, [r3, #6]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	79da      	ldrb	r2, [r3, #7]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	7a1a      	ldrb	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a68:	88fb      	ldrh	r3, [r7, #6]
 8008a6a:	2b09      	cmp	r3, #9
 8008a6c:	d95f      	bls.n	8008b2e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a6e:	2309      	movs	r3, #9
 8008a70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a76:	e051      	b.n	8008b1c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a78:	f107 0316 	add.w	r3, r7, #22
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a80:	f000 f8e8 	bl	8008c54 <USBH_GetNextDesc>
 8008a84:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	785b      	ldrb	r3, [r3, #1]
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d146      	bne.n	8008b1c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a92:	221a      	movs	r2, #26
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	3308      	adds	r3, #8
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aa4:	69f8      	ldr	r0, [r7, #28]
 8008aa6:	f000 f846 	bl	8008b36 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ab4:	e022      	b.n	8008afc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ab6:	f107 0316 	add.w	r3, r7, #22
 8008aba:	4619      	mov	r1, r3
 8008abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008abe:	f000 f8c9 	bl	8008c54 <USBH_GetNextDesc>
 8008ac2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	2b05      	cmp	r3, #5
 8008aca:	d117      	bne.n	8008afc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ad0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	00d2      	lsls	r2, r2, #3
 8008ad8:	211a      	movs	r1, #26
 8008ada:	fb01 f303 	mul.w	r3, r1, r3
 8008ade:	4413      	add	r3, r2
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aec:	69b8      	ldr	r0, [r7, #24]
 8008aee:	f000 f851 	bl	8008b94 <USBH_ParseEPDesc>
            ep_ix++;
 8008af2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008af6:	3301      	adds	r3, #1
 8008af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	791b      	ldrb	r3, [r3, #4]
 8008b00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d204      	bcs.n	8008b12 <USBH_ParseCfgDesc+0x120>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	885a      	ldrh	r2, [r3, #2]
 8008b0c:	8afb      	ldrh	r3, [r7, #22]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d8d1      	bhi.n	8008ab6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b16:	3301      	adds	r3, #1
 8008b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d804      	bhi.n	8008b2e <USBH_ParseCfgDesc+0x13c>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	885a      	ldrh	r2, [r3, #2]
 8008b28:	8afb      	ldrh	r3, [r7, #22]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d8a4      	bhi.n	8008a78 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008b2e:	bf00      	nop
 8008b30:	3728      	adds	r7, #40	; 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785a      	ldrb	r2, [r3, #1]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	789a      	ldrb	r2, [r3, #2]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	78da      	ldrb	r2, [r3, #3]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	791a      	ldrb	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	795a      	ldrb	r2, [r3, #5]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	799a      	ldrb	r2, [r3, #6]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	79da      	ldrb	r2, [r3, #7]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	7a1a      	ldrb	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	721a      	strb	r2, [r3, #8]
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781a      	ldrb	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	785a      	ldrb	r2, [r3, #1]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	789a      	ldrb	r2, [r3, #2]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	78da      	ldrb	r2, [r3, #3]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	3305      	adds	r3, #5
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	799a      	ldrb	r2, [r3, #6]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	719a      	strb	r2, [r3, #6]
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d120      	bne.n	8008c48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	1e9a      	subs	r2, r3, #2
 8008c0c:	88fb      	ldrh	r3, [r7, #6]
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	bf28      	it	cs
 8008c12:	4613      	movcs	r3, r2
 8008c14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3302      	adds	r3, #2
 8008c1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	82fb      	strh	r3, [r7, #22]
 8008c20:	e00b      	b.n	8008c3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c22:	8afb      	ldrh	r3, [r7, #22]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4413      	add	r3, r2
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	3301      	adds	r3, #1
 8008c32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c34:	8afb      	ldrh	r3, [r7, #22]
 8008c36:	3302      	adds	r3, #2
 8008c38:	82fb      	strh	r3, [r7, #22]
 8008c3a:	8afa      	ldrh	r2, [r7, #22]
 8008c3c:	8abb      	ldrh	r3, [r7, #20]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d3ef      	bcc.n	8008c22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
  }
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	881a      	ldrh	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	4413      	add	r3, r2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	789b      	ldrb	r3, [r3, #2]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d002      	beq.n	8008caa <USBH_CtlReq+0x20>
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d00f      	beq.n	8008cc8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ca8:	e027      	b.n	8008cfa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cc6:	e018      	b.n	8008cfa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 f81b 	bl	8008d04 <USBH_HandleControl>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <USBH_CtlReq+0x54>
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d106      	bne.n	8008cec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	761a      	strb	r2, [r3, #24]
      break;
 8008cea:	e005      	b.n	8008cf8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d102      	bne.n	8008cf8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	709a      	strb	r2, [r3, #2]
      break;
 8008cf8:	bf00      	nop
  }
  return status;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	7e1b      	ldrb	r3, [r3, #24]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	2b0a      	cmp	r3, #10
 8008d1c:	f200 8158 	bhi.w	8008fd0 <USBH_HandleControl+0x2cc>
 8008d20:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <USBH_HandleControl+0x24>)
 8008d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d26:	bf00      	nop
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	08008d6f 	.word	0x08008d6f
 8008d30:	08008dd9 	.word	0x08008dd9
 8008d34:	08008dff 	.word	0x08008dff
 8008d38:	08008e37 	.word	0x08008e37
 8008d3c:	08008e63 	.word	0x08008e63
 8008d40:	08008eb5 	.word	0x08008eb5
 8008d44:	08008ed7 	.word	0x08008ed7
 8008d48:	08008f13 	.word	0x08008f13
 8008d4c:	08008f3b 	.word	0x08008f3b
 8008d50:	08008f79 	.word	0x08008f79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f103 0110 	add.w	r1, r3, #16
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f945 	bl	8008ff0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	761a      	strb	r2, [r3, #24]
      break;
 8008d6c:	e13b      	b.n	8008fe6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	795b      	ldrb	r3, [r3, #5]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fcc9 	bl	800970c <USBH_LL_GetURBState>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d11e      	bne.n	8008dc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7c1b      	ldrb	r3, [r3, #16]
 8008d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	8adb      	ldrh	r3, [r3, #22]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d96:	7b7b      	ldrb	r3, [r7, #13]
 8008d98:	2b80      	cmp	r3, #128	; 0x80
 8008d9a:	d103      	bne.n	8008da4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2203      	movs	r2, #3
 8008da0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008da2:	e117      	b.n	8008fd4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2205      	movs	r2, #5
 8008da8:	761a      	strb	r2, [r3, #24]
      break;
 8008daa:	e113      	b.n	8008fd4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008dac:	7b7b      	ldrb	r3, [r7, #13]
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d103      	bne.n	8008dba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2209      	movs	r2, #9
 8008db6:	761a      	strb	r2, [r3, #24]
      break;
 8008db8:	e10c      	b.n	8008fd4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2207      	movs	r2, #7
 8008dbe:	761a      	strb	r2, [r3, #24]
      break;
 8008dc0:	e108      	b.n	8008fd4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d003      	beq.n	8008dd0 <USBH_HandleControl+0xcc>
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	f040 8102 	bne.w	8008fd4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	220b      	movs	r2, #11
 8008dd4:	761a      	strb	r2, [r3, #24]
      break;
 8008dd6:	e0fd      	b.n	8008fd4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6899      	ldr	r1, [r3, #8]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	899a      	ldrh	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	791b      	ldrb	r3, [r3, #4]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f93c 	bl	800906e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	761a      	strb	r2, [r3, #24]
      break;
 8008dfc:	e0f3      	b.n	8008fe6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	791b      	ldrb	r3, [r3, #4]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc81 	bl	800970c <USBH_LL_GetURBState>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d102      	bne.n	8008e1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2209      	movs	r2, #9
 8008e18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b05      	cmp	r3, #5
 8008e1e:	d102      	bne.n	8008e26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e20:	2303      	movs	r3, #3
 8008e22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e24:	e0d8      	b.n	8008fd8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	f040 80d5 	bne.w	8008fd8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	220b      	movs	r2, #11
 8008e32:	761a      	strb	r2, [r3, #24]
      break;
 8008e34:	e0d0      	b.n	8008fd8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6899      	ldr	r1, [r3, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	899a      	ldrh	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7958      	ldrb	r0, [r3, #5]
 8008e42:	2301      	movs	r3, #1
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	4603      	mov	r3, r0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f8eb 	bl	8009024 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2206      	movs	r2, #6
 8008e5e:	761a      	strb	r2, [r3, #24]
      break;
 8008e60:	e0c1      	b.n	8008fe6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	795b      	ldrb	r3, [r3, #5]
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc4f 	bl	800970c <USBH_LL_GetURBState>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d103      	bne.n	8008e80 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2207      	movs	r2, #7
 8008e7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e7e:	e0ad      	b.n	8008fdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	d105      	bne.n	8008e92 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	220c      	movs	r2, #12
 8008e8a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e0a4      	b.n	8008fdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d103      	bne.n	8008ea0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2205      	movs	r2, #5
 8008e9c:	761a      	strb	r2, [r3, #24]
      break;
 8008e9e:	e09d      	b.n	8008fdc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	f040 809a 	bne.w	8008fdc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	220b      	movs	r2, #11
 8008eac:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008eb2:	e093      	b.n	8008fdc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f8d6 	bl	800906e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	761a      	strb	r2, [r3, #24]

      break;
 8008ed4:	e087      	b.n	8008fe6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	791b      	ldrb	r3, [r3, #4]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fc15 	bl	800970c <USBH_LL_GetURBState>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d105      	bne.n	8008ef8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	220d      	movs	r2, #13
 8008ef0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ef6:	e073      	b.n	8008fe0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d103      	bne.n	8008f06 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	220b      	movs	r2, #11
 8008f02:	761a      	strb	r2, [r3, #24]
      break;
 8008f04:	e06c      	b.n	8008fe0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b05      	cmp	r3, #5
 8008f0a:	d169      	bne.n	8008fe0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e066      	b.n	8008fe0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	795a      	ldrb	r2, [r3, #5]
 8008f16:	2301      	movs	r3, #1
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f87f 	bl	8009024 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	220a      	movs	r2, #10
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e055      	b.n	8008fe6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fbe3 	bl	800970c <USBH_LL_GetURBState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d105      	bne.n	8008f5c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220d      	movs	r2, #13
 8008f58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f5a:	e043      	b.n	8008fe4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d103      	bne.n	8008f6a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2209      	movs	r2, #9
 8008f66:	761a      	strb	r2, [r3, #24]
      break;
 8008f68:	e03c      	b.n	8008fe4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d139      	bne.n	8008fe4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	220b      	movs	r2, #11
 8008f74:	761a      	strb	r2, [r3, #24]
      break;
 8008f76:	e035      	b.n	8008fe4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7e5b      	ldrb	r3, [r3, #25]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	765a      	strb	r2, [r3, #25]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7e5b      	ldrb	r3, [r3, #25]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d806      	bhi.n	8008f9a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f98:	e025      	b.n	8008fe6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fa0:	2106      	movs	r1, #6
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	795b      	ldrb	r3, [r3, #5]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f90c 	bl	80091d0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	791b      	ldrb	r3, [r3, #4]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f906 	bl	80091d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	e00a      	b.n	8008fe6 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008fd0:	bf00      	nop
 8008fd2:	e008      	b.n	8008fe6 <USBH_HandleControl+0x2e2>
      break;
 8008fd4:	bf00      	nop
 8008fd6:	e006      	b.n	8008fe6 <USBH_HandleControl+0x2e2>
      break;
 8008fd8:	bf00      	nop
 8008fda:	e004      	b.n	8008fe6 <USBH_HandleControl+0x2e2>
      break;
 8008fdc:	bf00      	nop
 8008fde:	e002      	b.n	8008fe6 <USBH_HandleControl+0x2e2>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <USBH_HandleControl+0x2e2>
      break;
 8008fe4:	bf00      	nop
  }

  return status;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af04      	add	r7, sp, #16
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ffe:	79f9      	ldrb	r1, [r7, #7]
 8009000:	2300      	movs	r3, #0
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	2308      	movs	r3, #8
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	2300      	movs	r3, #0
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fb48 	bl	80096aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af04      	add	r7, sp, #16
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4611      	mov	r1, r2
 8009030:	461a      	mov	r2, r3
 8009032:	460b      	mov	r3, r1
 8009034:	80fb      	strh	r3, [r7, #6]
 8009036:	4613      	mov	r3, r2
 8009038:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009048:	7979      	ldrb	r1, [r7, #5]
 800904a:	7e3b      	ldrb	r3, [r7, #24]
 800904c:	9303      	str	r3, [sp, #12]
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	9302      	str	r3, [sp, #8]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	2301      	movs	r3, #1
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	2300      	movs	r3, #0
 800905c:	2200      	movs	r2, #0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fb23 	bl	80096aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b088      	sub	sp, #32
 8009072:	af04      	add	r7, sp, #16
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	4611      	mov	r1, r2
 800907a:	461a      	mov	r2, r3
 800907c:	460b      	mov	r3, r1
 800907e:	80fb      	strh	r3, [r7, #6]
 8009080:	4613      	mov	r3, r2
 8009082:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009084:	7979      	ldrb	r1, [r7, #5]
 8009086:	2300      	movs	r3, #0
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	2301      	movs	r3, #1
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	2201      	movs	r2, #1
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fb05 	bl	80096aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80090a0:	2300      	movs	r3, #0

}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b088      	sub	sp, #32
 80090ae:	af04      	add	r7, sp, #16
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	4611      	mov	r1, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	460b      	mov	r3, r1
 80090ba:	80fb      	strh	r3, [r7, #6]
 80090bc:	4613      	mov	r3, r2
 80090be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80090ce:	7979      	ldrb	r1, [r7, #5]
 80090d0:	7e3b      	ldrb	r3, [r7, #24]
 80090d2:	9303      	str	r3, [sp, #12]
 80090d4:	88fb      	ldrh	r3, [r7, #6]
 80090d6:	9302      	str	r3, [sp, #8]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	2301      	movs	r3, #1
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	2302      	movs	r3, #2
 80090e2:	2200      	movs	r2, #0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fae0 	bl	80096aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af04      	add	r7, sp, #16
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	460b      	mov	r3, r1
 8009104:	80fb      	strh	r3, [r7, #6]
 8009106:	4613      	mov	r3, r2
 8009108:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800910a:	7979      	ldrb	r1, [r7, #5]
 800910c:	2300      	movs	r3, #0
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	2301      	movs	r3, #1
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	2302      	movs	r3, #2
 800911e:	2201      	movs	r2, #1
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fac2 	bl	80096aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af04      	add	r7, sp, #16
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	4603      	mov	r3, r0
 8009140:	70fb      	strb	r3, [r7, #3]
 8009142:	460b      	mov	r3, r1
 8009144:	70bb      	strb	r3, [r7, #2]
 8009146:	4613      	mov	r3, r2
 8009148:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800914a:	7878      	ldrb	r0, [r7, #1]
 800914c:	78ba      	ldrb	r2, [r7, #2]
 800914e:	78f9      	ldrb	r1, [r7, #3]
 8009150:	8b3b      	ldrh	r3, [r7, #24]
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	7d3b      	ldrb	r3, [r7, #20]
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	7c3b      	ldrb	r3, [r7, #16]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	4603      	mov	r3, r0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa55 	bl	800960e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa74 	bl	800966c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f836 	bl	800920c <USBH_GetFreePipe>
 80091a0:	4603      	mov	r3, r0
 80091a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00a      	beq.n	80091c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	33e0      	adds	r3, #224	; 0xe0
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	b2db      	uxtb	r3, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b0a      	cmp	r3, #10
 80091e0:	d80d      	bhi.n	80091fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	33e0      	adds	r3, #224	; 0xe0
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	33e0      	adds	r3, #224	; 0xe0
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	e00f      	b.n	800923e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	33e0      	adds	r3, #224	; 0xe0
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	b29b      	uxth	r3, r3
 8009236:	e007      	b.n	8009248 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	3301      	adds	r3, #1
 800923c:	73fb      	strb	r3, [r7, #15]
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	2b0a      	cmp	r3, #10
 8009242:	d9ec      	bls.n	800921e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009244:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009258:	2201      	movs	r2, #1
 800925a:	490e      	ldr	r1, [pc, #56]	; (8009294 <MX_USB_HOST_Init+0x40>)
 800925c:	480e      	ldr	r0, [pc, #56]	; (8009298 <MX_USB_HOST_Init+0x44>)
 800925e:	f7fe fc9f 	bl	8007ba0 <USBH_Init>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009268:	f7f7 fd8c 	bl	8000d84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800926c:	490b      	ldr	r1, [pc, #44]	; (800929c <MX_USB_HOST_Init+0x48>)
 800926e:	480a      	ldr	r0, [pc, #40]	; (8009298 <MX_USB_HOST_Init+0x44>)
 8009270:	f7fe fd24 	bl	8007cbc <USBH_RegisterClass>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800927a:	f7f7 fd83 	bl	8000d84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800927e:	4806      	ldr	r0, [pc, #24]	; (8009298 <MX_USB_HOST_Init+0x44>)
 8009280:	f7fe fda8 	bl	8007dd4 <USBH_Start>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800928a:	f7f7 fd7b 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800928e:	bf00      	nop
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	080092b5 	.word	0x080092b5
 8009298:	20000240 	.word	0x20000240
 800929c:	2000000c 	.word	0x2000000c

080092a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80092a4:	4802      	ldr	r0, [pc, #8]	; (80092b0 <MX_USB_HOST_Process+0x10>)
 80092a6:	f7fe fda5 	bl	8007df4 <USBH_Process>
}
 80092aa:	bf00      	nop
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000240 	.word	0x20000240

080092b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d819      	bhi.n	80092fc <USBH_UserProcess+0x48>
 80092c8:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <USBH_UserProcess+0x1c>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	080092e5 	.word	0x080092e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80092e4:	4b09      	ldr	r3, [pc, #36]	; (800930c <USBH_UserProcess+0x58>)
 80092e6:	2203      	movs	r2, #3
 80092e8:	701a      	strb	r2, [r3, #0]
  break;
 80092ea:	e008      	b.n	80092fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80092ec:	4b07      	ldr	r3, [pc, #28]	; (800930c <USBH_UserProcess+0x58>)
 80092ee:	2202      	movs	r2, #2
 80092f0:	701a      	strb	r2, [r3, #0]
  break;
 80092f2:	e004      	b.n	80092fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <USBH_UserProcess+0x58>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
  break;
 80092fa:	e000      	b.n	80092fe <USBH_UserProcess+0x4a>

  default:
  break;
 80092fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	200000b4 	.word	0x200000b4

08009310 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08a      	sub	sp, #40	; 0x28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	605a      	str	r2, [r3, #4]
 8009322:	609a      	str	r2, [r3, #8]
 8009324:	60da      	str	r2, [r3, #12]
 8009326:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009330:	d14e      	bne.n	80093d0 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009332:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009336:	4a28      	ldr	r2, [pc, #160]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009338:	f043 0301 	orr.w	r3, r3, #1
 800933c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800934a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800934e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009350:	2302      	movs	r3, #2
 8009352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009354:	2300      	movs	r3, #0
 8009356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009358:	2303      	movs	r3, #3
 800935a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800935c:	230a      	movs	r3, #10
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009360:	f107 0314 	add.w	r3, r7, #20
 8009364:	4619      	mov	r1, r3
 8009366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800936a:	f7f9 fa8d 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800936e:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009372:	4a19      	ldr	r2, [pc, #100]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800937a:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 800937c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800937e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d114      	bne.n	80093bc <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009392:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	4a10      	ldr	r2, [pc, #64]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 8009398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800939c:	6593      	str	r3, [r2, #88]	; 0x58
 800939e:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 80093a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093a6:	60bb      	str	r3, [r7, #8]
 80093a8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80093aa:	f7fb fa71 	bl	8004890 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ae:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 80093b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b2:	4a09      	ldr	r2, [pc, #36]	; (80093d8 <HAL_HCD_MspInit+0xc8>)
 80093b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093b8:	6593      	str	r3, [r2, #88]	; 0x58
 80093ba:	e001      	b.n	80093c0 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80093bc:	f7fb fa68 	bl	8004890 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093c0:	2200      	movs	r2, #0
 80093c2:	2100      	movs	r1, #0
 80093c4:	2043      	movs	r0, #67	; 0x43
 80093c6:	f7f9 fa28 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093ca:	2043      	movs	r0, #67	; 0x43
 80093cc:	f7f9 fa41 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093d0:	bf00      	nop
 80093d2:	3728      	adds	r7, #40	; 0x28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40021000 	.word	0x40021000

080093dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff f8d5 	bl	800859a <USBH_LL_IncTimer>
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff f90d 	bl	8008626 <USBH_LL_Connect>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff f916 	bl	8008654 <USBH_LL_Disconnect>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
 800943c:	4613      	mov	r3, r2
 800943e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff f8c7 	bl	80085ee <USBH_LL_PortEnabled>
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff f8c7 	bl	800860a <USBH_LL_PortDisabled>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009492:	2b01      	cmp	r3, #1
 8009494:	d12a      	bne.n	80094ec <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009496:	4a18      	ldr	r2, [pc, #96]	; (80094f8 <USBH_LL_Init+0x74>)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a15      	ldr	r2, [pc, #84]	; (80094f8 <USBH_LL_Init+0x74>)
 80094a2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094a6:	4b14      	ldr	r3, [pc, #80]	; (80094f8 <USBH_LL_Init+0x74>)
 80094a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80094ae:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <USBH_LL_Init+0x74>)
 80094b0:	2208      	movs	r2, #8
 80094b2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80094b4:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <USBH_LL_Init+0x74>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094ba:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <USBH_LL_Init+0x74>)
 80094bc:	2200      	movs	r2, #0
 80094be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <USBH_LL_Init+0x74>)
 80094c2:	2202      	movs	r2, #2
 80094c4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094c6:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <USBH_LL_Init+0x74>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80094cc:	480a      	ldr	r0, [pc, #40]	; (80094f8 <USBH_LL_Init+0x74>)
 80094ce:	f7f9 fb9b 	bl	8002c08 <HAL_HCD_Init>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80094d8:	f7f7 fc54 	bl	8000d84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80094dc:	4806      	ldr	r0, [pc, #24]	; (80094f8 <USBH_LL_Init+0x74>)
 80094de:	f7f9 ff9b 	bl	8003418 <HAL_HCD_GetCurrentFrame>
 80094e2:	4603      	mov	r3, r0
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff f848 	bl	800857c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000618 	.word	0x20000618

080094fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009512:	4618      	mov	r0, r3
 8009514:	f7f9 ff08 	bl	8003328 <HAL_HCD_Start>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f95c 	bl	80097dc <USBH_Get_USB_Status>
 8009524:	4603      	mov	r3, r0
 8009526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009528:	7bbb      	ldrb	r3, [r7, #14]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009548:	4618      	mov	r0, r3
 800954a:	f7f9 ff10 	bl	800336e <HAL_HCD_Stop>
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f941 	bl	80097dc <USBH_Get_USB_Status>
 800955a:	4603      	mov	r3, r0
 800955c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009570:	2301      	movs	r3, #1
 8009572:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800957a:	4618      	mov	r0, r3
 800957c:	f7f9 ff5a 	bl	8003434 <HAL_HCD_GetCurrentSpeed>
 8009580:	4603      	mov	r3, r0
 8009582:	2b01      	cmp	r3, #1
 8009584:	d007      	beq.n	8009596 <USBH_LL_GetSpeed+0x2e>
 8009586:	2b01      	cmp	r3, #1
 8009588:	d302      	bcc.n	8009590 <USBH_LL_GetSpeed+0x28>
 800958a:	2b02      	cmp	r3, #2
 800958c:	d006      	beq.n	800959c <USBH_LL_GetSpeed+0x34>
 800958e:	e008      	b.n	80095a2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009590:	2300      	movs	r3, #0
 8009592:	73fb      	strb	r3, [r7, #15]
    break;
 8009594:	e008      	b.n	80095a8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009596:	2301      	movs	r3, #1
 8009598:	73fb      	strb	r3, [r7, #15]
    break;
 800959a:	e005      	b.n	80095a8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800959c:	2302      	movs	r3, #2
 800959e:	73fb      	strb	r3, [r7, #15]
    break;
 80095a0:	e002      	b.n	80095a8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80095a2:	2301      	movs	r3, #1
 80095a4:	73fb      	strb	r3, [r7, #15]
    break;
 80095a6:	bf00      	nop
  }
  return  speed;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f9 feed 	bl	80033a8 <HAL_HCD_ResetPort>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 f901 	bl	80097dc <USBH_Get_USB_Status>
 80095da:	4603      	mov	r3, r0
 80095dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095de:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	4611      	mov	r1, r2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7f9 fef5 	bl	80033ee <HAL_HCD_HC_GetXferCount>
 8009604:	4603      	mov	r3, r0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800960e:	b590      	push	{r4, r7, lr}
 8009610:	b089      	sub	sp, #36	; 0x24
 8009612:	af04      	add	r7, sp, #16
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	4608      	mov	r0, r1
 8009618:	4611      	mov	r1, r2
 800961a:	461a      	mov	r2, r3
 800961c:	4603      	mov	r3, r0
 800961e:	70fb      	strb	r3, [r7, #3]
 8009620:	460b      	mov	r3, r1
 8009622:	70bb      	strb	r3, [r7, #2]
 8009624:	4613      	mov	r3, r2
 8009626:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009636:	787c      	ldrb	r4, [r7, #1]
 8009638:	78ba      	ldrb	r2, [r7, #2]
 800963a:	78f9      	ldrb	r1, [r7, #3]
 800963c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	4623      	mov	r3, r4
 800964e:	f7f9 fb3d 	bl	8002ccc <HAL_HCD_HC_Init>
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f8bf 	bl	80097dc <USBH_Get_USB_Status>
 800965e:	4603      	mov	r3, r0
 8009660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009662:	7bbb      	ldrb	r3, [r7, #14]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bd90      	pop	{r4, r7, pc}

0800966c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7f9 fbb6 	bl	8002dfc <HAL_HCD_HC_Halt>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f8a0 	bl	80097dc <USBH_Get_USB_Status>
 800969c:	4603      	mov	r3, r0
 800969e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80096aa:	b590      	push	{r4, r7, lr}
 80096ac:	b089      	sub	sp, #36	; 0x24
 80096ae:	af04      	add	r7, sp, #16
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	4608      	mov	r0, r1
 80096b4:	4611      	mov	r1, r2
 80096b6:	461a      	mov	r2, r3
 80096b8:	4603      	mov	r3, r0
 80096ba:	70fb      	strb	r3, [r7, #3]
 80096bc:	460b      	mov	r3, r1
 80096be:	70bb      	strb	r3, [r7, #2]
 80096c0:	4613      	mov	r3, r2
 80096c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80096d2:	787c      	ldrb	r4, [r7, #1]
 80096d4:	78ba      	ldrb	r2, [r7, #2]
 80096d6:	78f9      	ldrb	r1, [r7, #3]
 80096d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096dc:	9303      	str	r3, [sp, #12]
 80096de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	4623      	mov	r3, r4
 80096ee:	f7f9 fba9 	bl	8002e44 <HAL_HCD_HC_SubmitRequest>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 f86f 	bl	80097dc <USBH_Get_USB_Status>
 80096fe:	4603      	mov	r3, r0
 8009700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009702:	7bbb      	ldrb	r3, [r7, #14]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	bd90      	pop	{r4, r7, pc}

0800970c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800971e:	78fa      	ldrb	r2, [r7, #3]
 8009720:	4611      	mov	r1, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f7f9 fe4e 	bl	80033c4 <HAL_HCD_HC_GetURBState>
 8009728:	4603      	mov	r3, r0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009744:	2b01      	cmp	r3, #1
 8009746:	d103      	bne.n	8009750 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009748:	78fb      	ldrb	r3, [r7, #3]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 f872 	bl	8009834 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009750:	20c8      	movs	r0, #200	; 0xc8
 8009752:	f7f7 fd7b 	bl	800124c <HAL_Delay>
  return USBH_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
 800976c:	4613      	mov	r3, r2
 800976e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009776:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	4613      	mov	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	00db      	lsls	r3, r3, #3
 8009784:	440b      	add	r3, r1
 8009786:	333b      	adds	r3, #59	; 0x3b
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	68f9      	ldr	r1, [r7, #12]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	440b      	add	r3, r1
 800979c:	3350      	adds	r3, #80	; 0x50
 800979e:	78ba      	ldrb	r2, [r7, #2]
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	e009      	b.n	80097b8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80097a4:	78fa      	ldrb	r2, [r7, #3]
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	440b      	add	r3, r1
 80097b2:	3351      	adds	r3, #81	; 0x51
 80097b4:	78ba      	ldrb	r2, [r7, #2]
 80097b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7f7 fd3c 	bl	800124c <HAL_Delay>
}
 80097d4:	bf00      	nop
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d817      	bhi.n	8009820 <USBH_Get_USB_Status+0x44>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <USBH_Get_USB_Status+0x1c>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009809 	.word	0x08009809
 80097fc:	0800980f 	.word	0x0800980f
 8009800:	08009815 	.word	0x08009815
 8009804:	0800981b 	.word	0x0800981b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
    break;
 800980c:	e00b      	b.n	8009826 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800980e:	2302      	movs	r3, #2
 8009810:	73fb      	strb	r3, [r7, #15]
    break;
 8009812:	e008      	b.n	8009826 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009814:	2301      	movs	r3, #1
 8009816:	73fb      	strb	r3, [r7, #15]
    break;
 8009818:	e005      	b.n	8009826 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800981a:	2302      	movs	r3, #2
 800981c:	73fb      	strb	r3, [r7, #15]
    break;
 800981e:	e002      	b.n	8009826 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009820:	2302      	movs	r3, #2
 8009822:	73fb      	strb	r3, [r7, #15]
    break;
 8009824:	bf00      	nop
  }
  return usb_status;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
 800984c:	e001      	b.n	8009852 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	461a      	mov	r2, r3
 8009856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800985a:	4803      	ldr	r0, [pc, #12]	; (8009868 <MX_DriverVbusFS+0x34>)
 800985c:	f7f9 f9bc 	bl	8002bd8 <HAL_GPIO_WritePin>
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	48000800 	.word	0x48000800

0800986c <__errno>:
 800986c:	4b01      	ldr	r3, [pc, #4]	; (8009874 <__errno+0x8>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	2000002c 	.word	0x2000002c

08009878 <__libc_init_array>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4e0d      	ldr	r6, [pc, #52]	; (80098b0 <__libc_init_array+0x38>)
 800987c:	4c0d      	ldr	r4, [pc, #52]	; (80098b4 <__libc_init_array+0x3c>)
 800987e:	1ba4      	subs	r4, r4, r6
 8009880:	10a4      	asrs	r4, r4, #2
 8009882:	2500      	movs	r5, #0
 8009884:	42a5      	cmp	r5, r4
 8009886:	d109      	bne.n	800989c <__libc_init_array+0x24>
 8009888:	4e0b      	ldr	r6, [pc, #44]	; (80098b8 <__libc_init_array+0x40>)
 800988a:	4c0c      	ldr	r4, [pc, #48]	; (80098bc <__libc_init_array+0x44>)
 800988c:	f000 fc36 	bl	800a0fc <_init>
 8009890:	1ba4      	subs	r4, r4, r6
 8009892:	10a4      	asrs	r4, r4, #2
 8009894:	2500      	movs	r5, #0
 8009896:	42a5      	cmp	r5, r4
 8009898:	d105      	bne.n	80098a6 <__libc_init_array+0x2e>
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098a0:	4798      	blx	r3
 80098a2:	3501      	adds	r5, #1
 80098a4:	e7ee      	b.n	8009884 <__libc_init_array+0xc>
 80098a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098aa:	4798      	blx	r3
 80098ac:	3501      	adds	r5, #1
 80098ae:	e7f2      	b.n	8009896 <__libc_init_array+0x1e>
 80098b0:	0800a1a4 	.word	0x0800a1a4
 80098b4:	0800a1a4 	.word	0x0800a1a4
 80098b8:	0800a1a4 	.word	0x0800a1a4
 80098bc:	0800a1a8 	.word	0x0800a1a8

080098c0 <malloc>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <malloc+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f000 b861 	b.w	800998c <_malloc_r>
 80098ca:	bf00      	nop
 80098cc:	2000002c 	.word	0x2000002c

080098d0 <free>:
 80098d0:	4b02      	ldr	r3, [pc, #8]	; (80098dc <free+0xc>)
 80098d2:	4601      	mov	r1, r0
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	f000 b80b 	b.w	80098f0 <_free_r>
 80098da:	bf00      	nop
 80098dc:	2000002c 	.word	0x2000002c

080098e0 <memset>:
 80098e0:	4402      	add	r2, r0
 80098e2:	4603      	mov	r3, r0
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d100      	bne.n	80098ea <memset+0xa>
 80098e8:	4770      	bx	lr
 80098ea:	f803 1b01 	strb.w	r1, [r3], #1
 80098ee:	e7f9      	b.n	80098e4 <memset+0x4>

080098f0 <_free_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d045      	beq.n	8009984 <_free_r+0x94>
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f0c      	subs	r4, r1, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	18e4      	addlt	r4, r4, r3
 8009904:	f000 f8cc 	bl	8009aa0 <__malloc_lock>
 8009908:	4a1f      	ldr	r2, [pc, #124]	; (8009988 <_free_r+0x98>)
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	4610      	mov	r0, r2
 800990e:	b933      	cbnz	r3, 800991e <_free_r+0x2e>
 8009910:	6063      	str	r3, [r4, #4]
 8009912:	6014      	str	r4, [r2, #0]
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991a:	f000 b8c2 	b.w	8009aa2 <__malloc_unlock>
 800991e:	42a3      	cmp	r3, r4
 8009920:	d90c      	bls.n	800993c <_free_r+0x4c>
 8009922:	6821      	ldr	r1, [r4, #0]
 8009924:	1862      	adds	r2, r4, r1
 8009926:	4293      	cmp	r3, r2
 8009928:	bf04      	itt	eq
 800992a:	681a      	ldreq	r2, [r3, #0]
 800992c:	685b      	ldreq	r3, [r3, #4]
 800992e:	6063      	str	r3, [r4, #4]
 8009930:	bf04      	itt	eq
 8009932:	1852      	addeq	r2, r2, r1
 8009934:	6022      	streq	r2, [r4, #0]
 8009936:	6004      	str	r4, [r0, #0]
 8009938:	e7ec      	b.n	8009914 <_free_r+0x24>
 800993a:	4613      	mov	r3, r2
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	b10a      	cbz	r2, 8009944 <_free_r+0x54>
 8009940:	42a2      	cmp	r2, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x4a>
 8009944:	6819      	ldr	r1, [r3, #0]
 8009946:	1858      	adds	r0, r3, r1
 8009948:	42a0      	cmp	r0, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x74>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	4401      	add	r1, r0
 8009950:	1858      	adds	r0, r3, r1
 8009952:	4282      	cmp	r2, r0
 8009954:	6019      	str	r1, [r3, #0]
 8009956:	d1dd      	bne.n	8009914 <_free_r+0x24>
 8009958:	6810      	ldr	r0, [r2, #0]
 800995a:	6852      	ldr	r2, [r2, #4]
 800995c:	605a      	str	r2, [r3, #4]
 800995e:	4401      	add	r1, r0
 8009960:	6019      	str	r1, [r3, #0]
 8009962:	e7d7      	b.n	8009914 <_free_r+0x24>
 8009964:	d902      	bls.n	800996c <_free_r+0x7c>
 8009966:	230c      	movs	r3, #12
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	e7d3      	b.n	8009914 <_free_r+0x24>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428a      	cmp	r2, r1
 8009972:	bf04      	itt	eq
 8009974:	6811      	ldreq	r1, [r2, #0]
 8009976:	6852      	ldreq	r2, [r2, #4]
 8009978:	6062      	str	r2, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1809      	addeq	r1, r1, r0
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	605c      	str	r4, [r3, #4]
 8009982:	e7c7      	b.n	8009914 <_free_r+0x24>
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	200000b8 	.word	0x200000b8

0800998c <_malloc_r>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	1ccd      	adds	r5, r1, #3
 8009990:	f025 0503 	bic.w	r5, r5, #3
 8009994:	3508      	adds	r5, #8
 8009996:	2d0c      	cmp	r5, #12
 8009998:	bf38      	it	cc
 800999a:	250c      	movcc	r5, #12
 800999c:	2d00      	cmp	r5, #0
 800999e:	4606      	mov	r6, r0
 80099a0:	db01      	blt.n	80099a6 <_malloc_r+0x1a>
 80099a2:	42a9      	cmp	r1, r5
 80099a4:	d903      	bls.n	80099ae <_malloc_r+0x22>
 80099a6:	230c      	movs	r3, #12
 80099a8:	6033      	str	r3, [r6, #0]
 80099aa:	2000      	movs	r0, #0
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	f000 f877 	bl	8009aa0 <__malloc_lock>
 80099b2:	4a21      	ldr	r2, [pc, #132]	; (8009a38 <_malloc_r+0xac>)
 80099b4:	6814      	ldr	r4, [r2, #0]
 80099b6:	4621      	mov	r1, r4
 80099b8:	b991      	cbnz	r1, 80099e0 <_malloc_r+0x54>
 80099ba:	4c20      	ldr	r4, [pc, #128]	; (8009a3c <_malloc_r+0xb0>)
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	b91b      	cbnz	r3, 80099c8 <_malloc_r+0x3c>
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 f83d 	bl	8009a40 <_sbrk_r>
 80099c6:	6020      	str	r0, [r4, #0]
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f838 	bl	8009a40 <_sbrk_r>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d124      	bne.n	8009a1e <_malloc_r+0x92>
 80099d4:	230c      	movs	r3, #12
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	4630      	mov	r0, r6
 80099da:	f000 f862 	bl	8009aa2 <__malloc_unlock>
 80099de:	e7e4      	b.n	80099aa <_malloc_r+0x1e>
 80099e0:	680b      	ldr	r3, [r1, #0]
 80099e2:	1b5b      	subs	r3, r3, r5
 80099e4:	d418      	bmi.n	8009a18 <_malloc_r+0x8c>
 80099e6:	2b0b      	cmp	r3, #11
 80099e8:	d90f      	bls.n	8009a0a <_malloc_r+0x7e>
 80099ea:	600b      	str	r3, [r1, #0]
 80099ec:	50cd      	str	r5, [r1, r3]
 80099ee:	18cc      	adds	r4, r1, r3
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 f856 	bl	8009aa2 <__malloc_unlock>
 80099f6:	f104 000b 	add.w	r0, r4, #11
 80099fa:	1d23      	adds	r3, r4, #4
 80099fc:	f020 0007 	bic.w	r0, r0, #7
 8009a00:	1ac3      	subs	r3, r0, r3
 8009a02:	d0d3      	beq.n	80099ac <_malloc_r+0x20>
 8009a04:	425a      	negs	r2, r3
 8009a06:	50e2      	str	r2, [r4, r3]
 8009a08:	e7d0      	b.n	80099ac <_malloc_r+0x20>
 8009a0a:	428c      	cmp	r4, r1
 8009a0c:	684b      	ldr	r3, [r1, #4]
 8009a0e:	bf16      	itet	ne
 8009a10:	6063      	strne	r3, [r4, #4]
 8009a12:	6013      	streq	r3, [r2, #0]
 8009a14:	460c      	movne	r4, r1
 8009a16:	e7eb      	b.n	80099f0 <_malloc_r+0x64>
 8009a18:	460c      	mov	r4, r1
 8009a1a:	6849      	ldr	r1, [r1, #4]
 8009a1c:	e7cc      	b.n	80099b8 <_malloc_r+0x2c>
 8009a1e:	1cc4      	adds	r4, r0, #3
 8009a20:	f024 0403 	bic.w	r4, r4, #3
 8009a24:	42a0      	cmp	r0, r4
 8009a26:	d005      	beq.n	8009a34 <_malloc_r+0xa8>
 8009a28:	1a21      	subs	r1, r4, r0
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f000 f808 	bl	8009a40 <_sbrk_r>
 8009a30:	3001      	adds	r0, #1
 8009a32:	d0cf      	beq.n	80099d4 <_malloc_r+0x48>
 8009a34:	6025      	str	r5, [r4, #0]
 8009a36:	e7db      	b.n	80099f0 <_malloc_r+0x64>
 8009a38:	200000b8 	.word	0x200000b8
 8009a3c:	200000bc 	.word	0x200000bc

08009a40 <_sbrk_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4c06      	ldr	r4, [pc, #24]	; (8009a5c <_sbrk_r+0x1c>)
 8009a44:	2300      	movs	r3, #0
 8009a46:	4605      	mov	r5, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	f7f7 faec 	bl	8001028 <_sbrk>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_sbrk_r+0x1a>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_sbrk_r+0x1a>
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	200008dc 	.word	0x200008dc

08009a60 <siprintf>:
 8009a60:	b40e      	push	{r1, r2, r3}
 8009a62:	b500      	push	{lr}
 8009a64:	b09c      	sub	sp, #112	; 0x70
 8009a66:	ab1d      	add	r3, sp, #116	; 0x74
 8009a68:	9002      	str	r0, [sp, #8]
 8009a6a:	9006      	str	r0, [sp, #24]
 8009a6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a70:	4809      	ldr	r0, [pc, #36]	; (8009a98 <siprintf+0x38>)
 8009a72:	9107      	str	r1, [sp, #28]
 8009a74:	9104      	str	r1, [sp, #16]
 8009a76:	4909      	ldr	r1, [pc, #36]	; (8009a9c <siprintf+0x3c>)
 8009a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7c:	9105      	str	r1, [sp, #20]
 8009a7e:	6800      	ldr	r0, [r0, #0]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	a902      	add	r1, sp, #8
 8009a84:	f000 f868 	bl	8009b58 <_svfiprintf_r>
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	701a      	strb	r2, [r3, #0]
 8009a8e:	b01c      	add	sp, #112	; 0x70
 8009a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a94:	b003      	add	sp, #12
 8009a96:	4770      	bx	lr
 8009a98:	2000002c 	.word	0x2000002c
 8009a9c:	ffff0208 	.word	0xffff0208

08009aa0 <__malloc_lock>:
 8009aa0:	4770      	bx	lr

08009aa2 <__malloc_unlock>:
 8009aa2:	4770      	bx	lr

08009aa4 <__ssputs_r>:
 8009aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa8:	688e      	ldr	r6, [r1, #8]
 8009aaa:	429e      	cmp	r6, r3
 8009aac:	4682      	mov	sl, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	4690      	mov	r8, r2
 8009ab2:	4699      	mov	r9, r3
 8009ab4:	d837      	bhi.n	8009b26 <__ssputs_r+0x82>
 8009ab6:	898a      	ldrh	r2, [r1, #12]
 8009ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009abc:	d031      	beq.n	8009b22 <__ssputs_r+0x7e>
 8009abe:	6825      	ldr	r5, [r4, #0]
 8009ac0:	6909      	ldr	r1, [r1, #16]
 8009ac2:	1a6f      	subs	r7, r5, r1
 8009ac4:	6965      	ldr	r5, [r4, #20]
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009acc:	fb95 f5f3 	sdiv	r5, r5, r3
 8009ad0:	f109 0301 	add.w	r3, r9, #1
 8009ad4:	443b      	add	r3, r7
 8009ad6:	429d      	cmp	r5, r3
 8009ad8:	bf38      	it	cc
 8009ada:	461d      	movcc	r5, r3
 8009adc:	0553      	lsls	r3, r2, #21
 8009ade:	d530      	bpl.n	8009b42 <__ssputs_r+0x9e>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7ff ff53 	bl	800998c <_malloc_r>
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	b950      	cbnz	r0, 8009b00 <__ssputs_r+0x5c>
 8009aea:	230c      	movs	r3, #12
 8009aec:	f8ca 3000 	str.w	r3, [sl]
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af6:	81a3      	strh	r3, [r4, #12]
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b00:	463a      	mov	r2, r7
 8009b02:	6921      	ldr	r1, [r4, #16]
 8009b04:	f000 faa8 	bl	800a058 <memcpy>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	6126      	str	r6, [r4, #16]
 8009b16:	6165      	str	r5, [r4, #20]
 8009b18:	443e      	add	r6, r7
 8009b1a:	1bed      	subs	r5, r5, r7
 8009b1c:	6026      	str	r6, [r4, #0]
 8009b1e:	60a5      	str	r5, [r4, #8]
 8009b20:	464e      	mov	r6, r9
 8009b22:	454e      	cmp	r6, r9
 8009b24:	d900      	bls.n	8009b28 <__ssputs_r+0x84>
 8009b26:	464e      	mov	r6, r9
 8009b28:	4632      	mov	r2, r6
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	6820      	ldr	r0, [r4, #0]
 8009b2e:	f000 fa9e 	bl	800a06e <memmove>
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	1b9b      	subs	r3, r3, r6
 8009b36:	60a3      	str	r3, [r4, #8]
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	441e      	add	r6, r3
 8009b3c:	6026      	str	r6, [r4, #0]
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e7dc      	b.n	8009afc <__ssputs_r+0x58>
 8009b42:	462a      	mov	r2, r5
 8009b44:	f000 faac 	bl	800a0a0 <_realloc_r>
 8009b48:	4606      	mov	r6, r0
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1e2      	bne.n	8009b14 <__ssputs_r+0x70>
 8009b4e:	6921      	ldr	r1, [r4, #16]
 8009b50:	4650      	mov	r0, sl
 8009b52:	f7ff fecd 	bl	80098f0 <_free_r>
 8009b56:	e7c8      	b.n	8009aea <__ssputs_r+0x46>

08009b58 <_svfiprintf_r>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	461d      	mov	r5, r3
 8009b5e:	898b      	ldrh	r3, [r1, #12]
 8009b60:	061f      	lsls	r7, r3, #24
 8009b62:	b09d      	sub	sp, #116	; 0x74
 8009b64:	4680      	mov	r8, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	4616      	mov	r6, r2
 8009b6a:	d50f      	bpl.n	8009b8c <_svfiprintf_r+0x34>
 8009b6c:	690b      	ldr	r3, [r1, #16]
 8009b6e:	b96b      	cbnz	r3, 8009b8c <_svfiprintf_r+0x34>
 8009b70:	2140      	movs	r1, #64	; 0x40
 8009b72:	f7ff ff0b 	bl	800998c <_malloc_r>
 8009b76:	6020      	str	r0, [r4, #0]
 8009b78:	6120      	str	r0, [r4, #16]
 8009b7a:	b928      	cbnz	r0, 8009b88 <_svfiprintf_r+0x30>
 8009b7c:	230c      	movs	r3, #12
 8009b7e:	f8c8 3000 	str.w	r3, [r8]
 8009b82:	f04f 30ff 	mov.w	r0, #4294967295
 8009b86:	e0c8      	b.n	8009d1a <_svfiprintf_r+0x1c2>
 8009b88:	2340      	movs	r3, #64	; 0x40
 8009b8a:	6163      	str	r3, [r4, #20]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b90:	2320      	movs	r3, #32
 8009b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b96:	2330      	movs	r3, #48	; 0x30
 8009b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b9c:	9503      	str	r5, [sp, #12]
 8009b9e:	f04f 0b01 	mov.w	fp, #1
 8009ba2:	4637      	mov	r7, r6
 8009ba4:	463d      	mov	r5, r7
 8009ba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009baa:	b10b      	cbz	r3, 8009bb0 <_svfiprintf_r+0x58>
 8009bac:	2b25      	cmp	r3, #37	; 0x25
 8009bae:	d13e      	bne.n	8009c2e <_svfiprintf_r+0xd6>
 8009bb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009bb4:	d00b      	beq.n	8009bce <_svfiprintf_r+0x76>
 8009bb6:	4653      	mov	r3, sl
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	f7ff ff71 	bl	8009aa4 <__ssputs_r>
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f000 80a4 	beq.w	8009d10 <_svfiprintf_r+0x1b8>
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	4453      	add	r3, sl
 8009bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bce:	783b      	ldrb	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 809d 	beq.w	8009d10 <_svfiprintf_r+0x1b8>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009be8:	931a      	str	r3, [sp, #104]	; 0x68
 8009bea:	462f      	mov	r7, r5
 8009bec:	2205      	movs	r2, #5
 8009bee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009bf2:	4850      	ldr	r0, [pc, #320]	; (8009d34 <_svfiprintf_r+0x1dc>)
 8009bf4:	f7f6 faf4 	bl	80001e0 <memchr>
 8009bf8:	9b04      	ldr	r3, [sp, #16]
 8009bfa:	b9d0      	cbnz	r0, 8009c32 <_svfiprintf_r+0xda>
 8009bfc:	06d9      	lsls	r1, r3, #27
 8009bfe:	bf44      	itt	mi
 8009c00:	2220      	movmi	r2, #32
 8009c02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c06:	071a      	lsls	r2, r3, #28
 8009c08:	bf44      	itt	mi
 8009c0a:	222b      	movmi	r2, #43	; 0x2b
 8009c0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c10:	782a      	ldrb	r2, [r5, #0]
 8009c12:	2a2a      	cmp	r2, #42	; 0x2a
 8009c14:	d015      	beq.n	8009c42 <_svfiprintf_r+0xea>
 8009c16:	9a07      	ldr	r2, [sp, #28]
 8009c18:	462f      	mov	r7, r5
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	250a      	movs	r5, #10
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c24:	3b30      	subs	r3, #48	; 0x30
 8009c26:	2b09      	cmp	r3, #9
 8009c28:	d94d      	bls.n	8009cc6 <_svfiprintf_r+0x16e>
 8009c2a:	b1b8      	cbz	r0, 8009c5c <_svfiprintf_r+0x104>
 8009c2c:	e00f      	b.n	8009c4e <_svfiprintf_r+0xf6>
 8009c2e:	462f      	mov	r7, r5
 8009c30:	e7b8      	b.n	8009ba4 <_svfiprintf_r+0x4c>
 8009c32:	4a40      	ldr	r2, [pc, #256]	; (8009d34 <_svfiprintf_r+0x1dc>)
 8009c34:	1a80      	subs	r0, r0, r2
 8009c36:	fa0b f000 	lsl.w	r0, fp, r0
 8009c3a:	4318      	orrs	r0, r3
 8009c3c:	9004      	str	r0, [sp, #16]
 8009c3e:	463d      	mov	r5, r7
 8009c40:	e7d3      	b.n	8009bea <_svfiprintf_r+0x92>
 8009c42:	9a03      	ldr	r2, [sp, #12]
 8009c44:	1d11      	adds	r1, r2, #4
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	9103      	str	r1, [sp, #12]
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	db01      	blt.n	8009c52 <_svfiprintf_r+0xfa>
 8009c4e:	9207      	str	r2, [sp, #28]
 8009c50:	e004      	b.n	8009c5c <_svfiprintf_r+0x104>
 8009c52:	4252      	negs	r2, r2
 8009c54:	f043 0302 	orr.w	r3, r3, #2
 8009c58:	9207      	str	r2, [sp, #28]
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	783b      	ldrb	r3, [r7, #0]
 8009c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c60:	d10c      	bne.n	8009c7c <_svfiprintf_r+0x124>
 8009c62:	787b      	ldrb	r3, [r7, #1]
 8009c64:	2b2a      	cmp	r3, #42	; 0x2a
 8009c66:	d133      	bne.n	8009cd0 <_svfiprintf_r+0x178>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	9203      	str	r2, [sp, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bfb8      	it	lt
 8009c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c78:	3702      	adds	r7, #2
 8009c7a:	9305      	str	r3, [sp, #20]
 8009c7c:	4d2e      	ldr	r5, [pc, #184]	; (8009d38 <_svfiprintf_r+0x1e0>)
 8009c7e:	7839      	ldrb	r1, [r7, #0]
 8009c80:	2203      	movs	r2, #3
 8009c82:	4628      	mov	r0, r5
 8009c84:	f7f6 faac 	bl	80001e0 <memchr>
 8009c88:	b138      	cbz	r0, 8009c9a <_svfiprintf_r+0x142>
 8009c8a:	2340      	movs	r3, #64	; 0x40
 8009c8c:	1b40      	subs	r0, r0, r5
 8009c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	4303      	orrs	r3, r0
 8009c96:	3701      	adds	r7, #1
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	7839      	ldrb	r1, [r7, #0]
 8009c9c:	4827      	ldr	r0, [pc, #156]	; (8009d3c <_svfiprintf_r+0x1e4>)
 8009c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ca2:	2206      	movs	r2, #6
 8009ca4:	1c7e      	adds	r6, r7, #1
 8009ca6:	f7f6 fa9b 	bl	80001e0 <memchr>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d038      	beq.n	8009d20 <_svfiprintf_r+0x1c8>
 8009cae:	4b24      	ldr	r3, [pc, #144]	; (8009d40 <_svfiprintf_r+0x1e8>)
 8009cb0:	bb13      	cbnz	r3, 8009cf8 <_svfiprintf_r+0x1a0>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	3307      	adds	r3, #7
 8009cb6:	f023 0307 	bic.w	r3, r3, #7
 8009cba:	3308      	adds	r3, #8
 8009cbc:	9303      	str	r3, [sp, #12]
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	444b      	add	r3, r9
 8009cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc4:	e76d      	b.n	8009ba2 <_svfiprintf_r+0x4a>
 8009cc6:	fb05 3202 	mla	r2, r5, r2, r3
 8009cca:	2001      	movs	r0, #1
 8009ccc:	460f      	mov	r7, r1
 8009cce:	e7a6      	b.n	8009c1e <_svfiprintf_r+0xc6>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	3701      	adds	r7, #1
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	250a      	movs	r5, #10
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ce0:	3a30      	subs	r2, #48	; 0x30
 8009ce2:	2a09      	cmp	r2, #9
 8009ce4:	d903      	bls.n	8009cee <_svfiprintf_r+0x196>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0c8      	beq.n	8009c7c <_svfiprintf_r+0x124>
 8009cea:	9105      	str	r1, [sp, #20]
 8009cec:	e7c6      	b.n	8009c7c <_svfiprintf_r+0x124>
 8009cee:	fb05 2101 	mla	r1, r5, r1, r2
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	e7f0      	b.n	8009cda <_svfiprintf_r+0x182>
 8009cf8:	ab03      	add	r3, sp, #12
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <_svfiprintf_r+0x1ec>)
 8009d00:	a904      	add	r1, sp, #16
 8009d02:	4640      	mov	r0, r8
 8009d04:	f3af 8000 	nop.w
 8009d08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d0c:	4681      	mov	r9, r0
 8009d0e:	d1d6      	bne.n	8009cbe <_svfiprintf_r+0x166>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	065b      	lsls	r3, r3, #25
 8009d14:	f53f af35 	bmi.w	8009b82 <_svfiprintf_r+0x2a>
 8009d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d1a:	b01d      	add	sp, #116	; 0x74
 8009d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	ab03      	add	r3, sp, #12
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	4622      	mov	r2, r4
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <_svfiprintf_r+0x1ec>)
 8009d28:	a904      	add	r1, sp, #16
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	f000 f882 	bl	8009e34 <_printf_i>
 8009d30:	e7ea      	b.n	8009d08 <_svfiprintf_r+0x1b0>
 8009d32:	bf00      	nop
 8009d34:	0800a168 	.word	0x0800a168
 8009d38:	0800a16e 	.word	0x0800a16e
 8009d3c:	0800a172 	.word	0x0800a172
 8009d40:	00000000 	.word	0x00000000
 8009d44:	08009aa5 	.word	0x08009aa5

08009d48 <_printf_common>:
 8009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	4691      	mov	r9, r2
 8009d4e:	461f      	mov	r7, r3
 8009d50:	688a      	ldr	r2, [r1, #8]
 8009d52:	690b      	ldr	r3, [r1, #16]
 8009d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	bfb8      	it	lt
 8009d5c:	4613      	movlt	r3, r2
 8009d5e:	f8c9 3000 	str.w	r3, [r9]
 8009d62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d66:	4606      	mov	r6, r0
 8009d68:	460c      	mov	r4, r1
 8009d6a:	b112      	cbz	r2, 8009d72 <_printf_common+0x2a>
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f8c9 3000 	str.w	r3, [r9]
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	0699      	lsls	r1, r3, #26
 8009d76:	bf42      	ittt	mi
 8009d78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d7c:	3302      	addmi	r3, #2
 8009d7e:	f8c9 3000 	strmi.w	r3, [r9]
 8009d82:	6825      	ldr	r5, [r4, #0]
 8009d84:	f015 0506 	ands.w	r5, r5, #6
 8009d88:	d107      	bne.n	8009d9a <_printf_common+0x52>
 8009d8a:	f104 0a19 	add.w	sl, r4, #25
 8009d8e:	68e3      	ldr	r3, [r4, #12]
 8009d90:	f8d9 2000 	ldr.w	r2, [r9]
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	42ab      	cmp	r3, r5
 8009d98:	dc28      	bgt.n	8009dec <_printf_common+0xa4>
 8009d9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d9e:	6822      	ldr	r2, [r4, #0]
 8009da0:	3300      	adds	r3, #0
 8009da2:	bf18      	it	ne
 8009da4:	2301      	movne	r3, #1
 8009da6:	0692      	lsls	r2, r2, #26
 8009da8:	d42d      	bmi.n	8009e06 <_printf_common+0xbe>
 8009daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dae:	4639      	mov	r1, r7
 8009db0:	4630      	mov	r0, r6
 8009db2:	47c0      	blx	r8
 8009db4:	3001      	adds	r0, #1
 8009db6:	d020      	beq.n	8009dfa <_printf_common+0xb2>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	68e5      	ldr	r5, [r4, #12]
 8009dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8009dc0:	f003 0306 	and.w	r3, r3, #6
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	bf08      	it	eq
 8009dc8:	1aad      	subeq	r5, r5, r2
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	bf0c      	ite	eq
 8009dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd4:	2500      	movne	r5, #0
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	bfc4      	itt	gt
 8009dda:	1a9b      	subgt	r3, r3, r2
 8009ddc:	18ed      	addgt	r5, r5, r3
 8009dde:	f04f 0900 	mov.w	r9, #0
 8009de2:	341a      	adds	r4, #26
 8009de4:	454d      	cmp	r5, r9
 8009de6:	d11a      	bne.n	8009e1e <_printf_common+0xd6>
 8009de8:	2000      	movs	r0, #0
 8009dea:	e008      	b.n	8009dfe <_printf_common+0xb6>
 8009dec:	2301      	movs	r3, #1
 8009dee:	4652      	mov	r2, sl
 8009df0:	4639      	mov	r1, r7
 8009df2:	4630      	mov	r0, r6
 8009df4:	47c0      	blx	r8
 8009df6:	3001      	adds	r0, #1
 8009df8:	d103      	bne.n	8009e02 <_printf_common+0xba>
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e02:	3501      	adds	r5, #1
 8009e04:	e7c3      	b.n	8009d8e <_printf_common+0x46>
 8009e06:	18e1      	adds	r1, r4, r3
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	2030      	movs	r0, #48	; 0x30
 8009e0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e10:	4422      	add	r2, r4
 8009e12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e1a:	3302      	adds	r3, #2
 8009e1c:	e7c5      	b.n	8009daa <_printf_common+0x62>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4622      	mov	r2, r4
 8009e22:	4639      	mov	r1, r7
 8009e24:	4630      	mov	r0, r6
 8009e26:	47c0      	blx	r8
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d0e6      	beq.n	8009dfa <_printf_common+0xb2>
 8009e2c:	f109 0901 	add.w	r9, r9, #1
 8009e30:	e7d8      	b.n	8009de4 <_printf_common+0x9c>
	...

08009e34 <_printf_i>:
 8009e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	7e09      	ldrb	r1, [r1, #24]
 8009e40:	b085      	sub	sp, #20
 8009e42:	296e      	cmp	r1, #110	; 0x6e
 8009e44:	4617      	mov	r7, r2
 8009e46:	4606      	mov	r6, r0
 8009e48:	4698      	mov	r8, r3
 8009e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e4c:	f000 80b3 	beq.w	8009fb6 <_printf_i+0x182>
 8009e50:	d822      	bhi.n	8009e98 <_printf_i+0x64>
 8009e52:	2963      	cmp	r1, #99	; 0x63
 8009e54:	d036      	beq.n	8009ec4 <_printf_i+0x90>
 8009e56:	d80a      	bhi.n	8009e6e <_printf_i+0x3a>
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	f000 80b9 	beq.w	8009fd0 <_printf_i+0x19c>
 8009e5e:	2958      	cmp	r1, #88	; 0x58
 8009e60:	f000 8083 	beq.w	8009f6a <_printf_i+0x136>
 8009e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e6c:	e032      	b.n	8009ed4 <_printf_i+0xa0>
 8009e6e:	2964      	cmp	r1, #100	; 0x64
 8009e70:	d001      	beq.n	8009e76 <_printf_i+0x42>
 8009e72:	2969      	cmp	r1, #105	; 0x69
 8009e74:	d1f6      	bne.n	8009e64 <_printf_i+0x30>
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	0605      	lsls	r5, r0, #24
 8009e7c:	f103 0104 	add.w	r1, r3, #4
 8009e80:	d52a      	bpl.n	8009ed8 <_printf_i+0xa4>
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da03      	bge.n	8009e92 <_printf_i+0x5e>
 8009e8a:	222d      	movs	r2, #45	; 0x2d
 8009e8c:	425b      	negs	r3, r3
 8009e8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e92:	486f      	ldr	r0, [pc, #444]	; (800a050 <_printf_i+0x21c>)
 8009e94:	220a      	movs	r2, #10
 8009e96:	e039      	b.n	8009f0c <_printf_i+0xd8>
 8009e98:	2973      	cmp	r1, #115	; 0x73
 8009e9a:	f000 809d 	beq.w	8009fd8 <_printf_i+0x1a4>
 8009e9e:	d808      	bhi.n	8009eb2 <_printf_i+0x7e>
 8009ea0:	296f      	cmp	r1, #111	; 0x6f
 8009ea2:	d020      	beq.n	8009ee6 <_printf_i+0xb2>
 8009ea4:	2970      	cmp	r1, #112	; 0x70
 8009ea6:	d1dd      	bne.n	8009e64 <_printf_i+0x30>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	f043 0320 	orr.w	r3, r3, #32
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	e003      	b.n	8009eba <_printf_i+0x86>
 8009eb2:	2975      	cmp	r1, #117	; 0x75
 8009eb4:	d017      	beq.n	8009ee6 <_printf_i+0xb2>
 8009eb6:	2978      	cmp	r1, #120	; 0x78
 8009eb8:	d1d4      	bne.n	8009e64 <_printf_i+0x30>
 8009eba:	2378      	movs	r3, #120	; 0x78
 8009ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ec0:	4864      	ldr	r0, [pc, #400]	; (800a054 <_printf_i+0x220>)
 8009ec2:	e055      	b.n	8009f70 <_printf_i+0x13c>
 8009ec4:	6813      	ldr	r3, [r2, #0]
 8009ec6:	1d19      	adds	r1, r3, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6011      	str	r1, [r2, #0]
 8009ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e08c      	b.n	8009ff2 <_printf_i+0x1be>
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6011      	str	r1, [r2, #0]
 8009edc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ee0:	bf18      	it	ne
 8009ee2:	b21b      	sxthne	r3, r3
 8009ee4:	e7cf      	b.n	8009e86 <_printf_i+0x52>
 8009ee6:	6813      	ldr	r3, [r2, #0]
 8009ee8:	6825      	ldr	r5, [r4, #0]
 8009eea:	1d18      	adds	r0, r3, #4
 8009eec:	6010      	str	r0, [r2, #0]
 8009eee:	0628      	lsls	r0, r5, #24
 8009ef0:	d501      	bpl.n	8009ef6 <_printf_i+0xc2>
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	e002      	b.n	8009efc <_printf_i+0xc8>
 8009ef6:	0668      	lsls	r0, r5, #25
 8009ef8:	d5fb      	bpl.n	8009ef2 <_printf_i+0xbe>
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	4854      	ldr	r0, [pc, #336]	; (800a050 <_printf_i+0x21c>)
 8009efe:	296f      	cmp	r1, #111	; 0x6f
 8009f00:	bf14      	ite	ne
 8009f02:	220a      	movne	r2, #10
 8009f04:	2208      	moveq	r2, #8
 8009f06:	2100      	movs	r1, #0
 8009f08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f0c:	6865      	ldr	r5, [r4, #4]
 8009f0e:	60a5      	str	r5, [r4, #8]
 8009f10:	2d00      	cmp	r5, #0
 8009f12:	f2c0 8095 	blt.w	800a040 <_printf_i+0x20c>
 8009f16:	6821      	ldr	r1, [r4, #0]
 8009f18:	f021 0104 	bic.w	r1, r1, #4
 8009f1c:	6021      	str	r1, [r4, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d13d      	bne.n	8009f9e <_printf_i+0x16a>
 8009f22:	2d00      	cmp	r5, #0
 8009f24:	f040 808e 	bne.w	800a044 <_printf_i+0x210>
 8009f28:	4665      	mov	r5, ip
 8009f2a:	2a08      	cmp	r2, #8
 8009f2c:	d10b      	bne.n	8009f46 <_printf_i+0x112>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	07db      	lsls	r3, r3, #31
 8009f32:	d508      	bpl.n	8009f46 <_printf_i+0x112>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	6862      	ldr	r2, [r4, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	bfde      	ittt	le
 8009f3c:	2330      	movle	r3, #48	; 0x30
 8009f3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f46:	ebac 0305 	sub.w	r3, ip, r5
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	f8cd 8000 	str.w	r8, [sp]
 8009f50:	463b      	mov	r3, r7
 8009f52:	aa03      	add	r2, sp, #12
 8009f54:	4621      	mov	r1, r4
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff fef6 	bl	8009d48 <_printf_common>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d14d      	bne.n	8009ffc <_printf_i+0x1c8>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	b005      	add	sp, #20
 8009f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f6a:	4839      	ldr	r0, [pc, #228]	; (800a050 <_printf_i+0x21c>)
 8009f6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f70:	6813      	ldr	r3, [r2, #0]
 8009f72:	6821      	ldr	r1, [r4, #0]
 8009f74:	1d1d      	adds	r5, r3, #4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6015      	str	r5, [r2, #0]
 8009f7a:	060a      	lsls	r2, r1, #24
 8009f7c:	d50b      	bpl.n	8009f96 <_printf_i+0x162>
 8009f7e:	07ca      	lsls	r2, r1, #31
 8009f80:	bf44      	itt	mi
 8009f82:	f041 0120 	orrmi.w	r1, r1, #32
 8009f86:	6021      	strmi	r1, [r4, #0]
 8009f88:	b91b      	cbnz	r3, 8009f92 <_printf_i+0x15e>
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	f022 0220 	bic.w	r2, r2, #32
 8009f90:	6022      	str	r2, [r4, #0]
 8009f92:	2210      	movs	r2, #16
 8009f94:	e7b7      	b.n	8009f06 <_printf_i+0xd2>
 8009f96:	064d      	lsls	r5, r1, #25
 8009f98:	bf48      	it	mi
 8009f9a:	b29b      	uxthmi	r3, r3
 8009f9c:	e7ef      	b.n	8009f7e <_printf_i+0x14a>
 8009f9e:	4665      	mov	r5, ip
 8009fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fa4:	fb02 3311 	mls	r3, r2, r1, r3
 8009fa8:	5cc3      	ldrb	r3, [r0, r3]
 8009faa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009fae:	460b      	mov	r3, r1
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	d1f5      	bne.n	8009fa0 <_printf_i+0x16c>
 8009fb4:	e7b9      	b.n	8009f2a <_printf_i+0xf6>
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	6825      	ldr	r5, [r4, #0]
 8009fba:	6961      	ldr	r1, [r4, #20]
 8009fbc:	1d18      	adds	r0, r3, #4
 8009fbe:	6010      	str	r0, [r2, #0]
 8009fc0:	0628      	lsls	r0, r5, #24
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	d501      	bpl.n	8009fca <_printf_i+0x196>
 8009fc6:	6019      	str	r1, [r3, #0]
 8009fc8:	e002      	b.n	8009fd0 <_printf_i+0x19c>
 8009fca:	066a      	lsls	r2, r5, #25
 8009fcc:	d5fb      	bpl.n	8009fc6 <_printf_i+0x192>
 8009fce:	8019      	strh	r1, [r3, #0]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6123      	str	r3, [r4, #16]
 8009fd4:	4665      	mov	r5, ip
 8009fd6:	e7b9      	b.n	8009f4c <_printf_i+0x118>
 8009fd8:	6813      	ldr	r3, [r2, #0]
 8009fda:	1d19      	adds	r1, r3, #4
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	681d      	ldr	r5, [r3, #0]
 8009fe0:	6862      	ldr	r2, [r4, #4]
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f7f6 f8fb 	bl	80001e0 <memchr>
 8009fea:	b108      	cbz	r0, 8009ff0 <_printf_i+0x1bc>
 8009fec:	1b40      	subs	r0, r0, r5
 8009fee:	6060      	str	r0, [r4, #4]
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	6123      	str	r3, [r4, #16]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ffa:	e7a7      	b.n	8009f4c <_printf_i+0x118>
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	462a      	mov	r2, r5
 800a000:	4639      	mov	r1, r7
 800a002:	4630      	mov	r0, r6
 800a004:	47c0      	blx	r8
 800a006:	3001      	adds	r0, #1
 800a008:	d0aa      	beq.n	8009f60 <_printf_i+0x12c>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	079b      	lsls	r3, r3, #30
 800a00e:	d413      	bmi.n	800a038 <_printf_i+0x204>
 800a010:	68e0      	ldr	r0, [r4, #12]
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	4298      	cmp	r0, r3
 800a016:	bfb8      	it	lt
 800a018:	4618      	movlt	r0, r3
 800a01a:	e7a3      	b.n	8009f64 <_printf_i+0x130>
 800a01c:	2301      	movs	r3, #1
 800a01e:	464a      	mov	r2, r9
 800a020:	4639      	mov	r1, r7
 800a022:	4630      	mov	r0, r6
 800a024:	47c0      	blx	r8
 800a026:	3001      	adds	r0, #1
 800a028:	d09a      	beq.n	8009f60 <_printf_i+0x12c>
 800a02a:	3501      	adds	r5, #1
 800a02c:	68e3      	ldr	r3, [r4, #12]
 800a02e:	9a03      	ldr	r2, [sp, #12]
 800a030:	1a9b      	subs	r3, r3, r2
 800a032:	42ab      	cmp	r3, r5
 800a034:	dcf2      	bgt.n	800a01c <_printf_i+0x1e8>
 800a036:	e7eb      	b.n	800a010 <_printf_i+0x1dc>
 800a038:	2500      	movs	r5, #0
 800a03a:	f104 0919 	add.w	r9, r4, #25
 800a03e:	e7f5      	b.n	800a02c <_printf_i+0x1f8>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1ac      	bne.n	8009f9e <_printf_i+0x16a>
 800a044:	7803      	ldrb	r3, [r0, #0]
 800a046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a04a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a04e:	e76c      	b.n	8009f2a <_printf_i+0xf6>
 800a050:	0800a179 	.word	0x0800a179
 800a054:	0800a18a 	.word	0x0800a18a

0800a058 <memcpy>:
 800a058:	b510      	push	{r4, lr}
 800a05a:	1e43      	subs	r3, r0, #1
 800a05c:	440a      	add	r2, r1
 800a05e:	4291      	cmp	r1, r2
 800a060:	d100      	bne.n	800a064 <memcpy+0xc>
 800a062:	bd10      	pop	{r4, pc}
 800a064:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a06c:	e7f7      	b.n	800a05e <memcpy+0x6>

0800a06e <memmove>:
 800a06e:	4288      	cmp	r0, r1
 800a070:	b510      	push	{r4, lr}
 800a072:	eb01 0302 	add.w	r3, r1, r2
 800a076:	d807      	bhi.n	800a088 <memmove+0x1a>
 800a078:	1e42      	subs	r2, r0, #1
 800a07a:	4299      	cmp	r1, r3
 800a07c:	d00a      	beq.n	800a094 <memmove+0x26>
 800a07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a082:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a086:	e7f8      	b.n	800a07a <memmove+0xc>
 800a088:	4283      	cmp	r3, r0
 800a08a:	d9f5      	bls.n	800a078 <memmove+0xa>
 800a08c:	1881      	adds	r1, r0, r2
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	42d3      	cmn	r3, r2
 800a092:	d100      	bne.n	800a096 <memmove+0x28>
 800a094:	bd10      	pop	{r4, pc}
 800a096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a09a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a09e:	e7f7      	b.n	800a090 <memmove+0x22>

0800a0a0 <_realloc_r>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	460e      	mov	r6, r1
 800a0a8:	b921      	cbnz	r1, 800a0b4 <_realloc_r+0x14>
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0b0:	f7ff bc6c 	b.w	800998c <_malloc_r>
 800a0b4:	b922      	cbnz	r2, 800a0c0 <_realloc_r+0x20>
 800a0b6:	f7ff fc1b 	bl	80098f0 <_free_r>
 800a0ba:	4625      	mov	r5, r4
 800a0bc:	4628      	mov	r0, r5
 800a0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c0:	f000 f814 	bl	800a0ec <_malloc_usable_size_r>
 800a0c4:	42a0      	cmp	r0, r4
 800a0c6:	d20f      	bcs.n	800a0e8 <_realloc_r+0x48>
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	f7ff fc5e 	bl	800998c <_malloc_r>
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d0f2      	beq.n	800a0bc <_realloc_r+0x1c>
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4622      	mov	r2, r4
 800a0da:	f7ff ffbd 	bl	800a058 <memcpy>
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff fc05 	bl	80098f0 <_free_r>
 800a0e6:	e7e9      	b.n	800a0bc <_realloc_r+0x1c>
 800a0e8:	4635      	mov	r5, r6
 800a0ea:	e7e7      	b.n	800a0bc <_realloc_r+0x1c>

0800a0ec <_malloc_usable_size_r>:
 800a0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f0:	1f18      	subs	r0, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	bfbc      	itt	lt
 800a0f6:	580b      	ldrlt	r3, [r1, r0]
 800a0f8:	18c0      	addlt	r0, r0, r3
 800a0fa:	4770      	bx	lr

0800a0fc <_init>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	bf00      	nop
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr

0800a108 <_fini>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	bf00      	nop
 800a10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10e:	bc08      	pop	{r3}
 800a110:	469e      	mov	lr, r3
 800a112:	4770      	bx	lr
