
SeniorDesignNucleoMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800611c  0800611c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006124  08006124  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800612c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000070  0800619c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800619c  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014634  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024c0  00000000  00000000  000346d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  00036b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  00037d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000289f6  00000000  00000000  00038e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dffb  00000000  00000000  00061846  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010018b  00000000  00000000  0006f841  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016f9cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  0016fa48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006068 	.word	0x08006068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006068 	.word	0x08006068

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc[6], buffer[6], sensor1, sensor2, sensor3, pot1in, pot2in, pot3in;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<6; i++)
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e00a      	b.n	80005a4 <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc[i] = buffer[i];
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_ADC_ConvCpltCallback+0x38>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000596:	4909      	ldr	r1, [pc, #36]	; (80005bc <HAL_ADC_ConvCpltCallback+0x3c>)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<6; i++)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b05      	cmp	r3, #5
 80005a8:	ddf1      	ble.n	800058e <HAL_ADC_ConvCpltCallback+0xe>
		}
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000023c 	.word	0x2000023c
 80005bc:	20000254 	.word	0x20000254

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fdeb 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f865 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fab3 	bl	8000b38 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 fa93 	bl	8000afc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 fa31 	bl	8000a3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005da:	f000 f8e9 	bl	80007b0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80005de:	f000 f9ef 	bl	80009c0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80005e2:	f000 fa5b 	bl	8000a9c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005e6:	f000 f9ab 	bl	8000940 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //DMA stores ADC values in memory to be called back when needed.
  //buffer holds the values until conversions are complete,
  //at which point the adc[] array holds the referenced values.
  HAL_ADC_Start_DMA (&hadc1, buffer, 6);
 80005ea:	2206      	movs	r2, #6
 80005ec:	4924      	ldr	r1, [pc, #144]	; (8000680 <main+0xc0>)
 80005ee:	4825      	ldr	r0, [pc, #148]	; (8000684 <main+0xc4>)
 80005f0:	f001 f9be 	bl	8001970 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)buf, "ADC Test!\r\n");
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <main+0xc8>)
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000600:	f107 0318 	add.w	r3, r7, #24
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fde3 	bl	80001d0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f107 0118 	add.w	r1, r7, #24
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	481d      	ldr	r0, [pc, #116]	; (800068c <main+0xcc>)
 8000618:	f004 fc6f 	bl	8004efa <HAL_UART_Transmit>
	  HAL_Delay(500);
 800061c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000620:	f000 fe3a 	bl	8001298 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000624:	2120      	movs	r1, #32
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f002 ff37 	bl	800349c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f000 fe32 	bl	8001298 <HAL_Delay>
	  //Using DMA to scan ADC values and transmit them to serial

	  // Convert ADC values to string and print
	  for (int i=0;i<6;i++)
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
 8000638:	e01a      	b.n	8000670 <main+0xb0>
	  	  {
		  sprintf(msg, "ADC#%u value: %lu\r\n", i, adc[i]);
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <main+0xd0>)
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	1d38      	adds	r0, r7, #4
 8000644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000646:	4913      	ldr	r1, [pc, #76]	; (8000694 <main+0xd4>)
 8000648:	f005 f908 	bl	800585c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0xcc>)
 8000660:	f004 fc4b 	bl	8004efa <HAL_UART_Transmit>
		  HAL_Delay (100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f000 fe17 	bl	8001298 <HAL_Delay>
	  for (int i=0;i<6;i++)
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	3301      	adds	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	2b05      	cmp	r3, #5
 8000674:	dde1      	ble.n	800063a <main+0x7a>
	  	  }
	  HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f000 fe0e 	bl	8001298 <HAL_Delay>
	  strcpy((char*)buf, "ADC Test!\r\n");
 800067c:	e7ba      	b.n	80005f4 <main+0x34>
 800067e:	bf00      	nop
 8000680:	2000023c 	.word	0x2000023c
 8000684:	200001d4 	.word	0x200001d4
 8000688:	08006080 	.word	0x08006080
 800068c:	200002b8 	.word	0x200002b8
 8000690:	20000254 	.word	0x20000254
 8000694:	0800608c 	.word	0x0800608c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b8      	sub	sp, #224	; 0xe0
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 f8d0 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2288      	movs	r2, #136	; 0x88
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 f8c2 	bl	800584c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2310      	movs	r3, #16
 80006d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ee:	230a      	movs	r3, #10
 80006f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f86a 	bl	80037e4 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000716:	f000 fa9b 	bl	8000c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000738:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fc36 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800074a:	f000 fa81 	bl	8000c50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800074e:	f244 0346 	movw	r3, #16454	; 0x4046
 8000752:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800075c:	2300      	movs	r3, #0
 800075e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000764:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800076e:	2308      	movs	r3, #8
 8000770:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000772:	2307      	movs	r3, #7
 8000774:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800077e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000782:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fe16 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000792:	f000 fa5d 	bl	8000c50 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f002 ffcd 	bl	8003738 <HAL_PWREx_ControlVoltageScaling>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007a4:	f000 fa54 	bl	8000c50 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	37e0      	adds	r7, #224	; 0xe0
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <MX_ADC1_Init+0x170>)
 80007d4:	4a53      	ldr	r2, [pc, #332]	; (8000924 <MX_ADC1_Init+0x174>)
 80007d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d8:	4b51      	ldr	r3, [pc, #324]	; (8000920 <MX_ADC1_Init+0x170>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80007de:	4b50      	ldr	r3, [pc, #320]	; (8000920 <MX_ADC1_Init+0x170>)
 80007e0:	2208      	movs	r2, #8
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b4e      	ldr	r3, [pc, #312]	; (8000920 <MX_ADC1_Init+0x170>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ea:	4b4d      	ldr	r3, [pc, #308]	; (8000920 <MX_ADC1_Init+0x170>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b4b      	ldr	r3, [pc, #300]	; (8000920 <MX_ADC1_Init+0x170>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b4a      	ldr	r3, [pc, #296]	; (8000920 <MX_ADC1_Init+0x170>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b48      	ldr	r3, [pc, #288]	; (8000920 <MX_ADC1_Init+0x170>)
 80007fe:	2201      	movs	r2, #1
 8000800:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000802:	4b47      	ldr	r3, [pc, #284]	; (8000920 <MX_ADC1_Init+0x170>)
 8000804:	2206      	movs	r2, #6
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b45      	ldr	r3, [pc, #276]	; (8000920 <MX_ADC1_Init+0x170>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b43      	ldr	r3, [pc, #268]	; (8000920 <MX_ADC1_Init+0x170>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b42      	ldr	r3, [pc, #264]	; (8000920 <MX_ADC1_Init+0x170>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800081c:	4b40      	ldr	r3, [pc, #256]	; (8000920 <MX_ADC1_Init+0x170>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <MX_ADC1_Init+0x170>)
 8000826:	2200      	movs	r2, #0
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082a:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <MX_ADC1_Init+0x170>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000832:	483b      	ldr	r0, [pc, #236]	; (8000920 <MX_ADC1_Init+0x170>)
 8000834:	f000 ff48 	bl	80016c8 <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083e:	f000 fa07 	bl	8000c50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4834      	ldr	r0, [pc, #208]	; (8000920 <MX_ADC1_Init+0x170>)
 800084e:	f002 f8af 	bl	80029b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000858:	f000 f9fa 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800085c:	4b32      	ldr	r3, [pc, #200]	; (8000928 <MX_ADC1_Init+0x178>)
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2306      	movs	r3, #6
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000864:	2306      	movs	r3, #6
 8000866:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000868:	237f      	movs	r3, #127	; 0x7f
 800086a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	2304      	movs	r3, #4
 800086e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4829      	ldr	r0, [pc, #164]	; (8000920 <MX_ADC1_Init+0x170>)
 800087a:	f001 fb65 	bl	8001f48 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000884:	f000 f9e4 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_ADC1_Init+0x17c>)
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800088c:	230c      	movs	r3, #12
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	4822      	ldr	r0, [pc, #136]	; (8000920 <MX_ADC1_Init+0x170>)
 8000896:	f001 fb57 	bl	8001f48 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80008a0:	f000 f9d6 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_ADC1_Init+0x180>)
 80008a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008a8:	2312      	movs	r3, #18
 80008aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_ADC1_Init+0x170>)
 80008b2:	f001 fb49 	bl	8001f48 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80008bc:	f000 f9c8 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC1_Init+0x184>)
 80008c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008c4:	2318      	movs	r3, #24
 80008c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_ADC1_Init+0x170>)
 80008ce:	f001 fb3b 	bl	8001f48 <HAL_ADC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80008d8:	f000 f9ba 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_ADC1_Init+0x188>)
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_ADC1_Init+0x170>)
 80008ec:	f001 fb2c 	bl	8001f48 <HAL_ADC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80008f6:	f000 f9ab 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_ADC1_Init+0x18c>)
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008fe:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_ADC1_Init+0x170>)
 800090a:	f001 fb1d 	bl	8001f48 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000914:	f000 f99c 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001d4 	.word	0x200001d4
 8000924:	50040000 	.word	0x50040000
 8000928:	04300002 	.word	0x04300002
 800092c:	08600004 	.word	0x08600004
 8000930:	0c900008 	.word	0x0c900008
 8000934:	2e300800 	.word	0x2e300800
 8000938:	32601000 	.word	0x32601000
 800093c:	36902000 	.word	0x36902000

08000940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_I2C1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_I2C1_Init+0x74>)
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <MX_I2C1_Init+0x7c>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000958:	2201      	movs	r2, #1
 800095a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_I2C1_Init+0x74>)
 800097c:	f002 fda8 	bl	80034d0 <HAL_I2C_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000986:	f000 f963 	bl	8000c50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_I2C1_Init+0x74>)
 800098e:	f002 fe2e 	bl	80035ee <HAL_I2CEx_ConfigAnalogFilter>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000998:	f000 f95a 	bl	8000c50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C1_Init+0x74>)
 80009a0:	f002 fe70 	bl	8003684 <HAL_I2CEx_ConfigDigitalFilter>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 f951 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000184 	.word	0x20000184
 80009b8:	40005400 	.word	0x40005400
 80009bc:	10909cec 	.word	0x10909cec

080009c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_SPI2_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009f6:	2228      	movs	r2, #40	; 0x28
 80009f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI2_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a0e:	2207      	movs	r2, #7
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI2_Init+0x74>)
 8000a20:	f004 f97a 	bl	8004d18 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 f911 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000a0 	.word	0x200000a0
 8000a38:	40003800 	.word	0x40003800

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART2_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a80:	f004 f9ed 	bl	8004e5e <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f8e1 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002b8 	.word	0x200002b8
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART3_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ae0:	f004 f9bd 	bl	8004e5e <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f8b1 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000104 	.word	0x20000104
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200b      	movs	r0, #11
 8000b20:	f002 f8cd 	bl	8002cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b24:	200b      	movs	r0, #11
 8000b26:	f002 f8e6 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a3b      	ldr	r2, [pc, #236]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a35      	ldr	r2, [pc, #212]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a2f      	ldr	r2, [pc, #188]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_GPIO_Init+0x108>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f002 fc59 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED_Pin|G_LED_Pin|Pot1_CS_Pin|Pot2_CS_Pin
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f247 0106 	movw	r1, #28678	; 0x7006
 8000bc0:	4820      	ldr	r0, [pc, #128]	; (8000c44 <MX_GPIO_Init+0x10c>)
 8000bc2:	f002 fc53 	bl	800346c <HAL_GPIO_WritePin>
                          |Pot3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_GPIO_Init+0x110>)
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481c      	ldr	r0, [pc, #112]	; (8000c4c <MX_GPIO_Init+0x114>)
 8000bdc:	f002 fa9e 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000be0:	2320      	movs	r3, #32
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfa:	f002 fa8f 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin Pot1_CS_Pin Pot2_CS_Pin
                           Pot3_CS_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin|Pot1_CS_Pin|Pot2_CS_Pin
 8000bfe:	f247 0306 	movw	r3, #28678	; 0x7006
 8000c02:	617b      	str	r3, [r7, #20]
                          |Pot3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <MX_GPIO_Init+0x10c>)
 8000c18:	f002 fa80 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip1_Pin Dip2_Pin Dip3_Pin Dip4_Pin
                           Dip5_Pin */
  GPIO_InitStruct.Pin = Dip1_Pin|Dip2_Pin|Dip3_Pin|Dip4_Pin
 8000c1c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c20:	617b      	str	r3, [r7, #20]
                          |Dip5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f002 fa72 	bl	800311c <HAL_GPIO_Init>

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	10210000 	.word	0x10210000
 8000c4c:	48000800 	.word	0x48000800

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <Error_Handler+0x6>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a3b      	ldr	r2, [pc, #236]	; (8000dac <HAL_ADC_MspInit+0x10c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d170      	bne.n	8000da4 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a3a      	ldr	r2, [pc, #232]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a34      	ldr	r2, [pc, #208]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <HAL_ADC_MspInit+0x110>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin|Pot3IN_Pin;
 8000d0a:	2317      	movs	r3, #23
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4825      	ldr	r0, [pc, #148]	; (8000db4 <HAL_ADC_MspInit+0x114>)
 8000d1e:	f002 f9fd 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot1IN_Pin|Pot2IN_Pin;
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d26:	230b      	movs	r3, #11
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f002 f9f0 	bl	800311c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_ADC_MspInit+0x11c>)
 8000d40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d72:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d7a:	f001 ffd7 	bl	8002d2c <HAL_DMA_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8000d84:	f7ff ff64 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_ADC_MspInit+0x118>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2012      	movs	r0, #18
 8000d9a:	f001 ff90 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d9e:	2012      	movs	r0, #18
 8000da0:	f001 ffa9 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	50040000 	.word	0x50040000
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000800 	.word	0x48000800
 8000db8:	2000026c 	.word	0x2000026c
 8000dbc:	40020008 	.word	0x40020008

08000dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_I2C_MspInit+0x7c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d127      	bne.n	8000e32 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_I2C_MspInit+0x80>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <HAL_I2C_MspInit+0x80>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_I2C_MspInit+0x80>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DigiPotSCL_Pin|DigiPotSDA_Pin;
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfe:	2312      	movs	r3, #18
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <HAL_I2C_MspInit+0x84>)
 8000e16:	f002 f981 	bl	800311c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_I2C_MspInit+0x80>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_I2C_MspInit+0x80>)
 8000e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_I2C_MspInit+0x80>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_SPI_MspInit+0xb4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d144      	bne.n	8000ef4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_SPI_MspInit+0xb8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = Pot_MOSI_Pin;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pot_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <HAL_SPI_MspInit+0xbc>)
 8000ece:	f002 f925 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot_CLK_Pin;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Pot_CLK_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <HAL_SPI_MspInit+0xc0>)
 8000ef0:	f002 f914 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40003800 	.word	0x40003800
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000400 	.word	0x48000400

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d129      	bne.n	8000f82 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a28      	ldr	r2, [pc, #160]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f002 f8ce 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f80:	e02d      	b.n	8000fde <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_UART_MspInit+0xe4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d128      	bne.n	8000fde <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f96:	6593      	str	r3, [r2, #88]	; 0x58
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SimRX_Pin|SimTX_Pin;
 8000fbc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <HAL_UART_MspInit+0xe8>)
 8000fda:	f002 f89f 	bl	800311c <HAL_GPIO_Init>
}
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f908 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA1_Channel1_IRQHandler+0x10>)
 8001052:	f001 ff83 	bl	8002f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000026c 	.word	0x2000026c

08001060 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <ADC1_2_IRQHandler+0x10>)
 8001066:	f000 fd37 	bl	8001ad8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001d4 	.word	0x200001d4

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f004 fba8 	bl	80057f8 <__errno>
 80010a8:	4602      	mov	r2, r0
 80010aa:	230c      	movs	r3, #12
 80010ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20018000 	.word	0x20018000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	20000348 	.word	0x20000348

080010e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <SystemInit+0x64>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <SystemInit+0x64>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <SystemInit+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <SystemInit+0x68>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <SystemInit+0x68>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <SystemInit+0x68>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <SystemInit+0x68>)
 800110c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001110:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001114:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <SystemInit+0x68>)
 8001118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <SystemInit+0x68>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <SystemInit+0x68>)
 8001124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <SystemInit+0x68>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SystemInit+0x64>)
 8001132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001136:	609a      	str	r2, [r3, #8]
#endif
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	40021000 	.word	0x40021000

0800114c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001150:	f7ff ffc6 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001154:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001156:	e003      	b.n	8001160 <LoopCopyDataInit>

08001158 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800115a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800115c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800115e:	3104      	adds	r1, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001160:	480a      	ldr	r0, [pc, #40]	; (800118c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001164:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001166:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001168:	d3f6      	bcc.n	8001158 <CopyDataInit>
	ldr	r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopForever+0x12>)
	b	LoopFillZerobss
 800116c:	e002      	b.n	8001174 <LoopFillZerobss>

0800116e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800116e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001170:	f842 3b04 	str.w	r3, [r2], #4

08001174 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LoopForever+0x16>)
	cmp	r2, r3
 8001176:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001178:	d3f9      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117a:	f004 fb43 	bl	8005804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117e:	f7ff fa1f 	bl	80005c0 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001188:	0800612c 	.word	0x0800612c
	ldr	r0, =_sdata
 800118c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001190:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001194:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001198:	20000344 	.word	0x20000344

0800119c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC3_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_Init+0x3c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_Init+0x3c>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f001 fd76 	bl	8002ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f80f 	bl	80011e0 <HAL_InitTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	e001      	b.n	80011d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ce:	f7ff fd43 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_InitTick+0x6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d023      	beq.n	800123c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_InitTick+0x70>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_InitTick+0x6c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fd81 	bl	8002d12 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d809      	bhi.n	8001230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f001 fd4b 	bl	8002cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_InitTick+0x74>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e007      	b.n	8001240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e004      	b.n	8001240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e001      	b.n	8001240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	20000000 	.word	0x20000000
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008
 800127c:	2000033c 	.word	0x2000033c

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000033c 	.word	0x2000033c

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_Delay+0x40>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000008 	.word	0x20000008

080012dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	609a      	str	r2, [r3, #8]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <LL_ADC_SetOffset+0x44>)
 8001366:	4013      	ands	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	4313      	orrs	r3, r2
 8001374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800137c:	bf00      	nop
 800137e:	371c      	adds	r7, #28
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	03fff000 	.word	0x03fff000

0800138c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3360      	adds	r3, #96	; 0x60
 800139a:	461a      	mov	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3360      	adds	r3, #96	; 0x60
 80013c8:	461a      	mov	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	431a      	orrs	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3330      	adds	r3, #48	; 0x30
 8001424:	461a      	mov	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	211f      	movs	r1, #31
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	401a      	ands	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0e9b      	lsrs	r3, r3, #26
 800144c:	f003 011f 	and.w	r1, r3, #31
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	431a      	orrs	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001492:	b480      	push	{r7}
 8001494:	b087      	sub	sp, #28
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3314      	adds	r3, #20
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	0e5b      	lsrs	r3, r3, #25
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	0d1b      	lsrs	r3, r3, #20
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2107      	movs	r1, #7
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	0d1b      	lsrs	r3, r3, #20
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	431a      	orrs	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0318 	and.w	r3, r3, #24
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <LL_ADC_SetChannelSingleDiff+0x44>)
 800150c:	40d9      	lsrs	r1, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	400b      	ands	r3, r1
 8001512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001516:	431a      	orrs	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	0007ffff 	.word	0x0007ffff

08001530 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 031f 	and.w	r3, r3, #31
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6093      	str	r3, [r2, #8]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800159c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015a0:	d101      	bne.n	80015a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015f0:	d101      	bne.n	80015f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <LL_ADC_IsEnabled+0x18>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <LL_ADC_IsEnabled+0x1a>
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001662:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001666:	f043 0204 	orr.w	r2, r3, #4
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b04      	cmp	r3, #4
 800168c:	d101      	bne.n	8001692 <LL_ADC_REG_IsConversionOngoing+0x18>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d101      	bne.n	80016b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e134      	b.n	800194c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fad5 	bl	8000ca0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff3f 	bl	800158c <LL_ADC_IsDeepPowerDownEnabled>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff25 	bl	8001568 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff5a 	bl	80015dc <LL_ADC_IsInternalRegulatorEnabled>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d113      	bne.n	8001756 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff3e 	bl	80015b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001738:	4b86      	ldr	r3, [pc, #536]	; (8001954 <HAL_ADC_Init+0x28c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	4a86      	ldr	r2, [pc, #536]	; (8001958 <HAL_ADC_Init+0x290>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b01      	subs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff3e 	bl	80015dc <LL_ADC_IsInternalRegulatorEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f043 0210 	orr.w	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff77 	bl	800167a <LL_ADC_REG_IsConversionOngoing>
 800178c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80cf 	bne.w	800193a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 80cb 	bne.w	800193a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017ac:	f043 0202 	orr.w	r2, r3, #2
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff37 	bl	800162c <LL_ADC_IsEnabled>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d115      	bne.n	80017f0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c4:	4865      	ldr	r0, [pc, #404]	; (800195c <HAL_ADC_Init+0x294>)
 80017c6:	f7ff ff31 	bl	800162c <LL_ADC_IsEnabled>
 80017ca:	4604      	mov	r4, r0
 80017cc:	4864      	ldr	r0, [pc, #400]	; (8001960 <HAL_ADC_Init+0x298>)
 80017ce:	f7ff ff2d 	bl	800162c <LL_ADC_IsEnabled>
 80017d2:	4603      	mov	r3, r0
 80017d4:	431c      	orrs	r4, r3
 80017d6:	4863      	ldr	r0, [pc, #396]	; (8001964 <HAL_ADC_Init+0x29c>)
 80017d8:	f7ff ff28 	bl	800162c <LL_ADC_IsEnabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	4323      	orrs	r3, r4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4619      	mov	r1, r3
 80017ea:	485f      	ldr	r0, [pc, #380]	; (8001968 <HAL_ADC_Init+0x2a0>)
 80017ec:	f7ff fd76 	bl	80012dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7e5b      	ldrb	r3, [r3, #25]
 80017f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001800:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001806:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d106      	bne.n	800182c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	3b01      	subs	r3, #1
 8001824:	045b      	lsls	r3, r3, #17
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_ADC_Init+0x2a4>)
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	430b      	orrs	r3, r1
 800185a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff0a 	bl	800167a <LL_ADC_REG_IsConversionOngoing>
 8001866:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff17 	bl	80016a0 <LL_ADC_INJ_IsConversionOngoing>
 8001872:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d13d      	bne.n	80018f6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d13a      	bne.n	80018f6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001884:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800189c:	f023 0302 	bic.w	r3, r3, #2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	69b9      	ldr	r1, [r7, #24]
 80018a6:	430b      	orrs	r3, r1
 80018a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d118      	bne.n	80018e6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018d6:	430a      	orrs	r2, r1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	e007      	b.n	80018f6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10c      	bne.n	8001918 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f023 010f 	bic.w	r1, r3, #15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
 8001916:	e007      	b.n	8001928 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 020f 	bic.w	r2, r2, #15
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f023 0303 	bic.w	r3, r3, #3
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
 8001938:	e007      	b.n	800194a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f043 0210 	orr.w	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800194a:	7ffb      	ldrb	r3, [r7, #31]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3724      	adds	r7, #36	; 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	20000000 	.word	0x20000000
 8001958:	053e2d63 	.word	0x053e2d63
 800195c:	50040000 	.word	0x50040000
 8001960:	50040100 	.word	0x50040100
 8001964:	50040200 	.word	0x50040200
 8001968:	50040300 	.word	0x50040300
 800196c:	fff0c007 	.word	0xfff0c007

08001970 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800197c:	4850      	ldr	r0, [pc, #320]	; (8001ac0 <HAL_ADC_Start_DMA+0x150>)
 800197e:	f7ff fdd7 	bl	8001530 <LL_ADC_GetMultimode>
 8001982:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe76 	bl	800167a <LL_ADC_REG_IsConversionOngoing>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 808e 	bne.w	8001ab2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x34>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e089      	b.n	8001ab8 <HAL_ADC_Start_DMA+0x148>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d002      	beq.n	80019be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	d172      	bne.n	8001aa4 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 feb0 	bl	8002724 <ADC_Enable>
 80019c4:	4603      	mov	r3, r0
 80019c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d165      	bne.n	8001a9a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <HAL_ADC_Start_DMA+0x154>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d002      	beq.n	80019f2 <HAL_ADC_Start_DMA+0x82>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e000      	b.n	80019f4 <HAL_ADC_Start_DMA+0x84>
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_ADC_Start_DMA+0x158>)
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d002      	beq.n	8001a02 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f023 0206 	bic.w	r2, r3, #6
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	659a      	str	r2, [r3, #88]	; 0x58
 8001a26:	e002      	b.n	8001a2e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_ADC_Start_DMA+0x15c>)
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <HAL_ADC_Start_DMA+0x160>)
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <HAL_ADC_Start_DMA+0x164>)
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	221c      	movs	r2, #28
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0210 	orr.w	r2, r2, #16
 8001a64:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3340      	adds	r3, #64	; 0x40
 8001a80:	4619      	mov	r1, r3
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f001 fa09 	bl	8002e9c <HAL_DMA_Start_IT>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fddd 	bl	8001652 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a98:	e00d      	b.n	8001ab6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001aa2:	e008      	b.n	8001ab6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ab0:	e001      	b.n	8001ab6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	50040300 	.word	0x50040300
 8001ac4:	50040100 	.word	0x50040100
 8001ac8:	50040000 	.word	0x50040000
 8001acc:	080027d9 	.word	0x080027d9
 8001ad0:	080028b1 	.word	0x080028b1
 8001ad4:	080028cd 	.word	0x080028cd

08001ad8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001af4:	4882      	ldr	r0, [pc, #520]	; (8001d00 <HAL_ADC_IRQHandler+0x228>)
 8001af6:	f7ff fd1b 	bl	8001530 <LL_ADC_GetMultimode>
 8001afa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d017      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x5e>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d012      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 ff37 	bl	800299c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_ADC_IRQHandler+0x72>
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8083 	beq.w	8001c5c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d07d      	beq.n	8001c5c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc36 	bl	80013ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d062      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5d      	ldr	r2, [pc, #372]	; (8001d04 <HAL_ADC_IRQHandler+0x22c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d002      	beq.n	8001b98 <HAL_ADC_IRQHandler+0xc0>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e000      	b.n	8001b9a <HAL_ADC_IRQHandler+0xc2>
 8001b98:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_ADC_IRQHandler+0x230>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d008      	beq.n	8001bb4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d002      	beq.n	8001bb4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d104      	bne.n	8001bbe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	e00c      	b.n	8001bd8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a50      	ldr	r2, [pc, #320]	; (8001d04 <HAL_ADC_IRQHandler+0x22c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d002      	beq.n	8001bce <HAL_ADC_IRQHandler+0xf6>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	e000      	b.n	8001bd0 <HAL_ADC_IRQHandler+0xf8>
 8001bce:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_ADC_IRQHandler+0x230>)
 8001bd0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d135      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d12e      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fd40 	bl	800167a <LL_ADC_REG_IsConversionOngoing>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11a      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020c 	bic.w	r2, r2, #12
 8001c0e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d112      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
 8001c34:	e00b      	b.n	8001c4e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fc96 	bl	8000580 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	220c      	movs	r2, #12
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x198>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 809f 	beq.w	8001dba <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8099 	beq.w	8001dba <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fbe1 	bl	800146c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001caa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fb9c 	bl	80013ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cb6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_ADC_IRQHandler+0x22c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d002      	beq.n	8001cc8 <HAL_ADC_IRQHandler+0x1f0>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e000      	b.n	8001cca <HAL_ADC_IRQHandler+0x1f2>
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_ADC_IRQHandler+0x230>)
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d008      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d002      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	d104      	bne.n	8001cee <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	e013      	b.n	8001d16 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_ADC_IRQHandler+0x22c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x234>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	e007      	b.n	8001d0e <HAL_ADC_IRQHandler+0x236>
 8001cfe:	bf00      	nop
 8001d00:	50040300 	.word	0x50040300
 8001d04:	50040100 	.word	0x50040100
 8001d08:	50040000 	.word	0x50040000
 8001d0c:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <HAL_ADC_IRQHandler+0x42c>)
 8001d0e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10c      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d142      	bne.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d03f      	beq.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13a      	bne.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d133      	bne.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d12e      	bne.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fca4 	bl	80016a0 <LL_ADC_INJ_IsConversionOngoing>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11a      	bne.n	8001d94 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d6c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d112      	bne.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
 8001d92:	e00b      	b.n	8001dac <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0210 	orr.w	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fdcd 	bl	800294c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2260      	movs	r2, #96	; 0x60
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d011      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x310>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8a0 	bl	8001f20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d012      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x340>
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fdb3 	bl	8002974 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d012      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x370>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fda5 	bl	8002988 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d036      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x3e8>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d031      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001e64:	2301      	movs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	e014      	b.n	8001e94 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <HAL_ADC_IRQHandler+0x430>)
 8001e72:	f7ff fb6b 	bl	800154c <LL_ADC_GetMultiDMATransfer>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	e008      	b.n	8001e94 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e90:	2301      	movs	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10e      	bne.n	8001eb8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f043 0202 	orr.w	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f83e 	bl	8001f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d018      	beq.n	8001efc <HAL_ADC_IRQHandler+0x424>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f043 0208 	orr.w	r2, r3, #8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fd32 	bl	8002960 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	50040000 	.word	0x50040000
 8001f08:	50040300 	.word	0x50040300

08001f0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0b6      	sub	sp, #216	; 0xd8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x22>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e3c6      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x7b0>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fb7f 	bl	800167a <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 83a7 	bne.w	80026d2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	3b02      	subs	r3, #2
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d81b      	bhi.n	8001fce <HAL_ADC_ConfigChannel+0x86>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <HAL_ADC_ConfigChannel+0x54>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fbd 	.word	0x08001fbd
 8001fa8:	08001fc5 	.word	0x08001fc5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	220c      	movs	r2, #12
 8001fb0:	605a      	str	r2, [r3, #4]
          break;
 8001fb2:	e011      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2212      	movs	r2, #18
 8001fb8:	605a      	str	r2, [r3, #4]
          break;
 8001fba:	e00d      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2218      	movs	r2, #24
 8001fc0:	605a      	str	r2, [r3, #4]
          break;
 8001fc2:	e009      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fca:	605a      	str	r2, [r3, #4]
          break;
 8001fcc:	e004      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2206      	movs	r2, #6
 8001fd2:	605a      	str	r2, [r3, #4]
          break;
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001fd6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f7ff fa15 	bl	8001414 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb43 	bl	800167a <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fb4f 	bl	80016a0 <LL_ADC_INJ_IsConversionOngoing>
 8002002:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002006:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 81a6 	bne.w	800235c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 81a1 	bne.w	800235c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff fa33 	bl	8001492 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	08db      	lsrs	r3, r3, #3
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d00a      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800205e:	f7ff f971 	bl	8001344 <LL_ADC_SetOffset>
 8002062:	e17b      	b.n	800235c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f98e 	bl	800138c <LL_ADC_GetOffsetChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x148>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f983 	bl	800138c <LL_ADC_GetOffsetChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	f003 021f 	and.w	r2, r3, #31
 800208e:	e01e      	b.n	80020ce <HAL_ADC_ConfigChannel+0x186>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f978 	bl	800138c <LL_ADC_GetOffsetChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80020be:	2320      	movs	r3, #32
 80020c0:	e004      	b.n	80020cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80020c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x19e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0e9b      	lsrs	r3, r3, #26
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	e018      	b.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800210e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff f947 	bl	80013b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f92b 	bl	800138c <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x20e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f920 	bl	800138c <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	e01e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x24c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f915 	bl	800138c <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800217c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e004      	b.n	8002192 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x264>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	e018      	b.n	80021de <HAL_ADC_ConfigChannel+0x296>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e004      	b.n	80021de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80021d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021de:	429a      	cmp	r2, r3
 80021e0:	d106      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2101      	movs	r1, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f8e4 	bl	80013b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2102      	movs	r1, #2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f8c8 	bl	800138c <LL_ADC_GetOffsetChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <HAL_ADC_ConfigChannel+0x2d4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2102      	movs	r1, #2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f8bd 	bl	800138c <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	f003 021f 	and.w	r2, r3, #31
 800221a:	e01e      	b.n	800225a <HAL_ADC_ConfigChannel+0x312>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2102      	movs	r1, #2
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f8b2 	bl	800138c <LL_ADC_GetOffsetChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800223a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800223e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800224e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x32a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	0e9b      	lsrs	r3, r3, #26
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	e016      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x358>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002286:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800228a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e004      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2102      	movs	r1, #2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f883 	bl	80013b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2103      	movs	r1, #3
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f867 	bl	800138c <LL_ADC_GetOffsetChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_ADC_ConfigChannel+0x396>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2103      	movs	r1, #3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f85c 	bl	800138c <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	e017      	b.n	800230e <HAL_ADC_ConfigChannel+0x3c6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2103      	movs	r1, #3
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f851 	bl	800138c <LL_ADC_GetOffsetChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	e003      	b.n	800230c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x3de>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	e011      	b.n	800234a <HAL_ADC_ConfigChannel+0x402>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002336:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e003      	b.n	800234a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800234a:	429a      	cmp	r2, r3
 800234c:	d106      	bne.n	800235c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	2103      	movs	r1, #3
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f82e 	bl	80013b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f963 	bl	800162c <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 813f 	bne.w	80025ec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	461a      	mov	r2, r3
 800237c:	f7ff f8b4 	bl	80014e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a8e      	ldr	r2, [pc, #568]	; (80025c0 <HAL_ADC_ConfigChannel+0x678>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f040 8130 	bne.w	80025ec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10b      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x46c>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	3301      	adds	r3, #1
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e019      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x4a0>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80023d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2b09      	cmp	r3, #9
 80023e0:	bf94      	ite	ls
 80023e2:	2301      	movls	r3, #1
 80023e4:	2300      	movhi	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d079      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x4c0>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	069b      	lsls	r3, r3, #26
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	e015      	b.n	8002434 <HAL_ADC_ConfigChannel+0x4ec>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800241a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x50c>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	3301      	adds	r3, #1
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	e017      	b.n	8002484 <HAL_ADC_ConfigChannel+0x53c>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	ea42 0103 	orr.w	r1, r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x562>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	051b      	lsls	r3, r3, #20
 80024a8:	e018      	b.n	80024dc <HAL_ADC_ConfigChannel+0x594>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e003      	b.n	80024ce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	430b      	orrs	r3, r1
 80024de:	e080      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x5b4>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	e015      	b.n	8002528 <HAL_ADC_ConfigChannel+0x5e0>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x600>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	e017      	b.n	8002578 <HAL_ADC_ConfigChannel+0x630>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	61fb      	str	r3, [r7, #28]
  return result;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x65c>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	3b1e      	subs	r3, #30
 800259c:	051b      	lsls	r3, r3, #20
 800259e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025a2:	e01d      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x698>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	613b      	str	r3, [r7, #16]
  return result;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e005      	b.n	80025cc <HAL_ADC_ConfigChannel+0x684>
 80025c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	3b1e      	subs	r3, #30
 80025da:	051b      	lsls	r3, r3, #20
 80025dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e0:	430b      	orrs	r3, r1
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe ff53 	bl	8001492 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_ADC_ConfigChannel+0x7b8>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d079      	beq.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025f8:	4842      	ldr	r0, [pc, #264]	; (8002704 <HAL_ADC_ConfigChannel+0x7bc>)
 80025fa:	f7fe fe95 	bl	8001328 <LL_ADC_GetCommonPathInternalCh>
 80025fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a40      	ldr	r2, [pc, #256]	; (8002708 <HAL_ADC_ConfigChannel+0x7c0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d12b      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800260c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d125      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a3b      	ldr	r2, [pc, #236]	; (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x6e4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a3a      	ldr	r2, [pc, #232]	; (8002710 <HAL_ADC_ConfigChannel+0x7c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d15c      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002634:	4619      	mov	r1, r3
 8002636:	4833      	ldr	r0, [pc, #204]	; (8002704 <HAL_ADC_ConfigChannel+0x7bc>)
 8002638:	f7fe fe63 	bl	8001302 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_ADC_ConfigChannel+0x7cc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	4a35      	ldr	r2, [pc, #212]	; (8002718 <HAL_ADC_ConfigChannel+0x7d0>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099a      	lsrs	r2, r3, #6
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002654:	e002      	b.n	800265c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002662:	e040      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2c      	ldr	r2, [pc, #176]	; (800271c <HAL_ADC_ConfigChannel+0x7d4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d118      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x758>
 800266e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d112      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_ADC_ConfigChannel+0x746>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_ADC_ConfigChannel+0x7c8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12d      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800268e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	4619      	mov	r1, r3
 8002698:	481a      	ldr	r0, [pc, #104]	; (8002704 <HAL_ADC_ConfigChannel+0x7bc>)
 800269a:	f7fe fe32 	bl	8001302 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800269e:	e024      	b.n	80026ea <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_ADC_ConfigChannel+0x7d8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d120      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d115      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026c8:	4619      	mov	r1, r3
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <HAL_ADC_ConfigChannel+0x7bc>)
 80026cc:	f7fe fe19 	bl	8001302 <LL_ADC_SetCommonPathInternalCh>
 80026d0:	e00c      	b.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026e4:	e002      	b.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	37d8      	adds	r7, #216	; 0xd8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	80080000 	.word	0x80080000
 8002704:	50040300 	.word	0x50040300
 8002708:	c7520000 	.word	0xc7520000
 800270c:	50040000 	.word	0x50040000
 8002710:	50040200 	.word	0x50040200
 8002714:	20000000 	.word	0x20000000
 8002718:	053e2d63 	.word	0x053e2d63
 800271c:	cb840000 	.word	0xcb840000
 8002720:	80000001 	.word	0x80000001

08002724 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ff7b 	bl	800162c <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d146      	bne.n	80027ca <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <ADC_Enable+0xb0>)
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e032      	b.n	80027cc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe ff4a 	bl	8001604 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002770:	f7fe fd86 	bl	8001280 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002776:	e021      	b.n	80027bc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe ff55 	bl	800162c <LL_ADC_IsEnabled>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe ff39 	bl	8001604 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002792:	f7fe fd75 	bl	8001280 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d90d      	bls.n	80027bc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0210 	orr.w	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e007      	b.n	80027cc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d1d6      	bne.n	8002778 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	8000003f 	.word	0x8000003f

080027d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d14b      	bne.n	800288a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d021      	beq.n	8002850 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fdec 	bl	80013ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d032      	beq.n	8002882 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12b      	bne.n	8002882 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11f      	bne.n	8002882 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
 800284e:	e018      	b.n	8002882 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d111      	bne.n	8002882 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7fd fe7c 	bl	8000580 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002888:	e00e      	b.n	80028a8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fb4c 	bl	8001f34 <HAL_ADC_ErrorCallback>
}
 800289c:	e004      	b.n	80028a8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff fb24 	bl	8001f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	f043 0204 	orr.w	r2, r3, #4
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fb1e 	bl	8001f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <LL_ADC_IsEnabled>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <LL_ADC_IsEnabled+0x18>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_ADC_IsEnabled+0x1a>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_REG_IsConversionOngoing>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d101      	bne.n	800293e <LL_ADC_REG_IsConversionOngoing+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b09f      	sub	sp, #124	; 0x7c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e08f      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d102      	bne.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029e0:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	e001      	b.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e072      	b.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff8b 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 8002a10:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff85 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d154      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d151      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02c      	beq.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a46:	035b      	lsls	r3, r3, #13
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	4829      	ldr	r0, [pc, #164]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a52:	f7ff ff55 	bl	8002900 <LL_ADC_IsEnabled>
 8002a56:	4604      	mov	r4, r0
 8002a58:	4828      	ldr	r0, [pc, #160]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a5a:	f7ff ff51 	bl	8002900 <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	431c      	orrs	r4, r3
 8002a62:	4828      	ldr	r0, [pc, #160]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a64:	f7ff ff4c 	bl	8002900 <LL_ADC_IsEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d137      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a78:	f023 030f 	bic.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	6811      	ldr	r1, [r2, #0]
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	6892      	ldr	r2, [r2, #8]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a8c:	e028      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a9a:	4817      	ldr	r0, [pc, #92]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a9c:	f7ff ff30 	bl	8002900 <LL_ADC_IsEnabled>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	4816      	ldr	r0, [pc, #88]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002aa4:	f7ff ff2c 	bl	8002900 <LL_ADC_IsEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	431c      	orrs	r4, r3
 8002aac:	4815      	ldr	r0, [pc, #84]	; (8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002aae:	f7ff ff27 	bl	8002900 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d112      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ac2:	f023 030f 	bic.w	r3, r3, #15
 8002ac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ac8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aca:	e009      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ade:	e000      	b.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	377c      	adds	r7, #124	; 0x7c
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	50040000 	.word	0x50040000
 8002afc:	50040100 	.word	0x50040100
 8002b00:	50040300 	.word	0x50040300
 8002b04:	50040200 	.word	0x50040200

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <__NVIC_EnableIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	6039      	str	r1, [r7, #0]
 8002bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	db0a      	blt.n	8002bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	490c      	ldr	r1, [pc, #48]	; (8002bf4 <__NVIC_SetPriority+0x4c>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd0:	e00a      	b.n	8002be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <__NVIC_SetPriority+0x50>)
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	3b04      	subs	r3, #4
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	440b      	add	r3, r1
 8002be6:	761a      	strb	r2, [r3, #24]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000e100 	.word	0xe000e100
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf28      	it	cs
 8002c1a:	2304      	movcs	r3, #4
 8002c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d902      	bls.n	8002c2c <NVIC_EncodePriority+0x30>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3b03      	subs	r3, #3
 8002c2a:	e000      	b.n	8002c2e <NVIC_EncodePriority+0x32>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	4313      	orrs	r3, r2
         );
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d301      	bcc.n	8002c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <SysTick_Config+0x40>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c82:	210f      	movs	r1, #15
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f7ff ff8e 	bl	8002ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <SysTick_Config+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SysTick_Config+0x40>)
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	e000e010 	.word	0xe000e010

08002ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff29 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd0:	f7ff ff3e 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff8e 	bl	8002bfc <NVIC_EncodePriority>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff5d 	bl	8002ba8 <__NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff31 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa2 	bl	8002c64 <SysTick_Config>
 8002d20:	4603      	mov	r3, r0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e098      	b.n	8002e70 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <HAL_DMA_Init+0x150>)
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d80f      	bhi.n	8002d6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_DMA_Init+0x154>)
 8002d52:	4413      	add	r3, r2
 8002d54:	4a4b      	ldr	r2, [pc, #300]	; (8002e84 <HAL_DMA_Init+0x158>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	009a      	lsls	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <HAL_DMA_Init+0x15c>)
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
 8002d68:	e00e      	b.n	8002d88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_DMA_Init+0x160>)
 8002d72:	4413      	add	r3, r2
 8002d74:	4a43      	ldr	r2, [pc, #268]	; (8002e84 <HAL_DMA_Init+0x158>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	009a      	lsls	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a42      	ldr	r2, [pc, #264]	; (8002e90 <HAL_DMA_Init+0x164>)
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de2:	d039      	beq.n	8002e58 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_DMA_Init+0x15c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d11a      	bne.n	8002e24 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dee:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_DMA_Init+0x168>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f003 031c 	and.w	r3, r3, #28
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4924      	ldr	r1, [pc, #144]	; (8002e94 <HAL_DMA_Init+0x168>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_DMA_Init+0x168>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	f003 031c 	and.w	r3, r3, #28
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	491d      	ldr	r1, [pc, #116]	; (8002e94 <HAL_DMA_Init+0x168>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
 8002e22:	e019      	b.n	8002e58 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e24:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_DMA_Init+0x16c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f003 031c 	and.w	r3, r3, #28
 8002e30:	210f      	movs	r1, #15
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	4917      	ldr	r1, [pc, #92]	; (8002e98 <HAL_DMA_Init+0x16c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_DMA_Init+0x16c>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f003 031c 	and.w	r3, r3, #28
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	4911      	ldr	r1, [pc, #68]	; (8002e98 <HAL_DMA_Init+0x16c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40020407 	.word	0x40020407
 8002e80:	bffdfff8 	.word	0xbffdfff8
 8002e84:	cccccccd 	.word	0xcccccccd
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	bffdfbf8 	.word	0xbffdfbf8
 8002e90:	40020400 	.word	0x40020400
 8002e94:	400200a8 	.word	0x400200a8
 8002e98:	400204a8 	.word	0x400204a8

08002e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_DMA_Start_IT+0x20>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e04b      	b.n	8002f54 <HAL_DMA_Start_IT+0xb8>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d13a      	bne.n	8002f46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f8e0 	bl	80030ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 020e 	orr.w	r2, r2, #14
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e00f      	b.n	8002f34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 020a 	orr.w	r2, r2, #10
 8002f32:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e005      	b.n	8002f52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f003 031c 	and.w	r3, r3, #28
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d026      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x7a>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d021      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f003 021c 	and.w	r2, r3, #28
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d071      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002fd4:	e06c      	b.n	80030b0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 031c 	and.w	r3, r3, #28
 8002fde:	2202      	movs	r2, #2
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_DMA_IRQHandler+0xec>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d029      	beq.n	8003048 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 020a 	bic.w	r2, r2, #10
 8003010:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 021c 	and.w	r2, r3, #28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2102      	movs	r1, #2
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d038      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003046:	e033      	b.n	80030b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f003 031c 	and.w	r3, r3, #28
 8003050:	2208      	movs	r2, #8
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02a      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x156>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d025      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 020e 	bic.w	r2, r2, #14
 8003074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f003 021c 	and.w	r2, r3, #28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f202 	lsl.w	r2, r1, r2
 8003088:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
}
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f003 021c 	and.w	r2, r3, #28
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d108      	bne.n	80030fe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030fc:	e007      	b.n	800310e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	e17f      	b.n	800342c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8171 	beq.w	8003426 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d00b      	beq.n	8003164 <HAL_GPIO_Init+0x48>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d007      	beq.n	8003164 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003158:	2b11      	cmp	r3, #17
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b12      	cmp	r3, #18
 8003162:	d130      	bne.n	80031c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800319a:	2201      	movs	r2, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0201 	and.w	r2, r3, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d118      	bne.n	8003204 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031d8:	2201      	movs	r2, #1
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	f003 0201 	and.w	r2, r3, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x128>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b12      	cmp	r3, #18
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	6939      	ldr	r1, [r7, #16]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80ac 	beq.w	8003426 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6613      	str	r3, [r2, #96]	; 0x60
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032e6:	4a59      	ldr	r2, [pc, #356]	; (800344c <HAL_GPIO_Init+0x330>)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	220f      	movs	r2, #15
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003310:	d025      	beq.n	800335e <HAL_GPIO_Init+0x242>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_GPIO_Init+0x334>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01f      	beq.n	800335a <HAL_GPIO_Init+0x23e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4d      	ldr	r2, [pc, #308]	; (8003454 <HAL_GPIO_Init+0x338>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d019      	beq.n	8003356 <HAL_GPIO_Init+0x23a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <HAL_GPIO_Init+0x33c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_GPIO_Init+0x236>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4b      	ldr	r2, [pc, #300]	; (800345c <HAL_GPIO_Init+0x340>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00d      	beq.n	800334e <HAL_GPIO_Init+0x232>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_GPIO_Init+0x344>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <HAL_GPIO_Init+0x22e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a49      	ldr	r2, [pc, #292]	; (8003464 <HAL_GPIO_Init+0x348>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_GPIO_Init+0x22a>
 8003342:	2306      	movs	r3, #6
 8003344:	e00c      	b.n	8003360 <HAL_GPIO_Init+0x244>
 8003346:	2307      	movs	r3, #7
 8003348:	e00a      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800334a:	2305      	movs	r3, #5
 800334c:	e008      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800334e:	2304      	movs	r3, #4
 8003350:	e006      	b.n	8003360 <HAL_GPIO_Init+0x244>
 8003352:	2303      	movs	r3, #3
 8003354:	e004      	b.n	8003360 <HAL_GPIO_Init+0x244>
 8003356:	2302      	movs	r3, #2
 8003358:	e002      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800335e:	2300      	movs	r3, #0
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	f002 0203 	and.w	r2, r2, #3
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	4093      	lsls	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003370:	4936      	ldr	r1, [pc, #216]	; (800344c <HAL_GPIO_Init+0x330>)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a2:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3301      	adds	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f47f ae78 	bne.w	800312c <HAL_GPIO_Init+0x10>
  }
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40021000 	.word	0x40021000
 800344c:	40010000 	.word	0x40010000
 8003450:	48000400 	.word	0x48000400
 8003454:	48000800 	.word	0x48000800
 8003458:	48000c00 	.word	0x48000c00
 800345c:	48001000 	.word	0x48001000
 8003460:	48001400 	.word	0x48001400
 8003464:	48001800 	.word	0x48001800
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003488:	e002      	b.n	8003490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43d9      	mvns	r1, r3
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	400b      	ands	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e081      	b.n	80035e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fc62 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	; 0x24
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e006      	b.n	8003558 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d104      	bne.n	800356a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	ea42 0103 	orr.w	r1, r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	021a      	lsls	r2, r3, #8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69d9      	ldr	r1, [r3, #28]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b20      	cmp	r3, #32
 8003602:	d138      	bne.n	8003676 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800360e:	2302      	movs	r3, #2
 8003610:	e032      	b.n	8003678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2224      	movs	r2, #36	; 0x24
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003640:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6819      	ldr	r1, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	d139      	bne.n	800370e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e033      	b.n	8003710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	; 0x24
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_PWREx_GetVoltageRange+0x18>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40007000 	.word	0x40007000

08003738 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003746:	d130      	bne.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d038      	beq.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2232      	movs	r2, #50	; 0x32
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0c9b      	lsrs	r3, r3, #18
 8003778:	3301      	adds	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377c:	e002      	b.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3b01      	subs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003790:	d102      	bne.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f2      	bne.n	800377e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a4:	d110      	bne.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e00f      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d007      	beq.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037c0:	4a05      	ldr	r2, [pc, #20]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40007000 	.word	0x40007000
 80037dc:	20000000 	.word	0x20000000
 80037e0:	431bde83 	.word	0x431bde83

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e3d4      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f6:	4ba1      	ldr	r3, [pc, #644]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003800:	4b9e      	ldr	r3, [pc, #632]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80e4 	beq.w	80039e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_RCC_OscConfig+0x4a>
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	f040 808b 	bne.w	800393c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 8087 	bne.w	800393c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800382e:	4b93      	ldr	r3, [pc, #588]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x62>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e3ac      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1a      	ldr	r2, [r3, #32]
 800384a:	4b8c      	ldr	r3, [pc, #560]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_RCC_OscConfig+0x7c>
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385e:	e005      	b.n	800386c <HAL_RCC_OscConfig+0x88>
 8003860:	4b86      	ldr	r3, [pc, #536]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386c:	4293      	cmp	r3, r2
 800386e:	d223      	bcs.n	80038b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fd3f 	bl	80042f8 <RCC_SetFlashLatencyFromMSIRange>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e38d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003884:	4b7d      	ldr	r3, [pc, #500]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7c      	ldr	r2, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b7a      	ldr	r3, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4977      	ldr	r1, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a2:	4b76      	ldr	r3, [pc, #472]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4972      	ldr	r1, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	e025      	b.n	8003904 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b8:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6f      	ldr	r2, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038be:	f043 0308 	orr.w	r3, r3, #8
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	496a      	ldr	r1, [pc, #424]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d6:	4b69      	ldr	r3, [pc, #420]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4965      	ldr	r1, [pc, #404]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fcff 	bl	80042f8 <RCC_SetFlashLatencyFromMSIRange>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e34d      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003904:	f000 fc36 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8003908:	4601      	mov	r1, r0
 800390a:	4b5c      	ldr	r3, [pc, #368]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	4a5a      	ldr	r2, [pc, #360]	; (8003a80 <HAL_RCC_OscConfig+0x29c>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa21 f303 	lsr.w	r3, r1, r3
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_RCC_OscConfig+0x2a0>)
 8003922:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003924:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_RCC_OscConfig+0x2a4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fc59 	bl	80011e0 <HAL_InitTick>
 800392e:	4603      	mov	r3, r0
 8003930:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d052      	beq.n	80039de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	e331      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d032      	beq.n	80039aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003944:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a4c      	ldr	r2, [pc, #304]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003950:	f7fd fc96 	bl	8001280 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003958:	f7fd fc92 	bl	8001280 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e31a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800396a:	4b44      	ldr	r3, [pc, #272]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	493b      	ldr	r1, [pc, #236]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003994:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	4936      	ldr	r1, [pc, #216]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
 80039a8:	e01a      	b.n	80039e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039aa:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039b6:	f7fd fc63 	bl	8001280 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039be:	f7fd fc5f 	bl	8001280 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e2e7      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x1da>
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d074      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x21a>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b0c      	cmp	r3, #12
 80039f6:	d10e      	bne.n	8003a16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d10b      	bne.n	8003a16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d064      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d160      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e2c4      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x24a>
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e01d      	b.n	8003a6a <HAL_RCC_OscConfig+0x286>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x26e>
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0x286>
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a06      	ldr	r2, [pc, #24]	; (8003a7c <HAL_RCC_OscConfig+0x298>)
 8003a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01c      	beq.n	8003aac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fd fc05 	bl	8001280 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a78:	e011      	b.n	8003a9e <HAL_RCC_OscConfig+0x2ba>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	080060a0 	.word	0x080060a0
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fbf8 	bl	8001280 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e280      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9e:	4baf      	ldr	r3, [pc, #700]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x2a8>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd fbe8 	bl	8001280 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fbe4 	bl	8001280 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e26c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac6:	4ba5      	ldr	r3, [pc, #660]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2d0>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d060      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_OscConfig+0x310>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d119      	bne.n	8003b22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d116      	bne.n	8003b22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af4:	4b99      	ldr	r3, [pc, #612]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_OscConfig+0x328>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e249      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b93      	ldr	r3, [pc, #588]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	4990      	ldr	r1, [pc, #576]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b20:	e040      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d023      	beq.n	8003b72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2a:	4b8c      	ldr	r3, [pc, #560]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a8b      	ldr	r2, [pc, #556]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fd fba3 	bl	8001280 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7fd fb9f 	bl	8001280 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e227      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b50:	4b82      	ldr	r3, [pc, #520]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b7f      	ldr	r3, [pc, #508]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	497c      	ldr	r1, [pc, #496]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	e018      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b72:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a79      	ldr	r2, [pc, #484]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fb7f 	bl	8001280 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fd fb7b 	bl	8001280 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e203      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b98:	4b70      	ldr	r3, [pc, #448]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d03c      	beq.n	8003c2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	4a67      	ldr	r2, [pc, #412]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fb5a 	bl	8001280 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fb56 	bl	8001280 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1de      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be2:	4b5e      	ldr	r3, [pc, #376]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ef      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x3ec>
 8003bf0:	e01b      	b.n	8003c2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf8:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fd fb3d 	bl	8001280 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fd fb39 	bl	8001280 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1c1      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ef      	bne.n	8003c0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80a6 	beq.w	8003d84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c3c:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c48:	4b44      	ldr	r3, [pc, #272]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	6593      	str	r3, [r2, #88]	; 0x58
 8003c54:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c60:	2301      	movs	r3, #1
 8003c62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c64:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_RCC_OscConfig+0x57c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d118      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x57c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3a      	ldr	r2, [pc, #232]	; (8003d60 <HAL_RCC_OscConfig+0x57c>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fb00 	bl	8001280 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fd fafc 	bl	8001280 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e184      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c96:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCC_OscConfig+0x57c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4d8>
 8003caa:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cba:	e024      	b.n	8003d06 <HAL_RCC_OscConfig+0x522>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d110      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x502>
 8003cc4:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd4:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCC_OscConfig+0x522>
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003cfe:	f023 0304 	bic.w	r3, r3, #4
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fab7 	bl	8001280 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd fab3 	bl	8001280 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e139      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_OscConfig+0x578>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ed      	beq.n	8003d16 <HAL_RCC_OscConfig+0x532>
 8003d3a:	e01a      	b.n	8003d72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd faa0 	bl	8001280 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d42:	e00f      	b.n	8003d64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd fa9c 	bl	8001280 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d906      	bls.n	8003d64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e122      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d64:	4b90      	ldr	r3, [pc, #576]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e8      	bne.n	8003d44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d72:	7ffb      	ldrb	r3, [r7, #31]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d78:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4a8a      	ldr	r2, [pc, #552]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8108 	beq.w	8003f9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	f040 80d0 	bne.w	8003f38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d98:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0203 	and.w	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d130      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	3b01      	subs	r3, #1
 8003db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d127      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dd8:	2a07      	cmp	r2, #7
 8003dda:	bf14      	ite	ne
 8003ddc:	2201      	movne	r2, #1
 8003dde:	2200      	moveq	r2, #0
 8003de0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d113      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d06e      	beq.n	8003eec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d069      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e14:	4b64      	ldr	r3, [pc, #400]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e20:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0b7      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e30:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5c      	ldr	r2, [pc, #368]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e3c:	f7fd fa20 	bl	8001280 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd fa1c 	bl	8001280 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e0a4      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e56:	4b54      	ldr	r3, [pc, #336]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e62:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	4b51      	ldr	r3, [pc, #324]	; (8003fac <HAL_RCC_OscConfig+0x7c8>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e72:	3a01      	subs	r2, #1
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e7c:	0212      	lsls	r2, r2, #8
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e84:	0852      	lsrs	r2, r2, #1
 8003e86:	3a01      	subs	r2, #1
 8003e88:	0552      	lsls	r2, r2, #21
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e90:	0852      	lsrs	r2, r2, #1
 8003e92:	3a01      	subs	r2, #1
 8003e94:	0652      	lsls	r2, r2, #25
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e9c:	0912      	lsrs	r2, r2, #4
 8003e9e:	0452      	lsls	r2, r2, #17
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	4941      	ldr	r1, [pc, #260]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec0:	f7fd f9de 	bl	8001280 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fd f9da 	bl	8001280 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e062      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee6:	e05a      	b.n	8003f9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e059      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eec:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d152      	bne.n	8003f9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f04:	4b28      	ldr	r3, [pc, #160]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f10:	f7fd f9b6 	bl	8001280 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fd f9b2 	bl	8001280 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e03a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x734>
 8003f36:	e032      	b.n	8003f9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d02d      	beq.n	8003f9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f5c:	f023 0303 	bic.w	r3, r3, #3
 8003f60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fd f985 	bl	8001280 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd f981 	bl	8001280 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e009      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x7c4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x796>
 8003f98:	e001      	b.n	8003f9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	f99d808c 	.word	0xf99d808c

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0c8      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b66      	ldr	r3, [pc, #408]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d910      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b63      	ldr	r3, [pc, #396]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 0207 	bic.w	r2, r3, #7
 8003fda:	4961      	ldr	r1, [pc, #388]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b0      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d04c      	beq.n	800409a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004008:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d121      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e09e      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d107      	bne.n	8004030 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d115      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e092      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e086      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e07e      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004058:	4b42      	ldr	r3, [pc, #264]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 0203 	bic.w	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	493f      	ldr	r1, [pc, #252]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406a:	f7fd f909 	bl	8001280 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004070:	e00a      	b.n	8004088 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004072:	f7fd f905 	bl	8001280 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e066      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 020c 	and.w	r2, r3, #12
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	429a      	cmp	r2, r3
 8004098:	d1eb      	bne.n	8004072 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	492c      	ldr	r1, [pc, #176]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d210      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4924      	ldr	r1, [pc, #144]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <HAL_RCC_ClockConfig+0x1b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e036      	b.n	8004156 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4918      	ldr	r1, [pc, #96]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4910      	ldr	r1, [pc, #64]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004126:	f000 f825 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 800412a:	4601      	mov	r1, r0
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCC_ClockConfig+0x1b4>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	5cd3      	ldrb	r3, [r2, r3]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	fa21 f303 	lsr.w	r3, r1, r3
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd f848 	bl	80011e0 <HAL_InitTick>
 8004150:	4603      	mov	r3, r0
 8004152:	72fb      	strb	r3, [r7, #11]

  return status;
 8004154:	7afb      	ldrb	r3, [r7, #11]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
 8004168:	080060a0 	.word	0x080060a0
 800416c:	20000000 	.word	0x20000000
 8004170:	20000004 	.word	0x20000004

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	; 0x24
 8004178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x34>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d121      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11e      	bne.n	80041e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e005      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041c4:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041d0:	4a2a      	ldr	r2, [pc, #168]	; (800427c <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e004      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_GetSysClockFreq+0x110>)
 80041fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d133      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d002      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0xa4>
 8004212:	2b03      	cmp	r3, #3
 8004214:	d003      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0xaa>
 8004216:	e005      	b.n	8004224 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_GetSysClockFreq+0x10c>)
 800421a:	617b      	str	r3, [r7, #20]
      break;
 800421c:	e005      	b.n	800422a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_GetSysClockFreq+0x110>)
 8004220:	617b      	str	r3, [r7, #20]
      break;
 8004222:	e002      	b.n	800422a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	617b      	str	r3, [r7, #20]
      break;
 8004228:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	3301      	adds	r3, #1
 8004236:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	fb02 f203 	mul.w	r2, r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCC_GetSysClockFreq+0x104>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0e5b      	lsrs	r3, r3, #25
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800426a:	69bb      	ldr	r3, [r7, #24]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3724      	adds	r7, #36	; 0x24
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40021000 	.word	0x40021000
 800427c:	080060b8 	.word	0x080060b8
 8004280:	00f42400 	.word	0x00f42400
 8004284:	007a1200 	.word	0x007a1200

08004288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_RCC_GetHCLKFreq+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000000 	.word	0x20000000

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042a4:	f7ff fff0 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042a8:	4601      	mov	r1, r0
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	080060b0 	.word	0x080060b0

080042cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042d0:	f7ff ffda 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042d4:	4601      	mov	r1, r0
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0adb      	lsrs	r3, r3, #11
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042e2:	5cd3      	ldrb	r3, [r2, r3]
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	080060b0 	.word	0x080060b0

080042f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004304:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004310:	f7ff fa04 	bl	800371c <HAL_PWREx_GetVoltageRange>
 8004314:	6178      	str	r0, [r7, #20]
 8004316:	e014      	b.n	8004342 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004330:	f7ff f9f4 	bl	800371c <HAL_PWREx_GetVoltageRange>
 8004334:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004340:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004348:	d10b      	bne.n	8004362 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d919      	bls.n	8004384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2ba0      	cmp	r3, #160	; 0xa0
 8004354:	d902      	bls.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004356:	2302      	movs	r3, #2
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e013      	b.n	8004384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800435c:	2301      	movs	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	e010      	b.n	8004384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d902      	bls.n	800436e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004368:	2303      	movs	r3, #3
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	e00a      	b.n	8004384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d102      	bne.n	800437a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004374:	2302      	movs	r3, #2
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	e004      	b.n	8004384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b70      	cmp	r3, #112	; 0x70
 800437e:	d101      	bne.n	8004384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 0207 	bic.w	r2, r3, #7
 800438c:	4909      	ldr	r1, [pc, #36]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d001      	beq.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40022000 	.word	0x40022000

080043b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043c0:	2300      	movs	r3, #0
 80043c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043c4:	2300      	movs	r3, #0
 80043c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d03f      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d01c      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80043de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e2:	d802      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00e      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80043e8:	e01f      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80043ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80043f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f4:	d01c      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80043f6:	e018      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f8:	4b85      	ldr	r3, [pc, #532]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a84      	ldr	r2, [pc, #528]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004404:	e015      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fab9 	bl	8004984 <RCCEx_PLLSAI1_Config>
 8004412:	4603      	mov	r3, r0
 8004414:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004416:	e00c      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3320      	adds	r3, #32
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fba0 	bl	8004b64 <RCCEx_PLLSAI2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004428:	e003      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	74fb      	strb	r3, [r7, #19]
      break;
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004438:	4b75      	ldr	r3, [pc, #468]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004446:	4972      	ldr	r1, [pc, #456]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800444e:	e001      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d03f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004468:	d01c      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800446a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446e:	d802      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004474:	e01f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800447a:	d003      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800447c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004480:	d01c      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004482:	e018      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004484:	4b62      	ldr	r3, [pc, #392]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a61      	ldr	r2, [pc, #388]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004490:	e015      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fa73 	bl	8004984 <RCCEx_PLLSAI1_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044a2:	e00c      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3320      	adds	r3, #32
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb5a 	bl	8004b64 <RCCEx_PLLSAI2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	74fb      	strb	r3, [r7, #19]
      break;
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80044bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044c4:	4b52      	ldr	r3, [pc, #328]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d2:	494f      	ldr	r1, [pc, #316]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044da:	e001      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80a0 	beq.w	800462e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	4a40      	ldr	r2, [pc, #256]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004512:	6593      	str	r3, [r2, #88]	; 0x58
 8004514:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004520:	2301      	movs	r3, #1
 8004522:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004524:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a3a      	ldr	r2, [pc, #232]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800452a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004530:	f7fc fea6 	bl	8001280 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004536:	e009      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fc fea2 	bl	8001280 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d902      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	74fb      	strb	r3, [r7, #19]
        break;
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d15c      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	429a      	cmp	r2, r3
 800457a:	d019      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004588:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	4a20      	ldr	r2, [pc, #128]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fc fe61 	bl	8001280 <HAL_GetTick>
 80045be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c0:	e00b      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fc fe5d 	bl	8001280 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d902      	bls.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	74fb      	strb	r3, [r7, #19]
            break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0ec      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10c      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	4904      	ldr	r1, [pc, #16]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461c:	7c7b      	ldrb	r3, [r7, #17]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4b9e      	ldr	r3, [pc, #632]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	4a9d      	ldr	r2, [pc, #628]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463a:	4b98      	ldr	r3, [pc, #608]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	f023 0203 	bic.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	4994      	ldr	r1, [pc, #592]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465c:	4b8f      	ldr	r3, [pc, #572]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 020c 	bic.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	498c      	ldr	r1, [pc, #560]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467e:	4b87      	ldr	r3, [pc, #540]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4983      	ldr	r1, [pc, #524]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a0:	4b7e      	ldr	r3, [pc, #504]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	497b      	ldr	r1, [pc, #492]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	4972      	ldr	r1, [pc, #456]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e4:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	496a      	ldr	r1, [pc, #424]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	4961      	ldr	r1, [pc, #388]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004728:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	4959      	ldr	r1, [pc, #356]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800474a:	4b54      	ldr	r3, [pc, #336]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	4950      	ldr	r1, [pc, #320]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800476c:	4b4b      	ldr	r3, [pc, #300]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	4948      	ldr	r1, [pc, #288]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800478e:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	493f      	ldr	r1, [pc, #252]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d028      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047be:	4937      	ldr	r1, [pc, #220]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ce:	d106      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d0:	4b32      	ldr	r3, [pc, #200]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a31      	ldr	r2, [pc, #196]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047da:	60d3      	str	r3, [r2, #12]
 80047dc:	e011      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e6:	d10c      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f8c8 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d028      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800480e:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	491f      	ldr	r1, [pc, #124]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800482c:	d106      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4a1a      	ldr	r2, [pc, #104]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004838:	60d3      	str	r3, [r2, #12]
 800483a:	e011      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f899 	bl	8004984 <RCCEx_PLLSAI1_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004856:	7cfb      	ldrb	r3, [r7, #19]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02b      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487a:	4908      	ldr	r1, [pc, #32]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488a:	d109      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a02      	ldr	r2, [pc, #8]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
 8004898:	e014      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2101      	movs	r1, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f867 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d02f      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048de:	4928      	ldr	r1, [pc, #160]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ee:	d10d      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f844 	bl	8004984 <RCCEx_PLLSAI1_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d014      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	74bb      	strb	r3, [r7, #18]
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3320      	adds	r3, #32
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f921 	bl	8004b64 <RCCEx_PLLSAI2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494a:	490d      	ldr	r1, [pc, #52]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496e:	4904      	ldr	r1, [pc, #16]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004976:	7cbb      	ldrb	r3, [r7, #18]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000

08004984 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004992:	4b73      	ldr	r3, [pc, #460]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800499e:	4b70      	ldr	r3, [pc, #448]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d10d      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
       ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049b6:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
       ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d044      	beq.n	8004a54 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	e041      	b.n	8004a54 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d00c      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0x6e>
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d013      	beq.n	8004a04 <RCCEx_PLLSAI1_Config+0x80>
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d120      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049e0:	4b5f      	ldr	r3, [pc, #380]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11d      	bne.n	8004a28 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f0:	e01a      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049f2:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d116      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a02:	e013      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a04:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10f      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a20:	e006      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      break;
 8004a26:	e004      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e002      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004a2c:	bf00      	nop
 8004a2e:	e000      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004a30:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10d      	bne.n	8004a54 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a38:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	4944      	ldr	r1, [pc, #272]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d17d      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a40      	ldr	r2, [pc, #256]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a66:	f7fc fc0b 	bl	8001280 <HAL_GetTick>
 8004a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a6c:	e009      	b.n	8004a82 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a6e:	f7fc fc07 	bl	8001280 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d902      	bls.n	8004a82 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a80:	e005      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ef      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d160      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d111      	bne.n	8004abe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6892      	ldr	r2, [r2, #8]
 8004aaa:	0211      	lsls	r1, r2, #8
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68d2      	ldr	r2, [r2, #12]
 8004ab0:	0912      	lsrs	r2, r2, #4
 8004ab2:	0452      	lsls	r2, r2, #17
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	492a      	ldr	r1, [pc, #168]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	610b      	str	r3, [r1, #16]
 8004abc:	e027      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d112      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004acc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6892      	ldr	r2, [r2, #8]
 8004ad4:	0211      	lsls	r1, r2, #8
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6912      	ldr	r2, [r2, #16]
 8004ada:	0852      	lsrs	r2, r2, #1
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0552      	lsls	r2, r2, #21
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	491f      	ldr	r1, [pc, #124]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	610b      	str	r3, [r1, #16]
 8004ae8:	e011      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aea:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004af2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
 8004afa:	0211      	lsls	r1, r2, #8
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6952      	ldr	r2, [r2, #20]
 8004b00:	0852      	lsrs	r2, r2, #1
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0652      	lsls	r2, r2, #25
 8004b06:	430a      	orrs	r2, r1
 8004b08:	4915      	ldr	r1, [pc, #84]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b0e:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fc fbb1 	bl	8001280 <HAL_GetTick>
 8004b1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b20:	e009      	b.n	8004b36 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b22:	f7fc fbad 	bl	8001280 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d902      	bls.n	8004b36 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	73fb      	strb	r3, [r7, #15]
          break;
 8004b34:	e005      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	4903      	ldr	r1, [pc, #12]	; (8004b60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000

08004b64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b72:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0203 	and.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10d      	bne.n	8004baa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
       ||
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b96:	4b5f      	ldr	r3, [pc, #380]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d044      	beq.n	8004c34 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	e041      	b.n	8004c34 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d00c      	beq.n	8004bd2 <RCCEx_PLLSAI2_Config+0x6e>
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d013      	beq.n	8004be4 <RCCEx_PLLSAI2_Config+0x80>
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d120      	bne.n	8004c02 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bc0:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11d      	bne.n	8004c08 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd0:	e01a      	b.n	8004c08 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bd2:	4b50      	ldr	r3, [pc, #320]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d116      	bne.n	8004c0c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be2:	e013      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10f      	bne.n	8004c10 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bf0:	4b48      	ldr	r3, [pc, #288]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d109      	bne.n	8004c10 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c00:	e006      	b.n	8004c10 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      break;
 8004c06:	e004      	b.n	8004c12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004c08:	bf00      	nop
 8004c0a:	e002      	b.n	8004c12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004c10:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c18:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	4939      	ldr	r1, [pc, #228]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d167      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c3a:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fc fb1b 	bl	8001280 <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c4c:	e009      	b.n	8004c62 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c4e:	f7fc fb17 	bl	8001280 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d902      	bls.n	8004c62 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	73fb      	strb	r3, [r7, #15]
        break;
 8004c60:	e005      	b.n	8004c6e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c62:	4b2c      	ldr	r3, [pc, #176]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ef      	bne.n	8004c4e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d14a      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d111      	bne.n	8004c9e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6892      	ldr	r2, [r2, #8]
 8004c8a:	0211      	lsls	r1, r2, #8
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68d2      	ldr	r2, [r2, #12]
 8004c90:	0912      	lsrs	r2, r2, #4
 8004c92:	0452      	lsls	r2, r2, #17
 8004c94:	430a      	orrs	r2, r1
 8004c96:	491f      	ldr	r1, [pc, #124]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	614b      	str	r3, [r1, #20]
 8004c9c:	e011      	b.n	8004cc2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ca6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6892      	ldr	r2, [r2, #8]
 8004cae:	0211      	lsls	r1, r2, #8
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6912      	ldr	r2, [r2, #16]
 8004cb4:	0852      	lsrs	r2, r2, #1
 8004cb6:	3a01      	subs	r2, #1
 8004cb8:	0652      	lsls	r2, r2, #25
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	4915      	ldr	r1, [pc, #84]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fc fad7 	bl	8001280 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cd4:	e009      	b.n	8004cea <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cd6:	f7fc fad3 	bl	8001280 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d902      	bls.n	8004cea <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ce8:	e005      	b.n	8004cf6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0ef      	beq.n	8004cd6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000

08004d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e095      	b.n	8004e56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d108      	bne.n	8004d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3a:	d009      	beq.n	8004d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61da      	str	r2, [r3, #28]
 8004d42:	e005      	b.n	8004d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc f86c 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d90:	d902      	bls.n	8004d98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e002      	b.n	8004d9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004da6:	d007      	beq.n	8004db8 <HAL_SPI_Init+0xa0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	ea42 0103 	orr.w	r1, r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	f003 0204 	and.w	r2, r3, #4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e040      	b.n	8004ef2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fc f843 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	; 0x24
 8004e8a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8bf 	bl	8005020 <UART_SetConfig>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e022      	b.n	8004ef2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb3d 	bl	8005534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fbc4 	bl	8005678 <UART_CheckIdleState>
 8004ef0:	4603      	mov	r3, r0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b08a      	sub	sp, #40	; 0x28
 8004efe:	af02      	add	r7, sp, #8
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	f040 8081 	bne.w	8005016 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_UART_Transmit+0x26>
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e079      	b.n	8005018 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Transmit+0x38>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e072      	b.n	8005018 <HAL_UART_Transmit+0x11e>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2221      	movs	r2, #33	; 0x21
 8004f44:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004f46:	f7fc f99b 	bl	8001280 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	88fa      	ldrh	r2, [r7, #6]
 8004f50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f64:	d108      	bne.n	8004f78 <HAL_UART_Transmit+0x7e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e003      	b.n	8004f80 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004f88:	e02d      	b.n	8004fe6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2180      	movs	r1, #128	; 0x80
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fbb4 	bl	8005702 <UART_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e039      	b.n	8005018 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e008      	b.n	8004fd4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b292      	uxth	r2, r2
 8004fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1cb      	bne.n	8004f8a <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2140      	movs	r1, #64	; 0x40
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fb80 	bl	8005702 <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e005      	b.n	8005018 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4313      	orrs	r3, r2
 8005044:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4bac      	ldr	r3, [pc, #688]	; (8005300 <UART_SetConfig+0x2e0>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	69f9      	ldr	r1, [r7, #28]
 8005056:	430b      	orrs	r3, r1
 8005058:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4aa2      	ldr	r2, [pc, #648]	; (8005304 <UART_SetConfig+0x2e4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a99      	ldr	r2, [pc, #612]	; (8005308 <UART_SetConfig+0x2e8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d121      	bne.n	80050ec <UART_SetConfig+0xcc>
 80050a8:	4b98      	ldr	r3, [pc, #608]	; (800530c <UART_SetConfig+0x2ec>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d816      	bhi.n	80050e4 <UART_SetConfig+0xc4>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <UART_SetConfig+0x9c>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050cd 	.word	0x080050cd
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	080050d3 	.word	0x080050d3
 80050c8:	080050df 	.word	0x080050df
 80050cc:	2301      	movs	r3, #1
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e0e8      	b.n	80052a4 <UART_SetConfig+0x284>
 80050d2:	2302      	movs	r3, #2
 80050d4:	76fb      	strb	r3, [r7, #27]
 80050d6:	e0e5      	b.n	80052a4 <UART_SetConfig+0x284>
 80050d8:	2304      	movs	r3, #4
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	e0e2      	b.n	80052a4 <UART_SetConfig+0x284>
 80050de:	2308      	movs	r3, #8
 80050e0:	76fb      	strb	r3, [r7, #27]
 80050e2:	e0df      	b.n	80052a4 <UART_SetConfig+0x284>
 80050e4:	2310      	movs	r3, #16
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	bf00      	nop
 80050ea:	e0db      	b.n	80052a4 <UART_SetConfig+0x284>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a87      	ldr	r2, [pc, #540]	; (8005310 <UART_SetConfig+0x2f0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d134      	bne.n	8005160 <UART_SetConfig+0x140>
 80050f6:	4b85      	ldr	r3, [pc, #532]	; (800530c <UART_SetConfig+0x2ec>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d829      	bhi.n	8005158 <UART_SetConfig+0x138>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0xec>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005141 	.word	0x08005141
 8005110:	08005159 	.word	0x08005159
 8005114:	08005159 	.word	0x08005159
 8005118:	08005159 	.word	0x08005159
 800511c:	0800514d 	.word	0x0800514d
 8005120:	08005159 	.word	0x08005159
 8005124:	08005159 	.word	0x08005159
 8005128:	08005159 	.word	0x08005159
 800512c:	08005147 	.word	0x08005147
 8005130:	08005159 	.word	0x08005159
 8005134:	08005159 	.word	0x08005159
 8005138:	08005159 	.word	0x08005159
 800513c:	08005153 	.word	0x08005153
 8005140:	2300      	movs	r3, #0
 8005142:	76fb      	strb	r3, [r7, #27]
 8005144:	e0ae      	b.n	80052a4 <UART_SetConfig+0x284>
 8005146:	2302      	movs	r3, #2
 8005148:	76fb      	strb	r3, [r7, #27]
 800514a:	e0ab      	b.n	80052a4 <UART_SetConfig+0x284>
 800514c:	2304      	movs	r3, #4
 800514e:	76fb      	strb	r3, [r7, #27]
 8005150:	e0a8      	b.n	80052a4 <UART_SetConfig+0x284>
 8005152:	2308      	movs	r3, #8
 8005154:	76fb      	strb	r3, [r7, #27]
 8005156:	e0a5      	b.n	80052a4 <UART_SetConfig+0x284>
 8005158:	2310      	movs	r3, #16
 800515a:	76fb      	strb	r3, [r7, #27]
 800515c:	bf00      	nop
 800515e:	e0a1      	b.n	80052a4 <UART_SetConfig+0x284>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a6b      	ldr	r2, [pc, #428]	; (8005314 <UART_SetConfig+0x2f4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d120      	bne.n	80051ac <UART_SetConfig+0x18c>
 800516a:	4b68      	ldr	r3, [pc, #416]	; (800530c <UART_SetConfig+0x2ec>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005174:	2b10      	cmp	r3, #16
 8005176:	d00f      	beq.n	8005198 <UART_SetConfig+0x178>
 8005178:	2b10      	cmp	r3, #16
 800517a:	d802      	bhi.n	8005182 <UART_SetConfig+0x162>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <UART_SetConfig+0x16c>
 8005180:	e010      	b.n	80051a4 <UART_SetConfig+0x184>
 8005182:	2b20      	cmp	r3, #32
 8005184:	d005      	beq.n	8005192 <UART_SetConfig+0x172>
 8005186:	2b30      	cmp	r3, #48	; 0x30
 8005188:	d009      	beq.n	800519e <UART_SetConfig+0x17e>
 800518a:	e00b      	b.n	80051a4 <UART_SetConfig+0x184>
 800518c:	2300      	movs	r3, #0
 800518e:	76fb      	strb	r3, [r7, #27]
 8005190:	e088      	b.n	80052a4 <UART_SetConfig+0x284>
 8005192:	2302      	movs	r3, #2
 8005194:	76fb      	strb	r3, [r7, #27]
 8005196:	e085      	b.n	80052a4 <UART_SetConfig+0x284>
 8005198:	2304      	movs	r3, #4
 800519a:	76fb      	strb	r3, [r7, #27]
 800519c:	e082      	b.n	80052a4 <UART_SetConfig+0x284>
 800519e:	2308      	movs	r3, #8
 80051a0:	76fb      	strb	r3, [r7, #27]
 80051a2:	e07f      	b.n	80052a4 <UART_SetConfig+0x284>
 80051a4:	2310      	movs	r3, #16
 80051a6:	76fb      	strb	r3, [r7, #27]
 80051a8:	bf00      	nop
 80051aa:	e07b      	b.n	80052a4 <UART_SetConfig+0x284>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a59      	ldr	r2, [pc, #356]	; (8005318 <UART_SetConfig+0x2f8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d120      	bne.n	80051f8 <UART_SetConfig+0x1d8>
 80051b6:	4b55      	ldr	r3, [pc, #340]	; (800530c <UART_SetConfig+0x2ec>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d00f      	beq.n	80051e4 <UART_SetConfig+0x1c4>
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d802      	bhi.n	80051ce <UART_SetConfig+0x1ae>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <UART_SetConfig+0x1b8>
 80051cc:	e010      	b.n	80051f0 <UART_SetConfig+0x1d0>
 80051ce:	2b80      	cmp	r3, #128	; 0x80
 80051d0:	d005      	beq.n	80051de <UART_SetConfig+0x1be>
 80051d2:	2bc0      	cmp	r3, #192	; 0xc0
 80051d4:	d009      	beq.n	80051ea <UART_SetConfig+0x1ca>
 80051d6:	e00b      	b.n	80051f0 <UART_SetConfig+0x1d0>
 80051d8:	2300      	movs	r3, #0
 80051da:	76fb      	strb	r3, [r7, #27]
 80051dc:	e062      	b.n	80052a4 <UART_SetConfig+0x284>
 80051de:	2302      	movs	r3, #2
 80051e0:	76fb      	strb	r3, [r7, #27]
 80051e2:	e05f      	b.n	80052a4 <UART_SetConfig+0x284>
 80051e4:	2304      	movs	r3, #4
 80051e6:	76fb      	strb	r3, [r7, #27]
 80051e8:	e05c      	b.n	80052a4 <UART_SetConfig+0x284>
 80051ea:	2308      	movs	r3, #8
 80051ec:	76fb      	strb	r3, [r7, #27]
 80051ee:	e059      	b.n	80052a4 <UART_SetConfig+0x284>
 80051f0:	2310      	movs	r3, #16
 80051f2:	76fb      	strb	r3, [r7, #27]
 80051f4:	bf00      	nop
 80051f6:	e055      	b.n	80052a4 <UART_SetConfig+0x284>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a47      	ldr	r2, [pc, #284]	; (800531c <UART_SetConfig+0x2fc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d124      	bne.n	800524c <UART_SetConfig+0x22c>
 8005202:	4b42      	ldr	r3, [pc, #264]	; (800530c <UART_SetConfig+0x2ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005210:	d012      	beq.n	8005238 <UART_SetConfig+0x218>
 8005212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005216:	d802      	bhi.n	800521e <UART_SetConfig+0x1fe>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <UART_SetConfig+0x20c>
 800521c:	e012      	b.n	8005244 <UART_SetConfig+0x224>
 800521e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005222:	d006      	beq.n	8005232 <UART_SetConfig+0x212>
 8005224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005228:	d009      	beq.n	800523e <UART_SetConfig+0x21e>
 800522a:	e00b      	b.n	8005244 <UART_SetConfig+0x224>
 800522c:	2300      	movs	r3, #0
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e038      	b.n	80052a4 <UART_SetConfig+0x284>
 8005232:	2302      	movs	r3, #2
 8005234:	76fb      	strb	r3, [r7, #27]
 8005236:	e035      	b.n	80052a4 <UART_SetConfig+0x284>
 8005238:	2304      	movs	r3, #4
 800523a:	76fb      	strb	r3, [r7, #27]
 800523c:	e032      	b.n	80052a4 <UART_SetConfig+0x284>
 800523e:	2308      	movs	r3, #8
 8005240:	76fb      	strb	r3, [r7, #27]
 8005242:	e02f      	b.n	80052a4 <UART_SetConfig+0x284>
 8005244:	2310      	movs	r3, #16
 8005246:	76fb      	strb	r3, [r7, #27]
 8005248:	bf00      	nop
 800524a:	e02b      	b.n	80052a4 <UART_SetConfig+0x284>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <UART_SetConfig+0x2e4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d124      	bne.n	80052a0 <UART_SetConfig+0x280>
 8005256:	4b2d      	ldr	r3, [pc, #180]	; (800530c <UART_SetConfig+0x2ec>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005264:	d012      	beq.n	800528c <UART_SetConfig+0x26c>
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d802      	bhi.n	8005272 <UART_SetConfig+0x252>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <UART_SetConfig+0x260>
 8005270:	e012      	b.n	8005298 <UART_SetConfig+0x278>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d006      	beq.n	8005286 <UART_SetConfig+0x266>
 8005278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527c:	d009      	beq.n	8005292 <UART_SetConfig+0x272>
 800527e:	e00b      	b.n	8005298 <UART_SetConfig+0x278>
 8005280:	2300      	movs	r3, #0
 8005282:	76fb      	strb	r3, [r7, #27]
 8005284:	e00e      	b.n	80052a4 <UART_SetConfig+0x284>
 8005286:	2302      	movs	r3, #2
 8005288:	76fb      	strb	r3, [r7, #27]
 800528a:	e00b      	b.n	80052a4 <UART_SetConfig+0x284>
 800528c:	2304      	movs	r3, #4
 800528e:	76fb      	strb	r3, [r7, #27]
 8005290:	e008      	b.n	80052a4 <UART_SetConfig+0x284>
 8005292:	2308      	movs	r3, #8
 8005294:	76fb      	strb	r3, [r7, #27]
 8005296:	e005      	b.n	80052a4 <UART_SetConfig+0x284>
 8005298:	2310      	movs	r3, #16
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	bf00      	nop
 800529e:	e001      	b.n	80052a4 <UART_SetConfig+0x284>
 80052a0:	2310      	movs	r3, #16
 80052a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a16      	ldr	r2, [pc, #88]	; (8005304 <UART_SetConfig+0x2e4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 8087 	bne.w	80053be <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052b0:	7efb      	ldrb	r3, [r7, #27]
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d836      	bhi.n	8005324 <UART_SetConfig+0x304>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x29c>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	08005325 	.word	0x08005325
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	08005325 	.word	0x08005325
 80052cc:	080052ef 	.word	0x080052ef
 80052d0:	08005325 	.word	0x08005325
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005325 	.word	0x08005325
 80052dc:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe ffde 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 80052e4:	6178      	str	r0, [r7, #20]
        break;
 80052e6:	e022      	b.n	800532e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <UART_SetConfig+0x300>)
 80052ea:	617b      	str	r3, [r7, #20]
        break;
 80052ec:	e01f      	b.n	800532e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fe ff41 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 80052f2:	6178      	str	r0, [r7, #20]
        break;
 80052f4:	e01b      	b.n	800532e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	617b      	str	r3, [r7, #20]
        break;
 80052fc:	e017      	b.n	800532e <UART_SetConfig+0x30e>
 80052fe:	bf00      	nop
 8005300:	efff69f3 	.word	0xefff69f3
 8005304:	40008000 	.word	0x40008000
 8005308:	40013800 	.word	0x40013800
 800530c:	40021000 	.word	0x40021000
 8005310:	40004400 	.word	0x40004400
 8005314:	40004800 	.word	0x40004800
 8005318:	40004c00 	.word	0x40004c00
 800531c:	40005000 	.word	0x40005000
 8005320:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	76bb      	strb	r3, [r7, #26]
        break;
 800532c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80f1 	beq.w	8005518 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	429a      	cmp	r2, r3
 8005344:	d305      	bcc.n	8005352 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	429a      	cmp	r2, r3
 8005350:	d902      	bls.n	8005358 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	76bb      	strb	r3, [r7, #26]
 8005356:	e0df      	b.n	8005518 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4619      	mov	r1, r3
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	0214      	lsls	r4, r2, #8
 800536a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800536e:	020b      	lsls	r3, r1, #8
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6852      	ldr	r2, [r2, #4]
 8005374:	0852      	lsrs	r2, r2, #1
 8005376:	4611      	mov	r1, r2
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	eb13 0b01 	adds.w	fp, r3, r1
 8005380:	eb44 0c02 	adc.w	ip, r4, r2
 8005384:	4658      	mov	r0, fp
 8005386:	4661      	mov	r1, ip
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	461a      	mov	r2, r3
 8005392:	4623      	mov	r3, r4
 8005394:	f7fa ff74 	bl	8000280 <__aeabi_uldivmod>
 8005398:	4603      	mov	r3, r0
 800539a:	460c      	mov	r4, r1
 800539c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a4:	d308      	bcc.n	80053b8 <UART_SetConfig+0x398>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ac:	d204      	bcs.n	80053b8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	60da      	str	r2, [r3, #12]
 80053b6:	e0af      	b.n	8005518 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	76bb      	strb	r3, [r7, #26]
 80053bc:	e0ac      	b.n	8005518 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c6:	d15b      	bne.n	8005480 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80053c8:	7efb      	ldrb	r3, [r7, #27]
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d827      	bhi.n	800541e <UART_SetConfig+0x3fe>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x3b4>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	0800541f 	.word	0x0800541f
 80053e4:	0800540f 	.word	0x0800540f
 80053e8:	0800541f 	.word	0x0800541f
 80053ec:	0800541f 	.word	0x0800541f
 80053f0:	0800541f 	.word	0x0800541f
 80053f4:	08005417 	.word	0x08005417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7fe ff52 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 80053fc:	6178      	str	r0, [r7, #20]
        break;
 80053fe:	e013      	b.n	8005428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005400:	f7fe ff64 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 8005404:	6178      	str	r0, [r7, #20]
        break;
 8005406:	e00f      	b.n	8005428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005408:	4b49      	ldr	r3, [pc, #292]	; (8005530 <UART_SetConfig+0x510>)
 800540a:	617b      	str	r3, [r7, #20]
        break;
 800540c:	e00c      	b.n	8005428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540e:	f7fe feb1 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8005412:	6178      	str	r0, [r7, #20]
        break;
 8005414:	e008      	b.n	8005428 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541a:	617b      	str	r3, [r7, #20]
        break;
 800541c:	e004      	b.n	8005428 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	76bb      	strb	r3, [r7, #26]
        break;
 8005426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d074      	beq.n	8005518 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	005a      	lsls	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	b29b      	uxth	r3, r3
 8005444:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b0f      	cmp	r3, #15
 800544a:	d916      	bls.n	800547a <UART_SetConfig+0x45a>
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d212      	bcs.n	800547a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f023 030f 	bic.w	r3, r3, #15
 800545c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	b29a      	uxth	r2, r3
 800546a:	89fb      	ldrh	r3, [r7, #14]
 800546c:	4313      	orrs	r3, r2
 800546e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	89fa      	ldrh	r2, [r7, #14]
 8005476:	60da      	str	r2, [r3, #12]
 8005478:	e04e      	b.n	8005518 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	76bb      	strb	r3, [r7, #26]
 800547e:	e04b      	b.n	8005518 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005480:	7efb      	ldrb	r3, [r7, #27]
 8005482:	2b08      	cmp	r3, #8
 8005484:	d827      	bhi.n	80054d6 <UART_SetConfig+0x4b6>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x46c>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	080054d7 	.word	0x080054d7
 800549c:	080054c7 	.word	0x080054c7
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	080054d7 	.word	0x080054d7
 80054a8:	080054d7 	.word	0x080054d7
 80054ac:	080054cf 	.word	0x080054cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe fef6 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 80054b4:	6178      	str	r0, [r7, #20]
        break;
 80054b6:	e013      	b.n	80054e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b8:	f7fe ff08 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 80054bc:	6178      	str	r0, [r7, #20]
        break;
 80054be:	e00f      	b.n	80054e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <UART_SetConfig+0x510>)
 80054c2:	617b      	str	r3, [r7, #20]
        break;
 80054c4:	e00c      	b.n	80054e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c6:	f7fe fe55 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 80054ca:	6178      	str	r0, [r7, #20]
        break;
 80054cc:	e008      	b.n	80054e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d2:	617b      	str	r3, [r7, #20]
        break;
 80054d4:	e004      	b.n	80054e0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	76bb      	strb	r3, [r7, #26]
        break;
 80054de:	bf00      	nop
    }

    if (pclk != 0U)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	085a      	lsrs	r2, r3, #1
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	441a      	add	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d908      	bls.n	8005514 <UART_SetConfig+0x4f4>
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005508:	d204      	bcs.n	8005514 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	60da      	str	r2, [r3, #12]
 8005512:	e001      	b.n	8005518 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005524:	7ebb      	ldrb	r3, [r7, #26]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005530:	00f42400 	.word	0x00f42400

08005534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01a      	beq.n	800564a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005632:	d10a      	bne.n	800564a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af02      	add	r7, sp, #8
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005686:	f7fb fdfb 	bl	8001280 <HAL_GetTick>
 800568a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b08      	cmp	r3, #8
 8005698:	d10e      	bne.n	80056b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800569a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f82a 	bl	8005702 <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e020      	b.n	80056fa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d10e      	bne.n	80056e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f814 	bl	8005702 <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e00a      	b.n	80056fa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	4613      	mov	r3, r2
 8005710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	e05d      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d059      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571c:	f7fb fdb0 	bl	8001280 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <UART_WaitOnFlagUntilTimeout+0x30>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11b      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005740:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e042      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d02b      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d123      	bne.n	80057d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005790:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057a0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e00f      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d092      	beq.n	8005714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <__errno>:
 80057f8:	4b01      	ldr	r3, [pc, #4]	; (8005800 <__errno+0x8>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	2000000c 	.word	0x2000000c

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4e0d      	ldr	r6, [pc, #52]	; (800583c <__libc_init_array+0x38>)
 8005808:	4c0d      	ldr	r4, [pc, #52]	; (8005840 <__libc_init_array+0x3c>)
 800580a:	1ba4      	subs	r4, r4, r6
 800580c:	10a4      	asrs	r4, r4, #2
 800580e:	2500      	movs	r5, #0
 8005810:	42a5      	cmp	r5, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	4e0b      	ldr	r6, [pc, #44]	; (8005844 <__libc_init_array+0x40>)
 8005816:	4c0c      	ldr	r4, [pc, #48]	; (8005848 <__libc_init_array+0x44>)
 8005818:	f000 fc26 	bl	8006068 <_init>
 800581c:	1ba4      	subs	r4, r4, r6
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	2500      	movs	r5, #0
 8005822:	42a5      	cmp	r5, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800582c:	4798      	blx	r3
 800582e:	3501      	adds	r5, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005836:	4798      	blx	r3
 8005838:	3501      	adds	r5, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	08006124 	.word	0x08006124
 8005840:	08006124 	.word	0x08006124
 8005844:	08006124 	.word	0x08006124
 8005848:	08006128 	.word	0x08006128

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <siprintf>:
 800585c:	b40e      	push	{r1, r2, r3}
 800585e:	b500      	push	{lr}
 8005860:	b09c      	sub	sp, #112	; 0x70
 8005862:	ab1d      	add	r3, sp, #116	; 0x74
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	9006      	str	r0, [sp, #24]
 8005868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <siprintf+0x38>)
 800586e:	9107      	str	r1, [sp, #28]
 8005870:	9104      	str	r1, [sp, #16]
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <siprintf+0x3c>)
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	a902      	add	r1, sp, #8
 8005880:	f000 f866 	bl	8005950 <_svfiprintf_r>
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	b01c      	add	sp, #112	; 0x70
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	2000000c 	.word	0x2000000c
 8005898:	ffff0208 	.word	0xffff0208

0800589c <__ssputs_r>:
 800589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	688e      	ldr	r6, [r1, #8]
 80058a2:	429e      	cmp	r6, r3
 80058a4:	4682      	mov	sl, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	4690      	mov	r8, r2
 80058aa:	4699      	mov	r9, r3
 80058ac:	d837      	bhi.n	800591e <__ssputs_r+0x82>
 80058ae:	898a      	ldrh	r2, [r1, #12]
 80058b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058b4:	d031      	beq.n	800591a <__ssputs_r+0x7e>
 80058b6:	6825      	ldr	r5, [r4, #0]
 80058b8:	6909      	ldr	r1, [r1, #16]
 80058ba:	1a6f      	subs	r7, r5, r1
 80058bc:	6965      	ldr	r5, [r4, #20]
 80058be:	2302      	movs	r3, #2
 80058c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80058c8:	f109 0301 	add.w	r3, r9, #1
 80058cc:	443b      	add	r3, r7
 80058ce:	429d      	cmp	r5, r3
 80058d0:	bf38      	it	cc
 80058d2:	461d      	movcc	r5, r3
 80058d4:	0553      	lsls	r3, r2, #21
 80058d6:	d530      	bpl.n	800593a <__ssputs_r+0x9e>
 80058d8:	4629      	mov	r1, r5
 80058da:	f000 fb2b 	bl	8005f34 <_malloc_r>
 80058de:	4606      	mov	r6, r0
 80058e0:	b950      	cbnz	r0, 80058f8 <__ssputs_r+0x5c>
 80058e2:	230c      	movs	r3, #12
 80058e4:	f8ca 3000 	str.w	r3, [sl]
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	463a      	mov	r2, r7
 80058fa:	6921      	ldr	r1, [r4, #16]
 80058fc:	f000 faa8 	bl	8005e50 <memcpy>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	6126      	str	r6, [r4, #16]
 800590e:	6165      	str	r5, [r4, #20]
 8005910:	443e      	add	r6, r7
 8005912:	1bed      	subs	r5, r5, r7
 8005914:	6026      	str	r6, [r4, #0]
 8005916:	60a5      	str	r5, [r4, #8]
 8005918:	464e      	mov	r6, r9
 800591a:	454e      	cmp	r6, r9
 800591c:	d900      	bls.n	8005920 <__ssputs_r+0x84>
 800591e:	464e      	mov	r6, r9
 8005920:	4632      	mov	r2, r6
 8005922:	4641      	mov	r1, r8
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	f000 fa9e 	bl	8005e66 <memmove>
 800592a:	68a3      	ldr	r3, [r4, #8]
 800592c:	1b9b      	subs	r3, r3, r6
 800592e:	60a3      	str	r3, [r4, #8]
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	441e      	add	r6, r3
 8005934:	6026      	str	r6, [r4, #0]
 8005936:	2000      	movs	r0, #0
 8005938:	e7dc      	b.n	80058f4 <__ssputs_r+0x58>
 800593a:	462a      	mov	r2, r5
 800593c:	f000 fb54 	bl	8005fe8 <_realloc_r>
 8005940:	4606      	mov	r6, r0
 8005942:	2800      	cmp	r0, #0
 8005944:	d1e2      	bne.n	800590c <__ssputs_r+0x70>
 8005946:	6921      	ldr	r1, [r4, #16]
 8005948:	4650      	mov	r0, sl
 800594a:	f000 faa5 	bl	8005e98 <_free_r>
 800594e:	e7c8      	b.n	80058e2 <__ssputs_r+0x46>

08005950 <_svfiprintf_r>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	461d      	mov	r5, r3
 8005956:	898b      	ldrh	r3, [r1, #12]
 8005958:	061f      	lsls	r7, r3, #24
 800595a:	b09d      	sub	sp, #116	; 0x74
 800595c:	4680      	mov	r8, r0
 800595e:	460c      	mov	r4, r1
 8005960:	4616      	mov	r6, r2
 8005962:	d50f      	bpl.n	8005984 <_svfiprintf_r+0x34>
 8005964:	690b      	ldr	r3, [r1, #16]
 8005966:	b96b      	cbnz	r3, 8005984 <_svfiprintf_r+0x34>
 8005968:	2140      	movs	r1, #64	; 0x40
 800596a:	f000 fae3 	bl	8005f34 <_malloc_r>
 800596e:	6020      	str	r0, [r4, #0]
 8005970:	6120      	str	r0, [r4, #16]
 8005972:	b928      	cbnz	r0, 8005980 <_svfiprintf_r+0x30>
 8005974:	230c      	movs	r3, #12
 8005976:	f8c8 3000 	str.w	r3, [r8]
 800597a:	f04f 30ff 	mov.w	r0, #4294967295
 800597e:	e0c8      	b.n	8005b12 <_svfiprintf_r+0x1c2>
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	6163      	str	r3, [r4, #20]
 8005984:	2300      	movs	r3, #0
 8005986:	9309      	str	r3, [sp, #36]	; 0x24
 8005988:	2320      	movs	r3, #32
 800598a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800598e:	2330      	movs	r3, #48	; 0x30
 8005990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005994:	9503      	str	r5, [sp, #12]
 8005996:	f04f 0b01 	mov.w	fp, #1
 800599a:	4637      	mov	r7, r6
 800599c:	463d      	mov	r5, r7
 800599e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059a2:	b10b      	cbz	r3, 80059a8 <_svfiprintf_r+0x58>
 80059a4:	2b25      	cmp	r3, #37	; 0x25
 80059a6:	d13e      	bne.n	8005a26 <_svfiprintf_r+0xd6>
 80059a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80059ac:	d00b      	beq.n	80059c6 <_svfiprintf_r+0x76>
 80059ae:	4653      	mov	r3, sl
 80059b0:	4632      	mov	r2, r6
 80059b2:	4621      	mov	r1, r4
 80059b4:	4640      	mov	r0, r8
 80059b6:	f7ff ff71 	bl	800589c <__ssputs_r>
 80059ba:	3001      	adds	r0, #1
 80059bc:	f000 80a4 	beq.w	8005b08 <_svfiprintf_r+0x1b8>
 80059c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c2:	4453      	add	r3, sl
 80059c4:	9309      	str	r3, [sp, #36]	; 0x24
 80059c6:	783b      	ldrb	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 809d 	beq.w	8005b08 <_svfiprintf_r+0x1b8>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	9307      	str	r3, [sp, #28]
 80059dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059e0:	931a      	str	r3, [sp, #104]	; 0x68
 80059e2:	462f      	mov	r7, r5
 80059e4:	2205      	movs	r2, #5
 80059e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80059ea:	4850      	ldr	r0, [pc, #320]	; (8005b2c <_svfiprintf_r+0x1dc>)
 80059ec:	f7fa fbf8 	bl	80001e0 <memchr>
 80059f0:	9b04      	ldr	r3, [sp, #16]
 80059f2:	b9d0      	cbnz	r0, 8005a2a <_svfiprintf_r+0xda>
 80059f4:	06d9      	lsls	r1, r3, #27
 80059f6:	bf44      	itt	mi
 80059f8:	2220      	movmi	r2, #32
 80059fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80059fe:	071a      	lsls	r2, r3, #28
 8005a00:	bf44      	itt	mi
 8005a02:	222b      	movmi	r2, #43	; 0x2b
 8005a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a08:	782a      	ldrb	r2, [r5, #0]
 8005a0a:	2a2a      	cmp	r2, #42	; 0x2a
 8005a0c:	d015      	beq.n	8005a3a <_svfiprintf_r+0xea>
 8005a0e:	9a07      	ldr	r2, [sp, #28]
 8005a10:	462f      	mov	r7, r5
 8005a12:	2000      	movs	r0, #0
 8005a14:	250a      	movs	r5, #10
 8005a16:	4639      	mov	r1, r7
 8005a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a1c:	3b30      	subs	r3, #48	; 0x30
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	d94d      	bls.n	8005abe <_svfiprintf_r+0x16e>
 8005a22:	b1b8      	cbz	r0, 8005a54 <_svfiprintf_r+0x104>
 8005a24:	e00f      	b.n	8005a46 <_svfiprintf_r+0xf6>
 8005a26:	462f      	mov	r7, r5
 8005a28:	e7b8      	b.n	800599c <_svfiprintf_r+0x4c>
 8005a2a:	4a40      	ldr	r2, [pc, #256]	; (8005b2c <_svfiprintf_r+0x1dc>)
 8005a2c:	1a80      	subs	r0, r0, r2
 8005a2e:	fa0b f000 	lsl.w	r0, fp, r0
 8005a32:	4318      	orrs	r0, r3
 8005a34:	9004      	str	r0, [sp, #16]
 8005a36:	463d      	mov	r5, r7
 8005a38:	e7d3      	b.n	80059e2 <_svfiprintf_r+0x92>
 8005a3a:	9a03      	ldr	r2, [sp, #12]
 8005a3c:	1d11      	adds	r1, r2, #4
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	9103      	str	r1, [sp, #12]
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	db01      	blt.n	8005a4a <_svfiprintf_r+0xfa>
 8005a46:	9207      	str	r2, [sp, #28]
 8005a48:	e004      	b.n	8005a54 <_svfiprintf_r+0x104>
 8005a4a:	4252      	negs	r2, r2
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
 8005a50:	9207      	str	r2, [sp, #28]
 8005a52:	9304      	str	r3, [sp, #16]
 8005a54:	783b      	ldrb	r3, [r7, #0]
 8005a56:	2b2e      	cmp	r3, #46	; 0x2e
 8005a58:	d10c      	bne.n	8005a74 <_svfiprintf_r+0x124>
 8005a5a:	787b      	ldrb	r3, [r7, #1]
 8005a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5e:	d133      	bne.n	8005ac8 <_svfiprintf_r+0x178>
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	9203      	str	r2, [sp, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfb8      	it	lt
 8005a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a70:	3702      	adds	r7, #2
 8005a72:	9305      	str	r3, [sp, #20]
 8005a74:	4d2e      	ldr	r5, [pc, #184]	; (8005b30 <_svfiprintf_r+0x1e0>)
 8005a76:	7839      	ldrb	r1, [r7, #0]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7fa fbb0 	bl	80001e0 <memchr>
 8005a80:	b138      	cbz	r0, 8005a92 <_svfiprintf_r+0x142>
 8005a82:	2340      	movs	r3, #64	; 0x40
 8005a84:	1b40      	subs	r0, r0, r5
 8005a86:	fa03 f000 	lsl.w	r0, r3, r0
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	4303      	orrs	r3, r0
 8005a8e:	3701      	adds	r7, #1
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	7839      	ldrb	r1, [r7, #0]
 8005a94:	4827      	ldr	r0, [pc, #156]	; (8005b34 <_svfiprintf_r+0x1e4>)
 8005a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a9a:	2206      	movs	r2, #6
 8005a9c:	1c7e      	adds	r6, r7, #1
 8005a9e:	f7fa fb9f 	bl	80001e0 <memchr>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d038      	beq.n	8005b18 <_svfiprintf_r+0x1c8>
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <_svfiprintf_r+0x1e8>)
 8005aa8:	bb13      	cbnz	r3, 8005af0 <_svfiprintf_r+0x1a0>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	3307      	adds	r3, #7
 8005aae:	f023 0307 	bic.w	r3, r3, #7
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab8:	444b      	add	r3, r9
 8005aba:	9309      	str	r3, [sp, #36]	; 0x24
 8005abc:	e76d      	b.n	800599a <_svfiprintf_r+0x4a>
 8005abe:	fb05 3202 	mla	r2, r5, r2, r3
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	460f      	mov	r7, r1
 8005ac6:	e7a6      	b.n	8005a16 <_svfiprintf_r+0xc6>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	3701      	adds	r7, #1
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	250a      	movs	r5, #10
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad8:	3a30      	subs	r2, #48	; 0x30
 8005ada:	2a09      	cmp	r2, #9
 8005adc:	d903      	bls.n	8005ae6 <_svfiprintf_r+0x196>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0c8      	beq.n	8005a74 <_svfiprintf_r+0x124>
 8005ae2:	9105      	str	r1, [sp, #20]
 8005ae4:	e7c6      	b.n	8005a74 <_svfiprintf_r+0x124>
 8005ae6:	fb05 2101 	mla	r1, r5, r1, r2
 8005aea:	2301      	movs	r3, #1
 8005aec:	4607      	mov	r7, r0
 8005aee:	e7f0      	b.n	8005ad2 <_svfiprintf_r+0x182>
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4622      	mov	r2, r4
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <_svfiprintf_r+0x1ec>)
 8005af8:	a904      	add	r1, sp, #16
 8005afa:	4640      	mov	r0, r8
 8005afc:	f3af 8000 	nop.w
 8005b00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b04:	4681      	mov	r9, r0
 8005b06:	d1d6      	bne.n	8005ab6 <_svfiprintf_r+0x166>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	065b      	lsls	r3, r3, #25
 8005b0c:	f53f af35 	bmi.w	800597a <_svfiprintf_r+0x2a>
 8005b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b12:	b01d      	add	sp, #116	; 0x74
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	ab03      	add	r3, sp, #12
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <_svfiprintf_r+0x1ec>)
 8005b20:	a904      	add	r1, sp, #16
 8005b22:	4640      	mov	r0, r8
 8005b24:	f000 f882 	bl	8005c2c <_printf_i>
 8005b28:	e7ea      	b.n	8005b00 <_svfiprintf_r+0x1b0>
 8005b2a:	bf00      	nop
 8005b2c:	080060e8 	.word	0x080060e8
 8005b30:	080060ee 	.word	0x080060ee
 8005b34:	080060f2 	.word	0x080060f2
 8005b38:	00000000 	.word	0x00000000
 8005b3c:	0800589d 	.word	0x0800589d

08005b40 <_printf_common>:
 8005b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	4691      	mov	r9, r2
 8005b46:	461f      	mov	r7, r3
 8005b48:	688a      	ldr	r2, [r1, #8]
 8005b4a:	690b      	ldr	r3, [r1, #16]
 8005b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bfb8      	it	lt
 8005b54:	4613      	movlt	r3, r2
 8005b56:	f8c9 3000 	str.w	r3, [r9]
 8005b5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	b112      	cbz	r2, 8005b6a <_printf_common+0x2a>
 8005b64:	3301      	adds	r3, #1
 8005b66:	f8c9 3000 	str.w	r3, [r9]
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	0699      	lsls	r1, r3, #26
 8005b6e:	bf42      	ittt	mi
 8005b70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b74:	3302      	addmi	r3, #2
 8005b76:	f8c9 3000 	strmi.w	r3, [r9]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	f015 0506 	ands.w	r5, r5, #6
 8005b80:	d107      	bne.n	8005b92 <_printf_common+0x52>
 8005b82:	f104 0a19 	add.w	sl, r4, #25
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	f8d9 2000 	ldr.w	r2, [r9]
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	42ab      	cmp	r3, r5
 8005b90:	dc28      	bgt.n	8005be4 <_printf_common+0xa4>
 8005b92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	3300      	adds	r3, #0
 8005b9a:	bf18      	it	ne
 8005b9c:	2301      	movne	r3, #1
 8005b9e:	0692      	lsls	r2, r2, #26
 8005ba0:	d42d      	bmi.n	8005bfe <_printf_common+0xbe>
 8005ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	4630      	mov	r0, r6
 8005baa:	47c0      	blx	r8
 8005bac:	3001      	adds	r0, #1
 8005bae:	d020      	beq.n	8005bf2 <_printf_common+0xb2>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	68e5      	ldr	r5, [r4, #12]
 8005bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8005bb8:	f003 0306 	and.w	r3, r3, #6
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	bf08      	it	eq
 8005bc0:	1aad      	subeq	r5, r5, r2
 8005bc2:	68a3      	ldr	r3, [r4, #8]
 8005bc4:	6922      	ldr	r2, [r4, #16]
 8005bc6:	bf0c      	ite	eq
 8005bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bcc:	2500      	movne	r5, #0
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bfc4      	itt	gt
 8005bd2:	1a9b      	subgt	r3, r3, r2
 8005bd4:	18ed      	addgt	r5, r5, r3
 8005bd6:	f04f 0900 	mov.w	r9, #0
 8005bda:	341a      	adds	r4, #26
 8005bdc:	454d      	cmp	r5, r9
 8005bde:	d11a      	bne.n	8005c16 <_printf_common+0xd6>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e008      	b.n	8005bf6 <_printf_common+0xb6>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4652      	mov	r2, sl
 8005be8:	4639      	mov	r1, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	47c0      	blx	r8
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d103      	bne.n	8005bfa <_printf_common+0xba>
 8005bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	e7c3      	b.n	8005b86 <_printf_common+0x46>
 8005bfe:	18e1      	adds	r1, r4, r3
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	2030      	movs	r0, #48	; 0x30
 8005c04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c08:	4422      	add	r2, r4
 8005c0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c12:	3302      	adds	r3, #2
 8005c14:	e7c5      	b.n	8005ba2 <_printf_common+0x62>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4622      	mov	r2, r4
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d0e6      	beq.n	8005bf2 <_printf_common+0xb2>
 8005c24:	f109 0901 	add.w	r9, r9, #1
 8005c28:	e7d8      	b.n	8005bdc <_printf_common+0x9c>
	...

08005c2c <_printf_i>:
 8005c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c34:	460c      	mov	r4, r1
 8005c36:	7e09      	ldrb	r1, [r1, #24]
 8005c38:	b085      	sub	sp, #20
 8005c3a:	296e      	cmp	r1, #110	; 0x6e
 8005c3c:	4617      	mov	r7, r2
 8005c3e:	4606      	mov	r6, r0
 8005c40:	4698      	mov	r8, r3
 8005c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c44:	f000 80b3 	beq.w	8005dae <_printf_i+0x182>
 8005c48:	d822      	bhi.n	8005c90 <_printf_i+0x64>
 8005c4a:	2963      	cmp	r1, #99	; 0x63
 8005c4c:	d036      	beq.n	8005cbc <_printf_i+0x90>
 8005c4e:	d80a      	bhi.n	8005c66 <_printf_i+0x3a>
 8005c50:	2900      	cmp	r1, #0
 8005c52:	f000 80b9 	beq.w	8005dc8 <_printf_i+0x19c>
 8005c56:	2958      	cmp	r1, #88	; 0x58
 8005c58:	f000 8083 	beq.w	8005d62 <_printf_i+0x136>
 8005c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c64:	e032      	b.n	8005ccc <_printf_i+0xa0>
 8005c66:	2964      	cmp	r1, #100	; 0x64
 8005c68:	d001      	beq.n	8005c6e <_printf_i+0x42>
 8005c6a:	2969      	cmp	r1, #105	; 0x69
 8005c6c:	d1f6      	bne.n	8005c5c <_printf_i+0x30>
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	0605      	lsls	r5, r0, #24
 8005c74:	f103 0104 	add.w	r1, r3, #4
 8005c78:	d52a      	bpl.n	8005cd0 <_printf_i+0xa4>
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6011      	str	r1, [r2, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da03      	bge.n	8005c8a <_printf_i+0x5e>
 8005c82:	222d      	movs	r2, #45	; 0x2d
 8005c84:	425b      	negs	r3, r3
 8005c86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c8a:	486f      	ldr	r0, [pc, #444]	; (8005e48 <_printf_i+0x21c>)
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	e039      	b.n	8005d04 <_printf_i+0xd8>
 8005c90:	2973      	cmp	r1, #115	; 0x73
 8005c92:	f000 809d 	beq.w	8005dd0 <_printf_i+0x1a4>
 8005c96:	d808      	bhi.n	8005caa <_printf_i+0x7e>
 8005c98:	296f      	cmp	r1, #111	; 0x6f
 8005c9a:	d020      	beq.n	8005cde <_printf_i+0xb2>
 8005c9c:	2970      	cmp	r1, #112	; 0x70
 8005c9e:	d1dd      	bne.n	8005c5c <_printf_i+0x30>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	f043 0320 	orr.w	r3, r3, #32
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	e003      	b.n	8005cb2 <_printf_i+0x86>
 8005caa:	2975      	cmp	r1, #117	; 0x75
 8005cac:	d017      	beq.n	8005cde <_printf_i+0xb2>
 8005cae:	2978      	cmp	r1, #120	; 0x78
 8005cb0:	d1d4      	bne.n	8005c5c <_printf_i+0x30>
 8005cb2:	2378      	movs	r3, #120	; 0x78
 8005cb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cb8:	4864      	ldr	r0, [pc, #400]	; (8005e4c <_printf_i+0x220>)
 8005cba:	e055      	b.n	8005d68 <_printf_i+0x13c>
 8005cbc:	6813      	ldr	r3, [r2, #0]
 8005cbe:	1d19      	adds	r1, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6011      	str	r1, [r2, #0]
 8005cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e08c      	b.n	8005dea <_printf_i+0x1be>
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6011      	str	r1, [r2, #0]
 8005cd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cd8:	bf18      	it	ne
 8005cda:	b21b      	sxthne	r3, r3
 8005cdc:	e7cf      	b.n	8005c7e <_printf_i+0x52>
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	6825      	ldr	r5, [r4, #0]
 8005ce2:	1d18      	adds	r0, r3, #4
 8005ce4:	6010      	str	r0, [r2, #0]
 8005ce6:	0628      	lsls	r0, r5, #24
 8005ce8:	d501      	bpl.n	8005cee <_printf_i+0xc2>
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	e002      	b.n	8005cf4 <_printf_i+0xc8>
 8005cee:	0668      	lsls	r0, r5, #25
 8005cf0:	d5fb      	bpl.n	8005cea <_printf_i+0xbe>
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	4854      	ldr	r0, [pc, #336]	; (8005e48 <_printf_i+0x21c>)
 8005cf6:	296f      	cmp	r1, #111	; 0x6f
 8005cf8:	bf14      	ite	ne
 8005cfa:	220a      	movne	r2, #10
 8005cfc:	2208      	moveq	r2, #8
 8005cfe:	2100      	movs	r1, #0
 8005d00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d04:	6865      	ldr	r5, [r4, #4]
 8005d06:	60a5      	str	r5, [r4, #8]
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	f2c0 8095 	blt.w	8005e38 <_printf_i+0x20c>
 8005d0e:	6821      	ldr	r1, [r4, #0]
 8005d10:	f021 0104 	bic.w	r1, r1, #4
 8005d14:	6021      	str	r1, [r4, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d13d      	bne.n	8005d96 <_printf_i+0x16a>
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	f040 808e 	bne.w	8005e3c <_printf_i+0x210>
 8005d20:	4665      	mov	r5, ip
 8005d22:	2a08      	cmp	r2, #8
 8005d24:	d10b      	bne.n	8005d3e <_printf_i+0x112>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	07db      	lsls	r3, r3, #31
 8005d2a:	d508      	bpl.n	8005d3e <_printf_i+0x112>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	bfde      	ittt	le
 8005d34:	2330      	movle	r3, #48	; 0x30
 8005d36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d3e:	ebac 0305 	sub.w	r3, ip, r5
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	f8cd 8000 	str.w	r8, [sp]
 8005d48:	463b      	mov	r3, r7
 8005d4a:	aa03      	add	r2, sp, #12
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff fef6 	bl	8005b40 <_printf_common>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d14d      	bne.n	8005df4 <_printf_i+0x1c8>
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	b005      	add	sp, #20
 8005d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d62:	4839      	ldr	r0, [pc, #228]	; (8005e48 <_printf_i+0x21c>)
 8005d64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d68:	6813      	ldr	r3, [r2, #0]
 8005d6a:	6821      	ldr	r1, [r4, #0]
 8005d6c:	1d1d      	adds	r5, r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6015      	str	r5, [r2, #0]
 8005d72:	060a      	lsls	r2, r1, #24
 8005d74:	d50b      	bpl.n	8005d8e <_printf_i+0x162>
 8005d76:	07ca      	lsls	r2, r1, #31
 8005d78:	bf44      	itt	mi
 8005d7a:	f041 0120 	orrmi.w	r1, r1, #32
 8005d7e:	6021      	strmi	r1, [r4, #0]
 8005d80:	b91b      	cbnz	r3, 8005d8a <_printf_i+0x15e>
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	f022 0220 	bic.w	r2, r2, #32
 8005d88:	6022      	str	r2, [r4, #0]
 8005d8a:	2210      	movs	r2, #16
 8005d8c:	e7b7      	b.n	8005cfe <_printf_i+0xd2>
 8005d8e:	064d      	lsls	r5, r1, #25
 8005d90:	bf48      	it	mi
 8005d92:	b29b      	uxthmi	r3, r3
 8005d94:	e7ef      	b.n	8005d76 <_printf_i+0x14a>
 8005d96:	4665      	mov	r5, ip
 8005d98:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d9c:	fb02 3311 	mls	r3, r2, r1, r3
 8005da0:	5cc3      	ldrb	r3, [r0, r3]
 8005da2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005da6:	460b      	mov	r3, r1
 8005da8:	2900      	cmp	r1, #0
 8005daa:	d1f5      	bne.n	8005d98 <_printf_i+0x16c>
 8005dac:	e7b9      	b.n	8005d22 <_printf_i+0xf6>
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	6825      	ldr	r5, [r4, #0]
 8005db2:	6961      	ldr	r1, [r4, #20]
 8005db4:	1d18      	adds	r0, r3, #4
 8005db6:	6010      	str	r0, [r2, #0]
 8005db8:	0628      	lsls	r0, r5, #24
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	d501      	bpl.n	8005dc2 <_printf_i+0x196>
 8005dbe:	6019      	str	r1, [r3, #0]
 8005dc0:	e002      	b.n	8005dc8 <_printf_i+0x19c>
 8005dc2:	066a      	lsls	r2, r5, #25
 8005dc4:	d5fb      	bpl.n	8005dbe <_printf_i+0x192>
 8005dc6:	8019      	strh	r1, [r3, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	4665      	mov	r5, ip
 8005dce:	e7b9      	b.n	8005d44 <_printf_i+0x118>
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	1d19      	adds	r1, r3, #4
 8005dd4:	6011      	str	r1, [r2, #0]
 8005dd6:	681d      	ldr	r5, [r3, #0]
 8005dd8:	6862      	ldr	r2, [r4, #4]
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f7fa f9ff 	bl	80001e0 <memchr>
 8005de2:	b108      	cbz	r0, 8005de8 <_printf_i+0x1bc>
 8005de4:	1b40      	subs	r0, r0, r5
 8005de6:	6060      	str	r0, [r4, #4]
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	6123      	str	r3, [r4, #16]
 8005dec:	2300      	movs	r3, #0
 8005dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df2:	e7a7      	b.n	8005d44 <_printf_i+0x118>
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	462a      	mov	r2, r5
 8005df8:	4639      	mov	r1, r7
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	47c0      	blx	r8
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0aa      	beq.n	8005d58 <_printf_i+0x12c>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	079b      	lsls	r3, r3, #30
 8005e06:	d413      	bmi.n	8005e30 <_printf_i+0x204>
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	bfb8      	it	lt
 8005e10:	4618      	movlt	r0, r3
 8005e12:	e7a3      	b.n	8005d5c <_printf_i+0x130>
 8005e14:	2301      	movs	r3, #1
 8005e16:	464a      	mov	r2, r9
 8005e18:	4639      	mov	r1, r7
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	47c0      	blx	r8
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d09a      	beq.n	8005d58 <_printf_i+0x12c>
 8005e22:	3501      	adds	r5, #1
 8005e24:	68e3      	ldr	r3, [r4, #12]
 8005e26:	9a03      	ldr	r2, [sp, #12]
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	42ab      	cmp	r3, r5
 8005e2c:	dcf2      	bgt.n	8005e14 <_printf_i+0x1e8>
 8005e2e:	e7eb      	b.n	8005e08 <_printf_i+0x1dc>
 8005e30:	2500      	movs	r5, #0
 8005e32:	f104 0919 	add.w	r9, r4, #25
 8005e36:	e7f5      	b.n	8005e24 <_printf_i+0x1f8>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1ac      	bne.n	8005d96 <_printf_i+0x16a>
 8005e3c:	7803      	ldrb	r3, [r0, #0]
 8005e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e46:	e76c      	b.n	8005d22 <_printf_i+0xf6>
 8005e48:	080060f9 	.word	0x080060f9
 8005e4c:	0800610a 	.word	0x0800610a

08005e50 <memcpy>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	1e43      	subs	r3, r0, #1
 8005e54:	440a      	add	r2, r1
 8005e56:	4291      	cmp	r1, r2
 8005e58:	d100      	bne.n	8005e5c <memcpy+0xc>
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e64:	e7f7      	b.n	8005e56 <memcpy+0x6>

08005e66 <memmove>:
 8005e66:	4288      	cmp	r0, r1
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	eb01 0302 	add.w	r3, r1, r2
 8005e6e:	d807      	bhi.n	8005e80 <memmove+0x1a>
 8005e70:	1e42      	subs	r2, r0, #1
 8005e72:	4299      	cmp	r1, r3
 8005e74:	d00a      	beq.n	8005e8c <memmove+0x26>
 8005e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e7a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e7e:	e7f8      	b.n	8005e72 <memmove+0xc>
 8005e80:	4283      	cmp	r3, r0
 8005e82:	d9f5      	bls.n	8005e70 <memmove+0xa>
 8005e84:	1881      	adds	r1, r0, r2
 8005e86:	1ad2      	subs	r2, r2, r3
 8005e88:	42d3      	cmn	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memmove+0x28>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e92:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e96:	e7f7      	b.n	8005e88 <memmove+0x22>

08005e98 <_free_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d045      	beq.n	8005f2c <_free_r+0x94>
 8005ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea4:	1f0c      	subs	r4, r1, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bfb8      	it	lt
 8005eaa:	18e4      	addlt	r4, r4, r3
 8005eac:	f000 f8d2 	bl	8006054 <__malloc_lock>
 8005eb0:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <_free_r+0x98>)
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	b933      	cbnz	r3, 8005ec6 <_free_r+0x2e>
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	6014      	str	r4, [r2, #0]
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ec2:	f000 b8c8 	b.w	8006056 <__malloc_unlock>
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	d90c      	bls.n	8005ee4 <_free_r+0x4c>
 8005eca:	6821      	ldr	r1, [r4, #0]
 8005ecc:	1862      	adds	r2, r4, r1
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bf04      	itt	eq
 8005ed2:	681a      	ldreq	r2, [r3, #0]
 8005ed4:	685b      	ldreq	r3, [r3, #4]
 8005ed6:	6063      	str	r3, [r4, #4]
 8005ed8:	bf04      	itt	eq
 8005eda:	1852      	addeq	r2, r2, r1
 8005edc:	6022      	streq	r2, [r4, #0]
 8005ede:	6004      	str	r4, [r0, #0]
 8005ee0:	e7ec      	b.n	8005ebc <_free_r+0x24>
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	b10a      	cbz	r2, 8005eec <_free_r+0x54>
 8005ee8:	42a2      	cmp	r2, r4
 8005eea:	d9fa      	bls.n	8005ee2 <_free_r+0x4a>
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	1858      	adds	r0, r3, r1
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d10b      	bne.n	8005f0c <_free_r+0x74>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	4401      	add	r1, r0
 8005ef8:	1858      	adds	r0, r3, r1
 8005efa:	4282      	cmp	r2, r0
 8005efc:	6019      	str	r1, [r3, #0]
 8005efe:	d1dd      	bne.n	8005ebc <_free_r+0x24>
 8005f00:	6810      	ldr	r0, [r2, #0]
 8005f02:	6852      	ldr	r2, [r2, #4]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	4401      	add	r1, r0
 8005f08:	6019      	str	r1, [r3, #0]
 8005f0a:	e7d7      	b.n	8005ebc <_free_r+0x24>
 8005f0c:	d902      	bls.n	8005f14 <_free_r+0x7c>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	e7d3      	b.n	8005ebc <_free_r+0x24>
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	1821      	adds	r1, r4, r0
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	bf04      	itt	eq
 8005f1c:	6811      	ldreq	r1, [r2, #0]
 8005f1e:	6852      	ldreq	r2, [r2, #4]
 8005f20:	6062      	str	r2, [r4, #4]
 8005f22:	bf04      	itt	eq
 8005f24:	1809      	addeq	r1, r1, r0
 8005f26:	6021      	streq	r1, [r4, #0]
 8005f28:	605c      	str	r4, [r3, #4]
 8005f2a:	e7c7      	b.n	8005ebc <_free_r+0x24>
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000090 	.word	0x20000090

08005f34 <_malloc_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	1ccd      	adds	r5, r1, #3
 8005f38:	f025 0503 	bic.w	r5, r5, #3
 8005f3c:	3508      	adds	r5, #8
 8005f3e:	2d0c      	cmp	r5, #12
 8005f40:	bf38      	it	cc
 8005f42:	250c      	movcc	r5, #12
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	4606      	mov	r6, r0
 8005f48:	db01      	blt.n	8005f4e <_malloc_r+0x1a>
 8005f4a:	42a9      	cmp	r1, r5
 8005f4c:	d903      	bls.n	8005f56 <_malloc_r+0x22>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	2000      	movs	r0, #0
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	f000 f87d 	bl	8006054 <__malloc_lock>
 8005f5a:	4a21      	ldr	r2, [pc, #132]	; (8005fe0 <_malloc_r+0xac>)
 8005f5c:	6814      	ldr	r4, [r2, #0]
 8005f5e:	4621      	mov	r1, r4
 8005f60:	b991      	cbnz	r1, 8005f88 <_malloc_r+0x54>
 8005f62:	4c20      	ldr	r4, [pc, #128]	; (8005fe4 <_malloc_r+0xb0>)
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	b91b      	cbnz	r3, 8005f70 <_malloc_r+0x3c>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f863 	bl	8006034 <_sbrk_r>
 8005f6e:	6020      	str	r0, [r4, #0]
 8005f70:	4629      	mov	r1, r5
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f85e 	bl	8006034 <_sbrk_r>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d124      	bne.n	8005fc6 <_malloc_r+0x92>
 8005f7c:	230c      	movs	r3, #12
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	4630      	mov	r0, r6
 8005f82:	f000 f868 	bl	8006056 <__malloc_unlock>
 8005f86:	e7e4      	b.n	8005f52 <_malloc_r+0x1e>
 8005f88:	680b      	ldr	r3, [r1, #0]
 8005f8a:	1b5b      	subs	r3, r3, r5
 8005f8c:	d418      	bmi.n	8005fc0 <_malloc_r+0x8c>
 8005f8e:	2b0b      	cmp	r3, #11
 8005f90:	d90f      	bls.n	8005fb2 <_malloc_r+0x7e>
 8005f92:	600b      	str	r3, [r1, #0]
 8005f94:	50cd      	str	r5, [r1, r3]
 8005f96:	18cc      	adds	r4, r1, r3
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 f85c 	bl	8006056 <__malloc_unlock>
 8005f9e:	f104 000b 	add.w	r0, r4, #11
 8005fa2:	1d23      	adds	r3, r4, #4
 8005fa4:	f020 0007 	bic.w	r0, r0, #7
 8005fa8:	1ac3      	subs	r3, r0, r3
 8005faa:	d0d3      	beq.n	8005f54 <_malloc_r+0x20>
 8005fac:	425a      	negs	r2, r3
 8005fae:	50e2      	str	r2, [r4, r3]
 8005fb0:	e7d0      	b.n	8005f54 <_malloc_r+0x20>
 8005fb2:	428c      	cmp	r4, r1
 8005fb4:	684b      	ldr	r3, [r1, #4]
 8005fb6:	bf16      	itet	ne
 8005fb8:	6063      	strne	r3, [r4, #4]
 8005fba:	6013      	streq	r3, [r2, #0]
 8005fbc:	460c      	movne	r4, r1
 8005fbe:	e7eb      	b.n	8005f98 <_malloc_r+0x64>
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	6849      	ldr	r1, [r1, #4]
 8005fc4:	e7cc      	b.n	8005f60 <_malloc_r+0x2c>
 8005fc6:	1cc4      	adds	r4, r0, #3
 8005fc8:	f024 0403 	bic.w	r4, r4, #3
 8005fcc:	42a0      	cmp	r0, r4
 8005fce:	d005      	beq.n	8005fdc <_malloc_r+0xa8>
 8005fd0:	1a21      	subs	r1, r4, r0
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f000 f82e 	bl	8006034 <_sbrk_r>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d0cf      	beq.n	8005f7c <_malloc_r+0x48>
 8005fdc:	6025      	str	r5, [r4, #0]
 8005fde:	e7db      	b.n	8005f98 <_malloc_r+0x64>
 8005fe0:	20000090 	.word	0x20000090
 8005fe4:	20000094 	.word	0x20000094

08005fe8 <_realloc_r>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	4607      	mov	r7, r0
 8005fec:	4614      	mov	r4, r2
 8005fee:	460e      	mov	r6, r1
 8005ff0:	b921      	cbnz	r1, 8005ffc <_realloc_r+0x14>
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ff8:	f7ff bf9c 	b.w	8005f34 <_malloc_r>
 8005ffc:	b922      	cbnz	r2, 8006008 <_realloc_r+0x20>
 8005ffe:	f7ff ff4b 	bl	8005e98 <_free_r>
 8006002:	4625      	mov	r5, r4
 8006004:	4628      	mov	r0, r5
 8006006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006008:	f000 f826 	bl	8006058 <_malloc_usable_size_r>
 800600c:	42a0      	cmp	r0, r4
 800600e:	d20f      	bcs.n	8006030 <_realloc_r+0x48>
 8006010:	4621      	mov	r1, r4
 8006012:	4638      	mov	r0, r7
 8006014:	f7ff ff8e 	bl	8005f34 <_malloc_r>
 8006018:	4605      	mov	r5, r0
 800601a:	2800      	cmp	r0, #0
 800601c:	d0f2      	beq.n	8006004 <_realloc_r+0x1c>
 800601e:	4631      	mov	r1, r6
 8006020:	4622      	mov	r2, r4
 8006022:	f7ff ff15 	bl	8005e50 <memcpy>
 8006026:	4631      	mov	r1, r6
 8006028:	4638      	mov	r0, r7
 800602a:	f7ff ff35 	bl	8005e98 <_free_r>
 800602e:	e7e9      	b.n	8006004 <_realloc_r+0x1c>
 8006030:	4635      	mov	r5, r6
 8006032:	e7e7      	b.n	8006004 <_realloc_r+0x1c>

08006034 <_sbrk_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4c06      	ldr	r4, [pc, #24]	; (8006050 <_sbrk_r+0x1c>)
 8006038:	2300      	movs	r3, #0
 800603a:	4605      	mov	r5, r0
 800603c:	4608      	mov	r0, r1
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	f7fb f818 	bl	8001074 <_sbrk>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_sbrk_r+0x1a>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	b103      	cbz	r3, 800604e <_sbrk_r+0x1a>
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	20000340 	.word	0x20000340

08006054 <__malloc_lock>:
 8006054:	4770      	bx	lr

08006056 <__malloc_unlock>:
 8006056:	4770      	bx	lr

08006058 <_malloc_usable_size_r>:
 8006058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605c:	1f18      	subs	r0, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	bfbc      	itt	lt
 8006062:	580b      	ldrlt	r3, [r1, r0]
 8006064:	18c0      	addlt	r0, r0, r3
 8006066:	4770      	bx	lr

08006068 <_init>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	bf00      	nop
 800606c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606e:	bc08      	pop	{r3}
 8006070:	469e      	mov	lr, r3
 8006072:	4770      	bx	lr

08006074 <_fini>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr
