
SeniorDesignMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007410  08007410  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08007410  08007410  00017410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007418  08007418  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08007420  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000244  08007664  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08007664  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cf8  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022ff  00000000  00000000  00031f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00034270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00035208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029285  00000000  00000000  00036088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c454  00000000  00000000  0005f30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffd60  00000000  00000000  0006b761  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b4c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e94  00000000  00000000  0016b53c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  001703d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001703f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007078 	.word	0x08007078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	08007078 	.word	0x08007078

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295
 80002be:	f000 b9bd 	b.w	800063c <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b972 	b.w	800063c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	4688      	mov	r8, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14b      	bne.n	8000416 <__udivmoddi4+0xa6>
 800037e:	428a      	cmp	r2, r1
 8000380:	4615      	mov	r5, r2
 8000382:	d967      	bls.n	8000454 <__udivmoddi4+0xe4>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0720 	rsb	r7, r2, #32
 800038e:	fa01 f302 	lsl.w	r3, r1, r2
 8000392:	fa20 f707 	lsr.w	r7, r0, r7
 8000396:	4095      	lsls	r5, r2
 8000398:	ea47 0803 	orr.w	r8, r7, r3
 800039c:	4094      	lsls	r4, r2
 800039e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003a8:	fa1f fc85 	uxth.w	ip, r5
 80003ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80003b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003b4:	fb07 f10c 	mul.w	r1, r7, ip
 80003b8:	4299      	cmp	r1, r3
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x60>
 80003bc:	18eb      	adds	r3, r5, r3
 80003be:	f107 30ff 	add.w	r0, r7, #4294967295
 80003c2:	f080 811b 	bcs.w	80005fc <__udivmoddi4+0x28c>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 8118 	bls.w	80005fc <__udivmoddi4+0x28c>
 80003cc:	3f02      	subs	r7, #2
 80003ce:	442b      	add	r3, r5
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x8c>
 80003e8:	192c      	adds	r4, r5, r4
 80003ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ee:	f080 8107 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	f240 8104 	bls.w	8000600 <__udivmoddi4+0x290>
 80003f8:	3802      	subs	r0, #2
 80003fa:	442c      	add	r4, r5
 80003fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000400:	eba4 040c 	sub.w	r4, r4, ip
 8000404:	2700      	movs	r7, #0
 8000406:	b11e      	cbz	r6, 8000410 <__udivmoddi4+0xa0>
 8000408:	40d4      	lsrs	r4, r2
 800040a:	2300      	movs	r3, #0
 800040c:	e9c6 4300 	strd	r4, r3, [r6]
 8000410:	4639      	mov	r1, r7
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0xbe>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80eb 	beq.w	80005f6 <__udivmoddi4+0x286>
 8000420:	2700      	movs	r7, #0
 8000422:	e9c6 0100 	strd	r0, r1, [r6]
 8000426:	4638      	mov	r0, r7
 8000428:	4639      	mov	r1, r7
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f783 	clz	r7, r3
 8000432:	2f00      	cmp	r7, #0
 8000434:	d147      	bne.n	80004c6 <__udivmoddi4+0x156>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0xd0>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80fa 	bhi.w	8000634 <__udivmoddi4+0x2c4>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0303 	sbc.w	r3, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	4698      	mov	r8, r3
 800044a:	2e00      	cmp	r6, #0
 800044c:	d0e0      	beq.n	8000410 <__udivmoddi4+0xa0>
 800044e:	e9c6 4800 	strd	r4, r8, [r6]
 8000452:	e7dd      	b.n	8000410 <__udivmoddi4+0xa0>
 8000454:	b902      	cbnz	r2, 8000458 <__udivmoddi4+0xe8>
 8000456:	deff      	udf	#255	; 0xff
 8000458:	fab2 f282 	clz	r2, r2
 800045c:	2a00      	cmp	r2, #0
 800045e:	f040 808f 	bne.w	8000580 <__udivmoddi4+0x210>
 8000462:	1b49      	subs	r1, r1, r5
 8000464:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000468:	fa1f f885 	uxth.w	r8, r5
 800046c:	2701      	movs	r7, #1
 800046e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000472:	0c23      	lsrs	r3, r4, #16
 8000474:	fb0e 111c 	mls	r1, lr, ip, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb08 f10c 	mul.w	r1, r8, ip
 8000480:	4299      	cmp	r1, r3
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x124>
 8000484:	18eb      	adds	r3, r5, r3
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4299      	cmp	r1, r3
 800048e:	f200 80cd 	bhi.w	800062c <__udivmoddi4+0x2bc>
 8000492:	4684      	mov	ip, r0
 8000494:	1a59      	subs	r1, r3, r1
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1410 	mls	r4, lr, r0, r1
 80004a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x14c>
 80004ac:	192c      	adds	r4, r5, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x14a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80b6 	bhi.w	8000626 <__udivmoddi4+0x2b6>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e79f      	b.n	8000406 <__udivmoddi4+0x96>
 80004c6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ca:	40bb      	lsls	r3, r7
 80004cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004d4:	fa01 f407 	lsl.w	r4, r1, r7
 80004d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004e4:	4325      	orrs	r5, r4
 80004e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ea:	0c2c      	lsrs	r4, r5, #16
 80004ec:	fb08 3319 	mls	r3, r8, r9, r3
 80004f0:	fa1f fa8e 	uxth.w	sl, lr
 80004f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004f8:	fb09 f40a 	mul.w	r4, r9, sl
 80004fc:	429c      	cmp	r4, r3
 80004fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000502:	fa00 f107 	lsl.w	r1, r0, r7
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1e 0303 	adds.w	r3, lr, r3
 800050c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000510:	f080 8087 	bcs.w	8000622 <__udivmoddi4+0x2b2>
 8000514:	429c      	cmp	r4, r3
 8000516:	f240 8084 	bls.w	8000622 <__udivmoddi4+0x2b2>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4473      	add	r3, lr
 8000520:	1b1b      	subs	r3, r3, r4
 8000522:	b2ad      	uxth	r5, r5
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3310 	mls	r3, r8, r0, r3
 800052c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000530:	fb00 fa0a 	mul.w	sl, r0, sl
 8000534:	45a2      	cmp	sl, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1e 0404 	adds.w	r4, lr, r4
 800053c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000540:	d26b      	bcs.n	800061a <__udivmoddi4+0x2aa>
 8000542:	45a2      	cmp	sl, r4
 8000544:	d969      	bls.n	800061a <__udivmoddi4+0x2aa>
 8000546:	3802      	subs	r0, #2
 8000548:	4474      	add	r4, lr
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	fba0 8902 	umull	r8, r9, r0, r2
 8000552:	eba4 040a 	sub.w	r4, r4, sl
 8000556:	454c      	cmp	r4, r9
 8000558:	46c2      	mov	sl, r8
 800055a:	464b      	mov	r3, r9
 800055c:	d354      	bcc.n	8000608 <__udivmoddi4+0x298>
 800055e:	d051      	beq.n	8000604 <__udivmoddi4+0x294>
 8000560:	2e00      	cmp	r6, #0
 8000562:	d069      	beq.n	8000638 <__udivmoddi4+0x2c8>
 8000564:	ebb1 050a 	subs.w	r5, r1, sl
 8000568:	eb64 0403 	sbc.w	r4, r4, r3
 800056c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000570:	40fd      	lsrs	r5, r7
 8000572:	40fc      	lsrs	r4, r7
 8000574:	ea4c 0505 	orr.w	r5, ip, r5
 8000578:	e9c6 5400 	strd	r5, r4, [r6]
 800057c:	2700      	movs	r7, #0
 800057e:	e747      	b.n	8000410 <__udivmoddi4+0xa0>
 8000580:	f1c2 0320 	rsb	r3, r2, #32
 8000584:	fa20 f703 	lsr.w	r7, r0, r3
 8000588:	4095      	lsls	r5, r2
 800058a:	fa01 f002 	lsl.w	r0, r1, r2
 800058e:	fa21 f303 	lsr.w	r3, r1, r3
 8000592:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000596:	4338      	orrs	r0, r7
 8000598:	0c01      	lsrs	r1, r0, #16
 800059a:	fbb3 f7fe 	udiv	r7, r3, lr
 800059e:	fa1f f885 	uxth.w	r8, r5
 80005a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005aa:	fb07 f308 	mul.w	r3, r7, r8
 80005ae:	428b      	cmp	r3, r1
 80005b0:	fa04 f402 	lsl.w	r4, r4, r2
 80005b4:	d907      	bls.n	80005c6 <__udivmoddi4+0x256>
 80005b6:	1869      	adds	r1, r5, r1
 80005b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005bc:	d22f      	bcs.n	800061e <__udivmoddi4+0x2ae>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d92d      	bls.n	800061e <__udivmoddi4+0x2ae>
 80005c2:	3f02      	subs	r7, #2
 80005c4:	4429      	add	r1, r5
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	b281      	uxth	r1, r0
 80005ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80005d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d6:	fb00 f308 	mul.w	r3, r0, r8
 80005da:	428b      	cmp	r3, r1
 80005dc:	d907      	bls.n	80005ee <__udivmoddi4+0x27e>
 80005de:	1869      	adds	r1, r5, r1
 80005e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005e4:	d217      	bcs.n	8000616 <__udivmoddi4+0x2a6>
 80005e6:	428b      	cmp	r3, r1
 80005e8:	d915      	bls.n	8000616 <__udivmoddi4+0x2a6>
 80005ea:	3802      	subs	r0, #2
 80005ec:	4429      	add	r1, r5
 80005ee:	1ac9      	subs	r1, r1, r3
 80005f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005f4:	e73b      	b.n	800046e <__udivmoddi4+0xfe>
 80005f6:	4637      	mov	r7, r6
 80005f8:	4630      	mov	r0, r6
 80005fa:	e709      	b.n	8000410 <__udivmoddi4+0xa0>
 80005fc:	4607      	mov	r7, r0
 80005fe:	e6e7      	b.n	80003d0 <__udivmoddi4+0x60>
 8000600:	4618      	mov	r0, r3
 8000602:	e6fb      	b.n	80003fc <__udivmoddi4+0x8c>
 8000604:	4541      	cmp	r1, r8
 8000606:	d2ab      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 8000608:	ebb8 0a02 	subs.w	sl, r8, r2
 800060c:	eb69 020e 	sbc.w	r2, r9, lr
 8000610:	3801      	subs	r0, #1
 8000612:	4613      	mov	r3, r2
 8000614:	e7a4      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000616:	4660      	mov	r0, ip
 8000618:	e7e9      	b.n	80005ee <__udivmoddi4+0x27e>
 800061a:	4618      	mov	r0, r3
 800061c:	e795      	b.n	800054a <__udivmoddi4+0x1da>
 800061e:	4667      	mov	r7, ip
 8000620:	e7d1      	b.n	80005c6 <__udivmoddi4+0x256>
 8000622:	4681      	mov	r9, r0
 8000624:	e77c      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000626:	3802      	subs	r0, #2
 8000628:	442c      	add	r4, r5
 800062a:	e747      	b.n	80004bc <__udivmoddi4+0x14c>
 800062c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000630:	442b      	add	r3, r5
 8000632:	e72f      	b.n	8000494 <__udivmoddi4+0x124>
 8000634:	4638      	mov	r0, r7
 8000636:	e708      	b.n	800044a <__udivmoddi4+0xda>
 8000638:	4637      	mov	r7, r6
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0xa0>

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint32_t adc[6], buffer[6], sensor1, sensor2, sensor3, pot1in, pot2in, pot3in;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<6; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e00a      	b.n	8000664 <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc[i] = buffer[i];
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <HAL_ADC_ConvCpltCallback+0x38>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<6; i++)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b05      	cmp	r3, #5
 8000668:	ddf1      	ble.n	800064e <HAL_ADC_ConvCpltCallback+0xe>
		}
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000308 	.word	0x20000308
 800067c:	20000320 	.word	0x20000320

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 ff63 	bl	8001552 <HAL_Init>
  /* USER CODE BEGIN Init */

  //define sensor warming time
  #define SENS_WARMING_TIME 300 //approx. 5 minutes

  unsigned long lastMillis = 0; // I ADDED THINGS HERE !!!!!!!!
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  time_t t;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 fb5b 	bl	8000d4c <SystemClock_Config>
 //}

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 fcd3 	bl	8001040 <MX_GPIO_Init>
  MX_DMA_Init();
 800069a:	f000 fcb3 	bl	8001004 <MX_DMA_Init>
  MX_SPI1_Init();
 800069e:	f000 fc43 	bl	8000f28 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 fc7f 	bl	8000fa4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006a6:	f000 fbc9 	bl	8000e3c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //DMA stores ADC values in memory to be called back when needed.
  //buffer holds the values until conversions are complete,
  //at which point the adc[] array holds the referenced values.
  HAL_ADC_Start_DMA (&hadc1, buffer, 6);
 80006aa:	2206      	movs	r2, #6
 80006ac:	49c8      	ldr	r1, [pc, #800]	; (80009d0 <main+0x350>)
 80006ae:	48c9      	ldr	r0, [pc, #804]	; (80009d4 <main+0x354>)
 80006b0:	f001 fb10 	bl	8001cd4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	strcpy((char*)buf, "Hello!\r\n");
 80006b4:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80006b8:	4ac7      	ldr	r2, [pc, #796]	; (80009d8 <main+0x358>)
 80006ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80006bc:	c303      	stmia	r3!, {r0, r1}
 80006be:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80006c0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd83 	bl	80001d0 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f507 7115 	add.w	r1, r7, #596	; 0x254
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	48c1      	ldr	r0, [pc, #772]	; (80009dc <main+0x35c>)
 80006d8:	f004 fa45 	bl	8004b66 <HAL_UART_Transmit>
	HAL_Delay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 ffac 	bl	800163c <HAL_Delay>

	bool abortLogging = false; // I ADDED THINGS HERE !!!!!!!!
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	float airreading_S1, airreading_S2, airreading_S3, airreading_S4; // I ADDED THINGS HERE !!!!!!!!
	time(&t);
 80006ea:	463b      	mov	r3, r7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 f8e9 	bl	80058c4 <time>

	  // poll for new MQTT messages and send keep alives
	//  mqttClient.poll(); // I ADDED THINGS HERE !!!!!!!! NEEDS TO BE CHANGED

	  //Fast blinking - Blinking red light 4 times per second for 3 seconds indicating begining of sensor warmup
	    for (int i = 0; i < 12; i++) { // I ADDED THINGS HERE !!!!!!!!
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80006f8:	e014      	b.n	8000724 <main+0xa4>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	48b8      	ldr	r0, [pc, #736]	; (80009e0 <main+0x360>)
 8000700:	f002 fe10 	bl	8003324 <HAL_GPIO_WritePin>
	      HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 8000704:	207d      	movs	r0, #125	; 0x7d
 8000706:	f000 ff99 	bl	800163c <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 800070a:	2200      	movs	r2, #0
 800070c:	2102      	movs	r1, #2
 800070e:	48b4      	ldr	r0, [pc, #720]	; (80009e0 <main+0x360>)
 8000710:	f002 fe08 	bl	8003324 <HAL_GPIO_WritePin>
	      HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 8000714:	207d      	movs	r0, #125	; 0x7d
 8000716:	f000 ff91 	bl	800163c <HAL_Delay>
	    for (int i = 0; i < 12; i++) { // I ADDED THINGS HERE !!!!!!!!
 800071a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800071e:	3301      	adds	r3, #1
 8000720:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8000724:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8000728:	2b0b      	cmp	r3, #11
 800072a:	dde6      	ble.n	80006fa <main+0x7a>
	    }

	    //code to power up sensors here
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	48ab      	ldr	r0, [pc, #684]	; (80009e0 <main+0x360>)
 8000734:	f002 fdf6 	bl	8003324 <HAL_GPIO_WritePin>

	    //Fast blinking - Blinking red light 1 times per second for 5 minute/s indicating sensor warming up
	     for (int i = 0; i < SENS_WARMING_TIME; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800073e:	e015      	b.n	800076c <main+0xec>
	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	48a6      	ldr	r0, [pc, #664]	; (80009e0 <main+0x360>)
 8000746:	f002 fded 	bl	8003324 <HAL_GPIO_WritePin>
	    	 HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 800074a:	207d      	movs	r0, #125	; 0x7d
 800074c:	f000 ff76 	bl	800163c <HAL_Delay>
	    	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 8000750:	2200      	movs	r2, #0
 8000752:	2102      	movs	r1, #2
 8000754:	48a2      	ldr	r0, [pc, #648]	; (80009e0 <main+0x360>)
 8000756:	f002 fde5 	bl	8003324 <HAL_GPIO_WritePin>
	    	 HAL_Delay(875); // I ADDED THINGS HERE !!!!!!!!
 800075a:	f240 306b 	movw	r0, #875	; 0x36b
 800075e:	f000 ff6d 	bl	800163c <HAL_Delay>
	     for (int i = 0; i < SENS_WARMING_TIME; i++) {
 8000762:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8000766:	3301      	adds	r3, #1
 8000768:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800076c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8000770:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000774:	dbe4      	blt.n	8000740 <main+0xc0>
	     }

	     //Fast Blinking (four times a second) Yellow for 5 sec warnning begining of data collection via MQTT
	       for (int i = 0; i < 20; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800077c:	e01e      	b.n	80007bc <main+0x13c>
	    	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 800077e:	2201      	movs	r2, #1
 8000780:	2102      	movs	r1, #2
 8000782:	4897      	ldr	r0, [pc, #604]	; (80009e0 <main+0x360>)
 8000784:	f002 fdce 	bl	8003324 <HAL_GPIO_WritePin>
	    	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!!
 8000788:	2201      	movs	r2, #1
 800078a:	2104      	movs	r1, #4
 800078c:	4894      	ldr	r0, [pc, #592]	; (80009e0 <main+0x360>)
 800078e:	f002 fdc9 	bl	8003324 <HAL_GPIO_WritePin>
	    	   HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 8000792:	207d      	movs	r0, #125	; 0x7d
 8000794:	f000 ff52 	bl	800163c <HAL_Delay>
	    	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 8000798:	2200      	movs	r2, #0
 800079a:	2102      	movs	r1, #2
 800079c:	4890      	ldr	r0, [pc, #576]	; (80009e0 <main+0x360>)
 800079e:	f002 fdc1 	bl	8003324 <HAL_GPIO_WritePin>
	    	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!!
 80007a2:	2200      	movs	r2, #0
 80007a4:	2104      	movs	r1, #4
 80007a6:	488e      	ldr	r0, [pc, #568]	; (80009e0 <main+0x360>)
 80007a8:	f002 fdbc 	bl	8003324 <HAL_GPIO_WritePin>
	    	   HAL_Delay(125); // I ADDED THINGS HERE !!!!!!!!
 80007ac:	207d      	movs	r0, #125	; 0x7d
 80007ae:	f000 ff45 	bl	800163c <HAL_Delay>
	       for (int i = 0; i < 20; i++) {
 80007b2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80007b6:	3301      	adds	r3, #1
 80007b8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80007bc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80007c0:	2b13      	cmp	r3, #19
 80007c2:	dddc      	ble.n	800077e <main+0xfe>

	       //Logging Data
	        //Collect 10 samples of ambint data
	        //Read the Sensors

	       for (int i = 0; i < 19; i++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80007ca:	e047      	b.n	800085c <main+0x1dc>
	          airreading_S1 = adc[0]; //reads the 2620 sensor input for air
 80007cc:	4b85      	ldr	r3, [pc, #532]	; (80009e4 <main+0x364>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d8:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268
	          airreading_S2 = adc[1]; //reads the 2602 sensor input for air
 80007dc:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <main+0x364>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e8:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
	          airreading_S3 = adc[2]; //reads the 2612 sensor input for air
 80007ec:	4b7d      	ldr	r3, [pc, #500]	; (80009e4 <main+0x364>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007f8:	edc7 7a98 	vstr	s15, [r7, #608]	; 0x260
	          //save data to each respective array
	          sensor1ValuesA[i] = airreading_S1;
 80007fc:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8000800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000804:	ee17 2a90 	vmov	r2, s15
 8000808:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8000812:	440b      	add	r3, r1
 8000814:	f843 2ca0 	str.w	r2, [r3, #-160]
	          sensor2ValuesA[i] = airreading_S2;
 8000818:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 800081c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000820:	ee17 2a90 	vmov	r2, s15
 8000824:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 800082e:	440b      	add	r3, r1
 8000830:	f843 2cf4 	str.w	r2, [r3, #-244]
	          sensor3ValuesA[i] = airreading_S3;
 8000834:	edd7 7a98 	vldr	s15, [r7, #608]	; 0x260
 8000838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083c:	ee17 1a90 	vmov	r1, s15
 8000840:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000844:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	          HAL_Delay(100);//Wait before next reading
 800084c:	2064      	movs	r0, #100	; 0x64
 800084e:	f000 fef5 	bl	800163c <HAL_Delay>
	       for (int i = 0; i < 19; i++) {
 8000852:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000856:	3301      	adds	r3, #1
 8000858:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800085c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8000860:	2b12      	cmp	r3, #18
 8000862:	ddb3      	ble.n	80007cc <main+0x14c>
	        }

	       //Package Values into JSON for MQTT->DynamoDB
	         valuePayload = "{\"timeStamp\":"; // I ADDED THINGS HERE !!!!!!!!
 8000864:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000868:	4a5f      	ldr	r2, [pc, #380]	; (80009e8 <main+0x368>)
 800086a:	601a      	str	r2, [r3, #0]
	         strcat(&valuePayload, ctime(&t)); // gives date time
 800086c:	463b      	mov	r3, r7
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fdf8 	bl	8005464 <ctime>
 8000874:	4602      	mov	r2, r0
 8000876:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f005 f811 	bl	80058a4 <strcat>
	         strcat(&valuePayload, (",\"S1A\":[")); // I ADDED THINGS HERE !!!!!!!!
 8000882:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000894:	4413      	add	r3, r2
 8000896:	4955      	ldr	r1, [pc, #340]	; (80009ec <main+0x36c>)
 8000898:	461a      	mov	r2, r3
 800089a:	460b      	mov	r3, r1
 800089c:	cb03      	ldmia	r3!, {r0, r1}
 800089e:	6010      	str	r0, [r2, #0]
 80008a0:	6051      	str	r1, [r2, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	7213      	strb	r3, [r2, #8]
	         for (int i = 0; i < 19; i++) { // I ADDED THINGS HERE !!!!!!!!
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80008ac:	e02d      	b.n	800090a <main+0x28a>
	           strcat(&valuePayload, sprintf(str, "%ld", sensor1ValuesA[i])); // I ADDED THINGS HERE !!!!!!!!
 80008ae:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80008b8:	4413      	add	r3, r2
 80008ba:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	494b      	ldr	r1, [pc, #300]	; (80009f0 <main+0x370>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 ffcd 	bl	8005864 <siprintf>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 ffe5 	bl	80058a4 <strcat>
	           if (i < 18) // I ADDED THINGS HERE !!!!!!!!
 80008da:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80008de:	2b11      	cmp	r3, #17
 80008e0:	dc0e      	bgt.n	8000900 <main+0x280>
	           {strcat(&valuePayload, (","));} // I ADDED THINGS HERE !!!!!!!!
 80008e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc72 	bl	80001d0 <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008f4:	4413      	add	r3, r2
 80008f6:	493f      	ldr	r1, [pc, #252]	; (80009f4 <main+0x374>)
 80008f8:	461a      	mov	r2, r3
 80008fa:	460b      	mov	r3, r1
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	8013      	strh	r3, [r2, #0]
	         for (int i = 0; i < 19; i++) { // I ADDED THINGS HERE !!!!!!!!
 8000900:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8000904:	3301      	adds	r3, #1
 8000906:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800090a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800090e:	2b12      	cmp	r3, #18
 8000910:	ddcd      	ble.n	80008ae <main+0x22e>
	         }
	         strcat(&valuePayload, ("],\"S2A\":[")); // I ADDED THINGS HERE !!!!!!!!
 8000912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc5a 	bl	80001d0 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000924:	4413      	add	r3, r2
 8000926:	4934      	ldr	r1, [pc, #208]	; (80009f8 <main+0x378>)
 8000928:	461a      	mov	r2, r3
 800092a:	460b      	mov	r3, r1
 800092c:	cb03      	ldmia	r3!, {r0, r1}
 800092e:	6010      	str	r0, [r2, #0]
 8000930:	6051      	str	r1, [r2, #4]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	8113      	strh	r3, [r2, #8]
	         for (int i = 0; i < 19; i++) { // I ADDED THINGS HERE !!!!!!!!
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800093c:	e02d      	b.n	800099a <main+0x31a>
	           strcat(&valuePayload, sprintf(str, "%ld", sensor2ValuesA[i])); // I ADDED THINGS HERE !!!!!!!!
 800093e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8000948:	4413      	add	r3, r2
 800094a:	f853 2cf4 	ldr.w	r2, [r3, #-244]
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4927      	ldr	r1, [pc, #156]	; (80009f0 <main+0x370>)
 8000954:	4618      	mov	r0, r3
 8000956:	f004 ff85 	bl	8005864 <siprintf>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f004 ff9d 	bl	80058a4 <strcat>
	           if (i < 18) // I ADDED THINGS HERE !!!!!!!!
 800096a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800096e:	2b11      	cmp	r3, #17
 8000970:	dc0e      	bgt.n	8000990 <main+0x310>
	           {strcat(&valuePayload, (","));} // I ADDED THINGS HERE !!!!!!!!
 8000972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fc2a 	bl	80001d0 <strlen>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000984:	4413      	add	r3, r2
 8000986:	491b      	ldr	r1, [pc, #108]	; (80009f4 <main+0x374>)
 8000988:	461a      	mov	r2, r3
 800098a:	460b      	mov	r3, r1
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	8013      	strh	r3, [r2, #0]
	         for (int i = 0; i < 19; i++) { // I ADDED THINGS HERE !!!!!!!!
 8000990:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8000994:	3301      	adds	r3, #1
 8000996:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800099a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800099e:	2b12      	cmp	r3, #18
 80009a0:	ddcd      	ble.n	800093e <main+0x2be>
	         }
	         strcat(&valuePayload, ("],\"S3A\":[")); // I ADDED THINGS HERE !!!!!!!!
 80009a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fc12 	bl	80001d0 <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009b4:	4413      	add	r3, r2
 80009b6:	4911      	ldr	r1, [pc, #68]	; (80009fc <main+0x37c>)
 80009b8:	461a      	mov	r2, r3
 80009ba:	460b      	mov	r3, r1
 80009bc:	cb03      	ldmia	r3!, {r0, r1}
 80009be:	6010      	str	r0, [r2, #0]
 80009c0:	6051      	str	r1, [r2, #4]
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	8113      	strh	r3, [r2, #8]
	         for (int i = 0; i < 19; i++) { // I ADDED THINGS HERE !!!!!!!!
 80009c6:	2300      	movs	r3, #0
 80009c8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80009cc:	e044      	b.n	8000a58 <main+0x3d8>
 80009ce:	bf00      	nop
 80009d0:	20000308 	.word	0x20000308
 80009d4:	200002a0 	.word	0x200002a0
 80009d8:	08007090 	.word	0x08007090
 80009dc:	200003e8 	.word	0x200003e8
 80009e0:	48000400 	.word	0x48000400
 80009e4:	20000320 	.word	0x20000320
 80009e8:	0800709c 	.word	0x0800709c
 80009ec:	080070ac 	.word	0x080070ac
 80009f0:	080070b8 	.word	0x080070b8
 80009f4:	080070bc 	.word	0x080070bc
 80009f8:	080070c0 	.word	0x080070c0
 80009fc:	080070cc 	.word	0x080070cc
	           strcat(&valuePayload, sprintf(str, "%ld", sensor3ValuesA[i])); // I ADDED THINGS HERE !!!!!!!!
 8000a00:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000a04:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8000a08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	49c5      	ldr	r1, [pc, #788]	; (8000d28 <main+0x6a8>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 ff26 	bl	8005864 <siprintf>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 ff3e 	bl	80058a4 <strcat>
	           if (i < 18) // I ADDED THINGS HERE !!!!!!!!
 8000a28:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000a2c:	2b11      	cmp	r3, #17
 8000a2e:	dc0e      	bgt.n	8000a4e <main+0x3ce>
	           {strcat(&valuePayload, (","));} // I ADDED THINGS HERE !!!!!!!!
 8000a30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fbcb 	bl	80001d0 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a42:	4413      	add	r3, r2
 8000a44:	49b9      	ldr	r1, [pc, #740]	; (8000d2c <main+0x6ac>)
 8000a46:	461a      	mov	r2, r3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	8013      	strh	r3, [r2, #0]
	         for (int i = 0; i < 19; i++) { // I ADDED THINGS HERE !!!!!!!!
 8000a4e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000a52:	3301      	adds	r3, #1
 8000a54:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8000a58:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000a5c:	2b12      	cmp	r3, #18
 8000a5e:	ddcf      	ble.n	8000a00 <main+0x380>
	         }
	         strcat(&valuePayload, ("], ")); // I ADDED THINGS HERE !!!!!!!!
 8000a60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbb3 	bl	80001d0 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a72:	4413      	add	r3, r2
 8000a74:	4aae      	ldr	r2, [pc, #696]	; (8000d30 <main+0x6b0>)
 8000a76:	6810      	ldr	r0, [r2, #0]
 8000a78:	6018      	str	r0, [r3, #0]

	         //shows a red,yellow,green "get ready" sequence
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!! Red LED on
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	48ad      	ldr	r0, [pc, #692]	; (8000d34 <main+0x6b4>)
 8000a80:	f002 fc50 	bl	8003324 <HAL_GPIO_WritePin>
	         HAL_Delay(3000);
 8000a84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a88:	f000 fdd8 	bl	800163c <HAL_Delay>
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // I ADDED THINGS HERE !!!!!!!! Green LED on
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2104      	movs	r1, #4
 8000a90:	48a8      	ldr	r0, [pc, #672]	; (8000d34 <main+0x6b4>)
 8000a92:	f002 fc47 	bl	8003324 <HAL_GPIO_WritePin>
	         HAL_Delay(3000);
 8000a96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a9a:	f000 fdcf 	bl	800163c <HAL_Delay>
	         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // I ADDED THINGS HERE !!!!!!!! Red LED off
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	48a4      	ldr	r0, [pc, #656]	; (8000d34 <main+0x6b4>)
 8000aa4:	f002 fc3e 	bl	8003324 <HAL_GPIO_WritePin>
	           //FOR USER: BREATHE INTO THE SENSOR

	         //Read the Sensors for 7 seconds
	           for (int i = 0; i < 19; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8000aae:	e043      	b.n	8000b38 <main+0x4b8>
	             airreading_S1 = adc[0]; //reads the 2620 sensor input for air
 8000ab0:	4ba1      	ldr	r3, [pc, #644]	; (8000d38 <main+0x6b8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000abc:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268
	             airreading_S2 = adc[1]; //reads the 2602 sensor input for air
 8000ac0:	4b9d      	ldr	r3, [pc, #628]	; (8000d38 <main+0x6b8>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000acc:	edc7 7a99 	vstr	s15, [r7, #612]	; 0x264
	             airreading_S3 = adc[2]; //reads the 2612 sensor input for air
 8000ad0:	4b99      	ldr	r3, [pc, #612]	; (8000d38 <main+0x6b8>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000adc:	edc7 7a98 	vstr	s15, [r7, #608]	; 0x260
	             //save data to each respective array
	                sensor1ValuesB[i] = airreading_S1;
 8000ae0:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8000ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae8:	ee17 1a90 	vmov	r1, s15
 8000aec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000af0:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	                sensor2ValuesB[i] = airreading_S2;
 8000af8:	edd7 7a99 	vldr	s15, [r7, #612]	; 0x264
 8000afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b00:	ee17 1a90 	vmov	r1, s15
 8000b04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b08:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	                sensor3ValuesB[i] = airreading_S3;
 8000b10:	edd7 7a98 	vldr	s15, [r7, #608]	; 0x260
 8000b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b18:	ee17 1a90 	vmov	r1, s15
 8000b1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b20:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	                HAL_Delay(100);//Wait before next reading
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f000 fd87 	bl	800163c <HAL_Delay>
	           for (int i = 0; i < 19; i++) {
 8000b2e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8000b32:	3301      	adds	r3, #1
 8000b34:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8000b38:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8000b3c:	2b12      	cmp	r3, #18
 8000b3e:	ddb7      	ble.n	8000ab0 <main+0x430>
	              }

	           //Package Values into JSON for MQTT->DynamoDB
	            strcat(&valuePayload, ("\"S1B\" : ["));
 8000b40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fb43 	bl	80001d0 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b52:	4413      	add	r3, r2
 8000b54:	4979      	ldr	r1, [pc, #484]	; (8000d3c <main+0x6bc>)
 8000b56:	461a      	mov	r2, r3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	cb03      	ldmia	r3!, {r0, r1}
 8000b5c:	6010      	str	r0, [r2, #0]
 8000b5e:	6051      	str	r1, [r2, #4]
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	8113      	strh	r3, [r2, #8]
	            for (int i = 0; i < 19; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8000b6a:	e02b      	b.n	8000bc4 <main+0x544>
	              strcat(&valuePayload, sprintf(str, "%ld", sensor1ValuesB[i]));
 8000b6c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b70:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8000b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	496a      	ldr	r1, [pc, #424]	; (8000d28 <main+0x6a8>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fe70 	bl	8005864 <siprintf>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 fe88 	bl	80058a4 <strcat>
	              if (i < 18)
 8000b94:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000b98:	2b11      	cmp	r3, #17
 8000b9a:	dc0e      	bgt.n	8000bba <main+0x53a>
	              {strcat(&valuePayload, (","));}
 8000b9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb15 	bl	80001d0 <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bae:	4413      	add	r3, r2
 8000bb0:	495e      	ldr	r1, [pc, #376]	; (8000d2c <main+0x6ac>)
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	8013      	strh	r3, [r2, #0]
	            for (int i = 0; i < 19; i++) {
 8000bba:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8000bc4:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000bc8:	2b12      	cmp	r3, #18
 8000bca:	ddcf      	ble.n	8000b6c <main+0x4ec>
	            }
	            strcat(&valuePayload, ("], \"S2B\" : ["));
 8000bcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fafd 	bl	80001d0 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bde:	4413      	add	r3, r2
 8000be0:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <main+0x6c0>)
 8000be2:	461c      	mov	r4, r3
 8000be4:	4613      	mov	r3, r2
 8000be6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000be8:	6020      	str	r0, [r4, #0]
 8000bea:	6061      	str	r1, [r4, #4]
 8000bec:	60a2      	str	r2, [r4, #8]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	7323      	strb	r3, [r4, #12]
	            for (int i = 0; i < 19; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8000bf8:	e02b      	b.n	8000c52 <main+0x5d2>
	              strcat(&valuePayload, sprintf(str, "%ld", sensor2ValuesB[i]));
 8000bfa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000bfe:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8000c02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4947      	ldr	r1, [pc, #284]	; (8000d28 <main+0x6a8>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fe29 	bl	8005864 <siprintf>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fe41 	bl	80058a4 <strcat>
	              if (i < 18)
 8000c22:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8000c26:	2b11      	cmp	r3, #17
 8000c28:	dc0e      	bgt.n	8000c48 <main+0x5c8>
	              {strcat(&valuePayload, (","));}
 8000c2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff face 	bl	80001d0 <strlen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c3c:	4413      	add	r3, r2
 8000c3e:	493b      	ldr	r1, [pc, #236]	; (8000d2c <main+0x6ac>)
 8000c40:	461a      	mov	r2, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	8013      	strh	r3, [r2, #0]
	            for (int i = 0; i < 19; i++) {
 8000c48:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8000c52:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	ddcf      	ble.n	8000bfa <main+0x57a>
	            }
	            strcat(&valuePayload, ("], \"S3B\" : ["));
 8000c5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fab6 	bl	80001d0 <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a35      	ldr	r2, [pc, #212]	; (8000d44 <main+0x6c4>)
 8000c70:	461c      	mov	r4, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c76:	6020      	str	r0, [r4, #0]
 8000c78:	6061      	str	r1, [r4, #4]
 8000c7a:	60a2      	str	r2, [r4, #8]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	7323      	strb	r3, [r4, #12]
	            for (int i = 0; i < 19; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8000c86:	e02b      	b.n	8000ce0 <main+0x660>
	              strcat(&valuePayload, sprintf(str, "%ld", sensor3ValuesB[i]));
 8000c88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c8c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8000c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4923      	ldr	r1, [pc, #140]	; (8000d28 <main+0x6a8>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 fde2 	bl	8005864 <siprintf>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 fdfa 	bl	80058a4 <strcat>
	              if (i < 18)
 8000cb0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000cb4:	2b11      	cmp	r3, #17
 8000cb6:	dc0e      	bgt.n	8000cd6 <main+0x656>
	              {strcat(&valuePayload, (","));}
 8000cb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fa87 	bl	80001d0 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cca:	4413      	add	r3, r2
 8000ccc:	4917      	ldr	r1, [pc, #92]	; (8000d2c <main+0x6ac>)
 8000cce:	461a      	mov	r2, r3
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	8013      	strh	r3, [r2, #0]
	            for (int i = 0; i < 19; i++) {
 8000cd6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8000ce0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	ddcf      	ble.n	8000c88 <main+0x608>
	            }
	            strcat(&valuePayload, ("]} "));
 8000ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fa6f 	bl	80001d0 <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <main+0x6c8>)
 8000cfe:	6810      	ldr	r0, [r2, #0]
 8000d00:	6018      	str	r0, [r3, #0]

	             // Serial.println(valuePayload);
	             // publishMessage(valuePayload);
	              HAL_Delay(500);
 8000d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d06:	f000 fc99 	bl	800163c <HAL_Delay>

	           // digitalWrite(SENS_POWER, LOW); // should each sensor be powered off? mosfet pin low
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Green LED off
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <main+0x6b4>)
 8000d10:	f002 fb08 	bl	8003324 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000d14:	2120      	movs	r1, #32
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f002 fb1b 	bl	8003354 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d22:	f000 fc8b 	bl	800163c <HAL_Delay>
  {
 8000d26:	e4c5      	b.n	80006b4 <main+0x34>
 8000d28:	080070b8 	.word	0x080070b8
 8000d2c:	080070bc 	.word	0x080070bc
 8000d30:	080070d8 	.word	0x080070d8
 8000d34:	48000400 	.word	0x48000400
 8000d38:	20000320 	.word	0x20000320
 8000d3c:	080070dc 	.word	0x080070dc
 8000d40:	080070e8 	.word	0x080070e8
 8000d44:	080070f8 	.word	0x080070f8
 8000d48:	08007108 	.word	0x08007108

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b8      	sub	sp, #224	; 0xe0
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d56:	2244      	movs	r2, #68	; 0x44
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fcc2 	bl	80056e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2288      	movs	r2, #136	; 0x88
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 fcb4 	bl	80056e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d8e:	2360      	movs	r3, #96	; 0x60
 8000d90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 fb56 	bl	8003450 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000daa:	f000 f9af 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dcc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ff22 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dde:	f000 f995 	bl	800110c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000de2:	f244 0302 	movw	r3, #16386	; 0x4002
 8000de6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000df0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000df2:	2301      	movs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 f906 	bl	8004024 <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e1e:	f000 f975 	bl	800110c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e26:	f002 fabd 	bl	80033a4 <HAL_PWREx_ControlVoltageScaling>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e30:	f000 f96c 	bl	800110c <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	37e0      	adds	r7, #224	; 0xe0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <MX_ADC1_Init+0xe4>)
 8000e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ebe:	4817      	ldr	r0, [pc, #92]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000ec0:	f000 fdb4 	bl	8001a2c <HAL_ADC_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eca:	f000 f91f 	bl	800110c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000eda:	f001 fcc5 	bl	8002868 <HAL_ADCEx_MultiModeConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee4:	f000 f912 	bl	800110c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_ADC1_Init+0xe8>)
 8000eea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eec:	2306      	movs	r3, #6
 8000eee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef4:	237f      	movs	r3, #127	; 0x7f
 8000ef6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_ADC1_Init+0xe0>)
 8000f06:	f000 ffad 	bl	8001e64 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f10:	f000 f8fc 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200002a0 	.word	0x200002a0
 8000f20:	50040000 	.word	0x50040000
 8000f24:	04300002 	.word	0x04300002

08000f28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <MX_SPI1_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_SPI1_Init+0x74>)
 8000f88:	f003 fcfc 	bl	8004984 <HAL_SPI_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f000 f8bb 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000380 	.word	0x20000380
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <MX_USART2_UART_Init+0x5c>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fcc:	220c      	movs	r2, #12
 8000fce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_USART2_UART_Init+0x58>)
 8000fea:	f003 fd6e 	bl	8004aca <HAL_UART_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000ff4:	f000 f88a 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200003e8 	.word	0x200003e8
 8001000:	40004400 	.word	0x40004400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_DMA_Init+0x38>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <MX_DMA_Init+0x38>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6493      	str	r3, [r2, #72]	; 0x48
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_DMA_Init+0x38>)
 8001018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200b      	movs	r0, #11
 8001028:	f001 fda5 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800102c:	200b      	movs	r0, #11
 800102e:	f001 fdbe 	bl	8002bae <HAL_NVIC_EnableIRQ>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_GPIO_Init+0xc4>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_GPIO_Init+0xc4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MX_GPIO_Init+0xc4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_GPIO_Init+0xc4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED_Pin|G_LED_Pin|Heater_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f240 4106 	movw	r1, #1030	; 0x406
 80010a4:	4818      	ldr	r0, [pc, #96]	; (8001108 <MX_GPIO_Init+0xc8>)
 80010a6:	f002 f93d 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <MX_GPIO_Init+0xc8>)
 80010be:	f001 ff89 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin Heater_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin|Heater_Pin;
 80010c2:	f240 4306 	movw	r3, #1030	; 0x406
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <MX_GPIO_Init+0xc8>)
 80010dc:	f001 ff7a 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip5_Pin Dip4_Pin Dip3_Pin Dip2_Pin
                           Dip1_Pin */
  GPIO_InitStruct.Pin = Dip5_Pin|Dip4_Pin|Dip3_Pin|Dip2_Pin
 80010e0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010e4:	60fb      	str	r3, [r7, #12]
                          |Dip1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f001 ff6c 	bl	8002fd4 <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	48000400 	.word	0x48000400

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x44>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_MspInit+0x44>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6613      	str	r3, [r2, #96]	; 0x60
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x44>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x44>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x44>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6593      	str	r3, [r2, #88]	; 0x58
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x44>)
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a37      	ldr	r2, [pc, #220]	; (8001260 <HAL_ADC_MspInit+0xfc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d167      	bne.n	8001256 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_ADC_MspInit+0x100>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <HAL_ADC_MspInit+0x100>)
 800118c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_ADC_MspInit+0x100>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_ADC_MspInit+0x100>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <HAL_ADC_MspInit+0x100>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_ADC_MspInit+0x100>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_MspInit+0x100>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_ADC_MspInit+0x100>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_ADC_MspInit+0x100>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin|Pot3_Pin;
 80011ce:	2317      	movs	r3, #23
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011d2:	230b      	movs	r3, #11
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <HAL_ADC_MspInit+0x104>)
 80011e2:	f001 fef7 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot1_Pin|Pot2_Pin;
 80011e6:	23c0      	movs	r3, #192	; 0xc0
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ea:	230b      	movs	r3, #11
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f001 feea 	bl	8002fd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_ADC_MspInit+0x10c>)
 8001204:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_ADC_MspInit+0x108>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_ADC_MspInit+0x108>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <HAL_ADC_MspInit+0x108>)
 800123c:	f001 fcd2 	bl	8002be4 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001246:	f7ff ff61 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_ADC_MspInit+0x108>)
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_ADC_MspInit+0x108>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	50040000 	.word	0x50040000
 8001264:	40021000 	.word	0x40021000
 8001268:	48000800 	.word	0x48000800
 800126c:	20000338 	.word	0x20000338
 8001270:	40020008 	.word	0x40020008

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_SPI_MspInit+0xb4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d144      	bne.n	8001320 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_SPI_MspInit+0xb8>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_SPI_MspInit+0xb8>)
 800129c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a0:	6613      	str	r3, [r2, #96]	; 0x60
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_SPI_MspInit+0xb8>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012de:	2320      	movs	r3, #32
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ee:	2305      	movs	r3, #5
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fc:	f001 fe6a 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001300:	2320      	movs	r3, #32
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001310:	2305      	movs	r3, #5
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_SPI_MspInit+0xbc>)
 800131c:	f001 fe5a 	bl	8002fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013000 	.word	0x40013000
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x7c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_UART_MspInit+0x80>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_UART_MspInit+0x80>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8001386:	230c      	movs	r3, #12
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001396:	2307      	movs	r3, #7
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f001 fe16 	bl	8002fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004400 	.word	0x40004400
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f8f6 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA1_Channel1_IRQHandler+0x10>)
 800141a:	f001 fcfb 	bl	8002e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000338 	.word	0x20000338

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f004 f80c 	bl	8005474 <__errno>
 800145c:	4602      	mov	r2, r0
 800145e:	230c      	movs	r3, #12
 8001460:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20018000 	.word	0x20018000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000264 	.word	0x20000264
 8001490:	20000478 	.word	0x20000478

08001494 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <SystemInit+0x64>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <SystemInit+0x64>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <SystemInit+0x68>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a13      	ldr	r2, [pc, #76]	; (80014fc <SystemInit+0x68>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <SystemInit+0x68>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <SystemInit+0x68>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <SystemInit+0x68>)
 80014c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <SystemInit+0x68>)
 80014cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <SystemInit+0x68>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <SystemInit+0x68>)
 80014d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <SystemInit+0x68>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SystemInit+0x64>)
 80014e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ea:	609a      	str	r2, [r3, #8]
#endif
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00
 80014fc:	40021000 	.word	0x40021000

08001500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001504:	f7ff ffc6 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001508:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800150a:	e003      	b.n	8001514 <LoopCopyDataInit>

0800150c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800150e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001510:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001512:	3104      	adds	r1, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001518:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800151a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800151c:	d3f6      	bcc.n	800150c <CopyDataInit>
	ldr	r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001520:	e002      	b.n	8001528 <LoopFillZerobss>

08001522 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001522:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001524:	f842 3b04 	str.w	r3, [r2], #4

08001528 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <LoopForever+0x16>)
	cmp	r2, r3
 800152a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800152c:	d3f9      	bcc.n	8001522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f003 ffa7 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001532:	f7ff f8a5 	bl	8000680 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001538:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800153c:	08007420 	.word	0x08007420
	ldr	r0, =_sdata
 8001540:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001544:	20000244 	.word	0x20000244
	ldr	r2, =_sbss
 8001548:	20000244 	.word	0x20000244
	ldr	r3, = _ebss
 800154c:	20000474 	.word	0x20000474

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>

08001552 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f001 faff 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f80e 	bl	8001584 <HAL_InitTick>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e001      	b.n	8001578 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001574:	f7ff fdd2 	bl	800111c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001578:	79fb      	ldrb	r3, [r7, #7]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_InitTick+0x6c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d023      	beq.n	80015e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_InitTick+0x70>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_InitTick+0x6c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fb0b 	bl	8002bca <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d809      	bhi.n	80015d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f001 fad5 	bl	8002b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_InitTick+0x74>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e004      	b.n	80015e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e001      	b.n	80015e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000000c 	.word	0x2000000c
 80015f4:	20000004 	.word	0x20000004
 80015f8:	20000008 	.word	0x20000008

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000000c 	.word	0x2000000c
 8001620:	2000046c 	.word	0x2000046c

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000046c 	.word	0x2000046c

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_Delay+0x40>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000000c 	.word	0x2000000c

08001680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3360      	adds	r3, #96	; 0x60
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <LL_ADC_SetOffset+0x44>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	4313      	orrs	r3, r2
 8001718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	03fff000 	.word	0x03fff000

08001730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3360      	adds	r3, #96	; 0x60
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3360      	adds	r3, #96	; 0x60
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3330      	adds	r3, #48	; 0x30
 80017c8:	461a      	mov	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	211f      	movs	r1, #31
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0e9b      	lsrs	r3, r3, #26
 80017f0:	f003 011f 	and.w	r1, r3, #31
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3314      	adds	r3, #20
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	0e5b      	lsrs	r3, r3, #25
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0d1b      	lsrs	r3, r3, #20
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2107      	movs	r1, #7
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	401a      	ands	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	0d1b      	lsrs	r3, r3, #20
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0318 	and.w	r3, r3, #24
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800188c:	40d9      	lsrs	r1, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	400b      	ands	r3, r1
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	431a      	orrs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0007ffff 	.word	0x0007ffff

080018b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 031f 	and.w	r3, r3, #31
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6093      	str	r3, [r2, #8]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001904:	d101      	bne.n	800190a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800192c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001954:	d101      	bne.n	800195a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <LL_ADC_IsEnabled+0x18>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <LL_ADC_IsEnabled+0x1a>
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ca:	f043 0204 	orr.w	r2, r3, #4
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d101      	bne.n	8001a1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e134      	b.n	8001cb0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fb85 	bl	8001164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff3f 	bl	80018f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff25 	bl	80018cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff5a 	bl	8001940 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d113      	bne.n	8001aba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff3e 	bl	8001918 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a9c:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <HAL_ADC_Init+0x28c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	4a86      	ldr	r2, [pc, #536]	; (8001cbc <HAL_ADC_Init+0x290>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff3e 	bl	8001940 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff77 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80cf 	bne.w	8001c9e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80cb 	bne.w	8001c9e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff37 	bl	8001990 <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d115      	bne.n	8001b54 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b28:	4865      	ldr	r0, [pc, #404]	; (8001cc0 <HAL_ADC_Init+0x294>)
 8001b2a:	f7ff ff31 	bl	8001990 <LL_ADC_IsEnabled>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4864      	ldr	r0, [pc, #400]	; (8001cc4 <HAL_ADC_Init+0x298>)
 8001b32:	f7ff ff2d 	bl	8001990 <LL_ADC_IsEnabled>
 8001b36:	4603      	mov	r3, r0
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4863      	ldr	r0, [pc, #396]	; (8001cc8 <HAL_ADC_Init+0x29c>)
 8001b3c:	f7ff ff28 	bl	8001990 <LL_ADC_IsEnabled>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4323      	orrs	r3, r4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	485f      	ldr	r0, [pc, #380]	; (8001ccc <HAL_ADC_Init+0x2a0>)
 8001b50:	f7ff fd96 	bl	8001680 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7e5b      	ldrb	r3, [r3, #25]
 8001b58:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b64:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b6a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b72:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	3b01      	subs	r3, #1
 8001b88:	045b      	lsls	r3, r3, #17
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_ADC_Init+0x2a4>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff0a 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001bca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff17 	bl	8001a04 <LL_ADC_INJ_IsConversionOngoing>
 8001bd6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d13d      	bne.n	8001c5a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d13a      	bne.n	8001c5a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bf0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c00:	f023 0302 	bic.w	r3, r3, #2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	69b9      	ldr	r1, [r7, #24]
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d118      	bne.n	8001c4a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10c      	bne.n	8001c7c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f023 010f 	bic.w	r1, r3, #15
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7a:	e007      	b.n	8001c8c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 020f 	bic.w	r2, r2, #15
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	f023 0303 	bic.w	r3, r3, #3
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c9c:	e007      	b.n	8001cae <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	053e2d63 	.word	0x053e2d63
 8001cc0:	50040000 	.word	0x50040000
 8001cc4:	50040100 	.word	0x50040100
 8001cc8:	50040200 	.word	0x50040200
 8001ccc:	50040300 	.word	0x50040300
 8001cd0:	fff0c007 	.word	0xfff0c007

08001cd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce0:	4850      	ldr	r0, [pc, #320]	; (8001e24 <HAL_ADC_Start_DMA+0x150>)
 8001ce2:	f7ff fde5 	bl	80018b0 <LL_ADC_GetMultimode>
 8001ce6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fe76 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f040 808e 	bne.w	8001e16 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_Start_DMA+0x34>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e089      	b.n	8001e1c <HAL_ADC_Start_DMA+0x148>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	d172      	bne.n	8001e08 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fc8c 	bl	8002640 <ADC_Enable>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d165      	bne.n	8001dfe <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <HAL_ADC_Start_DMA+0x154>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d002      	beq.n	8001d56 <HAL_ADC_Start_DMA+0x82>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	e000      	b.n	8001d58 <HAL_ADC_Start_DMA+0x84>
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_ADC_Start_DMA+0x158>)
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d002      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f023 0206 	bic.w	r2, r3, #6
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_ADC_Start_DMA+0x15c>)
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_ADC_Start_DMA+0x160>)
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_ADC_Start_DMA+0x164>)
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	221c      	movs	r2, #28
 8001db0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0210 	orr.w	r2, r2, #16
 8001dc8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3340      	adds	r3, #64	; 0x40
 8001de4:	4619      	mov	r1, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f000 ffb3 	bl	8002d54 <HAL_DMA_Start_IT>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fddd 	bl	80019b6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001dfc:	e00d      	b.n	8001e1a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e06:	e008      	b.n	8001e1a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e14:	e001      	b.n	8001e1a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	50040300 	.word	0x50040300
 8001e28:	50040100 	.word	0x50040100
 8001e2c:	50040000 	.word	0x50040000
 8001e30:	080026f5 	.word	0x080026f5
 8001e34:	080027cd 	.word	0x080027cd
 8001e38:	080027e9 	.word	0x080027e9

08001e3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0b6      	sub	sp, #216	; 0xd8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x22>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e3c6      	b.n	8002614 <HAL_ADC_ConfigChannel+0x7b0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fda3 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 83a7 	bne.w	80025ee <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	3b02      	subs	r3, #2
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d81b      	bhi.n	8001eea <HAL_ADC_ConfigChannel+0x86>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <HAL_ADC_ConfigChannel+0x54>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ed1 	.word	0x08001ed1
 8001ec0:	08001ed9 	.word	0x08001ed9
 8001ec4:	08001ee1 	.word	0x08001ee1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	220c      	movs	r2, #12
 8001ecc:	605a      	str	r2, [r3, #4]
          break;
 8001ece:	e011      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2212      	movs	r2, #18
 8001ed4:	605a      	str	r2, [r3, #4]
          break;
 8001ed6:	e00d      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2218      	movs	r2, #24
 8001edc:	605a      	str	r2, [r3, #4]
          break;
 8001ede:	e009      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee6:	605a      	str	r2, [r3, #4]
          break;
 8001ee8:	e004      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2206      	movs	r2, #6
 8001eee:	605a      	str	r2, [r3, #4]
          break;
 8001ef0:	e000      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ef2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff fc59 	bl	80017b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd67 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001f10:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fd73 	bl	8001a04 <LL_ADC_INJ_IsConversionOngoing>
 8001f1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 81a6 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 81a1 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f7ff fc64 	bl	8001810 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	08db      	lsrs	r3, r3, #3
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d00a      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f7a:	f7ff fbb5 	bl	80016e8 <LL_ADC_SetOffset>
 8001f7e:	e17b      	b.n	8002278 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fbd2 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x148>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fbc7 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	f003 021f 	and.w	r2, r3, #31
 8001faa:	e01e      	b.n	8001fea <HAL_ADC_ConfigChannel+0x186>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fbbc 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d105      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x19e>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0e9b      	lsrs	r3, r3, #26
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	e018      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1d0>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800201a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800201e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e004      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800202a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fb8b 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb6f 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fb64 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	0e9b      	lsrs	r3, r3, #26
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	e01e      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x24c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fb59 	bl	8001730 <LL_ADC_GetOffsetChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e004      	b.n	80020ae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x264>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	e018      	b.n	80020fa <HAL_ADC_ConfigChannel+0x296>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020ec:	2320      	movs	r3, #32
 80020ee:	e004      	b.n	80020fa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d106      	bne.n	800210c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	2101      	movs	r1, #1
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fb28 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2102      	movs	r1, #2
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fb0c 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x2d4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2102      	movs	r1, #2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fb01 	bl	8001730 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	e01e      	b.n	8002176 <HAL_ADC_ConfigChannel+0x312>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff faf6 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800215a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800215e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e004      	b.n	8002174 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800216a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_ADC_ConfigChannel+0x32a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	e016      	b.n	80021bc <HAL_ADC_ConfigChannel+0x358>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80021ae:	2320      	movs	r3, #32
 80021b0:	e004      	b.n	80021bc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80021b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fac7 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2103      	movs	r1, #3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff faab 	bl	8001730 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x396>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2103      	movs	r1, #3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff faa0 	bl	8001730 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	e017      	b.n	800222a <HAL_ADC_ConfigChannel+0x3c6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2103      	movs	r1, #3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fa95 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002214:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x3de>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	e011      	b.n	8002266 <HAL_ADC_ConfigChannel+0x402>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002252:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800225e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2103      	movs	r1, #3
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fa72 	bl	800175c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fb87 	bl	8001990 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 813f 	bne.w	8002508 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fae6 	bl	8001868 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a8e      	ldr	r2, [pc, #568]	; (80024dc <HAL_ADC_ConfigChannel+0x678>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 8130 	bne.w	8002508 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x46c>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e019      	b.n	8002304 <HAL_ADC_ConfigChannel+0x4a0>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	bf94      	ite	ls
 80022fe:	2301      	movls	r3, #1
 8002300:	2300      	movhi	r3, #0
 8002302:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002304:	2b00      	cmp	r3, #0
 8002306:	d079      	beq.n	80023fc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x4c0>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	3301      	adds	r3, #1
 800231c:	069b      	lsls	r3, r3, #26
 800231e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002322:	e015      	b.n	8002350 <HAL_ADC_ConfigChannel+0x4ec>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002334:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x50c>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	e017      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x53c>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800237e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002380:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e003      	b.n	8002394 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800238c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	ea42 0103 	orr.w	r1, r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x562>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	051b      	lsls	r3, r3, #20
 80023c4:	e018      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x594>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	430b      	orrs	r3, r1
 80023fa:	e080      	b.n	80024fe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x5b4>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002416:	e015      	b.n	8002444 <HAL_ADC_ConfigChannel+0x5e0>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	069b      	lsls	r3, r3, #26
 8002440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x600>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	e017      	b.n	8002494 <HAL_ADC_ConfigChannel+0x630>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	61fb      	str	r3, [r7, #28]
  return result;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e003      	b.n	8002488 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	ea42 0103 	orr.w	r1, r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x65c>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	3b1e      	subs	r3, #30
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024be:	e01d      	b.n	80024fc <HAL_ADC_ConfigChannel+0x698>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	613b      	str	r3, [r7, #16]
  return result;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e005      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x684>
 80024dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	051b      	lsls	r3, r3, #20
 80024f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fc:	430b      	orrs	r3, r1
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	6892      	ldr	r2, [r2, #8]
 8002502:	4619      	mov	r1, r3
 8002504:	f7ff f984 	bl	8001810 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_ADC_ConfigChannel+0x7b8>)
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d079      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002514:	4842      	ldr	r0, [pc, #264]	; (8002620 <HAL_ADC_ConfigChannel+0x7bc>)
 8002516:	f7ff f8d9 	bl	80016cc <LL_ADC_GetCommonPathInternalCh>
 800251a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <HAL_ADC_ConfigChannel+0x7c0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d12b      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d125      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x6e4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3a      	ldr	r2, [pc, #232]	; (800262c <HAL_ADC_ConfigChannel+0x7c8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d15c      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800254c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002550:	4619      	mov	r1, r3
 8002552:	4833      	ldr	r0, [pc, #204]	; (8002620 <HAL_ADC_ConfigChannel+0x7bc>)
 8002554:	f7ff f8a7 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_ADC_ConfigChannel+0x7cc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	4a35      	ldr	r2, [pc, #212]	; (8002634 <HAL_ADC_ConfigChannel+0x7d0>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	099a      	lsrs	r2, r3, #6
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002570:	e002      	b.n	8002578 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3b01      	subs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800257e:	e040      	b.n	8002602 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <HAL_ADC_ConfigChannel+0x7d4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d118      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x758>
 800258a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800258e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d112      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x746>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_ADC_ConfigChannel+0x7c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12d      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	4619      	mov	r1, r3
 80025b4:	481a      	ldr	r0, [pc, #104]	; (8002620 <HAL_ADC_ConfigChannel+0x7bc>)
 80025b6:	f7ff f876 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ba:	e024      	b.n	8002606 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_ADC_ConfigChannel+0x7d8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d120      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11a      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a14      	ldr	r2, [pc, #80]	; (8002628 <HAL_ADC_ConfigChannel+0x7c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d115      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e4:	4619      	mov	r1, r3
 80025e6:	480e      	ldr	r0, [pc, #56]	; (8002620 <HAL_ADC_ConfigChannel+0x7bc>)
 80025e8:	f7ff f85d 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
 80025ec:	e00c      	b.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002600:	e002      	b.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002606:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002610:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002614:	4618      	mov	r0, r3
 8002616:	37d8      	adds	r7, #216	; 0xd8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	80080000 	.word	0x80080000
 8002620:	50040300 	.word	0x50040300
 8002624:	c7520000 	.word	0xc7520000
 8002628:	50040000 	.word	0x50040000
 800262c:	50040200 	.word	0x50040200
 8002630:	20000004 	.word	0x20000004
 8002634:	053e2d63 	.word	0x053e2d63
 8002638:	cb840000 	.word	0xcb840000
 800263c:	80000001 	.word	0x80000001

08002640 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff f99f 	bl	8001990 <LL_ADC_IsEnabled>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d146      	bne.n	80026e6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <ADC_Enable+0xb0>)
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e032      	b.n	80026e8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f96e 	bl	8001968 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800268c:	f7fe ffca 	bl	8001624 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002692:	e021      	b.n	80026d8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f979 	bl	8001990 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f95d 	bl	8001968 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ae:	f7fe ffb9 	bl	8001624 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d90d      	bls.n	80026d8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e007      	b.n	80026e8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d1d6      	bne.n	8002694 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	8000003f 	.word	0x8000003f

080026f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800270a:	2b00      	cmp	r3, #0
 800270c:	d14b      	bne.n	80027a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f830 	bl	8001792 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d032      	beq.n	800279e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12b      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11f      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
 800276a:	e018      	b.n	800279e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d111      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7fd ff4e 	bl	8000640 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027a4:	e00e      	b.n	80027c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fb4c 	bl	8001e50 <HAL_ADC_ErrorCallback>
}
 80027b8:	e004      	b.n	80027c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff fb2e 	bl	8001e3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff fb1e 	bl	8001e50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <LL_ADC_IsEnabled>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <LL_ADC_IsEnabled+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_IsEnabled+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_REG_IsConversionOngoing>:
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d101      	bne.n	800285a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b09f      	sub	sp, #124	; 0x7c
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002882:	2302      	movs	r3, #2
 8002884:	e08f      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d102      	bne.n	800289e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002898:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	e001      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e072      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ffbd 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 80028c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ffb7 	bl	8002842 <LL_ADC_REG_IsConversionOngoing>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d154      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d151      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02c      	beq.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fe:	035b      	lsls	r3, r3, #13
 8002900:	430b      	orrs	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002906:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002908:	4829      	ldr	r0, [pc, #164]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800290a:	f7ff ff87 	bl	800281c <LL_ADC_IsEnabled>
 800290e:	4604      	mov	r4, r0
 8002910:	4828      	ldr	r0, [pc, #160]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002912:	f7ff ff83 	bl	800281c <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	431c      	orrs	r4, r3
 800291a:	4828      	ldr	r0, [pc, #160]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800291c:	f7ff ff7e 	bl	800281c <LL_ADC_IsEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	4323      	orrs	r3, r4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d137      	bne.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002930:	f023 030f 	bic.w	r3, r3, #15
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	6811      	ldr	r1, [r2, #0]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	430a      	orrs	r2, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002942:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002944:	e028      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002952:	4817      	ldr	r0, [pc, #92]	; (80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002954:	f7ff ff62 	bl	800281c <LL_ADC_IsEnabled>
 8002958:	4604      	mov	r4, r0
 800295a:	4816      	ldr	r0, [pc, #88]	; (80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800295c:	f7ff ff5e 	bl	800281c <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	431c      	orrs	r4, r3
 8002964:	4815      	ldr	r0, [pc, #84]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002966:	f7ff ff59 	bl	800281c <LL_ADC_IsEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	4323      	orrs	r3, r4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d112      	bne.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800297a:	f023 030f 	bic.w	r3, r3, #15
 800297e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002980:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002982:	e009      	b.n	8002998 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002996:	e000      	b.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002998:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	377c      	adds	r7, #124	; 0x7c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	50040000 	.word	0x50040000
 80029b4:	50040100 	.word	0x50040100
 80029b8:	50040300 	.word	0x50040300
 80029bc:	50040200 	.word	0x50040200

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db0b      	blt.n	8002a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <__NVIC_EnableIRQ+0x38>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2001      	movs	r0, #1
 8002a46:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff29 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff3e 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff8e 	bl	8002ab4 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5d 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff31 	bl	8002a24 <__NVIC_EnableIRQ>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffa2 	bl	8002b1c <SysTick_Config>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e098      	b.n	8002d28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <HAL_DMA_Init+0x150>)
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d80f      	bhi.n	8002c22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <HAL_DMA_Init+0x154>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_DMA_Init+0x158>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_DMA_Init+0x15c>)
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c20:	e00e      	b.n	8002c40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <HAL_DMA_Init+0x160>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <HAL_DMA_Init+0x158>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_DMA_Init+0x164>)
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9a:	d039      	beq.n	8002d10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_DMA_Init+0x15c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d11a      	bne.n	8002cdc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_DMA_Init+0x168>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f003 031c 	and.w	r3, r3, #28
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4924      	ldr	r1, [pc, #144]	; (8002d4c <HAL_DMA_Init+0x168>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_DMA_Init+0x168>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f003 031c 	and.w	r3, r3, #28
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	491d      	ldr	r1, [pc, #116]	; (8002d4c <HAL_DMA_Init+0x168>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
 8002cda:	e019      	b.n	8002d10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_DMA_Init+0x16c>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f003 031c 	and.w	r3, r3, #28
 8002ce8:	210f      	movs	r1, #15
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	4917      	ldr	r1, [pc, #92]	; (8002d50 <HAL_DMA_Init+0x16c>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cf6:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_DMA_Init+0x16c>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f003 031c 	and.w	r3, r3, #28
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	4911      	ldr	r1, [pc, #68]	; (8002d50 <HAL_DMA_Init+0x16c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40020407 	.word	0x40020407
 8002d38:	bffdfff8 	.word	0xbffdfff8
 8002d3c:	cccccccd 	.word	0xcccccccd
 8002d40:	40020000 	.word	0x40020000
 8002d44:	bffdfbf8 	.word	0xbffdfbf8
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	400200a8 	.word	0x400200a8
 8002d50:	400204a8 	.word	0x400204a8

08002d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Start_IT+0x20>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e04b      	b.n	8002e0c <HAL_DMA_Start_IT+0xb8>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d13a      	bne.n	8002dfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f8e0 	bl	8002f72 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 020e 	orr.w	r2, r2, #14
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e00f      	b.n	8002dec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 020a 	orr.w	r2, r2, #10
 8002dea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e005      	b.n	8002e0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	f003 031c 	and.w	r3, r3, #28
 8002e34:	2204      	movs	r2, #4
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d026      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x7a>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d021      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0204 	bic.w	r2, r2, #4
 8002e66:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f003 021c 	and.w	r2, r3, #28
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2104      	movs	r1, #4
 8002e76:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d071      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e8c:	e06c      	b.n	8002f68 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f003 031c 	and.w	r3, r3, #28
 8002e96:	2202      	movs	r2, #2
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d02e      	beq.n	8002f00 <HAL_DMA_IRQHandler+0xec>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d029      	beq.n	8002f00 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 020a 	bic.w	r2, r2, #10
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f003 021c 	and.w	r2, r3, #28
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2102      	movs	r1, #2
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d038      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002efe:	e033      	b.n	8002f68 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f003 031c 	and.w	r3, r3, #28
 8002f08:	2208      	movs	r2, #8
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02a      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x156>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d025      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 020e 	bic.w	r2, r2, #14
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f003 021c 	and.w	r2, r3, #28
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
}
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f003 021c 	and.w	r2, r3, #28
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d108      	bne.n	8002fb6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fb4:	e007      	b.n	8002fc6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe2:	e17f      	b.n	80032e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8171 	beq.w	80032de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d00b      	beq.n	800301c <HAL_GPIO_Init+0x48>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003010:	2b11      	cmp	r3, #17
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b12      	cmp	r3, #18
 800301a:	d130      	bne.n	800307e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003052:	2201      	movs	r2, #1
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	091b      	lsrs	r3, r3, #4
 8003068:	f003 0201 	and.w	r2, r3, #1
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b03      	cmp	r3, #3
 8003088:	d118      	bne.n	80030bc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x128>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b12      	cmp	r3, #18
 80030fa:	d123      	bne.n	8003144 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	08da      	lsrs	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3208      	adds	r2, #8
 8003104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	6939      	ldr	r1, [r7, #16]
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80ac 	beq.w	80032de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_GPIO_Init+0x32c>)
 8003188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318a:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_GPIO_Init+0x32c>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6613      	str	r3, [r2, #96]	; 0x60
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <HAL_GPIO_Init+0x32c>)
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800319e:	4a59      	ldr	r2, [pc, #356]	; (8003304 <HAL_GPIO_Init+0x330>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x242>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4e      	ldr	r2, [pc, #312]	; (8003308 <HAL_GPIO_Init+0x334>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x23e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4d      	ldr	r2, [pc, #308]	; (800330c <HAL_GPIO_Init+0x338>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x23a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4c      	ldr	r2, [pc, #304]	; (8003310 <HAL_GPIO_Init+0x33c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x236>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <HAL_GPIO_Init+0x340>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x232>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4a      	ldr	r2, [pc, #296]	; (8003318 <HAL_GPIO_Init+0x344>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x22e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a49      	ldr	r2, [pc, #292]	; (800331c <HAL_GPIO_Init+0x348>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x22a>
 80031fa:	2306      	movs	r3, #6
 80031fc:	e00c      	b.n	8003218 <HAL_GPIO_Init+0x244>
 80031fe:	2307      	movs	r3, #7
 8003200:	e00a      	b.n	8003218 <HAL_GPIO_Init+0x244>
 8003202:	2305      	movs	r3, #5
 8003204:	e008      	b.n	8003218 <HAL_GPIO_Init+0x244>
 8003206:	2304      	movs	r3, #4
 8003208:	e006      	b.n	8003218 <HAL_GPIO_Init+0x244>
 800320a:	2303      	movs	r3, #3
 800320c:	e004      	b.n	8003218 <HAL_GPIO_Init+0x244>
 800320e:	2302      	movs	r3, #2
 8003210:	e002      	b.n	8003218 <HAL_GPIO_Init+0x244>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x244>
 8003216:	2300      	movs	r3, #0
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	f002 0203 	and.w	r2, r2, #3
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	4093      	lsls	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003228:	4936      	ldr	r1, [pc, #216]	; (8003304 <HAL_GPIO_Init+0x330>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	3302      	adds	r3, #2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_GPIO_Init+0x34c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800325a:	4a31      	ldr	r2, [pc, #196]	; (8003320 <HAL_GPIO_Init+0x34c>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003260:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_GPIO_Init+0x34c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003284:	4a26      	ldr	r2, [pc, #152]	; (8003320 <HAL_GPIO_Init+0x34c>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_GPIO_Init+0x34c>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_GPIO_Init+0x34c>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_GPIO_Init+0x34c>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_GPIO_Init+0x34c>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f47f ae78 	bne.w	8002fe4 <HAL_GPIO_Init+0x10>
  }
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40021000 	.word	0x40021000
 8003304:	40010000 	.word	0x40010000
 8003308:	48000400 	.word	0x48000400
 800330c:	48000800 	.word	0x48000800
 8003310:	48000c00 	.word	0x48000c00
 8003314:	48001000 	.word	0x48001000
 8003318:	48001400 	.word	0x48001400
 800331c:	48001800 	.word	0x48001800
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003340:	e002      	b.n	8003348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43d9      	mvns	r1, r3
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	400b      	ands	r3, r1
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40007000 	.word	0x40007000

080033a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b2:	d130      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d038      	beq.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2232      	movs	r2, #50	; 0x32
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9b      	lsrs	r3, r3, #18
 80033e4:	3301      	adds	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e8:	e002      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d102      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f2      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d110      	bne.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e00f      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d007      	beq.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800342c:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40007000 	.word	0x40007000
 8003448:	20000004 	.word	0x20000004
 800344c:	431bde83 	.word	0x431bde83

08003450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e3d4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4ba1      	ldr	r3, [pc, #644]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80e4 	beq.w	800364c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_RCC_OscConfig+0x4a>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	f040 808b 	bne.w	80035a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 8087 	bne.w	80035a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800349a:	4b93      	ldr	r3, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e3ac      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_RCC_OscConfig+0x7c>
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_OscConfig+0x88>
 80034cc:	4b86      	ldr	r3, [pc, #536]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d223      	bcs.n	8003524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fd3f 	bl	8003f64 <RCC_SetFlashLatencyFromMSIRange>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e38d      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f0:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4977      	ldr	r1, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	4972      	ldr	r1, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e025      	b.n	8003570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6f      	ldr	r2, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003542:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4965      	ldr	r1, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fcff 	bl	8003f64 <RCC_SetFlashLatencyFromMSIRange>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e34d      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003570:	f000 fc36 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003574:	4601      	mov	r1, r0
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	4a5a      	ldr	r2, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x29c>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa21 f303 	lsr.w	r3, r1, r3
 800358c:	4a58      	ldr	r2, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x2a0>)
 800358e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <HAL_RCC_OscConfig+0x2a4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fff5 	bl	8001584 <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d052      	beq.n	800364a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	e331      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d032      	beq.n	8003616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035bc:	f7fe f832 	bl	8001624 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c4:	f7fe f82e 	bl	8001624 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e31a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a40      	ldr	r2, [pc, #256]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	493b      	ldr	r1, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4936      	ldr	r1, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e01a      	b.n	800364c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003622:	f7fd ffff 	bl	8001624 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800362a:	f7fd fffb 	bl	8001624 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e2e7      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x1da>
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800364a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d074      	beq.n	8003742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b08      	cmp	r3, #8
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x21a>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d10e      	bne.n	8003682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d064      	beq.n	8003740 <HAL_RCC_OscConfig+0x2f0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d160      	bne.n	8003740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e2c4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x24a>
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e01d      	b.n	80036d6 <HAL_RCC_OscConfig+0x286>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a2:	d10c      	bne.n	80036be <HAL_RCC_OscConfig+0x26e>
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e00b      	b.n	80036d6 <HAL_RCC_OscConfig+0x286>
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01c      	beq.n	8003718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd ffa1 	bl	8001624 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e4:	e011      	b.n	800370a <HAL_RCC_OscConfig+0x2ba>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08007118 	.word	0x08007118
 80036f0:	20000004 	.word	0x20000004
 80036f4:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fd ff94 	bl	8001624 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e280      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370a:	4baf      	ldr	r3, [pc, #700]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x2a8>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd ff84 	bl	8001624 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd ff80 	bl	8001624 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e26c      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003732:	4ba5      	ldr	r3, [pc, #660]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x2d0>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d060      	beq.n	8003810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d005      	beq.n	8003760 <HAL_RCC_OscConfig+0x310>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d119      	bne.n	800378e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d116      	bne.n	800378e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003760:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x328>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e249      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b93      	ldr	r3, [pc, #588]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	4990      	ldr	r1, [pc, #576]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	e040      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d023      	beq.n	80037de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003796:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a8b      	ldr	r2, [pc, #556]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd ff3f 	bl	8001624 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fd ff3b 	bl	8001624 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e227      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	497c      	ldr	r1, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
 80037dc:	e018      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a79      	ldr	r2, [pc, #484]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd ff1b 	bl	8001624 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fd ff17 	bl	8001624 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e203      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003804:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01c      	beq.n	800385e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	4a67      	ldr	r2, [pc, #412]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fef6 	bl	8001624 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383c:	f7fd fef2 	bl	8001624 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e1de      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384e:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <HAL_RCC_OscConfig+0x3ec>
 800385c:	e01b      	b.n	8003896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fed9 	bl	8001624 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003876:	f7fd fed5 	bl	8001624 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1c1      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800388a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ef      	bne.n	8003876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a6 	beq.w	80039f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a8:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d0:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d118      	bne.n	800390e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e8:	f7fd fe9c 	bl	8001624 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fd fe98 	bl	8001624 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e184      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x4d8>
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003926:	e024      	b.n	8003972 <HAL_RCC_OscConfig+0x522>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b05      	cmp	r3, #5
 800392e:	d110      	bne.n	8003952 <HAL_RCC_OscConfig+0x502>
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003950:	e00f      	b.n	8003972 <HAL_RCC_OscConfig+0x522>
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd fe53 	bl	8001624 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd fe4f 	bl	8001624 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e139      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ed      	beq.n	8003982 <HAL_RCC_OscConfig+0x532>
 80039a6:	e01a      	b.n	80039de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fe3c 	bl	8001624 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ae:	e00f      	b.n	80039d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fe38 	bl	8001624 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d906      	bls.n	80039d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e122      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d0:	4b90      	ldr	r3, [pc, #576]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e8      	bne.n	80039b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039de:	7ffb      	ldrb	r3, [r7, #31]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	4b8b      	ldr	r3, [pc, #556]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	4a8a      	ldr	r2, [pc, #552]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8108 	beq.w	8003c0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	f040 80d0 	bne.w	8003ba4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a04:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d130      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	3b01      	subs	r3, #1
 8003a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d127      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d11f      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a44:	2a07      	cmp	r2, #7
 8003a46:	bf14      	ite	ne
 8003a48:	2201      	movne	r2, #1
 8003a4a:	2200      	moveq	r2, #0
 8003a4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d109      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d06e      	beq.n	8003b58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b0c      	cmp	r3, #12
 8003a7e:	d069      	beq.n	8003b54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a80:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a8c:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b7      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa8:	f7fd fdbc 	bl	8001624 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fdb8 	bl	8001624 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0a4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x7c8>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ae8:	0212      	lsls	r2, r2, #8
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003af0:	0852      	lsrs	r2, r2, #1
 8003af2:	3a01      	subs	r2, #1
 8003af4:	0552      	lsls	r2, r2, #21
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003afc:	0852      	lsrs	r2, r2, #1
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0652      	lsls	r2, r2, #25
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b08:	0912      	lsrs	r2, r2, #4
 8003b0a:	0452      	lsls	r2, r2, #17
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	4941      	ldr	r1, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b20:	4b3c      	ldr	r3, [pc, #240]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b2c:	f7fd fd7a 	bl	8001624 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fd76 	bl	8001624 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e062      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b52:	e05a      	b.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e059      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b58:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d152      	bne.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b7c:	f7fd fd52 	bl	8001624 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd fd4e 	bl	8001624 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e03a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x734>
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d02d      	beq.n	8003c06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003bb6:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bc8:	f023 0303 	bic.w	r3, r3, #3
 8003bcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a10      	ldr	r2, [pc, #64]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fd21 	bl	8001624 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fd fd1d 	bl	8001624 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e009      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x796>
 8003c04:	e001      	b.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	f99d808c 	.word	0xf99d808c

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0c8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 0207 	bic.w	r2, r3, #7
 8003c46:	4961      	ldr	r1, [pc, #388]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b0      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d04c      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d121      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e09e      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e092      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e086      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e07e      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 0203 	bic.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	493f      	ldr	r1, [pc, #252]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd6:	f7fd fca5 	bl	8001624 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cde:	f7fd fca1 	bl	8001624 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e066      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 020c 	and.w	r2, r3, #12
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d1eb      	bne.n	8003cde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d210      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4924      	ldr	r1, [pc, #144]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e036      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4918      	ldr	r1, [pc, #96]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4910      	ldr	r1, [pc, #64]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d92:	f000 f825 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d96:	4601      	mov	r1, r0
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	fa21 f303 	lsr.w	r3, r1, r3
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fbe4 	bl	8001584 <HAL_InitTick>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08007118 	.word	0x08007118
 8003dd8:	20000004 	.word	0x20000004
 8003ddc:	20000008 	.word	0x20000008

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x34>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d121      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d11e      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e14:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e20:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e005      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e30:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e58:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e004      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d133      	bne.n	8003ed6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0xa4>
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0xaa>
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e86:	617b      	str	r3, [r7, #20]
      break;
 8003e88:	e005      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e8c:	617b      	str	r3, [r7, #20]
      break;
 8003e8e:	e002      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	617b      	str	r3, [r7, #20]
      break;
 8003e94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	fb02 f203 	mul.w	r2, r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0e5b      	lsrs	r3, r3, #25
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3724      	adds	r7, #36	; 0x24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	08007130 	.word	0x08007130
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	007a1200 	.word	0x007a1200

08003ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000004 	.word	0x20000004

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f10:	f7ff fff0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f14:	4601      	mov	r1, r0
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08007128 	.word	0x08007128

08003f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f3c:	f7ff ffda 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f40:	4601      	mov	r1, r0
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0adb      	lsrs	r3, r3, #11
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08007128 	.word	0x08007128

08003f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f70:	4b2a      	ldr	r3, [pc, #168]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f7c:	f7ff fa04 	bl	8003388 <HAL_PWREx_GetVoltageRange>
 8003f80:	6178      	str	r0, [r7, #20]
 8003f82:	e014      	b.n	8003fae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	4a24      	ldr	r2, [pc, #144]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f9c:	f7ff f9f4 	bl	8003388 <HAL_PWREx_GetVoltageRange>
 8003fa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	4a1d      	ldr	r2, [pc, #116]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb4:	d10b      	bne.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d919      	bls.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2ba0      	cmp	r3, #160	; 0xa0
 8003fc0:	d902      	bls.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e013      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e010      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d902      	bls.n	8003fda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	e00a      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d102      	bne.n	8003fe6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e004      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b70      	cmp	r3, #112	; 0x70
 8003fea:	d101      	bne.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fec:	2301      	movs	r3, #1
 8003fee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 0207 	bic.w	r2, r3, #7
 8003ff8:	4909      	ldr	r1, [pc, #36]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004000:	4b07      	ldr	r3, [pc, #28]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	40022000 	.word	0x40022000

08004024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800402c:	2300      	movs	r3, #0
 800402e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004030:	2300      	movs	r3, #0
 8004032:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403c:	2b00      	cmp	r3, #0
 800403e:	d03f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004048:	d01c      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d802      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004054:	e01f      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800405c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004060:	d01c      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004062:	e018      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004064:	4b85      	ldr	r3, [pc, #532]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a84      	ldr	r2, [pc, #528]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004070:	e015      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fab9 	bl	80045f0 <RCCEx_PLLSAI1_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3320      	adds	r3, #32
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fba0 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	74fb      	strb	r3, [r7, #19]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b2:	4972      	ldr	r1, [pc, #456]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d03f      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d4:	d01c      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80040d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040da:	d802      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80040e0:	e01f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e6:	d003      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80040e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040ec:	d01c      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80040ee:	e018      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040f0:	4b62      	ldr	r3, [pc, #392]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a61      	ldr	r2, [pc, #388]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040fc:	e015      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fa73 	bl	80045f0 <RCCEx_PLLSAI1_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800410e:	e00c      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3320      	adds	r3, #32
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fb5a 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	74fb      	strb	r3, [r7, #19]
      break;
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004130:	4b52      	ldr	r3, [pc, #328]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413e:	494f      	ldr	r1, [pc, #316]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004146:	e001      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a0 	beq.w	800429a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004174:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	4a40      	ldr	r2, [pc, #256]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800417a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
 8004180:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418c:	2301      	movs	r3, #1
 800418e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004190:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3a      	ldr	r2, [pc, #232]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800419c:	f7fd fa42 	bl	8001624 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a2:	e009      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a4:	f7fd fa3e 	bl	8001624 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	74fb      	strb	r3, [r7, #19]
        break;
 80041b6:	e005      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ef      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d15c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ca:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d019      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a20      	ldr	r2, [pc, #128]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd f9fd 	bl	8001624 <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422c:	e00b      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fd f9f9 	bl	8001624 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d902      	bls.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	74fb      	strb	r3, [r7, #19]
            break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0ec      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426a:	4904      	ldr	r1, [pc, #16]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004272:	e009      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	74bb      	strb	r3, [r7, #18]
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004288:	7c7b      	ldrb	r3, [r7, #17]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428e:	4b9e      	ldr	r3, [pc, #632]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4a9d      	ldr	r2, [pc, #628]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a6:	4b98      	ldr	r3, [pc, #608]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f023 0203 	bic.w	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	4994      	ldr	r1, [pc, #592]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c8:	4b8f      	ldr	r3, [pc, #572]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 020c 	bic.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	498c      	ldr	r1, [pc, #560]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ea:	4b87      	ldr	r3, [pc, #540]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	4983      	ldr	r1, [pc, #524]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800430c:	4b7e      	ldr	r3, [pc, #504]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	497b      	ldr	r1, [pc, #492]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800432e:	4b76      	ldr	r3, [pc, #472]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433c:	4972      	ldr	r1, [pc, #456]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004350:	4b6d      	ldr	r3, [pc, #436]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	496a      	ldr	r1, [pc, #424]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004372:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	4961      	ldr	r1, [pc, #388]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004394:	4b5c      	ldr	r3, [pc, #368]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	4959      	ldr	r1, [pc, #356]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b6:	4b54      	ldr	r3, [pc, #336]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	4950      	ldr	r1, [pc, #320]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043d8:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	4948      	ldr	r1, [pc, #288]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	493f      	ldr	r1, [pc, #252]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d028      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800441c:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442a:	4937      	ldr	r1, [pc, #220]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443a:	d106      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a31      	ldr	r2, [pc, #196]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004446:	60d3      	str	r3, [r2, #12]
 8004448:	e011      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004452:	d10c      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f8c8 	bl	80045f0 <RCCEx_PLLSAI1_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d028      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	491f      	ldr	r1, [pc, #124]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004498:	d106      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a4:	60d3      	str	r3, [r2, #12]
 80044a6:	e011      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2101      	movs	r1, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f899 	bl	80045f0 <RCCEx_PLLSAI1_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	4908      	ldr	r1, [pc, #32]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f6:	d109      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a02      	ldr	r2, [pc, #8]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004502:	60d3      	str	r3, [r2, #12]
 8004504:	e014      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004514:	d10c      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f000 f867 	bl	80045f0 <RCCEx_PLLSAI1_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02f      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800453c:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454a:	4928      	ldr	r1, [pc, #160]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800455a:	d10d      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f844 	bl	80045f0 <RCCEx_PLLSAI1_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d014      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	74bb      	strb	r3, [r7, #18]
 8004576:	e011      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3320      	adds	r3, #32
 8004586:	2102      	movs	r1, #2
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f921 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b6:	490d      	ldr	r1, [pc, #52]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045da:	4904      	ldr	r1, [pc, #16]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000

080045f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045fe:	4b73      	ldr	r3, [pc, #460]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d018      	beq.n	800463c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800460a:	4b70      	ldr	r3, [pc, #448]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0203 	and.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d10d      	bne.n	8004636 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
       ||
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004622:	4b6a      	ldr	r3, [pc, #424]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
       ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d044      	beq.n	80046c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
 800463a:	e041      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d00c      	beq.n	800465e <RCCEx_PLLSAI1_Config+0x6e>
 8004644:	2b03      	cmp	r3, #3
 8004646:	d013      	beq.n	8004670 <RCCEx_PLLSAI1_Config+0x80>
 8004648:	2b01      	cmp	r3, #1
 800464a:	d120      	bne.n	800468e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800464c:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11d      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465c:	e01a      	b.n	8004694 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466e:	e013      	b.n	8004698 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004670:	4b56      	ldr	r3, [pc, #344]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10f      	bne.n	800469c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800468c:	e006      	b.n	800469c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      break;
 8004692:	e004      	b.n	800469e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800469c:	bf00      	nop
    }

    if(status == HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046a4:	4b49      	ldr	r3, [pc, #292]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	430b      	orrs	r3, r1
 80046ba:	4944      	ldr	r1, [pc, #272]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d17d      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80046cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d2:	f7fc ffa7 	bl	8001624 <HAL_GetTick>
 80046d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d8:	e009      	b.n	80046ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046da:	f7fc ffa3 	bl	8001624 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d902      	bls.n	80046ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	73fb      	strb	r3, [r7, #15]
        break;
 80046ec:	e005      	b.n	80046fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ee:	4b37      	ldr	r3, [pc, #220]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1ef      	bne.n	80046da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d160      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d111      	bne.n	800472a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004706:	4b31      	ldr	r3, [pc, #196]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800470e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6892      	ldr	r2, [r2, #8]
 8004716:	0211      	lsls	r1, r2, #8
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68d2      	ldr	r2, [r2, #12]
 800471c:	0912      	lsrs	r2, r2, #4
 800471e:	0452      	lsls	r2, r2, #17
 8004720:	430a      	orrs	r2, r1
 8004722:	492a      	ldr	r1, [pc, #168]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
 8004728:	e027      	b.n	800477a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d112      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	0852      	lsrs	r2, r2, #1
 8004748:	3a01      	subs	r2, #1
 800474a:	0552      	lsls	r2, r2, #21
 800474c:	430a      	orrs	r2, r1
 800474e:	491f      	ldr	r1, [pc, #124]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
 8004754:	e011      	b.n	800477a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800475e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	0211      	lsls	r1, r2, #8
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6952      	ldr	r2, [r2, #20]
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	3a01      	subs	r2, #1
 8004770:	0652      	lsls	r2, r2, #25
 8004772:	430a      	orrs	r2, r1
 8004774:	4915      	ldr	r1, [pc, #84]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004784:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fc ff4d 	bl	8001624 <HAL_GetTick>
 800478a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800478c:	e009      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800478e:	f7fc ff49 	bl	8001624 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d902      	bls.n	80047a2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	73fb      	strb	r3, [r7, #15]
          break;
 80047a0:	e005      	b.n	80047ae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ef      	beq.n	800478e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047de:	4b68      	ldr	r3, [pc, #416]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d018      	beq.n	800481c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0203 	and.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d10d      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
       ||
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
       ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d044      	beq.n	80048a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e041      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d00c      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x6e>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d013      	beq.n	8004850 <RCCEx_PLLSAI2_Config+0x80>
 8004828:	2b01      	cmp	r3, #1
 800482a:	d120      	bne.n	800486e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482c:	4b54      	ldr	r3, [pc, #336]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11d      	bne.n	8004874 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483c:	e01a      	b.n	8004874 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800483e:	4b50      	ldr	r3, [pc, #320]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d116      	bne.n	8004878 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484e:	e013      	b.n	8004878 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10f      	bne.n	800487c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486c:	e006      	b.n	800487c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
      break;
 8004872:	e004      	b.n	800487e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004874:	bf00      	nop
 8004876:	e002      	b.n	800487e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004878:	bf00      	nop
 800487a:	e000      	b.n	800487e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800487c:	bf00      	nop
    }

    if(status == HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004884:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	3b01      	subs	r3, #1
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	430b      	orrs	r3, r1
 800489a:	4939      	ldr	r1, [pc, #228]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d167      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b2:	f7fc feb7 	bl	8001624 <HAL_GetTick>
 80048b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b8:	e009      	b.n	80048ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048ba:	f7fc feb3 	bl	8001624 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	73fb      	strb	r3, [r7, #15]
        break;
 80048cc:	e005      	b.n	80048da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ce:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d14a      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d111      	bne.n	800490a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6892      	ldr	r2, [r2, #8]
 80048f6:	0211      	lsls	r1, r2, #8
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68d2      	ldr	r2, [r2, #12]
 80048fc:	0912      	lsrs	r2, r2, #4
 80048fe:	0452      	lsls	r2, r2, #17
 8004900:	430a      	orrs	r2, r1
 8004902:	491f      	ldr	r1, [pc, #124]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	614b      	str	r3, [r1, #20]
 8004908:	e011      	b.n	800492e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6892      	ldr	r2, [r2, #8]
 800491a:	0211      	lsls	r1, r2, #8
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6912      	ldr	r2, [r2, #16]
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	3a01      	subs	r2, #1
 8004924:	0652      	lsls	r2, r2, #25
 8004926:	430a      	orrs	r2, r1
 8004928:	4915      	ldr	r1, [pc, #84]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800492e:	4b14      	ldr	r3, [pc, #80]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fc fe73 	bl	8001624 <HAL_GetTick>
 800493e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004940:	e009      	b.n	8004956 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004942:	f7fc fe6f 	bl	8001624 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d902      	bls.n	8004956 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	73fb      	strb	r3, [r7, #15]
          break;
 8004954:	e005      	b.n	8004962 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ef      	beq.n	8004942 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	4903      	ldr	r1, [pc, #12]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e095      	b.n	8004ac2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d009      	beq.n	80049bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	61da      	str	r2, [r3, #28]
 80049ae:	e005      	b.n	80049bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fc fc4c 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049fc:	d902      	bls.n	8004a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e002      	b.n	8004a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a12:	d007      	beq.n	8004a24 <HAL_SPI_Init+0xa0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a1c:	d002      	beq.n	8004a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	ea42 0103 	orr.w	r1, r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	0c1b      	lsrs	r3, r3, #16
 8004a80:	f003 0204 	and.w	r2, r3, #4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004aa0:	ea42 0103 	orr.w	r1, r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e040      	b.n	8004b5e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fc fc21 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2224      	movs	r2, #36	; 0x24
 8004af6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8bf 	bl	8004c8c <UART_SetConfig>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e022      	b.n	8004b5e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fb3d 	bl	80051a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fbc4 	bl	80052e4 <UART_CheckIdleState>
 8004b5c:	4603      	mov	r3, r0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b08a      	sub	sp, #40	; 0x28
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 8081 	bne.w	8004c82 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_UART_Transmit+0x26>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e079      	b.n	8004c84 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Transmit+0x38>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e072      	b.n	8004c84 <HAL_UART_Transmit+0x11e>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2221      	movs	r2, #33	; 0x21
 8004bb0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004bb2:	f7fc fd37 	bl	8001624 <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d108      	bne.n	8004be4 <HAL_UART_Transmit+0x7e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e003      	b.n	8004bec <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004bf4:	e02d      	b.n	8004c52 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2180      	movs	r1, #128	; 0x80
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fbb4 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e039      	b.n	8004c84 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	881a      	ldrh	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c22:	b292      	uxth	r2, r2
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	3302      	adds	r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	e008      	b.n	8004c40 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b292      	uxth	r2, r2
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1cb      	bne.n	8004bf6 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2140      	movs	r1, #64	; 0x40
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fb80 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e005      	b.n	8004c84 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c90:	b088      	sub	sp, #32
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4bac      	ldr	r3, [pc, #688]	; (8004f6c <UART_SetConfig+0x2e0>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	69f9      	ldr	r1, [r7, #28]
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4aa2      	ldr	r2, [pc, #648]	; (8004f70 <UART_SetConfig+0x2e4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a99      	ldr	r2, [pc, #612]	; (8004f74 <UART_SetConfig+0x2e8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d121      	bne.n	8004d58 <UART_SetConfig+0xcc>
 8004d14:	4b98      	ldr	r3, [pc, #608]	; (8004f78 <UART_SetConfig+0x2ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d816      	bhi.n	8004d50 <UART_SetConfig+0xc4>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x9c>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d45 	.word	0x08004d45
 8004d30:	08004d3f 	.word	0x08004d3f
 8004d34:	08004d4b 	.word	0x08004d4b
 8004d38:	2301      	movs	r3, #1
 8004d3a:	76fb      	strb	r3, [r7, #27]
 8004d3c:	e0e8      	b.n	8004f10 <UART_SetConfig+0x284>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	76fb      	strb	r3, [r7, #27]
 8004d42:	e0e5      	b.n	8004f10 <UART_SetConfig+0x284>
 8004d44:	2304      	movs	r3, #4
 8004d46:	76fb      	strb	r3, [r7, #27]
 8004d48:	e0e2      	b.n	8004f10 <UART_SetConfig+0x284>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	76fb      	strb	r3, [r7, #27]
 8004d4e:	e0df      	b.n	8004f10 <UART_SetConfig+0x284>
 8004d50:	2310      	movs	r3, #16
 8004d52:	76fb      	strb	r3, [r7, #27]
 8004d54:	bf00      	nop
 8004d56:	e0db      	b.n	8004f10 <UART_SetConfig+0x284>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a87      	ldr	r2, [pc, #540]	; (8004f7c <UART_SetConfig+0x2f0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d134      	bne.n	8004dcc <UART_SetConfig+0x140>
 8004d62:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <UART_SetConfig+0x2ec>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	d829      	bhi.n	8004dc4 <UART_SetConfig+0x138>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0xec>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004dad 	.word	0x08004dad
 8004d7c:	08004dc5 	.word	0x08004dc5
 8004d80:	08004dc5 	.word	0x08004dc5
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	08004db9 	.word	0x08004db9
 8004d8c:	08004dc5 	.word	0x08004dc5
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004db3 	.word	0x08004db3
 8004d9c:	08004dc5 	.word	0x08004dc5
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dc5 	.word	0x08004dc5
 8004da8:	08004dbf 	.word	0x08004dbf
 8004dac:	2300      	movs	r3, #0
 8004dae:	76fb      	strb	r3, [r7, #27]
 8004db0:	e0ae      	b.n	8004f10 <UART_SetConfig+0x284>
 8004db2:	2302      	movs	r3, #2
 8004db4:	76fb      	strb	r3, [r7, #27]
 8004db6:	e0ab      	b.n	8004f10 <UART_SetConfig+0x284>
 8004db8:	2304      	movs	r3, #4
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	e0a8      	b.n	8004f10 <UART_SetConfig+0x284>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	76fb      	strb	r3, [r7, #27]
 8004dc2:	e0a5      	b.n	8004f10 <UART_SetConfig+0x284>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	bf00      	nop
 8004dca:	e0a1      	b.n	8004f10 <UART_SetConfig+0x284>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6b      	ldr	r2, [pc, #428]	; (8004f80 <UART_SetConfig+0x2f4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d120      	bne.n	8004e18 <UART_SetConfig+0x18c>
 8004dd6:	4b68      	ldr	r3, [pc, #416]	; (8004f78 <UART_SetConfig+0x2ec>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d00f      	beq.n	8004e04 <UART_SetConfig+0x178>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d802      	bhi.n	8004dee <UART_SetConfig+0x162>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <UART_SetConfig+0x16c>
 8004dec:	e010      	b.n	8004e10 <UART_SetConfig+0x184>
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d005      	beq.n	8004dfe <UART_SetConfig+0x172>
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d009      	beq.n	8004e0a <UART_SetConfig+0x17e>
 8004df6:	e00b      	b.n	8004e10 <UART_SetConfig+0x184>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	76fb      	strb	r3, [r7, #27]
 8004dfc:	e088      	b.n	8004f10 <UART_SetConfig+0x284>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	76fb      	strb	r3, [r7, #27]
 8004e02:	e085      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e04:	2304      	movs	r3, #4
 8004e06:	76fb      	strb	r3, [r7, #27]
 8004e08:	e082      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	76fb      	strb	r3, [r7, #27]
 8004e0e:	e07f      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e10:	2310      	movs	r3, #16
 8004e12:	76fb      	strb	r3, [r7, #27]
 8004e14:	bf00      	nop
 8004e16:	e07b      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a59      	ldr	r2, [pc, #356]	; (8004f84 <UART_SetConfig+0x2f8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d120      	bne.n	8004e64 <UART_SetConfig+0x1d8>
 8004e22:	4b55      	ldr	r3, [pc, #340]	; (8004f78 <UART_SetConfig+0x2ec>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d00f      	beq.n	8004e50 <UART_SetConfig+0x1c4>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d802      	bhi.n	8004e3a <UART_SetConfig+0x1ae>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <UART_SetConfig+0x1b8>
 8004e38:	e010      	b.n	8004e5c <UART_SetConfig+0x1d0>
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d005      	beq.n	8004e4a <UART_SetConfig+0x1be>
 8004e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e40:	d009      	beq.n	8004e56 <UART_SetConfig+0x1ca>
 8004e42:	e00b      	b.n	8004e5c <UART_SetConfig+0x1d0>
 8004e44:	2300      	movs	r3, #0
 8004e46:	76fb      	strb	r3, [r7, #27]
 8004e48:	e062      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	76fb      	strb	r3, [r7, #27]
 8004e4e:	e05f      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e50:	2304      	movs	r3, #4
 8004e52:	76fb      	strb	r3, [r7, #27]
 8004e54:	e05c      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e56:	2308      	movs	r3, #8
 8004e58:	76fb      	strb	r3, [r7, #27]
 8004e5a:	e059      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	76fb      	strb	r3, [r7, #27]
 8004e60:	bf00      	nop
 8004e62:	e055      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a47      	ldr	r2, [pc, #284]	; (8004f88 <UART_SetConfig+0x2fc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d124      	bne.n	8004eb8 <UART_SetConfig+0x22c>
 8004e6e:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <UART_SetConfig+0x2ec>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7c:	d012      	beq.n	8004ea4 <UART_SetConfig+0x218>
 8004e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e82:	d802      	bhi.n	8004e8a <UART_SetConfig+0x1fe>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <UART_SetConfig+0x20c>
 8004e88:	e012      	b.n	8004eb0 <UART_SetConfig+0x224>
 8004e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8e:	d006      	beq.n	8004e9e <UART_SetConfig+0x212>
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e94:	d009      	beq.n	8004eaa <UART_SetConfig+0x21e>
 8004e96:	e00b      	b.n	8004eb0 <UART_SetConfig+0x224>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	e038      	b.n	8004f10 <UART_SetConfig+0x284>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	76fb      	strb	r3, [r7, #27]
 8004ea2:	e035      	b.n	8004f10 <UART_SetConfig+0x284>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	76fb      	strb	r3, [r7, #27]
 8004ea8:	e032      	b.n	8004f10 <UART_SetConfig+0x284>
 8004eaa:	2308      	movs	r3, #8
 8004eac:	76fb      	strb	r3, [r7, #27]
 8004eae:	e02f      	b.n	8004f10 <UART_SetConfig+0x284>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	76fb      	strb	r3, [r7, #27]
 8004eb4:	bf00      	nop
 8004eb6:	e02b      	b.n	8004f10 <UART_SetConfig+0x284>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <UART_SetConfig+0x2e4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d124      	bne.n	8004f0c <UART_SetConfig+0x280>
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <UART_SetConfig+0x2ec>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed0:	d012      	beq.n	8004ef8 <UART_SetConfig+0x26c>
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed6:	d802      	bhi.n	8004ede <UART_SetConfig+0x252>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <UART_SetConfig+0x260>
 8004edc:	e012      	b.n	8004f04 <UART_SetConfig+0x278>
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d006      	beq.n	8004ef2 <UART_SetConfig+0x266>
 8004ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee8:	d009      	beq.n	8004efe <UART_SetConfig+0x272>
 8004eea:	e00b      	b.n	8004f04 <UART_SetConfig+0x278>
 8004eec:	2300      	movs	r3, #0
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	e00e      	b.n	8004f10 <UART_SetConfig+0x284>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	76fb      	strb	r3, [r7, #27]
 8004ef6:	e00b      	b.n	8004f10 <UART_SetConfig+0x284>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	76fb      	strb	r3, [r7, #27]
 8004efc:	e008      	b.n	8004f10 <UART_SetConfig+0x284>
 8004efe:	2308      	movs	r3, #8
 8004f00:	76fb      	strb	r3, [r7, #27]
 8004f02:	e005      	b.n	8004f10 <UART_SetConfig+0x284>
 8004f04:	2310      	movs	r3, #16
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	bf00      	nop
 8004f0a:	e001      	b.n	8004f10 <UART_SetConfig+0x284>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <UART_SetConfig+0x2e4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	f040 8087 	bne.w	800502a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f1c:	7efb      	ldrb	r3, [r7, #27]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d836      	bhi.n	8004f90 <UART_SetConfig+0x304>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0x29c>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f91 	.word	0x08004f91
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f91 	.word	0x08004f91
 8004f38:	08004f5b 	.word	0x08004f5b
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004f91 	.word	0x08004f91
 8004f44:	08004f91 	.word	0x08004f91
 8004f48:	08004f63 	.word	0x08004f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7fe ffde 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004f50:	6178      	str	r0, [r7, #20]
        break;
 8004f52:	e022      	b.n	8004f9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <UART_SetConfig+0x300>)
 8004f56:	617b      	str	r3, [r7, #20]
        break;
 8004f58:	e01f      	b.n	8004f9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5a:	f7fe ff41 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8004f5e:	6178      	str	r0, [r7, #20]
        break;
 8004f60:	e01b      	b.n	8004f9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f66:	617b      	str	r3, [r7, #20]
        break;
 8004f68:	e017      	b.n	8004f9a <UART_SetConfig+0x30e>
 8004f6a:	bf00      	nop
 8004f6c:	efff69f3 	.word	0xefff69f3
 8004f70:	40008000 	.word	0x40008000
 8004f74:	40013800 	.word	0x40013800
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40004400 	.word	0x40004400
 8004f80:	40004800 	.word	0x40004800
 8004f84:	40004c00 	.word	0x40004c00
 8004f88:	40005000 	.word	0x40005000
 8004f8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	76bb      	strb	r3, [r7, #26]
        break;
 8004f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80f1 	beq.w	8005184 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d305      	bcc.n	8004fbe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d902      	bls.n	8004fc4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	76bb      	strb	r3, [r7, #26]
 8004fc2:	e0df      	b.n	8005184 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	0214      	lsls	r4, r2, #8
 8004fd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004fda:	020b      	lsls	r3, r1, #8
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6852      	ldr	r2, [r2, #4]
 8004fe0:	0852      	lsrs	r2, r2, #1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	eb13 0b01 	adds.w	fp, r3, r1
 8004fec:	eb44 0c02 	adc.w	ip, r4, r2
 8004ff0:	4658      	mov	r0, fp
 8004ff2:	4661      	mov	r1, ip
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f04f 0400 	mov.w	r4, #0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4623      	mov	r3, r4
 8005000:	f7fb f99e 	bl	8000340 <__aeabi_uldivmod>
 8005004:	4603      	mov	r3, r0
 8005006:	460c      	mov	r4, r1
 8005008:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005010:	d308      	bcc.n	8005024 <UART_SetConfig+0x398>
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005018:	d204      	bcs.n	8005024 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	60da      	str	r2, [r3, #12]
 8005022:	e0af      	b.n	8005184 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	76bb      	strb	r3, [r7, #26]
 8005028:	e0ac      	b.n	8005184 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d15b      	bne.n	80050ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005034:	7efb      	ldrb	r3, [r7, #27]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d827      	bhi.n	800508a <UART_SetConfig+0x3fe>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x3b4>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005065 	.word	0x08005065
 8005044:	0800506d 	.word	0x0800506d
 8005048:	08005075 	.word	0x08005075
 800504c:	0800508b 	.word	0x0800508b
 8005050:	0800507b 	.word	0x0800507b
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800508b 	.word	0x0800508b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7fe ff52 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8005068:	6178      	str	r0, [r7, #20]
        break;
 800506a:	e013      	b.n	8005094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7fe ff64 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 8005070:	6178      	str	r0, [r7, #20]
        break;
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b49      	ldr	r3, [pc, #292]	; (800519c <UART_SetConfig+0x510>)
 8005076:	617b      	str	r3, [r7, #20]
        break;
 8005078:	e00c      	b.n	8005094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7fe feb1 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 800507e:	6178      	str	r0, [r7, #20]
        break;
 8005080:	e008      	b.n	8005094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	617b      	str	r3, [r7, #20]
        break;
 8005088:	e004      	b.n	8005094 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	76bb      	strb	r3, [r7, #26]
        break;
 8005092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d074      	beq.n	8005184 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005a      	lsls	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b0f      	cmp	r3, #15
 80050b6:	d916      	bls.n	80050e6 <UART_SetConfig+0x45a>
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050be:	d212      	bcs.n	80050e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f023 030f 	bic.w	r3, r3, #15
 80050c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	4313      	orrs	r3, r2
 80050da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	89fa      	ldrh	r2, [r7, #14]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	e04e      	b.n	8005184 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	76bb      	strb	r3, [r7, #26]
 80050ea:	e04b      	b.n	8005184 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ec:	7efb      	ldrb	r3, [r7, #27]
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d827      	bhi.n	8005142 <UART_SetConfig+0x4b6>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x46c>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800512d 	.word	0x0800512d
 8005104:	08005143 	.word	0x08005143
 8005108:	08005133 	.word	0x08005133
 800510c:	08005143 	.word	0x08005143
 8005110:	08005143 	.word	0x08005143
 8005114:	08005143 	.word	0x08005143
 8005118:	0800513b 	.word	0x0800513b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7fe fef6 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8005120:	6178      	str	r0, [r7, #20]
        break;
 8005122:	e013      	b.n	800514c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7fe ff08 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 8005128:	6178      	str	r0, [r7, #20]
        break;
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <UART_SetConfig+0x510>)
 800512e:	617b      	str	r3, [r7, #20]
        break;
 8005130:	e00c      	b.n	800514c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005132:	f7fe fe55 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8005136:	6178      	str	r0, [r7, #20]
        break;
 8005138:	e008      	b.n	800514c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800513a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513e:	617b      	str	r3, [r7, #20]
        break;
 8005140:	e004      	b.n	800514c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	76bb      	strb	r3, [r7, #26]
        break;
 800514a:	bf00      	nop
    }

    if (pclk != 0U)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d018      	beq.n	8005184 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085a      	lsrs	r2, r3, #1
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	441a      	add	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	b29b      	uxth	r3, r3
 8005166:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	d908      	bls.n	8005180 <UART_SetConfig+0x4f4>
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005174:	d204      	bcs.n	8005180 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e001      	b.n	8005184 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005190:	7ebb      	ldrb	r3, [r7, #26]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800519c:	00f42400 	.word	0x00f42400

080051a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01a      	beq.n	80052b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d10a      	bne.n	80052b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052f2:	f7fc f997 	bl	8001624 <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d10e      	bne.n	8005324 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f82a 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e020      	b.n	8005366 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d10e      	bne.n	8005350 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005332:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f814 	bl	800536e <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e00a      	b.n	8005366 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537e:	e05d      	b.n	800543c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d059      	beq.n	800543c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005388:	f7fc f94c 	bl	8001624 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <UART_WaitOnFlagUntilTimeout+0x30>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11b      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e042      	b.n	800545c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d02b      	beq.n	800543c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d123      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800540c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e00f      	b.n	800545c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4013      	ands	r3, r2
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	429a      	cmp	r2, r3
 8005458:	d092      	beq.n	8005380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <ctime>:
 8005464:	b508      	push	{r3, lr}
 8005466:	f000 f82f 	bl	80054c8 <localtime>
 800546a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800546e:	f000 bc71 	b.w	8005d54 <asctime>
	...

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	; (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000010 	.word	0x20000010

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4e0d      	ldr	r6, [pc, #52]	; (80054b8 <__libc_init_array+0x38>)
 8005484:	4c0d      	ldr	r4, [pc, #52]	; (80054bc <__libc_init_array+0x3c>)
 8005486:	1ba4      	subs	r4, r4, r6
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	2500      	movs	r5, #0
 800548c:	42a5      	cmp	r5, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	4e0b      	ldr	r6, [pc, #44]	; (80054c0 <__libc_init_array+0x40>)
 8005492:	4c0c      	ldr	r4, [pc, #48]	; (80054c4 <__libc_init_array+0x44>)
 8005494:	f001 fdf0 	bl	8007078 <_init>
 8005498:	1ba4      	subs	r4, r4, r6
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	2500      	movs	r5, #0
 800549e:	42a5      	cmp	r5, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054a8:	4798      	blx	r3
 80054aa:	3501      	adds	r5, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054b2:	4798      	blx	r3
 80054b4:	3501      	adds	r5, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	08007418 	.word	0x08007418
 80054bc:	08007418 	.word	0x08007418
 80054c0:	08007418 	.word	0x08007418
 80054c4:	0800741c 	.word	0x0800741c

080054c8 <localtime>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <localtime+0x20>)
 80054cc:	681c      	ldr	r4, [r3, #0]
 80054ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054d0:	4605      	mov	r5, r0
 80054d2:	b91b      	cbnz	r3, 80054dc <localtime+0x14>
 80054d4:	2024      	movs	r0, #36	; 0x24
 80054d6:	f000 f8f5 	bl	80056c4 <malloc>
 80054da:	63e0      	str	r0, [r4, #60]	; 0x3c
 80054dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054de:	4628      	mov	r0, r5
 80054e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054e4:	f000 b802 	b.w	80054ec <localtime_r>
 80054e8:	20000010 	.word	0x20000010

080054ec <localtime_r>:
 80054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	460c      	mov	r4, r1
 80054f2:	4680      	mov	r8, r0
 80054f4:	f000 fcc0 	bl	8005e78 <__gettzinfo>
 80054f8:	4621      	mov	r1, r4
 80054fa:	4607      	mov	r7, r0
 80054fc:	4640      	mov	r0, r8
 80054fe:	f000 fcbf 	bl	8005e80 <gmtime_r>
 8005502:	6946      	ldr	r6, [r0, #20]
 8005504:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8005508:	07b2      	lsls	r2, r6, #30
 800550a:	4604      	mov	r4, r0
 800550c:	d105      	bne.n	800551a <localtime_r+0x2e>
 800550e:	2264      	movs	r2, #100	; 0x64
 8005510:	fb96 f3f2 	sdiv	r3, r6, r2
 8005514:	fb02 6313 	mls	r3, r2, r3, r6
 8005518:	bb13      	cbnz	r3, 8005560 <localtime_r+0x74>
 800551a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800551e:	fb96 f5f3 	sdiv	r5, r6, r3
 8005522:	fb03 6515 	mls	r5, r3, r5, r6
 8005526:	fab5 f585 	clz	r5, r5
 800552a:	096d      	lsrs	r5, r5, #5
 800552c:	4b63      	ldr	r3, [pc, #396]	; (80056bc <localtime_r+0x1d0>)
 800552e:	2230      	movs	r2, #48	; 0x30
 8005530:	fb02 3505 	mla	r5, r2, r5, r3
 8005534:	f000 fa88 	bl	8005a48 <__tz_lock>
 8005538:	f000 fa88 	bl	8005a4c <_tzset_unlocked>
 800553c:	4b60      	ldr	r3, [pc, #384]	; (80056c0 <localtime_r+0x1d4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	b323      	cbz	r3, 800558c <localtime_r+0xa0>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	42b3      	cmp	r3, r6
 8005546:	d10d      	bne.n	8005564 <localtime_r+0x78>
 8005548:	683e      	ldr	r6, [r7, #0]
 800554a:	e9d8 0100 	ldrd	r0, r1, [r8]
 800554e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005552:	b97e      	cbnz	r6, 8005574 <localtime_r+0x88>
 8005554:	4290      	cmp	r0, r2
 8005556:	eb71 0303 	sbcs.w	r3, r1, r3
 800555a:	db0f      	blt.n	800557c <localtime_r+0x90>
 800555c:	2301      	movs	r3, #1
 800555e:	e015      	b.n	800558c <localtime_r+0xa0>
 8005560:	2501      	movs	r5, #1
 8005562:	e7e3      	b.n	800552c <localtime_r+0x40>
 8005564:	4630      	mov	r0, r6
 8005566:	f000 f9c7 	bl	80058f8 <__tzcalc_limits>
 800556a:	2800      	cmp	r0, #0
 800556c:	d1ec      	bne.n	8005548 <localtime_r+0x5c>
 800556e:	f04f 33ff 	mov.w	r3, #4294967295
 8005572:	e00b      	b.n	800558c <localtime_r+0xa0>
 8005574:	4290      	cmp	r0, r2
 8005576:	eb71 0303 	sbcs.w	r3, r1, r3
 800557a:	db58      	blt.n	800562e <localtime_r+0x142>
 800557c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005580:	4290      	cmp	r0, r2
 8005582:	eb71 0303 	sbcs.w	r3, r1, r3
 8005586:	bfb4      	ite	lt
 8005588:	2301      	movlt	r3, #1
 800558a:	2300      	movge	r3, #0
 800558c:	6223      	str	r3, [r4, #32]
 800558e:	6a23      	ldr	r3, [r4, #32]
 8005590:	2b01      	cmp	r3, #1
 8005592:	bf0c      	ite	eq
 8005594:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 8005596:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 8005598:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800559c:	203c      	movs	r0, #60	; 0x3c
 800559e:	fb91 f6f3 	sdiv	r6, r1, r3
 80055a2:	fb03 1316 	mls	r3, r3, r6, r1
 80055a6:	6861      	ldr	r1, [r4, #4]
 80055a8:	fb93 f2f0 	sdiv	r2, r3, r0
 80055ac:	fb00 3012 	mls	r0, r0, r2, r3
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	1a89      	subs	r1, r1, r2
 80055b4:	68a2      	ldr	r2, [r4, #8]
 80055b6:	6061      	str	r1, [r4, #4]
 80055b8:	1a1b      	subs	r3, r3, r0
 80055ba:	1b92      	subs	r2, r2, r6
 80055bc:	2b3b      	cmp	r3, #59	; 0x3b
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	60a2      	str	r2, [r4, #8]
 80055c2:	dd36      	ble.n	8005632 <localtime_r+0x146>
 80055c4:	3101      	adds	r1, #1
 80055c6:	6061      	str	r1, [r4, #4]
 80055c8:	3b3c      	subs	r3, #60	; 0x3c
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	2b3b      	cmp	r3, #59	; 0x3b
 80055d0:	dd35      	ble.n	800563e <localtime_r+0x152>
 80055d2:	3201      	adds	r2, #1
 80055d4:	60a2      	str	r2, [r4, #8]
 80055d6:	3b3c      	subs	r3, #60	; 0x3c
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	68a3      	ldr	r3, [r4, #8]
 80055dc:	2b17      	cmp	r3, #23
 80055de:	dd34      	ble.n	800564a <localtime_r+0x15e>
 80055e0:	69e2      	ldr	r2, [r4, #28]
 80055e2:	3201      	adds	r2, #1
 80055e4:	61e2      	str	r2, [r4, #28]
 80055e6:	69a2      	ldr	r2, [r4, #24]
 80055e8:	3201      	adds	r2, #1
 80055ea:	2a06      	cmp	r2, #6
 80055ec:	bfc8      	it	gt
 80055ee:	2200      	movgt	r2, #0
 80055f0:	61a2      	str	r2, [r4, #24]
 80055f2:	68e2      	ldr	r2, [r4, #12]
 80055f4:	3b18      	subs	r3, #24
 80055f6:	3201      	adds	r2, #1
 80055f8:	60a3      	str	r3, [r4, #8]
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	60e2      	str	r2, [r4, #12]
 80055fe:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005602:	428a      	cmp	r2, r1
 8005604:	dd0e      	ble.n	8005624 <localtime_r+0x138>
 8005606:	3301      	adds	r3, #1
 8005608:	2b0c      	cmp	r3, #12
 800560a:	bf0c      	ite	eq
 800560c:	6963      	ldreq	r3, [r4, #20]
 800560e:	6123      	strne	r3, [r4, #16]
 8005610:	eba2 0201 	sub.w	r2, r2, r1
 8005614:	60e2      	str	r2, [r4, #12]
 8005616:	bf01      	itttt	eq
 8005618:	3301      	addeq	r3, #1
 800561a:	2200      	moveq	r2, #0
 800561c:	6122      	streq	r2, [r4, #16]
 800561e:	6163      	streq	r3, [r4, #20]
 8005620:	bf08      	it	eq
 8005622:	61e2      	streq	r2, [r4, #28]
 8005624:	f000 fa11 	bl	8005a4a <__tz_unlock>
 8005628:	4620      	mov	r0, r4
 800562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562e:	2300      	movs	r3, #0
 8005630:	e7ac      	b.n	800558c <localtime_r+0xa0>
 8005632:	2b00      	cmp	r3, #0
 8005634:	daca      	bge.n	80055cc <localtime_r+0xe0>
 8005636:	3901      	subs	r1, #1
 8005638:	6061      	str	r1, [r4, #4]
 800563a:	333c      	adds	r3, #60	; 0x3c
 800563c:	e7c5      	b.n	80055ca <localtime_r+0xde>
 800563e:	2b00      	cmp	r3, #0
 8005640:	dacb      	bge.n	80055da <localtime_r+0xee>
 8005642:	3a01      	subs	r2, #1
 8005644:	60a2      	str	r2, [r4, #8]
 8005646:	333c      	adds	r3, #60	; 0x3c
 8005648:	e7c6      	b.n	80055d8 <localtime_r+0xec>
 800564a:	2b00      	cmp	r3, #0
 800564c:	daea      	bge.n	8005624 <localtime_r+0x138>
 800564e:	69e2      	ldr	r2, [r4, #28]
 8005650:	3a01      	subs	r2, #1
 8005652:	61e2      	str	r2, [r4, #28]
 8005654:	69a2      	ldr	r2, [r4, #24]
 8005656:	3a01      	subs	r2, #1
 8005658:	bf48      	it	mi
 800565a:	2206      	movmi	r2, #6
 800565c:	61a2      	str	r2, [r4, #24]
 800565e:	68e2      	ldr	r2, [r4, #12]
 8005660:	3318      	adds	r3, #24
 8005662:	3a01      	subs	r2, #1
 8005664:	60e2      	str	r2, [r4, #12]
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	2a00      	cmp	r2, #0
 800566a:	d1db      	bne.n	8005624 <localtime_r+0x138>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	3b01      	subs	r3, #1
 8005670:	d405      	bmi.n	800567e <localtime_r+0x192>
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800567a:	60e3      	str	r3, [r4, #12]
 800567c:	e7d2      	b.n	8005624 <localtime_r+0x138>
 800567e:	6962      	ldr	r2, [r4, #20]
 8005680:	230b      	movs	r3, #11
 8005682:	1e51      	subs	r1, r2, #1
 8005684:	6123      	str	r3, [r4, #16]
 8005686:	078b      	lsls	r3, r1, #30
 8005688:	6161      	str	r1, [r4, #20]
 800568a:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 800568e:	d105      	bne.n	800569c <localtime_r+0x1b0>
 8005690:	2164      	movs	r1, #100	; 0x64
 8005692:	fb92 f3f1 	sdiv	r3, r2, r1
 8005696:	fb01 2313 	mls	r3, r1, r3, r2
 800569a:	b963      	cbnz	r3, 80056b6 <localtime_r+0x1ca>
 800569c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80056a0:	fb92 f3f1 	sdiv	r3, r2, r1
 80056a4:	fb01 2313 	mls	r3, r1, r3, r2
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80056b2:	61e3      	str	r3, [r4, #28]
 80056b4:	e7de      	b.n	8005674 <localtime_r+0x188>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e7f9      	b.n	80056ae <localtime_r+0x1c2>
 80056ba:	bf00      	nop
 80056bc:	08007160 	.word	0x08007160
 80056c0:	2000028c 	.word	0x2000028c

080056c4 <malloc>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <malloc+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 b861 	b.w	8005790 <_malloc_r>
 80056ce:	bf00      	nop
 80056d0:	20000010 	.word	0x20000010

080056d4 <free>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <free+0xc>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f000 b80b 	b.w	80056f4 <_free_r>
 80056de:	bf00      	nop
 80056e0:	20000010 	.word	0x20000010

080056e4 <memset>:
 80056e4:	4402      	add	r2, r0
 80056e6:	4603      	mov	r3, r0
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d100      	bne.n	80056ee <memset+0xa>
 80056ec:	4770      	bx	lr
 80056ee:	f803 1b01 	strb.w	r1, [r3], #1
 80056f2:	e7f9      	b.n	80056e8 <memset+0x4>

080056f4 <_free_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4605      	mov	r5, r0
 80056f8:	2900      	cmp	r1, #0
 80056fa:	d045      	beq.n	8005788 <_free_r+0x94>
 80056fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005700:	1f0c      	subs	r4, r1, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfb8      	it	lt
 8005706:	18e4      	addlt	r4, r4, r3
 8005708:	f000 fc68 	bl	8005fdc <__malloc_lock>
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <_free_r+0x98>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	4610      	mov	r0, r2
 8005712:	b933      	cbnz	r3, 8005722 <_free_r+0x2e>
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	6014      	str	r4, [r2, #0]
 8005718:	4628      	mov	r0, r5
 800571a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571e:	f000 bc5e 	b.w	8005fde <__malloc_unlock>
 8005722:	42a3      	cmp	r3, r4
 8005724:	d90c      	bls.n	8005740 <_free_r+0x4c>
 8005726:	6821      	ldr	r1, [r4, #0]
 8005728:	1862      	adds	r2, r4, r1
 800572a:	4293      	cmp	r3, r2
 800572c:	bf04      	itt	eq
 800572e:	681a      	ldreq	r2, [r3, #0]
 8005730:	685b      	ldreq	r3, [r3, #4]
 8005732:	6063      	str	r3, [r4, #4]
 8005734:	bf04      	itt	eq
 8005736:	1852      	addeq	r2, r2, r1
 8005738:	6022      	streq	r2, [r4, #0]
 800573a:	6004      	str	r4, [r0, #0]
 800573c:	e7ec      	b.n	8005718 <_free_r+0x24>
 800573e:	4613      	mov	r3, r2
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	b10a      	cbz	r2, 8005748 <_free_r+0x54>
 8005744:	42a2      	cmp	r2, r4
 8005746:	d9fa      	bls.n	800573e <_free_r+0x4a>
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	1858      	adds	r0, r3, r1
 800574c:	42a0      	cmp	r0, r4
 800574e:	d10b      	bne.n	8005768 <_free_r+0x74>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	4401      	add	r1, r0
 8005754:	1858      	adds	r0, r3, r1
 8005756:	4282      	cmp	r2, r0
 8005758:	6019      	str	r1, [r3, #0]
 800575a:	d1dd      	bne.n	8005718 <_free_r+0x24>
 800575c:	6810      	ldr	r0, [r2, #0]
 800575e:	6852      	ldr	r2, [r2, #4]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	4401      	add	r1, r0
 8005764:	6019      	str	r1, [r3, #0]
 8005766:	e7d7      	b.n	8005718 <_free_r+0x24>
 8005768:	d902      	bls.n	8005770 <_free_r+0x7c>
 800576a:	230c      	movs	r3, #12
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	e7d3      	b.n	8005718 <_free_r+0x24>
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	1821      	adds	r1, r4, r0
 8005774:	428a      	cmp	r2, r1
 8005776:	bf04      	itt	eq
 8005778:	6811      	ldreq	r1, [r2, #0]
 800577a:	6852      	ldreq	r2, [r2, #4]
 800577c:	6062      	str	r2, [r4, #4]
 800577e:	bf04      	itt	eq
 8005780:	1809      	addeq	r1, r1, r0
 8005782:	6021      	streq	r1, [r4, #0]
 8005784:	605c      	str	r4, [r3, #4]
 8005786:	e7c7      	b.n	8005718 <_free_r+0x24>
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	bf00      	nop
 800578c:	20000268 	.word	0x20000268

08005790 <_malloc_r>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	1ccd      	adds	r5, r1, #3
 8005794:	f025 0503 	bic.w	r5, r5, #3
 8005798:	3508      	adds	r5, #8
 800579a:	2d0c      	cmp	r5, #12
 800579c:	bf38      	it	cc
 800579e:	250c      	movcc	r5, #12
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	4606      	mov	r6, r0
 80057a4:	db01      	blt.n	80057aa <_malloc_r+0x1a>
 80057a6:	42a9      	cmp	r1, r5
 80057a8:	d903      	bls.n	80057b2 <_malloc_r+0x22>
 80057aa:	230c      	movs	r3, #12
 80057ac:	6033      	str	r3, [r6, #0]
 80057ae:	2000      	movs	r0, #0
 80057b0:	bd70      	pop	{r4, r5, r6, pc}
 80057b2:	f000 fc13 	bl	8005fdc <__malloc_lock>
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <_malloc_r+0xac>)
 80057b8:	6814      	ldr	r4, [r2, #0]
 80057ba:	4621      	mov	r1, r4
 80057bc:	b991      	cbnz	r1, 80057e4 <_malloc_r+0x54>
 80057be:	4c20      	ldr	r4, [pc, #128]	; (8005840 <_malloc_r+0xb0>)
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	b91b      	cbnz	r3, 80057cc <_malloc_r+0x3c>
 80057c4:	4630      	mov	r0, r6
 80057c6:	f000 f83d 	bl	8005844 <_sbrk_r>
 80057ca:	6020      	str	r0, [r4, #0]
 80057cc:	4629      	mov	r1, r5
 80057ce:	4630      	mov	r0, r6
 80057d0:	f000 f838 	bl	8005844 <_sbrk_r>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d124      	bne.n	8005822 <_malloc_r+0x92>
 80057d8:	230c      	movs	r3, #12
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 fbfe 	bl	8005fde <__malloc_unlock>
 80057e2:	e7e4      	b.n	80057ae <_malloc_r+0x1e>
 80057e4:	680b      	ldr	r3, [r1, #0]
 80057e6:	1b5b      	subs	r3, r3, r5
 80057e8:	d418      	bmi.n	800581c <_malloc_r+0x8c>
 80057ea:	2b0b      	cmp	r3, #11
 80057ec:	d90f      	bls.n	800580e <_malloc_r+0x7e>
 80057ee:	600b      	str	r3, [r1, #0]
 80057f0:	50cd      	str	r5, [r1, r3]
 80057f2:	18cc      	adds	r4, r1, r3
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 fbf2 	bl	8005fde <__malloc_unlock>
 80057fa:	f104 000b 	add.w	r0, r4, #11
 80057fe:	1d23      	adds	r3, r4, #4
 8005800:	f020 0007 	bic.w	r0, r0, #7
 8005804:	1ac3      	subs	r3, r0, r3
 8005806:	d0d3      	beq.n	80057b0 <_malloc_r+0x20>
 8005808:	425a      	negs	r2, r3
 800580a:	50e2      	str	r2, [r4, r3]
 800580c:	e7d0      	b.n	80057b0 <_malloc_r+0x20>
 800580e:	428c      	cmp	r4, r1
 8005810:	684b      	ldr	r3, [r1, #4]
 8005812:	bf16      	itet	ne
 8005814:	6063      	strne	r3, [r4, #4]
 8005816:	6013      	streq	r3, [r2, #0]
 8005818:	460c      	movne	r4, r1
 800581a:	e7eb      	b.n	80057f4 <_malloc_r+0x64>
 800581c:	460c      	mov	r4, r1
 800581e:	6849      	ldr	r1, [r1, #4]
 8005820:	e7cc      	b.n	80057bc <_malloc_r+0x2c>
 8005822:	1cc4      	adds	r4, r0, #3
 8005824:	f024 0403 	bic.w	r4, r4, #3
 8005828:	42a0      	cmp	r0, r4
 800582a:	d005      	beq.n	8005838 <_malloc_r+0xa8>
 800582c:	1a21      	subs	r1, r4, r0
 800582e:	4630      	mov	r0, r6
 8005830:	f000 f808 	bl	8005844 <_sbrk_r>
 8005834:	3001      	adds	r0, #1
 8005836:	d0cf      	beq.n	80057d8 <_malloc_r+0x48>
 8005838:	6025      	str	r5, [r4, #0]
 800583a:	e7db      	b.n	80057f4 <_malloc_r+0x64>
 800583c:	20000268 	.word	0x20000268
 8005840:	2000026c 	.word	0x2000026c

08005844 <_sbrk_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4c06      	ldr	r4, [pc, #24]	; (8005860 <_sbrk_r+0x1c>)
 8005848:	2300      	movs	r3, #0
 800584a:	4605      	mov	r5, r0
 800584c:	4608      	mov	r0, r1
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	f7fb fdea 	bl	8001428 <_sbrk>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_sbrk_r+0x1a>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	b103      	cbz	r3, 800585e <_sbrk_r+0x1a>
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	20000470 	.word	0x20000470

08005864 <siprintf>:
 8005864:	b40e      	push	{r1, r2, r3}
 8005866:	b500      	push	{lr}
 8005868:	b09c      	sub	sp, #112	; 0x70
 800586a:	ab1d      	add	r3, sp, #116	; 0x74
 800586c:	9002      	str	r0, [sp, #8]
 800586e:	9006      	str	r0, [sp, #24]
 8005870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005874:	4809      	ldr	r0, [pc, #36]	; (800589c <siprintf+0x38>)
 8005876:	9107      	str	r1, [sp, #28]
 8005878:	9104      	str	r1, [sp, #16]
 800587a:	4909      	ldr	r1, [pc, #36]	; (80058a0 <siprintf+0x3c>)
 800587c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005880:	9105      	str	r1, [sp, #20]
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	a902      	add	r1, sp, #8
 8005888:	f000 fc04 	bl	8006094 <_svfiprintf_r>
 800588c:	9b02      	ldr	r3, [sp, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	b01c      	add	sp, #112	; 0x70
 8005894:	f85d eb04 	ldr.w	lr, [sp], #4
 8005898:	b003      	add	sp, #12
 800589a:	4770      	bx	lr
 800589c:	20000010 	.word	0x20000010
 80058a0:	ffff0208 	.word	0xffff0208

080058a4 <strcat>:
 80058a4:	b510      	push	{r4, lr}
 80058a6:	4603      	mov	r3, r0
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	1c5c      	adds	r4, r3, #1
 80058ac:	b93a      	cbnz	r2, 80058be <strcat+0x1a>
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d1f9      	bne.n	80058b0 <strcat+0xc>
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	4623      	mov	r3, r4
 80058c0:	e7f2      	b.n	80058a8 <strcat+0x4>
	...

080058c4 <time>:
 80058c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <time+0x30>)
 80058c8:	4604      	mov	r4, r0
 80058ca:	2200      	movs	r2, #0
 80058cc:	4669      	mov	r1, sp
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	f000 fac0 	bl	8005e54 <_gettimeofday_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	da05      	bge.n	80058e4 <time+0x20>
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
 80058e0:	e9cd 2300 	strd	r2, r3, [sp]
 80058e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e8:	b10c      	cbz	r4, 80058ee <time+0x2a>
 80058ea:	e9c4 0100 	strd	r0, r1, [r4]
 80058ee:	b004      	add	sp, #16
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	bf00      	nop
 80058f4:	20000010 	.word	0x20000010

080058f8 <__tzcalc_limits>:
 80058f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	4680      	mov	r8, r0
 80058fe:	f000 fabb 	bl	8005e78 <__gettzinfo>
 8005902:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8005906:	4598      	cmp	r8, r3
 8005908:	f340 8098 	ble.w	8005a3c <__tzcalc_limits+0x144>
 800590c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8005910:	4443      	add	r3, r8
 8005912:	109b      	asrs	r3, r3, #2
 8005914:	f240 126d 	movw	r2, #365	; 0x16d
 8005918:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800591c:	fb02 3505 	mla	r5, r2, r5, r3
 8005920:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005924:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8005928:	fb93 f3f2 	sdiv	r3, r3, r2
 800592c:	441d      	add	r5, r3
 800592e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005932:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8005936:	fb98 f7f3 	sdiv	r7, r8, r3
 800593a:	fb03 8717 	mls	r7, r3, r7, r8
 800593e:	4442      	add	r2, r8
 8005940:	fab7 fc87 	clz	ip, r7
 8005944:	fb92 f2f3 	sdiv	r2, r2, r3
 8005948:	f008 0303 	and.w	r3, r8, #3
 800594c:	4415      	add	r5, r2
 800594e:	2264      	movs	r2, #100	; 0x64
 8005950:	f8c0 8004 	str.w	r8, [r0, #4]
 8005954:	fb98 f6f2 	sdiv	r6, r8, r2
 8005958:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800595c:	fb02 8616 	mls	r6, r2, r6, r8
 8005960:	4604      	mov	r4, r0
 8005962:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	f04f 0e07 	mov.w	lr, #7
 800596c:	7a22      	ldrb	r2, [r4, #8]
 800596e:	6963      	ldr	r3, [r4, #20]
 8005970:	2a4a      	cmp	r2, #74	; 0x4a
 8005972:	d128      	bne.n	80059c6 <__tzcalc_limits+0xce>
 8005974:	9900      	ldr	r1, [sp, #0]
 8005976:	18ea      	adds	r2, r5, r3
 8005978:	b901      	cbnz	r1, 800597c <__tzcalc_limits+0x84>
 800597a:	b906      	cbnz	r6, 800597e <__tzcalc_limits+0x86>
 800597c:	bb0f      	cbnz	r7, 80059c2 <__tzcalc_limits+0xca>
 800597e:	2b3b      	cmp	r3, #59	; 0x3b
 8005980:	bfd4      	ite	le
 8005982:	2300      	movle	r3, #0
 8005984:	2301      	movgt	r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	69a3      	ldr	r3, [r4, #24]
 800598c:	492c      	ldr	r1, [pc, #176]	; (8005a40 <__tzcalc_limits+0x148>)
 800598e:	fb01 3202 	mla	r2, r1, r2, r3
 8005992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005994:	4413      	add	r3, r2
 8005996:	461a      	mov	r2, r3
 8005998:	17db      	asrs	r3, r3, #31
 800599a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800599e:	3428      	adds	r4, #40	; 0x28
 80059a0:	45a3      	cmp	fp, r4
 80059a2:	d1e3      	bne.n	800596c <__tzcalc_limits+0x74>
 80059a4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80059a8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80059ac:	4294      	cmp	r4, r2
 80059ae:	eb75 0303 	sbcs.w	r3, r5, r3
 80059b2:	bfb4      	ite	lt
 80059b4:	2301      	movlt	r3, #1
 80059b6:	2300      	movge	r3, #0
 80059b8:	6003      	str	r3, [r0, #0]
 80059ba:	2001      	movs	r0, #1
 80059bc:	b003      	add	sp, #12
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	2300      	movs	r3, #0
 80059c4:	e7df      	b.n	8005986 <__tzcalc_limits+0x8e>
 80059c6:	2a44      	cmp	r2, #68	; 0x44
 80059c8:	d101      	bne.n	80059ce <__tzcalc_limits+0xd6>
 80059ca:	18ea      	adds	r2, r5, r3
 80059cc:	e7dd      	b.n	800598a <__tzcalc_limits+0x92>
 80059ce:	9a00      	ldr	r2, [sp, #0]
 80059d0:	bb72      	cbnz	r2, 8005a30 <__tzcalc_limits+0x138>
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	bf0c      	ite	eq
 80059d6:	46e1      	moveq	r9, ip
 80059d8:	f04f 0901 	movne.w	r9, #1
 80059dc:	2230      	movs	r2, #48	; 0x30
 80059de:	fb02 f909 	mul.w	r9, r2, r9
 80059e2:	68e2      	ldr	r2, [r4, #12]
 80059e4:	9201      	str	r2, [sp, #4]
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	462a      	mov	r2, r5
 80059ec:	f108 0801 	add.w	r8, r8, #1
 80059f0:	4914      	ldr	r1, [pc, #80]	; (8005a44 <__tzcalc_limits+0x14c>)
 80059f2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80059f6:	448a      	add	sl, r1
 80059f8:	9901      	ldr	r1, [sp, #4]
 80059fa:	f85a ac04 	ldr.w	sl, [sl, #-4]
 80059fe:	4541      	cmp	r1, r8
 8005a00:	dc18      	bgt.n	8005a34 <__tzcalc_limits+0x13c>
 8005a02:	f102 0804 	add.w	r8, r2, #4
 8005a06:	fb98 f9fe 	sdiv	r9, r8, lr
 8005a0a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8005a0e:	eba8 0909 	sub.w	r9, r8, r9
 8005a12:	ebb3 0909 	subs.w	r9, r3, r9
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a1c:	bf48      	it	mi
 8005a1e:	f109 0907 	addmi.w	r9, r9, #7
 8005a22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005a26:	444b      	add	r3, r9
 8005a28:	4553      	cmp	r3, sl
 8005a2a:	da05      	bge.n	8005a38 <__tzcalc_limits+0x140>
 8005a2c:	441a      	add	r2, r3
 8005a2e:	e7ac      	b.n	800598a <__tzcalc_limits+0x92>
 8005a30:	46e1      	mov	r9, ip
 8005a32:	e7d3      	b.n	80059dc <__tzcalc_limits+0xe4>
 8005a34:	4452      	add	r2, sl
 8005a36:	e7d9      	b.n	80059ec <__tzcalc_limits+0xf4>
 8005a38:	3b07      	subs	r3, #7
 8005a3a:	e7f5      	b.n	8005a28 <__tzcalc_limits+0x130>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e7bd      	b.n	80059bc <__tzcalc_limits+0xc4>
 8005a40:	00015180 	.word	0x00015180
 8005a44:	08007160 	.word	0x08007160

08005a48 <__tz_lock>:
 8005a48:	4770      	bx	lr

08005a4a <__tz_unlock>:
 8005a4a:	4770      	bx	lr

08005a4c <_tzset_unlocked>:
 8005a4c:	4b01      	ldr	r3, [pc, #4]	; (8005a54 <_tzset_unlocked+0x8>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	f000 b802 	b.w	8005a58 <_tzset_unlocked_r>
 8005a54:	20000010 	.word	0x20000010

08005a58 <_tzset_unlocked_r>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	b08d      	sub	sp, #52	; 0x34
 8005a5e:	4607      	mov	r7, r0
 8005a60:	f000 fa0a 	bl	8005e78 <__gettzinfo>
 8005a64:	49af      	ldr	r1, [pc, #700]	; (8005d24 <_tzset_unlocked_r+0x2cc>)
 8005a66:	4eb0      	ldr	r6, [pc, #704]	; (8005d28 <_tzset_unlocked_r+0x2d0>)
 8005a68:	4605      	mov	r5, r0
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f000 f9ea 	bl	8005e44 <_getenv_r>
 8005a70:	4604      	mov	r4, r0
 8005a72:	b970      	cbnz	r0, 8005a92 <_tzset_unlocked_r+0x3a>
 8005a74:	4bad      	ldr	r3, [pc, #692]	; (8005d2c <_tzset_unlocked_r+0x2d4>)
 8005a76:	4aae      	ldr	r2, [pc, #696]	; (8005d30 <_tzset_unlocked_r+0x2d8>)
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	4bae      	ldr	r3, [pc, #696]	; (8005d34 <_tzset_unlocked_r+0x2dc>)
 8005a7c:	6018      	str	r0, [r3, #0]
 8005a7e:	4bae      	ldr	r3, [pc, #696]	; (8005d38 <_tzset_unlocked_r+0x2e0>)
 8005a80:	6830      	ldr	r0, [r6, #0]
 8005a82:	e9c3 2200 	strd	r2, r2, [r3]
 8005a86:	f7ff fe25 	bl	80056d4 <free>
 8005a8a:	6034      	str	r4, [r6, #0]
 8005a8c:	b00d      	add	sp, #52	; 0x34
 8005a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a92:	6831      	ldr	r1, [r6, #0]
 8005a94:	2900      	cmp	r1, #0
 8005a96:	d15f      	bne.n	8005b58 <_tzset_unlocked_r+0x100>
 8005a98:	6830      	ldr	r0, [r6, #0]
 8005a9a:	f7ff fe1b 	bl	80056d4 <free>
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7fa fb96 	bl	80001d0 <strlen>
 8005aa4:	1c41      	adds	r1, r0, #1
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f7ff fe72 	bl	8005790 <_malloc_r>
 8005aac:	6030      	str	r0, [r6, #0]
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d157      	bne.n	8005b62 <_tzset_unlocked_r+0x10a>
 8005ab2:	7823      	ldrb	r3, [r4, #0]
 8005ab4:	4aa1      	ldr	r2, [pc, #644]	; (8005d3c <_tzset_unlocked_r+0x2e4>)
 8005ab6:	49a2      	ldr	r1, [pc, #648]	; (8005d40 <_tzset_unlocked_r+0x2e8>)
 8005ab8:	2b3a      	cmp	r3, #58	; 0x3a
 8005aba:	bf08      	it	eq
 8005abc:	3401      	addeq	r4, #1
 8005abe:	ae0a      	add	r6, sp, #40	; 0x28
 8005ac0:	4633      	mov	r3, r6
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fd66 	bl	8006594 <siscanf>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	dddf      	ble.n	8005a8c <_tzset_unlocked_r+0x34>
 8005acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ace:	18e7      	adds	r7, r4, r3
 8005ad0:	5ce3      	ldrb	r3, [r4, r3]
 8005ad2:	2b2d      	cmp	r3, #45	; 0x2d
 8005ad4:	d149      	bne.n	8005b6a <_tzset_unlocked_r+0x112>
 8005ad6:	3701      	adds	r7, #1
 8005ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8005adc:	f10d 0a20 	add.w	sl, sp, #32
 8005ae0:	f10d 0b1e 	add.w	fp, sp, #30
 8005ae4:	f04f 0800 	mov.w	r8, #0
 8005ae8:	9603      	str	r6, [sp, #12]
 8005aea:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8005aee:	f8cd b000 	str.w	fp, [sp]
 8005af2:	4633      	mov	r3, r6
 8005af4:	aa07      	add	r2, sp, #28
 8005af6:	4993      	ldr	r1, [pc, #588]	; (8005d44 <_tzset_unlocked_r+0x2ec>)
 8005af8:	f8ad 801e 	strh.w	r8, [sp, #30]
 8005afc:	4638      	mov	r0, r7
 8005afe:	f8ad 8020 	strh.w	r8, [sp, #32]
 8005b02:	f000 fd47 	bl	8006594 <siscanf>
 8005b06:	4540      	cmp	r0, r8
 8005b08:	ddc0      	ble.n	8005a8c <_tzset_unlocked_r+0x34>
 8005b0a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005b0e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005b12:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8005d50 <_tzset_unlocked_r+0x2f8>
 8005b16:	213c      	movs	r1, #60	; 0x3c
 8005b18:	fb01 2203 	mla	r2, r1, r3, r2
 8005b1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005b20:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005b24:	fb01 2303 	mla	r3, r1, r3, r2
 8005b28:	435c      	muls	r4, r3
 8005b2a:	62ac      	str	r4, [r5, #40]	; 0x28
 8005b2c:	4c82      	ldr	r4, [pc, #520]	; (8005d38 <_tzset_unlocked_r+0x2e0>)
 8005b2e:	4b83      	ldr	r3, [pc, #524]	; (8005d3c <_tzset_unlocked_r+0x2e4>)
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b34:	4982      	ldr	r1, [pc, #520]	; (8005d40 <_tzset_unlocked_r+0x2e8>)
 8005b36:	441f      	add	r7, r3
 8005b38:	464a      	mov	r2, r9
 8005b3a:	4633      	mov	r3, r6
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f000 fd29 	bl	8006594 <siscanf>
 8005b42:	4540      	cmp	r0, r8
 8005b44:	dc16      	bgt.n	8005b74 <_tzset_unlocked_r+0x11c>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	4b78      	ldr	r3, [pc, #480]	; (8005d2c <_tzset_unlocked_r+0x2d4>)
 8005b4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	4b78      	ldr	r3, [pc, #480]	; (8005d34 <_tzset_unlocked_r+0x2dc>)
 8005b52:	f8c3 8000 	str.w	r8, [r3]
 8005b56:	e799      	b.n	8005a8c <_tzset_unlocked_r+0x34>
 8005b58:	f7fa fb42 	bl	80001e0 <strcmp>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d095      	beq.n	8005a8c <_tzset_unlocked_r+0x34>
 8005b60:	e79a      	b.n	8005a98 <_tzset_unlocked_r+0x40>
 8005b62:	4621      	mov	r1, r4
 8005b64:	f000 fd42 	bl	80065ec <strcpy>
 8005b68:	e7a3      	b.n	8005ab2 <_tzset_unlocked_r+0x5a>
 8005b6a:	2b2b      	cmp	r3, #43	; 0x2b
 8005b6c:	bf08      	it	eq
 8005b6e:	3701      	addeq	r7, #1
 8005b70:	2401      	movs	r4, #1
 8005b72:	e7b3      	b.n	8005adc <_tzset_unlocked_r+0x84>
 8005b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b76:	f8c4 9004 	str.w	r9, [r4, #4]
 8005b7a:	18fc      	adds	r4, r7, r3
 8005b7c:	5cfb      	ldrb	r3, [r7, r3]
 8005b7e:	2b2d      	cmp	r3, #45	; 0x2d
 8005b80:	f040 808b 	bne.w	8005c9a <_tzset_unlocked_r+0x242>
 8005b84:	3401      	adds	r4, #1
 8005b86:	f04f 37ff 	mov.w	r7, #4294967295
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005b94:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005b98:	930a      	str	r3, [sp, #40]	; 0x28
 8005b9a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005b9e:	e9cd b600 	strd	fp, r6, [sp]
 8005ba2:	4633      	mov	r3, r6
 8005ba4:	aa07      	add	r2, sp, #28
 8005ba6:	4967      	ldr	r1, [pc, #412]	; (8005d44 <_tzset_unlocked_r+0x2ec>)
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 fcf3 	bl	8006594 <siscanf>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	dc78      	bgt.n	8005ca4 <_tzset_unlocked_r+0x24c>
 8005bb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005bb4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005bb8:	652b      	str	r3, [r5, #80]	; 0x50
 8005bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbc:	462f      	mov	r7, r5
 8005bbe:	441c      	add	r4, r3
 8005bc0:	f04f 0900 	mov.w	r9, #0
 8005bc4:	7823      	ldrb	r3, [r4, #0]
 8005bc6:	2b2c      	cmp	r3, #44	; 0x2c
 8005bc8:	bf08      	it	eq
 8005bca:	3401      	addeq	r4, #1
 8005bcc:	f894 8000 	ldrb.w	r8, [r4]
 8005bd0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8005bd4:	d179      	bne.n	8005cca <_tzset_unlocked_r+0x272>
 8005bd6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005bda:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005bde:	ab09      	add	r3, sp, #36	; 0x24
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	9603      	str	r6, [sp, #12]
 8005be4:	4633      	mov	r3, r6
 8005be6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005bea:	4957      	ldr	r1, [pc, #348]	; (8005d48 <_tzset_unlocked_r+0x2f0>)
 8005bec:	4620      	mov	r0, r4
 8005bee:	f000 fcd1 	bl	8006594 <siscanf>
 8005bf2:	2803      	cmp	r0, #3
 8005bf4:	f47f af4a 	bne.w	8005a8c <_tzset_unlocked_r+0x34>
 8005bf8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8005bfc:	1e4b      	subs	r3, r1, #1
 8005bfe:	2b0b      	cmp	r3, #11
 8005c00:	f63f af44 	bhi.w	8005a8c <_tzset_unlocked_r+0x34>
 8005c04:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005c08:	1e53      	subs	r3, r2, #1
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	f63f af3e 	bhi.w	8005a8c <_tzset_unlocked_r+0x34>
 8005c10:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8005c14:	2b06      	cmp	r3, #6
 8005c16:	f63f af39 	bhi.w	8005a8c <_tzset_unlocked_r+0x34>
 8005c1a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8005c1e:	f887 8008 	strb.w	r8, [r7, #8]
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c26:	eb04 0803 	add.w	r8, r4, r3
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005c36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3c:	f898 3000 	ldrb.w	r3, [r8]
 8005c40:	2b2f      	cmp	r3, #47	; 0x2f
 8005c42:	d109      	bne.n	8005c58 <_tzset_unlocked_r+0x200>
 8005c44:	e9cd a602 	strd	sl, r6, [sp, #8]
 8005c48:	e9cd b600 	strd	fp, r6, [sp]
 8005c4c:	4633      	mov	r3, r6
 8005c4e:	aa07      	add	r2, sp, #28
 8005c50:	493e      	ldr	r1, [pc, #248]	; (8005d4c <_tzset_unlocked_r+0x2f4>)
 8005c52:	4640      	mov	r0, r8
 8005c54:	f000 fc9e 	bl	8006594 <siscanf>
 8005c58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005c5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005c60:	213c      	movs	r1, #60	; 0x3c
 8005c62:	fb01 2203 	mla	r2, r1, r3, r2
 8005c66:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005c6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005c6e:	fb01 2303 	mla	r3, r1, r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c76:	3728      	adds	r7, #40	; 0x28
 8005c78:	4444      	add	r4, r8
 8005c7a:	f1b9 0f00 	cmp.w	r9, #0
 8005c7e:	d021      	beq.n	8005cc4 <_tzset_unlocked_r+0x26c>
 8005c80:	6868      	ldr	r0, [r5, #4]
 8005c82:	f7ff fe39 	bl	80058f8 <__tzcalc_limits>
 8005c86:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <_tzset_unlocked_r+0x2d4>)
 8005c88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <_tzset_unlocked_r+0x2dc>)
 8005c92:	bf18      	it	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e6f8      	b.n	8005a8c <_tzset_unlocked_r+0x34>
 8005c9a:	2b2b      	cmp	r3, #43	; 0x2b
 8005c9c:	bf08      	it	eq
 8005c9e:	3401      	addeq	r4, #1
 8005ca0:	2701      	movs	r7, #1
 8005ca2:	e772      	b.n	8005b8a <_tzset_unlocked_r+0x132>
 8005ca4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005ca8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005cac:	213c      	movs	r1, #60	; 0x3c
 8005cae:	fb01 2203 	mla	r2, r1, r3, r2
 8005cb2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005cb6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005cba:	fb01 2303 	mla	r3, r1, r3, r2
 8005cbe:	435f      	muls	r7, r3
 8005cc0:	652f      	str	r7, [r5, #80]	; 0x50
 8005cc2:	e77a      	b.n	8005bba <_tzset_unlocked_r+0x162>
 8005cc4:	f04f 0901 	mov.w	r9, #1
 8005cc8:	e77c      	b.n	8005bc4 <_tzset_unlocked_r+0x16c>
 8005cca:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8005cce:	bf06      	itte	eq
 8005cd0:	3401      	addeq	r4, #1
 8005cd2:	4643      	moveq	r3, r8
 8005cd4:	2344      	movne	r3, #68	; 0x44
 8005cd6:	220a      	movs	r2, #10
 8005cd8:	a90b      	add	r1, sp, #44	; 0x2c
 8005cda:	4620      	mov	r0, r4
 8005cdc:	9305      	str	r3, [sp, #20]
 8005cde:	f000 fd2b 	bl	8006738 <strtoul>
 8005ce2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005ce6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005cea:	45a0      	cmp	r8, r4
 8005cec:	9b05      	ldr	r3, [sp, #20]
 8005cee:	d114      	bne.n	8005d1a <_tzset_unlocked_r+0x2c2>
 8005cf0:	234d      	movs	r3, #77	; 0x4d
 8005cf2:	f1b9 0f00 	cmp.w	r9, #0
 8005cf6:	d107      	bne.n	8005d08 <_tzset_unlocked_r+0x2b0>
 8005cf8:	722b      	strb	r3, [r5, #8]
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8005d02:	f8c5 9014 	str.w	r9, [r5, #20]
 8005d06:	e790      	b.n	8005c2a <_tzset_unlocked_r+0x1d2>
 8005d08:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8005d0c:	220b      	movs	r2, #11
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8005d14:	2300      	movs	r3, #0
 8005d16:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005d18:	e787      	b.n	8005c2a <_tzset_unlocked_r+0x1d2>
 8005d1a:	b280      	uxth	r0, r0
 8005d1c:	723b      	strb	r3, [r7, #8]
 8005d1e:	6178      	str	r0, [r7, #20]
 8005d20:	e783      	b.n	8005c2a <_tzset_unlocked_r+0x1d2>
 8005d22:	bf00      	nop
 8005d24:	080071c0 	.word	0x080071c0
 8005d28:	20000288 	.word	0x20000288
 8005d2c:	20000290 	.word	0x20000290
 8005d30:	080071c3 	.word	0x080071c3
 8005d34:	2000028c 	.word	0x2000028c
 8005d38:	20000074 	.word	0x20000074
 8005d3c:	2000027b 	.word	0x2000027b
 8005d40:	080071c7 	.word	0x080071c7
 8005d44:	080071ea 	.word	0x080071ea
 8005d48:	080071d6 	.word	0x080071d6
 8005d4c:	080071e9 	.word	0x080071e9
 8005d50:	20000270 	.word	0x20000270

08005d54 <asctime>:
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <asctime+0x28>)
 8005d56:	b570      	push	{r4, r5, r6, lr}
 8005d58:	681c      	ldr	r4, [r3, #0]
 8005d5a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	b93d      	cbnz	r5, 8005d70 <asctime+0x1c>
 8005d60:	201a      	movs	r0, #26
 8005d62:	f7ff fcaf 	bl	80056c4 <malloc>
 8005d66:	221a      	movs	r2, #26
 8005d68:	6420      	str	r0, [r4, #64]	; 0x40
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	f7ff fcba 	bl	80056e4 <memset>
 8005d70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d72:	4630      	mov	r0, r6
 8005d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d78:	f000 b802 	b.w	8005d80 <asctime_r>
 8005d7c:	20000010 	.word	0x20000010

08005d80 <asctime_r>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	460c      	mov	r4, r1
 8005d84:	6941      	ldr	r1, [r0, #20]
 8005d86:	6903      	ldr	r3, [r0, #16]
 8005d88:	6982      	ldr	r2, [r0, #24]
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8005d90:	9104      	str	r1, [sp, #16]
 8005d92:	6801      	ldr	r1, [r0, #0]
 8005d94:	9103      	str	r1, [sp, #12]
 8005d96:	6841      	ldr	r1, [r0, #4]
 8005d98:	9102      	str	r1, [sp, #8]
 8005d9a:	6881      	ldr	r1, [r0, #8]
 8005d9c:	9101      	str	r1, [sp, #4]
 8005d9e:	68c1      	ldr	r1, [r0, #12]
 8005da0:	9100      	str	r1, [sp, #0]
 8005da2:	4907      	ldr	r1, [pc, #28]	; (8005dc0 <asctime_r+0x40>)
 8005da4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005da8:	440b      	add	r3, r1
 8005daa:	4906      	ldr	r1, [pc, #24]	; (8005dc4 <asctime_r+0x44>)
 8005dac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005db0:	440a      	add	r2, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <asctime_r+0x48>)
 8005db6:	f7ff fd55 	bl	8005864 <siprintf>
 8005dba:	4620      	mov	r0, r4
 8005dbc:	b006      	add	sp, #24
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	08007231 	.word	0x08007231
 8005dc4:	0800721c 	.word	0x0800721c
 8005dc8:	080071fc 	.word	0x080071fc

08005dcc <_findenv_r>:
 8005dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	468b      	mov	fp, r1
 8005dd4:	4690      	mov	r8, r2
 8005dd6:	f000 fcc5 	bl	8006764 <__env_lock>
 8005dda:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <_findenv_r+0x74>)
 8005ddc:	681d      	ldr	r5, [r3, #0]
 8005dde:	469a      	mov	sl, r3
 8005de0:	b13d      	cbz	r5, 8005df2 <_findenv_r+0x26>
 8005de2:	465c      	mov	r4, fp
 8005de4:	4623      	mov	r3, r4
 8005de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dea:	b32a      	cbz	r2, 8005e38 <_findenv_r+0x6c>
 8005dec:	2a3d      	cmp	r2, #61	; 0x3d
 8005dee:	461c      	mov	r4, r3
 8005df0:	d1f8      	bne.n	8005de4 <_findenv_r+0x18>
 8005df2:	4638      	mov	r0, r7
 8005df4:	f000 fcb7 	bl	8006766 <__env_unlock>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	464d      	mov	r5, r9
 8005e00:	46a9      	mov	r9, r5
 8005e02:	f859 0b04 	ldr.w	r0, [r9], #4
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d0f3      	beq.n	8005df2 <_findenv_r+0x26>
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	f000 fbf5 	bl	80065fc <strncmp>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1f3      	bne.n	8005dfe <_findenv_r+0x32>
 8005e16:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005e1a:	191e      	adds	r6, r3, r4
 8005e1c:	5d1b      	ldrb	r3, [r3, r4]
 8005e1e:	2b3d      	cmp	r3, #61	; 0x3d
 8005e20:	d1ed      	bne.n	8005dfe <_findenv_r+0x32>
 8005e22:	f8da 3000 	ldr.w	r3, [sl]
 8005e26:	1aed      	subs	r5, r5, r3
 8005e28:	10ad      	asrs	r5, r5, #2
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f8c8 5000 	str.w	r5, [r8]
 8005e30:	f000 fc99 	bl	8006766 <__env_unlock>
 8005e34:	1c70      	adds	r0, r6, #1
 8005e36:	e7e0      	b.n	8005dfa <_findenv_r+0x2e>
 8005e38:	eba4 040b 	sub.w	r4, r4, fp
 8005e3c:	e7e0      	b.n	8005e00 <_findenv_r+0x34>
 8005e3e:	bf00      	nop
 8005e40:	20000000 	.word	0x20000000

08005e44 <_getenv_r>:
 8005e44:	b507      	push	{r0, r1, r2, lr}
 8005e46:	aa01      	add	r2, sp, #4
 8005e48:	f7ff ffc0 	bl	8005dcc <_findenv_r>
 8005e4c:	b003      	add	sp, #12
 8005e4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005e54 <_gettimeofday_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4c07      	ldr	r4, [pc, #28]	; (8005e74 <_gettimeofday_r+0x20>)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	f001 f901 	bl	8007068 <_gettimeofday>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d102      	bne.n	8005e70 <_gettimeofday_r+0x1c>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	b103      	cbz	r3, 8005e70 <_gettimeofday_r+0x1c>
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	bd38      	pop	{r3, r4, r5, pc}
 8005e72:	bf00      	nop
 8005e74:	20000470 	.word	0x20000470

08005e78 <__gettzinfo>:
 8005e78:	4800      	ldr	r0, [pc, #0]	; (8005e7c <__gettzinfo+0x4>)
 8005e7a:	4770      	bx	lr
 8005e7c:	20000080 	.word	0x20000080

08005e80 <gmtime_r>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	e9d0 8900 	ldrd	r8, r9, [r0]
 8005e88:	460c      	mov	r4, r1
 8005e8a:	4a50      	ldr	r2, [pc, #320]	; (8005fcc <gmtime_r+0x14c>)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4649      	mov	r1, r9
 8005e92:	f7fa fa05 	bl	80002a0 <__aeabi_ldivmod>
 8005e96:	4a4d      	ldr	r2, [pc, #308]	; (8005fcc <gmtime_r+0x14c>)
 8005e98:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa f9fd 	bl	80002a0 <__aeabi_ldivmod>
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	bfbc      	itt	lt
 8005eaa:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8005eae:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8005eb2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005eb6:	fb92 f3f1 	sdiv	r3, r2, r1
 8005eba:	fb01 2213 	mls	r2, r1, r3, r2
 8005ebe:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8005ec2:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	bfb8      	it	lt
 8005eca:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8005ece:	fb92 f3f1 	sdiv	r3, r2, r1
 8005ed2:	fb01 2213 	mls	r2, r1, r3, r2
 8005ed6:	6063      	str	r3, [r4, #4]
 8005ed8:	6022      	str	r2, [r4, #0]
 8005eda:	1ceb      	adds	r3, r5, #3
 8005edc:	2207      	movs	r2, #7
 8005ede:	fb93 f2f2 	sdiv	r2, r3, r2
 8005ee2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	bf48      	it	mi
 8005eea:	3307      	addmi	r3, #7
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	61a3      	str	r3, [r4, #24]
 8005ef0:	bfb8      	it	lt
 8005ef2:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 8005ef6:	4836      	ldr	r0, [pc, #216]	; (8005fd0 <gmtime_r+0x150>)
 8005ef8:	bfae      	itee	ge
 8005efa:	fb95 f0f0 	sdivge	r0, r5, r0
 8005efe:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8005f02:	fb93 f0f0 	sdivlt	r0, r3, r0
 8005f06:	4b33      	ldr	r3, [pc, #204]	; (8005fd4 <gmtime_r+0x154>)
 8005f08:	fb03 5300 	mla	r3, r3, r0, r5
 8005f0c:	f648 61ac 	movw	r1, #36524	; 0x8eac
 8005f10:	fbb3 f1f1 	udiv	r1, r3, r1
 8005f14:	4419      	add	r1, r3
 8005f16:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8005f1a:	fbb3 f2f7 	udiv	r2, r3, r7
 8005f1e:	1a89      	subs	r1, r1, r2
 8005f20:	4a2d      	ldr	r2, [pc, #180]	; (8005fd8 <gmtime_r+0x158>)
 8005f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f26:	1a8a      	subs	r2, r1, r2
 8005f28:	f648 6194 	movw	r1, #36500	; 0x8e94
 8005f2c:	fbb2 f1f1 	udiv	r1, r2, r1
 8005f30:	440b      	add	r3, r1
 8005f32:	f240 166d 	movw	r6, #365	; 0x16d
 8005f36:	fbb2 f5f6 	udiv	r5, r2, r6
 8005f3a:	fbb2 f2f7 	udiv	r2, r2, r7
 8005f3e:	1a9a      	subs	r2, r3, r2
 8005f40:	fb06 2315 	mls	r3, r6, r5, r2
 8005f44:	2199      	movs	r1, #153	; 0x99
 8005f46:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005f4a:	1c5e      	adds	r6, r3, #1
 8005f4c:	3202      	adds	r2, #2
 8005f4e:	fbb2 f2f1 	udiv	r2, r2, r1
 8005f52:	2a0a      	cmp	r2, #10
 8005f54:	fb01 f102 	mul.w	r1, r1, r2
 8005f58:	f101 0102 	add.w	r1, r1, #2
 8005f5c:	f04f 0705 	mov.w	r7, #5
 8005f60:	fbb1 f1f7 	udiv	r1, r1, r7
 8005f64:	eba6 0101 	sub.w	r1, r6, r1
 8005f68:	bf34      	ite	cc
 8005f6a:	2602      	movcc	r6, #2
 8005f6c:	f06f 0609 	mvncs.w	r6, #9
 8005f70:	4416      	add	r6, r2
 8005f72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f76:	fb02 5000 	mla	r0, r2, r0, r5
 8005f7a:	2e01      	cmp	r6, #1
 8005f7c:	bf98      	it	ls
 8005f7e:	3001      	addls	r0, #1
 8005f80:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8005f84:	d30c      	bcc.n	8005fa0 <gmtime_r+0x120>
 8005f86:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005f8a:	61e3      	str	r3, [r4, #28]
 8005f8c:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8005f90:	2300      	movs	r3, #0
 8005f92:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8005f96:	60e1      	str	r1, [r4, #12]
 8005f98:	6223      	str	r3, [r4, #32]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa0:	07aa      	lsls	r2, r5, #30
 8005fa2:	d105      	bne.n	8005fb0 <gmtime_r+0x130>
 8005fa4:	2764      	movs	r7, #100	; 0x64
 8005fa6:	fbb5 f2f7 	udiv	r2, r5, r7
 8005faa:	fb07 5212 	mls	r2, r7, r2, r5
 8005fae:	b95a      	cbnz	r2, 8005fc8 <gmtime_r+0x148>
 8005fb0:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8005fb4:	fbb5 f2f7 	udiv	r2, r5, r7
 8005fb8:	fb07 5212 	mls	r2, r7, r2, r5
 8005fbc:	fab2 f282 	clz	r2, r2
 8005fc0:	0952      	lsrs	r2, r2, #5
 8005fc2:	333b      	adds	r3, #59	; 0x3b
 8005fc4:	4413      	add	r3, r2
 8005fc6:	e7e0      	b.n	8005f8a <gmtime_r+0x10a>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	e7fa      	b.n	8005fc2 <gmtime_r+0x142>
 8005fcc:	00015180 	.word	0x00015180
 8005fd0:	00023ab1 	.word	0x00023ab1
 8005fd4:	fffdc54f 	.word	0xfffdc54f
 8005fd8:	00023ab0 	.word	0x00023ab0

08005fdc <__malloc_lock>:
 8005fdc:	4770      	bx	lr

08005fde <__malloc_unlock>:
 8005fde:	4770      	bx	lr

08005fe0 <__ssputs_r>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	688e      	ldr	r6, [r1, #8]
 8005fe6:	429e      	cmp	r6, r3
 8005fe8:	4682      	mov	sl, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	4690      	mov	r8, r2
 8005fee:	4699      	mov	r9, r3
 8005ff0:	d837      	bhi.n	8006062 <__ssputs_r+0x82>
 8005ff2:	898a      	ldrh	r2, [r1, #12]
 8005ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ff8:	d031      	beq.n	800605e <__ssputs_r+0x7e>
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	6909      	ldr	r1, [r1, #16]
 8005ffe:	1a6f      	subs	r7, r5, r1
 8006000:	6965      	ldr	r5, [r4, #20]
 8006002:	2302      	movs	r3, #2
 8006004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006008:	fb95 f5f3 	sdiv	r5, r5, r3
 800600c:	f109 0301 	add.w	r3, r9, #1
 8006010:	443b      	add	r3, r7
 8006012:	429d      	cmp	r5, r3
 8006014:	bf38      	it	cc
 8006016:	461d      	movcc	r5, r3
 8006018:	0553      	lsls	r3, r2, #21
 800601a:	d530      	bpl.n	800607e <__ssputs_r+0x9e>
 800601c:	4629      	mov	r1, r5
 800601e:	f7ff fbb7 	bl	8005790 <_malloc_r>
 8006022:	4606      	mov	r6, r0
 8006024:	b950      	cbnz	r0, 800603c <__ssputs_r+0x5c>
 8006026:	230c      	movs	r3, #12
 8006028:	f8ca 3000 	str.w	r3, [sl]
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	463a      	mov	r2, r7
 800603e:	6921      	ldr	r1, [r4, #16]
 8006040:	f000 fbb6 	bl	80067b0 <memcpy>
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	6126      	str	r6, [r4, #16]
 8006052:	6165      	str	r5, [r4, #20]
 8006054:	443e      	add	r6, r7
 8006056:	1bed      	subs	r5, r5, r7
 8006058:	6026      	str	r6, [r4, #0]
 800605a:	60a5      	str	r5, [r4, #8]
 800605c:	464e      	mov	r6, r9
 800605e:	454e      	cmp	r6, r9
 8006060:	d900      	bls.n	8006064 <__ssputs_r+0x84>
 8006062:	464e      	mov	r6, r9
 8006064:	4632      	mov	r2, r6
 8006066:	4641      	mov	r1, r8
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	f000 fbac 	bl	80067c6 <memmove>
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	1b9b      	subs	r3, r3, r6
 8006072:	60a3      	str	r3, [r4, #8]
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	441e      	add	r6, r3
 8006078:	6026      	str	r6, [r4, #0]
 800607a:	2000      	movs	r0, #0
 800607c:	e7dc      	b.n	8006038 <__ssputs_r+0x58>
 800607e:	462a      	mov	r2, r5
 8006080:	f000 fbba 	bl	80067f8 <_realloc_r>
 8006084:	4606      	mov	r6, r0
 8006086:	2800      	cmp	r0, #0
 8006088:	d1e2      	bne.n	8006050 <__ssputs_r+0x70>
 800608a:	6921      	ldr	r1, [r4, #16]
 800608c:	4650      	mov	r0, sl
 800608e:	f7ff fb31 	bl	80056f4 <_free_r>
 8006092:	e7c8      	b.n	8006026 <__ssputs_r+0x46>

08006094 <_svfiprintf_r>:
 8006094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	461d      	mov	r5, r3
 800609a:	898b      	ldrh	r3, [r1, #12]
 800609c:	061f      	lsls	r7, r3, #24
 800609e:	b09d      	sub	sp, #116	; 0x74
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	4616      	mov	r6, r2
 80060a6:	d50f      	bpl.n	80060c8 <_svfiprintf_r+0x34>
 80060a8:	690b      	ldr	r3, [r1, #16]
 80060aa:	b96b      	cbnz	r3, 80060c8 <_svfiprintf_r+0x34>
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	f7ff fb6f 	bl	8005790 <_malloc_r>
 80060b2:	6020      	str	r0, [r4, #0]
 80060b4:	6120      	str	r0, [r4, #16]
 80060b6:	b928      	cbnz	r0, 80060c4 <_svfiprintf_r+0x30>
 80060b8:	230c      	movs	r3, #12
 80060ba:	f8c8 3000 	str.w	r3, [r8]
 80060be:	f04f 30ff 	mov.w	r0, #4294967295
 80060c2:	e0c8      	b.n	8006256 <_svfiprintf_r+0x1c2>
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	6163      	str	r3, [r4, #20]
 80060c8:	2300      	movs	r3, #0
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	2320      	movs	r3, #32
 80060ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d2:	2330      	movs	r3, #48	; 0x30
 80060d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d8:	9503      	str	r5, [sp, #12]
 80060da:	f04f 0b01 	mov.w	fp, #1
 80060de:	4637      	mov	r7, r6
 80060e0:	463d      	mov	r5, r7
 80060e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060e6:	b10b      	cbz	r3, 80060ec <_svfiprintf_r+0x58>
 80060e8:	2b25      	cmp	r3, #37	; 0x25
 80060ea:	d13e      	bne.n	800616a <_svfiprintf_r+0xd6>
 80060ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80060f0:	d00b      	beq.n	800610a <_svfiprintf_r+0x76>
 80060f2:	4653      	mov	r3, sl
 80060f4:	4632      	mov	r2, r6
 80060f6:	4621      	mov	r1, r4
 80060f8:	4640      	mov	r0, r8
 80060fa:	f7ff ff71 	bl	8005fe0 <__ssputs_r>
 80060fe:	3001      	adds	r0, #1
 8006100:	f000 80a4 	beq.w	800624c <_svfiprintf_r+0x1b8>
 8006104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006106:	4453      	add	r3, sl
 8006108:	9309      	str	r3, [sp, #36]	; 0x24
 800610a:	783b      	ldrb	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 809d 	beq.w	800624c <_svfiprintf_r+0x1b8>
 8006112:	2300      	movs	r3, #0
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006124:	931a      	str	r3, [sp, #104]	; 0x68
 8006126:	462f      	mov	r7, r5
 8006128:	2205      	movs	r2, #5
 800612a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800612e:	4850      	ldr	r0, [pc, #320]	; (8006270 <_svfiprintf_r+0x1dc>)
 8006130:	f7fa f866 	bl	8000200 <memchr>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	b9d0      	cbnz	r0, 800616e <_svfiprintf_r+0xda>
 8006138:	06d9      	lsls	r1, r3, #27
 800613a:	bf44      	itt	mi
 800613c:	2220      	movmi	r2, #32
 800613e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006142:	071a      	lsls	r2, r3, #28
 8006144:	bf44      	itt	mi
 8006146:	222b      	movmi	r2, #43	; 0x2b
 8006148:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800614c:	782a      	ldrb	r2, [r5, #0]
 800614e:	2a2a      	cmp	r2, #42	; 0x2a
 8006150:	d015      	beq.n	800617e <_svfiprintf_r+0xea>
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	462f      	mov	r7, r5
 8006156:	2000      	movs	r0, #0
 8006158:	250a      	movs	r5, #10
 800615a:	4639      	mov	r1, r7
 800615c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006160:	3b30      	subs	r3, #48	; 0x30
 8006162:	2b09      	cmp	r3, #9
 8006164:	d94d      	bls.n	8006202 <_svfiprintf_r+0x16e>
 8006166:	b1b8      	cbz	r0, 8006198 <_svfiprintf_r+0x104>
 8006168:	e00f      	b.n	800618a <_svfiprintf_r+0xf6>
 800616a:	462f      	mov	r7, r5
 800616c:	e7b8      	b.n	80060e0 <_svfiprintf_r+0x4c>
 800616e:	4a40      	ldr	r2, [pc, #256]	; (8006270 <_svfiprintf_r+0x1dc>)
 8006170:	1a80      	subs	r0, r0, r2
 8006172:	fa0b f000 	lsl.w	r0, fp, r0
 8006176:	4318      	orrs	r0, r3
 8006178:	9004      	str	r0, [sp, #16]
 800617a:	463d      	mov	r5, r7
 800617c:	e7d3      	b.n	8006126 <_svfiprintf_r+0x92>
 800617e:	9a03      	ldr	r2, [sp, #12]
 8006180:	1d11      	adds	r1, r2, #4
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	9103      	str	r1, [sp, #12]
 8006186:	2a00      	cmp	r2, #0
 8006188:	db01      	blt.n	800618e <_svfiprintf_r+0xfa>
 800618a:	9207      	str	r2, [sp, #28]
 800618c:	e004      	b.n	8006198 <_svfiprintf_r+0x104>
 800618e:	4252      	negs	r2, r2
 8006190:	f043 0302 	orr.w	r3, r3, #2
 8006194:	9207      	str	r2, [sp, #28]
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	783b      	ldrb	r3, [r7, #0]
 800619a:	2b2e      	cmp	r3, #46	; 0x2e
 800619c:	d10c      	bne.n	80061b8 <_svfiprintf_r+0x124>
 800619e:	787b      	ldrb	r3, [r7, #1]
 80061a0:	2b2a      	cmp	r3, #42	; 0x2a
 80061a2:	d133      	bne.n	800620c <_svfiprintf_r+0x178>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfb8      	it	lt
 80061b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b4:	3702      	adds	r7, #2
 80061b6:	9305      	str	r3, [sp, #20]
 80061b8:	4d2e      	ldr	r5, [pc, #184]	; (8006274 <_svfiprintf_r+0x1e0>)
 80061ba:	7839      	ldrb	r1, [r7, #0]
 80061bc:	2203      	movs	r2, #3
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fa f81e 	bl	8000200 <memchr>
 80061c4:	b138      	cbz	r0, 80061d6 <_svfiprintf_r+0x142>
 80061c6:	2340      	movs	r3, #64	; 0x40
 80061c8:	1b40      	subs	r0, r0, r5
 80061ca:	fa03 f000 	lsl.w	r0, r3, r0
 80061ce:	9b04      	ldr	r3, [sp, #16]
 80061d0:	4303      	orrs	r3, r0
 80061d2:	3701      	adds	r7, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	7839      	ldrb	r1, [r7, #0]
 80061d8:	4827      	ldr	r0, [pc, #156]	; (8006278 <_svfiprintf_r+0x1e4>)
 80061da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061de:	2206      	movs	r2, #6
 80061e0:	1c7e      	adds	r6, r7, #1
 80061e2:	f7fa f80d 	bl	8000200 <memchr>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d038      	beq.n	800625c <_svfiprintf_r+0x1c8>
 80061ea:	4b24      	ldr	r3, [pc, #144]	; (800627c <_svfiprintf_r+0x1e8>)
 80061ec:	bb13      	cbnz	r3, 8006234 <_svfiprintf_r+0x1a0>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	3308      	adds	r3, #8
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	444b      	add	r3, r9
 80061fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006200:	e76d      	b.n	80060de <_svfiprintf_r+0x4a>
 8006202:	fb05 3202 	mla	r2, r5, r2, r3
 8006206:	2001      	movs	r0, #1
 8006208:	460f      	mov	r7, r1
 800620a:	e7a6      	b.n	800615a <_svfiprintf_r+0xc6>
 800620c:	2300      	movs	r3, #0
 800620e:	3701      	adds	r7, #1
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	4619      	mov	r1, r3
 8006214:	250a      	movs	r5, #10
 8006216:	4638      	mov	r0, r7
 8006218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621c:	3a30      	subs	r2, #48	; 0x30
 800621e:	2a09      	cmp	r2, #9
 8006220:	d903      	bls.n	800622a <_svfiprintf_r+0x196>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c8      	beq.n	80061b8 <_svfiprintf_r+0x124>
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	e7c6      	b.n	80061b8 <_svfiprintf_r+0x124>
 800622a:	fb05 2101 	mla	r1, r5, r1, r2
 800622e:	2301      	movs	r3, #1
 8006230:	4607      	mov	r7, r0
 8006232:	e7f0      	b.n	8006216 <_svfiprintf_r+0x182>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4622      	mov	r2, r4
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <_svfiprintf_r+0x1ec>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4640      	mov	r0, r8
 8006240:	f3af 8000 	nop.w
 8006244:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006248:	4681      	mov	r9, r0
 800624a:	d1d6      	bne.n	80061fa <_svfiprintf_r+0x166>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	065b      	lsls	r3, r3, #25
 8006250:	f53f af35 	bmi.w	80060be <_svfiprintf_r+0x2a>
 8006254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006256:	b01d      	add	sp, #116	; 0x74
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	ab03      	add	r3, sp, #12
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4622      	mov	r2, r4
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <_svfiprintf_r+0x1ec>)
 8006264:	a904      	add	r1, sp, #16
 8006266:	4640      	mov	r0, r8
 8006268:	f000 f882 	bl	8006370 <_printf_i>
 800626c:	e7ea      	b.n	8006244 <_svfiprintf_r+0x1b0>
 800626e:	bf00      	nop
 8006270:	08007255 	.word	0x08007255
 8006274:	0800725b 	.word	0x0800725b
 8006278:	0800725f 	.word	0x0800725f
 800627c:	00000000 	.word	0x00000000
 8006280:	08005fe1 	.word	0x08005fe1

08006284 <_printf_common>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	4691      	mov	r9, r2
 800628a:	461f      	mov	r7, r3
 800628c:	688a      	ldr	r2, [r1, #8]
 800628e:	690b      	ldr	r3, [r1, #16]
 8006290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006294:	4293      	cmp	r3, r2
 8006296:	bfb8      	it	lt
 8006298:	4613      	movlt	r3, r2
 800629a:	f8c9 3000 	str.w	r3, [r9]
 800629e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a2:	4606      	mov	r6, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	b112      	cbz	r2, 80062ae <_printf_common+0x2a>
 80062a8:	3301      	adds	r3, #1
 80062aa:	f8c9 3000 	str.w	r3, [r9]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	0699      	lsls	r1, r3, #26
 80062b2:	bf42      	ittt	mi
 80062b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062b8:	3302      	addmi	r3, #2
 80062ba:	f8c9 3000 	strmi.w	r3, [r9]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d107      	bne.n	80062d6 <_printf_common+0x52>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	f8d9 2000 	ldr.w	r2, [r9]
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	42ab      	cmp	r3, r5
 80062d4:	dc28      	bgt.n	8006328 <_printf_common+0xa4>
 80062d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	3300      	adds	r3, #0
 80062de:	bf18      	it	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	0692      	lsls	r2, r2, #26
 80062e4:	d42d      	bmi.n	8006342 <_printf_common+0xbe>
 80062e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ea:	4639      	mov	r1, r7
 80062ec:	4630      	mov	r0, r6
 80062ee:	47c0      	blx	r8
 80062f0:	3001      	adds	r0, #1
 80062f2:	d020      	beq.n	8006336 <_printf_common+0xb2>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	68e5      	ldr	r5, [r4, #12]
 80062f8:	f8d9 2000 	ldr.w	r2, [r9]
 80062fc:	f003 0306 	and.w	r3, r3, #6
 8006300:	2b04      	cmp	r3, #4
 8006302:	bf08      	it	eq
 8006304:	1aad      	subeq	r5, r5, r2
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	6922      	ldr	r2, [r4, #16]
 800630a:	bf0c      	ite	eq
 800630c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006310:	2500      	movne	r5, #0
 8006312:	4293      	cmp	r3, r2
 8006314:	bfc4      	itt	gt
 8006316:	1a9b      	subgt	r3, r3, r2
 8006318:	18ed      	addgt	r5, r5, r3
 800631a:	f04f 0900 	mov.w	r9, #0
 800631e:	341a      	adds	r4, #26
 8006320:	454d      	cmp	r5, r9
 8006322:	d11a      	bne.n	800635a <_printf_common+0xd6>
 8006324:	2000      	movs	r0, #0
 8006326:	e008      	b.n	800633a <_printf_common+0xb6>
 8006328:	2301      	movs	r3, #1
 800632a:	4652      	mov	r2, sl
 800632c:	4639      	mov	r1, r7
 800632e:	4630      	mov	r0, r6
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d103      	bne.n	800633e <_printf_common+0xba>
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	3501      	adds	r5, #1
 8006340:	e7c3      	b.n	80062ca <_printf_common+0x46>
 8006342:	18e1      	adds	r1, r4, r3
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	2030      	movs	r0, #48	; 0x30
 8006348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800634c:	4422      	add	r2, r4
 800634e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006356:	3302      	adds	r3, #2
 8006358:	e7c5      	b.n	80062e6 <_printf_common+0x62>
 800635a:	2301      	movs	r3, #1
 800635c:	4622      	mov	r2, r4
 800635e:	4639      	mov	r1, r7
 8006360:	4630      	mov	r0, r6
 8006362:	47c0      	blx	r8
 8006364:	3001      	adds	r0, #1
 8006366:	d0e6      	beq.n	8006336 <_printf_common+0xb2>
 8006368:	f109 0901 	add.w	r9, r9, #1
 800636c:	e7d8      	b.n	8006320 <_printf_common+0x9c>
	...

08006370 <_printf_i>:
 8006370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006378:	460c      	mov	r4, r1
 800637a:	7e09      	ldrb	r1, [r1, #24]
 800637c:	b085      	sub	sp, #20
 800637e:	296e      	cmp	r1, #110	; 0x6e
 8006380:	4617      	mov	r7, r2
 8006382:	4606      	mov	r6, r0
 8006384:	4698      	mov	r8, r3
 8006386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006388:	f000 80b3 	beq.w	80064f2 <_printf_i+0x182>
 800638c:	d822      	bhi.n	80063d4 <_printf_i+0x64>
 800638e:	2963      	cmp	r1, #99	; 0x63
 8006390:	d036      	beq.n	8006400 <_printf_i+0x90>
 8006392:	d80a      	bhi.n	80063aa <_printf_i+0x3a>
 8006394:	2900      	cmp	r1, #0
 8006396:	f000 80b9 	beq.w	800650c <_printf_i+0x19c>
 800639a:	2958      	cmp	r1, #88	; 0x58
 800639c:	f000 8083 	beq.w	80064a6 <_printf_i+0x136>
 80063a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063a8:	e032      	b.n	8006410 <_printf_i+0xa0>
 80063aa:	2964      	cmp	r1, #100	; 0x64
 80063ac:	d001      	beq.n	80063b2 <_printf_i+0x42>
 80063ae:	2969      	cmp	r1, #105	; 0x69
 80063b0:	d1f6      	bne.n	80063a0 <_printf_i+0x30>
 80063b2:	6820      	ldr	r0, [r4, #0]
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	0605      	lsls	r5, r0, #24
 80063b8:	f103 0104 	add.w	r1, r3, #4
 80063bc:	d52a      	bpl.n	8006414 <_printf_i+0xa4>
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da03      	bge.n	80063ce <_printf_i+0x5e>
 80063c6:	222d      	movs	r2, #45	; 0x2d
 80063c8:	425b      	negs	r3, r3
 80063ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063ce:	486f      	ldr	r0, [pc, #444]	; (800658c <_printf_i+0x21c>)
 80063d0:	220a      	movs	r2, #10
 80063d2:	e039      	b.n	8006448 <_printf_i+0xd8>
 80063d4:	2973      	cmp	r1, #115	; 0x73
 80063d6:	f000 809d 	beq.w	8006514 <_printf_i+0x1a4>
 80063da:	d808      	bhi.n	80063ee <_printf_i+0x7e>
 80063dc:	296f      	cmp	r1, #111	; 0x6f
 80063de:	d020      	beq.n	8006422 <_printf_i+0xb2>
 80063e0:	2970      	cmp	r1, #112	; 0x70
 80063e2:	d1dd      	bne.n	80063a0 <_printf_i+0x30>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	f043 0320 	orr.w	r3, r3, #32
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	e003      	b.n	80063f6 <_printf_i+0x86>
 80063ee:	2975      	cmp	r1, #117	; 0x75
 80063f0:	d017      	beq.n	8006422 <_printf_i+0xb2>
 80063f2:	2978      	cmp	r1, #120	; 0x78
 80063f4:	d1d4      	bne.n	80063a0 <_printf_i+0x30>
 80063f6:	2378      	movs	r3, #120	; 0x78
 80063f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063fc:	4864      	ldr	r0, [pc, #400]	; (8006590 <_printf_i+0x220>)
 80063fe:	e055      	b.n	80064ac <_printf_i+0x13c>
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	1d19      	adds	r1, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6011      	str	r1, [r2, #0]
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e08c      	b.n	800652e <_printf_i+0x1be>
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6011      	str	r1, [r2, #0]
 8006418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800641c:	bf18      	it	ne
 800641e:	b21b      	sxthne	r3, r3
 8006420:	e7cf      	b.n	80063c2 <_printf_i+0x52>
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	1d18      	adds	r0, r3, #4
 8006428:	6010      	str	r0, [r2, #0]
 800642a:	0628      	lsls	r0, r5, #24
 800642c:	d501      	bpl.n	8006432 <_printf_i+0xc2>
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	e002      	b.n	8006438 <_printf_i+0xc8>
 8006432:	0668      	lsls	r0, r5, #25
 8006434:	d5fb      	bpl.n	800642e <_printf_i+0xbe>
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	4854      	ldr	r0, [pc, #336]	; (800658c <_printf_i+0x21c>)
 800643a:	296f      	cmp	r1, #111	; 0x6f
 800643c:	bf14      	ite	ne
 800643e:	220a      	movne	r2, #10
 8006440:	2208      	moveq	r2, #8
 8006442:	2100      	movs	r1, #0
 8006444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006448:	6865      	ldr	r5, [r4, #4]
 800644a:	60a5      	str	r5, [r4, #8]
 800644c:	2d00      	cmp	r5, #0
 800644e:	f2c0 8095 	blt.w	800657c <_printf_i+0x20c>
 8006452:	6821      	ldr	r1, [r4, #0]
 8006454:	f021 0104 	bic.w	r1, r1, #4
 8006458:	6021      	str	r1, [r4, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d13d      	bne.n	80064da <_printf_i+0x16a>
 800645e:	2d00      	cmp	r5, #0
 8006460:	f040 808e 	bne.w	8006580 <_printf_i+0x210>
 8006464:	4665      	mov	r5, ip
 8006466:	2a08      	cmp	r2, #8
 8006468:	d10b      	bne.n	8006482 <_printf_i+0x112>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	07db      	lsls	r3, r3, #31
 800646e:	d508      	bpl.n	8006482 <_printf_i+0x112>
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	6862      	ldr	r2, [r4, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	bfde      	ittt	le
 8006478:	2330      	movle	r3, #48	; 0x30
 800647a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800647e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006482:	ebac 0305 	sub.w	r3, ip, r5
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	f8cd 8000 	str.w	r8, [sp]
 800648c:	463b      	mov	r3, r7
 800648e:	aa03      	add	r2, sp, #12
 8006490:	4621      	mov	r1, r4
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff fef6 	bl	8006284 <_printf_common>
 8006498:	3001      	adds	r0, #1
 800649a:	d14d      	bne.n	8006538 <_printf_i+0x1c8>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	b005      	add	sp, #20
 80064a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064a6:	4839      	ldr	r0, [pc, #228]	; (800658c <_printf_i+0x21c>)
 80064a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	1d1d      	adds	r5, r3, #4
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6015      	str	r5, [r2, #0]
 80064b6:	060a      	lsls	r2, r1, #24
 80064b8:	d50b      	bpl.n	80064d2 <_printf_i+0x162>
 80064ba:	07ca      	lsls	r2, r1, #31
 80064bc:	bf44      	itt	mi
 80064be:	f041 0120 	orrmi.w	r1, r1, #32
 80064c2:	6021      	strmi	r1, [r4, #0]
 80064c4:	b91b      	cbnz	r3, 80064ce <_printf_i+0x15e>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	f022 0220 	bic.w	r2, r2, #32
 80064cc:	6022      	str	r2, [r4, #0]
 80064ce:	2210      	movs	r2, #16
 80064d0:	e7b7      	b.n	8006442 <_printf_i+0xd2>
 80064d2:	064d      	lsls	r5, r1, #25
 80064d4:	bf48      	it	mi
 80064d6:	b29b      	uxthmi	r3, r3
 80064d8:	e7ef      	b.n	80064ba <_printf_i+0x14a>
 80064da:	4665      	mov	r5, ip
 80064dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e0:	fb02 3311 	mls	r3, r2, r1, r3
 80064e4:	5cc3      	ldrb	r3, [r0, r3]
 80064e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064ea:	460b      	mov	r3, r1
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d1f5      	bne.n	80064dc <_printf_i+0x16c>
 80064f0:	e7b9      	b.n	8006466 <_printf_i+0xf6>
 80064f2:	6813      	ldr	r3, [r2, #0]
 80064f4:	6825      	ldr	r5, [r4, #0]
 80064f6:	6961      	ldr	r1, [r4, #20]
 80064f8:	1d18      	adds	r0, r3, #4
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	0628      	lsls	r0, r5, #24
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	d501      	bpl.n	8006506 <_printf_i+0x196>
 8006502:	6019      	str	r1, [r3, #0]
 8006504:	e002      	b.n	800650c <_printf_i+0x19c>
 8006506:	066a      	lsls	r2, r5, #25
 8006508:	d5fb      	bpl.n	8006502 <_printf_i+0x192>
 800650a:	8019      	strh	r1, [r3, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	4665      	mov	r5, ip
 8006512:	e7b9      	b.n	8006488 <_printf_i+0x118>
 8006514:	6813      	ldr	r3, [r2, #0]
 8006516:	1d19      	adds	r1, r3, #4
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	681d      	ldr	r5, [r3, #0]
 800651c:	6862      	ldr	r2, [r4, #4]
 800651e:	2100      	movs	r1, #0
 8006520:	4628      	mov	r0, r5
 8006522:	f7f9 fe6d 	bl	8000200 <memchr>
 8006526:	b108      	cbz	r0, 800652c <_printf_i+0x1bc>
 8006528:	1b40      	subs	r0, r0, r5
 800652a:	6060      	str	r0, [r4, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2300      	movs	r3, #0
 8006532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006536:	e7a7      	b.n	8006488 <_printf_i+0x118>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	462a      	mov	r2, r5
 800653c:	4639      	mov	r1, r7
 800653e:	4630      	mov	r0, r6
 8006540:	47c0      	blx	r8
 8006542:	3001      	adds	r0, #1
 8006544:	d0aa      	beq.n	800649c <_printf_i+0x12c>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	079b      	lsls	r3, r3, #30
 800654a:	d413      	bmi.n	8006574 <_printf_i+0x204>
 800654c:	68e0      	ldr	r0, [r4, #12]
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	4298      	cmp	r0, r3
 8006552:	bfb8      	it	lt
 8006554:	4618      	movlt	r0, r3
 8006556:	e7a3      	b.n	80064a0 <_printf_i+0x130>
 8006558:	2301      	movs	r3, #1
 800655a:	464a      	mov	r2, r9
 800655c:	4639      	mov	r1, r7
 800655e:	4630      	mov	r0, r6
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d09a      	beq.n	800649c <_printf_i+0x12c>
 8006566:	3501      	adds	r5, #1
 8006568:	68e3      	ldr	r3, [r4, #12]
 800656a:	9a03      	ldr	r2, [sp, #12]
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	42ab      	cmp	r3, r5
 8006570:	dcf2      	bgt.n	8006558 <_printf_i+0x1e8>
 8006572:	e7eb      	b.n	800654c <_printf_i+0x1dc>
 8006574:	2500      	movs	r5, #0
 8006576:	f104 0919 	add.w	r9, r4, #25
 800657a:	e7f5      	b.n	8006568 <_printf_i+0x1f8>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ac      	bne.n	80064da <_printf_i+0x16a>
 8006580:	7803      	ldrb	r3, [r0, #0]
 8006582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658a:	e76c      	b.n	8006466 <_printf_i+0xf6>
 800658c:	08007266 	.word	0x08007266
 8006590:	08007277 	.word	0x08007277

08006594 <siscanf>:
 8006594:	b40e      	push	{r1, r2, r3}
 8006596:	b530      	push	{r4, r5, lr}
 8006598:	b09c      	sub	sp, #112	; 0x70
 800659a:	ac1f      	add	r4, sp, #124	; 0x7c
 800659c:	f44f 7201 	mov.w	r2, #516	; 0x204
 80065a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80065a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80065a8:	9002      	str	r0, [sp, #8]
 80065aa:	9006      	str	r0, [sp, #24]
 80065ac:	f7f9 fe10 	bl	80001d0 <strlen>
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <siscanf+0x4c>)
 80065b2:	9003      	str	r0, [sp, #12]
 80065b4:	9007      	str	r0, [sp, #28]
 80065b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b8:	480a      	ldr	r0, [pc, #40]	; (80065e4 <siscanf+0x50>)
 80065ba:	9401      	str	r4, [sp, #4]
 80065bc:	2300      	movs	r3, #0
 80065be:	930f      	str	r3, [sp, #60]	; 0x3c
 80065c0:	9314      	str	r3, [sp, #80]	; 0x50
 80065c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065ca:	462a      	mov	r2, r5
 80065cc:	4623      	mov	r3, r4
 80065ce:	a902      	add	r1, sp, #8
 80065d0:	6800      	ldr	r0, [r0, #0]
 80065d2:	f000 f991 	bl	80068f8 <__ssvfiscanf_r>
 80065d6:	b01c      	add	sp, #112	; 0x70
 80065d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065dc:	b003      	add	sp, #12
 80065de:	4770      	bx	lr
 80065e0:	080065e9 	.word	0x080065e9
 80065e4:	20000010 	.word	0x20000010

080065e8 <__seofread>:
 80065e8:	2000      	movs	r0, #0
 80065ea:	4770      	bx	lr

080065ec <strcpy>:
 80065ec:	4603      	mov	r3, r0
 80065ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065f2:	f803 2b01 	strb.w	r2, [r3], #1
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d1f9      	bne.n	80065ee <strcpy+0x2>
 80065fa:	4770      	bx	lr

080065fc <strncmp>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	b16a      	cbz	r2, 800661c <strncmp+0x20>
 8006600:	3901      	subs	r1, #1
 8006602:	1884      	adds	r4, r0, r2
 8006604:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006608:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800660c:	4293      	cmp	r3, r2
 800660e:	d103      	bne.n	8006618 <strncmp+0x1c>
 8006610:	42a0      	cmp	r0, r4
 8006612:	d001      	beq.n	8006618 <strncmp+0x1c>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f5      	bne.n	8006604 <strncmp+0x8>
 8006618:	1a98      	subs	r0, r3, r2
 800661a:	bd10      	pop	{r4, pc}
 800661c:	4610      	mov	r0, r2
 800661e:	e7fc      	b.n	800661a <strncmp+0x1e>

08006620 <_strtoul_l.isra.0>:
 8006620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	4680      	mov	r8, r0
 8006626:	4689      	mov	r9, r1
 8006628:	4692      	mov	sl, r2
 800662a:	461e      	mov	r6, r3
 800662c:	460f      	mov	r7, r1
 800662e:	463d      	mov	r5, r7
 8006630:	9808      	ldr	r0, [sp, #32]
 8006632:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006636:	f000 f897 	bl	8006768 <__locale_ctype_ptr_l>
 800663a:	4420      	add	r0, r4
 800663c:	7843      	ldrb	r3, [r0, #1]
 800663e:	f013 0308 	ands.w	r3, r3, #8
 8006642:	d130      	bne.n	80066a6 <_strtoul_l.isra.0+0x86>
 8006644:	2c2d      	cmp	r4, #45	; 0x2d
 8006646:	d130      	bne.n	80066aa <_strtoul_l.isra.0+0x8a>
 8006648:	787c      	ldrb	r4, [r7, #1]
 800664a:	1cbd      	adds	r5, r7, #2
 800664c:	2101      	movs	r1, #1
 800664e:	2e00      	cmp	r6, #0
 8006650:	d05c      	beq.n	800670c <_strtoul_l.isra.0+0xec>
 8006652:	2e10      	cmp	r6, #16
 8006654:	d109      	bne.n	800666a <_strtoul_l.isra.0+0x4a>
 8006656:	2c30      	cmp	r4, #48	; 0x30
 8006658:	d107      	bne.n	800666a <_strtoul_l.isra.0+0x4a>
 800665a:	782b      	ldrb	r3, [r5, #0]
 800665c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006660:	2b58      	cmp	r3, #88	; 0x58
 8006662:	d14e      	bne.n	8006702 <_strtoul_l.isra.0+0xe2>
 8006664:	786c      	ldrb	r4, [r5, #1]
 8006666:	2610      	movs	r6, #16
 8006668:	3502      	adds	r5, #2
 800666a:	f04f 32ff 	mov.w	r2, #4294967295
 800666e:	2300      	movs	r3, #0
 8006670:	fbb2 f2f6 	udiv	r2, r2, r6
 8006674:	fb06 fc02 	mul.w	ip, r6, r2
 8006678:	ea6f 0c0c 	mvn.w	ip, ip
 800667c:	4618      	mov	r0, r3
 800667e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006682:	2f09      	cmp	r7, #9
 8006684:	d817      	bhi.n	80066b6 <_strtoul_l.isra.0+0x96>
 8006686:	463c      	mov	r4, r7
 8006688:	42a6      	cmp	r6, r4
 800668a:	dd23      	ble.n	80066d4 <_strtoul_l.isra.0+0xb4>
 800668c:	2b00      	cmp	r3, #0
 800668e:	db1e      	blt.n	80066ce <_strtoul_l.isra.0+0xae>
 8006690:	4282      	cmp	r2, r0
 8006692:	d31c      	bcc.n	80066ce <_strtoul_l.isra.0+0xae>
 8006694:	d101      	bne.n	800669a <_strtoul_l.isra.0+0x7a>
 8006696:	45a4      	cmp	ip, r4
 8006698:	db19      	blt.n	80066ce <_strtoul_l.isra.0+0xae>
 800669a:	fb00 4006 	mla	r0, r0, r6, r4
 800669e:	2301      	movs	r3, #1
 80066a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066a4:	e7eb      	b.n	800667e <_strtoul_l.isra.0+0x5e>
 80066a6:	462f      	mov	r7, r5
 80066a8:	e7c1      	b.n	800662e <_strtoul_l.isra.0+0xe>
 80066aa:	2c2b      	cmp	r4, #43	; 0x2b
 80066ac:	bf04      	itt	eq
 80066ae:	1cbd      	addeq	r5, r7, #2
 80066b0:	787c      	ldrbeq	r4, [r7, #1]
 80066b2:	4619      	mov	r1, r3
 80066b4:	e7cb      	b.n	800664e <_strtoul_l.isra.0+0x2e>
 80066b6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80066ba:	2f19      	cmp	r7, #25
 80066bc:	d801      	bhi.n	80066c2 <_strtoul_l.isra.0+0xa2>
 80066be:	3c37      	subs	r4, #55	; 0x37
 80066c0:	e7e2      	b.n	8006688 <_strtoul_l.isra.0+0x68>
 80066c2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80066c6:	2f19      	cmp	r7, #25
 80066c8:	d804      	bhi.n	80066d4 <_strtoul_l.isra.0+0xb4>
 80066ca:	3c57      	subs	r4, #87	; 0x57
 80066cc:	e7dc      	b.n	8006688 <_strtoul_l.isra.0+0x68>
 80066ce:	f04f 33ff 	mov.w	r3, #4294967295
 80066d2:	e7e5      	b.n	80066a0 <_strtoul_l.isra.0+0x80>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da09      	bge.n	80066ec <_strtoul_l.isra.0+0xcc>
 80066d8:	2322      	movs	r3, #34	; 0x22
 80066da:	f8c8 3000 	str.w	r3, [r8]
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	f1ba 0f00 	cmp.w	sl, #0
 80066e6:	d107      	bne.n	80066f8 <_strtoul_l.isra.0+0xd8>
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ec:	b101      	cbz	r1, 80066f0 <_strtoul_l.isra.0+0xd0>
 80066ee:	4240      	negs	r0, r0
 80066f0:	f1ba 0f00 	cmp.w	sl, #0
 80066f4:	d0f8      	beq.n	80066e8 <_strtoul_l.isra.0+0xc8>
 80066f6:	b10b      	cbz	r3, 80066fc <_strtoul_l.isra.0+0xdc>
 80066f8:	f105 39ff 	add.w	r9, r5, #4294967295
 80066fc:	f8ca 9000 	str.w	r9, [sl]
 8006700:	e7f2      	b.n	80066e8 <_strtoul_l.isra.0+0xc8>
 8006702:	2430      	movs	r4, #48	; 0x30
 8006704:	2e00      	cmp	r6, #0
 8006706:	d1b0      	bne.n	800666a <_strtoul_l.isra.0+0x4a>
 8006708:	2608      	movs	r6, #8
 800670a:	e7ae      	b.n	800666a <_strtoul_l.isra.0+0x4a>
 800670c:	2c30      	cmp	r4, #48	; 0x30
 800670e:	d0a4      	beq.n	800665a <_strtoul_l.isra.0+0x3a>
 8006710:	260a      	movs	r6, #10
 8006712:	e7aa      	b.n	800666a <_strtoul_l.isra.0+0x4a>

08006714 <_strtoul_r>:
 8006714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006716:	4c06      	ldr	r4, [pc, #24]	; (8006730 <_strtoul_r+0x1c>)
 8006718:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_strtoul_r+0x20>)
 800671a:	6824      	ldr	r4, [r4, #0]
 800671c:	6a24      	ldr	r4, [r4, #32]
 800671e:	2c00      	cmp	r4, #0
 8006720:	bf08      	it	eq
 8006722:	462c      	moveq	r4, r5
 8006724:	9400      	str	r4, [sp, #0]
 8006726:	f7ff ff7b 	bl	8006620 <_strtoul_l.isra.0>
 800672a:	b003      	add	sp, #12
 800672c:	bd30      	pop	{r4, r5, pc}
 800672e:	bf00      	nop
 8006730:	20000010 	.word	0x20000010
 8006734:	200000d8 	.word	0x200000d8

08006738 <strtoul>:
 8006738:	4b08      	ldr	r3, [pc, #32]	; (800675c <strtoul+0x24>)
 800673a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673c:	681c      	ldr	r4, [r3, #0]
 800673e:	4d08      	ldr	r5, [pc, #32]	; (8006760 <strtoul+0x28>)
 8006740:	6a23      	ldr	r3, [r4, #32]
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf08      	it	eq
 8006746:	462b      	moveq	r3, r5
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	4613      	mov	r3, r2
 800674c:	460a      	mov	r2, r1
 800674e:	4601      	mov	r1, r0
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff ff65 	bl	8006620 <_strtoul_l.isra.0>
 8006756:	b003      	add	sp, #12
 8006758:	bd30      	pop	{r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	20000010 	.word	0x20000010
 8006760:	200000d8 	.word	0x200000d8

08006764 <__env_lock>:
 8006764:	4770      	bx	lr

08006766 <__env_unlock>:
 8006766:	4770      	bx	lr

08006768 <__locale_ctype_ptr_l>:
 8006768:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800676c:	4770      	bx	lr
	...

08006770 <__locale_ctype_ptr>:
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <__locale_ctype_ptr+0x14>)
 8006772:	4a05      	ldr	r2, [pc, #20]	; (8006788 <__locale_ctype_ptr+0x18>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf08      	it	eq
 800677c:	4613      	moveq	r3, r2
 800677e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006782:	4770      	bx	lr
 8006784:	20000010 	.word	0x20000010
 8006788:	200000d8 	.word	0x200000d8

0800678c <__ascii_mbtowc>:
 800678c:	b082      	sub	sp, #8
 800678e:	b901      	cbnz	r1, 8006792 <__ascii_mbtowc+0x6>
 8006790:	a901      	add	r1, sp, #4
 8006792:	b142      	cbz	r2, 80067a6 <__ascii_mbtowc+0x1a>
 8006794:	b14b      	cbz	r3, 80067aa <__ascii_mbtowc+0x1e>
 8006796:	7813      	ldrb	r3, [r2, #0]
 8006798:	600b      	str	r3, [r1, #0]
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	1c10      	adds	r0, r2, #0
 800679e:	bf18      	it	ne
 80067a0:	2001      	movne	r0, #1
 80067a2:	b002      	add	sp, #8
 80067a4:	4770      	bx	lr
 80067a6:	4610      	mov	r0, r2
 80067a8:	e7fb      	b.n	80067a2 <__ascii_mbtowc+0x16>
 80067aa:	f06f 0001 	mvn.w	r0, #1
 80067ae:	e7f8      	b.n	80067a2 <__ascii_mbtowc+0x16>

080067b0 <memcpy>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	1e43      	subs	r3, r0, #1
 80067b4:	440a      	add	r2, r1
 80067b6:	4291      	cmp	r1, r2
 80067b8:	d100      	bne.n	80067bc <memcpy+0xc>
 80067ba:	bd10      	pop	{r4, pc}
 80067bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c4:	e7f7      	b.n	80067b6 <memcpy+0x6>

080067c6 <memmove>:
 80067c6:	4288      	cmp	r0, r1
 80067c8:	b510      	push	{r4, lr}
 80067ca:	eb01 0302 	add.w	r3, r1, r2
 80067ce:	d807      	bhi.n	80067e0 <memmove+0x1a>
 80067d0:	1e42      	subs	r2, r0, #1
 80067d2:	4299      	cmp	r1, r3
 80067d4:	d00a      	beq.n	80067ec <memmove+0x26>
 80067d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067de:	e7f8      	b.n	80067d2 <memmove+0xc>
 80067e0:	4283      	cmp	r3, r0
 80067e2:	d9f5      	bls.n	80067d0 <memmove+0xa>
 80067e4:	1881      	adds	r1, r0, r2
 80067e6:	1ad2      	subs	r2, r2, r3
 80067e8:	42d3      	cmn	r3, r2
 80067ea:	d100      	bne.n	80067ee <memmove+0x28>
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067f6:	e7f7      	b.n	80067e8 <memmove+0x22>

080067f8 <_realloc_r>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	4607      	mov	r7, r0
 80067fc:	4614      	mov	r4, r2
 80067fe:	460e      	mov	r6, r1
 8006800:	b921      	cbnz	r1, 800680c <_realloc_r+0x14>
 8006802:	4611      	mov	r1, r2
 8006804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006808:	f7fe bfc2 	b.w	8005790 <_malloc_r>
 800680c:	b922      	cbnz	r2, 8006818 <_realloc_r+0x20>
 800680e:	f7fe ff71 	bl	80056f4 <_free_r>
 8006812:	4625      	mov	r5, r4
 8006814:	4628      	mov	r0, r5
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	f000 fc1d 	bl	8007056 <_malloc_usable_size_r>
 800681c:	42a0      	cmp	r0, r4
 800681e:	d20f      	bcs.n	8006840 <_realloc_r+0x48>
 8006820:	4621      	mov	r1, r4
 8006822:	4638      	mov	r0, r7
 8006824:	f7fe ffb4 	bl	8005790 <_malloc_r>
 8006828:	4605      	mov	r5, r0
 800682a:	2800      	cmp	r0, #0
 800682c:	d0f2      	beq.n	8006814 <_realloc_r+0x1c>
 800682e:	4631      	mov	r1, r6
 8006830:	4622      	mov	r2, r4
 8006832:	f7ff ffbd 	bl	80067b0 <memcpy>
 8006836:	4631      	mov	r1, r6
 8006838:	4638      	mov	r0, r7
 800683a:	f7fe ff5b 	bl	80056f4 <_free_r>
 800683e:	e7e9      	b.n	8006814 <_realloc_r+0x1c>
 8006840:	4635      	mov	r5, r6
 8006842:	e7e7      	b.n	8006814 <_realloc_r+0x1c>

08006844 <_sungetc_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	1c4b      	adds	r3, r1, #1
 8006848:	4614      	mov	r4, r2
 800684a:	d103      	bne.n	8006854 <_sungetc_r+0x10>
 800684c:	f04f 35ff 	mov.w	r5, #4294967295
 8006850:	4628      	mov	r0, r5
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	8993      	ldrh	r3, [r2, #12]
 8006856:	f023 0320 	bic.w	r3, r3, #32
 800685a:	8193      	strh	r3, [r2, #12]
 800685c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800685e:	6852      	ldr	r2, [r2, #4]
 8006860:	b2cd      	uxtb	r5, r1
 8006862:	b18b      	cbz	r3, 8006888 <_sungetc_r+0x44>
 8006864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006866:	4293      	cmp	r3, r2
 8006868:	dd08      	ble.n	800687c <_sungetc_r+0x38>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	1e5a      	subs	r2, r3, #1
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006874:	6863      	ldr	r3, [r4, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	6063      	str	r3, [r4, #4]
 800687a:	e7e9      	b.n	8006850 <_sungetc_r+0xc>
 800687c:	4621      	mov	r1, r4
 800687e:	f000 fba3 	bl	8006fc8 <__submore>
 8006882:	2800      	cmp	r0, #0
 8006884:	d0f1      	beq.n	800686a <_sungetc_r+0x26>
 8006886:	e7e1      	b.n	800684c <_sungetc_r+0x8>
 8006888:	6921      	ldr	r1, [r4, #16]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	b151      	cbz	r1, 80068a4 <_sungetc_r+0x60>
 800688e:	4299      	cmp	r1, r3
 8006890:	d208      	bcs.n	80068a4 <_sungetc_r+0x60>
 8006892:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006896:	42a9      	cmp	r1, r5
 8006898:	d104      	bne.n	80068a4 <_sungetc_r+0x60>
 800689a:	3b01      	subs	r3, #1
 800689c:	3201      	adds	r2, #1
 800689e:	6023      	str	r3, [r4, #0]
 80068a0:	6062      	str	r2, [r4, #4]
 80068a2:	e7d5      	b.n	8006850 <_sungetc_r+0xc>
 80068a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80068a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ac:	6363      	str	r3, [r4, #52]	; 0x34
 80068ae:	2303      	movs	r3, #3
 80068b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80068b2:	4623      	mov	r3, r4
 80068b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7dc      	b.n	8006878 <_sungetc_r+0x34>

080068be <__ssrefill_r>:
 80068be:	b510      	push	{r4, lr}
 80068c0:	460c      	mov	r4, r1
 80068c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80068c4:	b169      	cbz	r1, 80068e2 <__ssrefill_r+0x24>
 80068c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ca:	4299      	cmp	r1, r3
 80068cc:	d001      	beq.n	80068d2 <__ssrefill_r+0x14>
 80068ce:	f7fe ff11 	bl	80056f4 <_free_r>
 80068d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	2000      	movs	r0, #0
 80068d8:	6360      	str	r0, [r4, #52]	; 0x34
 80068da:	b113      	cbz	r3, 80068e2 <__ssrefill_r+0x24>
 80068dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068de:	6023      	str	r3, [r4, #0]
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	6063      	str	r3, [r4, #4]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f043 0320 	orr.w	r3, r3, #32
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	e7f3      	b.n	80068e0 <__ssrefill_r+0x22>

080068f8 <__ssvfiscanf_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006900:	460c      	mov	r4, r1
 8006902:	2100      	movs	r1, #0
 8006904:	9144      	str	r1, [sp, #272]	; 0x110
 8006906:	9145      	str	r1, [sp, #276]	; 0x114
 8006908:	499f      	ldr	r1, [pc, #636]	; (8006b88 <__ssvfiscanf_r+0x290>)
 800690a:	91a0      	str	r1, [sp, #640]	; 0x280
 800690c:	f10d 0804 	add.w	r8, sp, #4
 8006910:	499e      	ldr	r1, [pc, #632]	; (8006b8c <__ssvfiscanf_r+0x294>)
 8006912:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8006b90 <__ssvfiscanf_r+0x298>
 8006916:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800691a:	4606      	mov	r6, r0
 800691c:	4692      	mov	sl, r2
 800691e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	270a      	movs	r7, #10
 8006924:	f89a 3000 	ldrb.w	r3, [sl]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 812a 	beq.w	8006b82 <__ssvfiscanf_r+0x28a>
 800692e:	4655      	mov	r5, sl
 8006930:	f7ff ff1e 	bl	8006770 <__locale_ctype_ptr>
 8006934:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006938:	4458      	add	r0, fp
 800693a:	7843      	ldrb	r3, [r0, #1]
 800693c:	f013 0308 	ands.w	r3, r3, #8
 8006940:	d01c      	beq.n	800697c <__ssvfiscanf_r+0x84>
 8006942:	6863      	ldr	r3, [r4, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd12      	ble.n	800696e <__ssvfiscanf_r+0x76>
 8006948:	f7ff ff12 	bl	8006770 <__locale_ctype_ptr>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	4410      	add	r0, r2
 8006952:	7842      	ldrb	r2, [r0, #1]
 8006954:	0712      	lsls	r2, r2, #28
 8006956:	d401      	bmi.n	800695c <__ssvfiscanf_r+0x64>
 8006958:	46aa      	mov	sl, r5
 800695a:	e7e3      	b.n	8006924 <__ssvfiscanf_r+0x2c>
 800695c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800695e:	3201      	adds	r2, #1
 8006960:	9245      	str	r2, [sp, #276]	; 0x114
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	3301      	adds	r3, #1
 8006966:	3a01      	subs	r2, #1
 8006968:	6062      	str	r2, [r4, #4]
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	e7e9      	b.n	8006942 <__ssvfiscanf_r+0x4a>
 800696e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006970:	4621      	mov	r1, r4
 8006972:	4630      	mov	r0, r6
 8006974:	4798      	blx	r3
 8006976:	2800      	cmp	r0, #0
 8006978:	d0e6      	beq.n	8006948 <__ssvfiscanf_r+0x50>
 800697a:	e7ed      	b.n	8006958 <__ssvfiscanf_r+0x60>
 800697c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006980:	f040 8082 	bne.w	8006a88 <__ssvfiscanf_r+0x190>
 8006984:	9343      	str	r3, [sp, #268]	; 0x10c
 8006986:	9341      	str	r3, [sp, #260]	; 0x104
 8006988:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800698c:	2b2a      	cmp	r3, #42	; 0x2a
 800698e:	d103      	bne.n	8006998 <__ssvfiscanf_r+0xa0>
 8006990:	2310      	movs	r3, #16
 8006992:	9341      	str	r3, [sp, #260]	; 0x104
 8006994:	f10a 0502 	add.w	r5, sl, #2
 8006998:	46aa      	mov	sl, r5
 800699a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800699e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80069a2:	2a09      	cmp	r2, #9
 80069a4:	d922      	bls.n	80069ec <__ssvfiscanf_r+0xf4>
 80069a6:	2203      	movs	r2, #3
 80069a8:	4879      	ldr	r0, [pc, #484]	; (8006b90 <__ssvfiscanf_r+0x298>)
 80069aa:	f7f9 fc29 	bl	8000200 <memchr>
 80069ae:	b138      	cbz	r0, 80069c0 <__ssvfiscanf_r+0xc8>
 80069b0:	eba0 0309 	sub.w	r3, r0, r9
 80069b4:	2001      	movs	r0, #1
 80069b6:	4098      	lsls	r0, r3
 80069b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80069ba:	4318      	orrs	r0, r3
 80069bc:	9041      	str	r0, [sp, #260]	; 0x104
 80069be:	46aa      	mov	sl, r5
 80069c0:	f89a 3000 	ldrb.w	r3, [sl]
 80069c4:	2b67      	cmp	r3, #103	; 0x67
 80069c6:	f10a 0501 	add.w	r5, sl, #1
 80069ca:	d82b      	bhi.n	8006a24 <__ssvfiscanf_r+0x12c>
 80069cc:	2b65      	cmp	r3, #101	; 0x65
 80069ce:	f080 809f 	bcs.w	8006b10 <__ssvfiscanf_r+0x218>
 80069d2:	2b47      	cmp	r3, #71	; 0x47
 80069d4:	d810      	bhi.n	80069f8 <__ssvfiscanf_r+0x100>
 80069d6:	2b45      	cmp	r3, #69	; 0x45
 80069d8:	f080 809a 	bcs.w	8006b10 <__ssvfiscanf_r+0x218>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d06c      	beq.n	8006aba <__ssvfiscanf_r+0x1c2>
 80069e0:	2b25      	cmp	r3, #37	; 0x25
 80069e2:	d051      	beq.n	8006a88 <__ssvfiscanf_r+0x190>
 80069e4:	2303      	movs	r3, #3
 80069e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80069e8:	9742      	str	r7, [sp, #264]	; 0x108
 80069ea:	e027      	b.n	8006a3c <__ssvfiscanf_r+0x144>
 80069ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80069ee:	fb07 1303 	mla	r3, r7, r3, r1
 80069f2:	3b30      	subs	r3, #48	; 0x30
 80069f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80069f6:	e7cf      	b.n	8006998 <__ssvfiscanf_r+0xa0>
 80069f8:	2b5b      	cmp	r3, #91	; 0x5b
 80069fa:	d06a      	beq.n	8006ad2 <__ssvfiscanf_r+0x1da>
 80069fc:	d80c      	bhi.n	8006a18 <__ssvfiscanf_r+0x120>
 80069fe:	2b58      	cmp	r3, #88	; 0x58
 8006a00:	d1f0      	bne.n	80069e4 <__ssvfiscanf_r+0xec>
 8006a02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a08:	9241      	str	r2, [sp, #260]	; 0x104
 8006a0a:	2210      	movs	r2, #16
 8006a0c:	9242      	str	r2, [sp, #264]	; 0x108
 8006a0e:	2b6e      	cmp	r3, #110	; 0x6e
 8006a10:	bf8c      	ite	hi
 8006a12:	2304      	movhi	r3, #4
 8006a14:	2303      	movls	r3, #3
 8006a16:	e010      	b.n	8006a3a <__ssvfiscanf_r+0x142>
 8006a18:	2b63      	cmp	r3, #99	; 0x63
 8006a1a:	d065      	beq.n	8006ae8 <__ssvfiscanf_r+0x1f0>
 8006a1c:	2b64      	cmp	r3, #100	; 0x64
 8006a1e:	d1e1      	bne.n	80069e4 <__ssvfiscanf_r+0xec>
 8006a20:	9742      	str	r7, [sp, #264]	; 0x108
 8006a22:	e7f4      	b.n	8006a0e <__ssvfiscanf_r+0x116>
 8006a24:	2b70      	cmp	r3, #112	; 0x70
 8006a26:	d04b      	beq.n	8006ac0 <__ssvfiscanf_r+0x1c8>
 8006a28:	d826      	bhi.n	8006a78 <__ssvfiscanf_r+0x180>
 8006a2a:	2b6e      	cmp	r3, #110	; 0x6e
 8006a2c:	d062      	beq.n	8006af4 <__ssvfiscanf_r+0x1fc>
 8006a2e:	d84c      	bhi.n	8006aca <__ssvfiscanf_r+0x1d2>
 8006a30:	2b69      	cmp	r3, #105	; 0x69
 8006a32:	d1d7      	bne.n	80069e4 <__ssvfiscanf_r+0xec>
 8006a34:	2300      	movs	r3, #0
 8006a36:	9342      	str	r3, [sp, #264]	; 0x108
 8006a38:	2303      	movs	r3, #3
 8006a3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8006a3c:	6863      	ldr	r3, [r4, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dd68      	ble.n	8006b14 <__ssvfiscanf_r+0x21c>
 8006a42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a44:	0659      	lsls	r1, r3, #25
 8006a46:	d407      	bmi.n	8006a58 <__ssvfiscanf_r+0x160>
 8006a48:	f7ff fe92 	bl	8006770 <__locale_ctype_ptr>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	4410      	add	r0, r2
 8006a52:	7842      	ldrb	r2, [r0, #1]
 8006a54:	0712      	lsls	r2, r2, #28
 8006a56:	d464      	bmi.n	8006b22 <__ssvfiscanf_r+0x22a>
 8006a58:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	dc73      	bgt.n	8006b46 <__ssvfiscanf_r+0x24e>
 8006a5e:	466b      	mov	r3, sp
 8006a60:	4622      	mov	r2, r4
 8006a62:	a941      	add	r1, sp, #260	; 0x104
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 f897 	bl	8006b98 <_scanf_chars>
 8006a6a:	2801      	cmp	r0, #1
 8006a6c:	f000 8089 	beq.w	8006b82 <__ssvfiscanf_r+0x28a>
 8006a70:	2802      	cmp	r0, #2
 8006a72:	f47f af71 	bne.w	8006958 <__ssvfiscanf_r+0x60>
 8006a76:	e01d      	b.n	8006ab4 <__ssvfiscanf_r+0x1bc>
 8006a78:	2b75      	cmp	r3, #117	; 0x75
 8006a7a:	d0d1      	beq.n	8006a20 <__ssvfiscanf_r+0x128>
 8006a7c:	2b78      	cmp	r3, #120	; 0x78
 8006a7e:	d0c0      	beq.n	8006a02 <__ssvfiscanf_r+0x10a>
 8006a80:	2b73      	cmp	r3, #115	; 0x73
 8006a82:	d1af      	bne.n	80069e4 <__ssvfiscanf_r+0xec>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e7d8      	b.n	8006a3a <__ssvfiscanf_r+0x142>
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dd0c      	ble.n	8006aa8 <__ssvfiscanf_r+0x1b0>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	781a      	ldrb	r2, [r3, #0]
 8006a92:	455a      	cmp	r2, fp
 8006a94:	d175      	bne.n	8006b82 <__ssvfiscanf_r+0x28a>
 8006a96:	3301      	adds	r3, #1
 8006a98:	6862      	ldr	r2, [r4, #4]
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006a9e:	3a01      	subs	r2, #1
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	6062      	str	r2, [r4, #4]
 8006aa4:	9345      	str	r3, [sp, #276]	; 0x114
 8006aa6:	e757      	b.n	8006958 <__ssvfiscanf_r+0x60>
 8006aa8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4630      	mov	r0, r6
 8006aae:	4798      	blx	r3
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d0ec      	beq.n	8006a8e <__ssvfiscanf_r+0x196>
 8006ab4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d159      	bne.n	8006b6e <__ssvfiscanf_r+0x276>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295
 8006abe:	e05c      	b.n	8006b7a <__ssvfiscanf_r+0x282>
 8006ac0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ac2:	f042 0220 	orr.w	r2, r2, #32
 8006ac6:	9241      	str	r2, [sp, #260]	; 0x104
 8006ac8:	e79b      	b.n	8006a02 <__ssvfiscanf_r+0x10a>
 8006aca:	2308      	movs	r3, #8
 8006acc:	9342      	str	r3, [sp, #264]	; 0x108
 8006ace:	2304      	movs	r3, #4
 8006ad0:	e7b3      	b.n	8006a3a <__ssvfiscanf_r+0x142>
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	f000 f9b7 	bl	8006e48 <__sccl>
 8006ada:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae0:	9341      	str	r3, [sp, #260]	; 0x104
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e7a8      	b.n	8006a3a <__ssvfiscanf_r+0x142>
 8006ae8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aee:	9341      	str	r3, [sp, #260]	; 0x104
 8006af0:	2300      	movs	r3, #0
 8006af2:	e7a2      	b.n	8006a3a <__ssvfiscanf_r+0x142>
 8006af4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006af6:	06c3      	lsls	r3, r0, #27
 8006af8:	f53f af2e 	bmi.w	8006958 <__ssvfiscanf_r+0x60>
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b00:	1d19      	adds	r1, r3, #4
 8006b02:	9100      	str	r1, [sp, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	07c0      	lsls	r0, r0, #31
 8006b08:	bf4c      	ite	mi
 8006b0a:	801a      	strhmi	r2, [r3, #0]
 8006b0c:	601a      	strpl	r2, [r3, #0]
 8006b0e:	e723      	b.n	8006958 <__ssvfiscanf_r+0x60>
 8006b10:	2305      	movs	r3, #5
 8006b12:	e792      	b.n	8006a3a <__ssvfiscanf_r+0x142>
 8006b14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b16:	4621      	mov	r1, r4
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4798      	blx	r3
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d090      	beq.n	8006a42 <__ssvfiscanf_r+0x14a>
 8006b20:	e7c8      	b.n	8006ab4 <__ssvfiscanf_r+0x1bc>
 8006b22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b24:	3201      	adds	r2, #1
 8006b26:	9245      	str	r2, [sp, #276]	; 0x114
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	3a01      	subs	r2, #1
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	6062      	str	r2, [r4, #4]
 8006b30:	dd02      	ble.n	8006b38 <__ssvfiscanf_r+0x240>
 8006b32:	3301      	adds	r3, #1
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	e787      	b.n	8006a48 <__ssvfiscanf_r+0x150>
 8006b38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4798      	blx	r3
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d081      	beq.n	8006a48 <__ssvfiscanf_r+0x150>
 8006b44:	e7b6      	b.n	8006ab4 <__ssvfiscanf_r+0x1bc>
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	dc06      	bgt.n	8006b58 <__ssvfiscanf_r+0x260>
 8006b4a:	466b      	mov	r3, sp
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	a941      	add	r1, sp, #260	; 0x104
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 f885 	bl	8006c60 <_scanf_i>
 8006b56:	e788      	b.n	8006a6a <__ssvfiscanf_r+0x172>
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <__ssvfiscanf_r+0x29c>)
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f43f aefc 	beq.w	8006958 <__ssvfiscanf_r+0x60>
 8006b60:	466b      	mov	r3, sp
 8006b62:	4622      	mov	r2, r4
 8006b64:	a941      	add	r1, sp, #260	; 0x104
 8006b66:	4630      	mov	r0, r6
 8006b68:	f3af 8000 	nop.w
 8006b6c:	e77d      	b.n	8006a6a <__ssvfiscanf_r+0x172>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b74:	bf18      	it	ne
 8006b76:	f04f 30ff 	movne.w	r0, #4294967295
 8006b7a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b82:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006b84:	e7f9      	b.n	8006b7a <__ssvfiscanf_r+0x282>
 8006b86:	bf00      	nop
 8006b88:	08006845 	.word	0x08006845
 8006b8c:	080068bf 	.word	0x080068bf
 8006b90:	0800725b 	.word	0x0800725b
 8006b94:	00000000 	.word	0x00000000

08006b98 <_scanf_chars>:
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	4615      	mov	r5, r2
 8006b9e:	688a      	ldr	r2, [r1, #8]
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b932      	cbnz	r2, 8006bb4 <_scanf_chars+0x1c>
 8006ba6:	698a      	ldr	r2, [r1, #24]
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	bf14      	ite	ne
 8006bac:	f04f 32ff 	movne.w	r2, #4294967295
 8006bb0:	2201      	moveq	r2, #1
 8006bb2:	608a      	str	r2, [r1, #8]
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	06d1      	lsls	r1, r2, #27
 8006bb8:	bf5f      	itttt	pl
 8006bba:	681a      	ldrpl	r2, [r3, #0]
 8006bbc:	1d11      	addpl	r1, r2, #4
 8006bbe:	6019      	strpl	r1, [r3, #0]
 8006bc0:	6817      	ldrpl	r7, [r2, #0]
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	69a3      	ldr	r3, [r4, #24]
 8006bc6:	b1db      	cbz	r3, 8006c00 <_scanf_chars+0x68>
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d107      	bne.n	8006bdc <_scanf_chars+0x44>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	6962      	ldr	r2, [r4, #20]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	5cd3      	ldrb	r3, [r2, r3]
 8006bd4:	b9a3      	cbnz	r3, 8006c00 <_scanf_chars+0x68>
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d132      	bne.n	8006c40 <_scanf_chars+0xa8>
 8006bda:	e006      	b.n	8006bea <_scanf_chars+0x52>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d007      	beq.n	8006bf0 <_scanf_chars+0x58>
 8006be0:	2e00      	cmp	r6, #0
 8006be2:	d12d      	bne.n	8006c40 <_scanf_chars+0xa8>
 8006be4:	69a3      	ldr	r3, [r4, #24]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d12a      	bne.n	8006c40 <_scanf_chars+0xa8>
 8006bea:	2001      	movs	r0, #1
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	f7ff fdbe 	bl	8006770 <__locale_ctype_ptr>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4418      	add	r0, r3
 8006bfa:	7843      	ldrb	r3, [r0, #1]
 8006bfc:	071b      	lsls	r3, r3, #28
 8006bfe:	d4ef      	bmi.n	8006be0 <_scanf_chars+0x48>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	06da      	lsls	r2, r3, #27
 8006c04:	bf5e      	ittt	pl
 8006c06:	682b      	ldrpl	r3, [r5, #0]
 8006c08:	781b      	ldrbpl	r3, [r3, #0]
 8006c0a:	703b      	strbpl	r3, [r7, #0]
 8006c0c:	682a      	ldr	r2, [r5, #0]
 8006c0e:	686b      	ldr	r3, [r5, #4]
 8006c10:	f102 0201 	add.w	r2, r2, #1
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	68a2      	ldr	r2, [r4, #8]
 8006c18:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c1c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c20:	606b      	str	r3, [r5, #4]
 8006c22:	f106 0601 	add.w	r6, r6, #1
 8006c26:	bf58      	it	pl
 8006c28:	3701      	addpl	r7, #1
 8006c2a:	60a2      	str	r2, [r4, #8]
 8006c2c:	b142      	cbz	r2, 8006c40 <_scanf_chars+0xa8>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dcc8      	bgt.n	8006bc4 <_scanf_chars+0x2c>
 8006c32:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c36:	4629      	mov	r1, r5
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4798      	blx	r3
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d0c1      	beq.n	8006bc4 <_scanf_chars+0x2c>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f013 0310 	ands.w	r3, r3, #16
 8006c46:	d105      	bne.n	8006c54 <_scanf_chars+0xbc>
 8006c48:	68e2      	ldr	r2, [r4, #12]
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	60e2      	str	r2, [r4, #12]
 8006c4e:	69a2      	ldr	r2, [r4, #24]
 8006c50:	b102      	cbz	r2, 8006c54 <_scanf_chars+0xbc>
 8006c52:	703b      	strb	r3, [r7, #0]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	441e      	add	r6, r3
 8006c58:	6126      	str	r6, [r4, #16]
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e7c6      	b.n	8006bec <_scanf_chars+0x54>
	...

08006c60 <_scanf_i>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	469a      	mov	sl, r3
 8006c66:	4b74      	ldr	r3, [pc, #464]	; (8006e38 <_scanf_i+0x1d8>)
 8006c68:	460c      	mov	r4, r1
 8006c6a:	4683      	mov	fp, r0
 8006c6c:	4616      	mov	r6, r2
 8006c6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c72:	b087      	sub	sp, #28
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	68a7      	ldr	r7, [r4, #8]
 8006c78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006c7c:	4b6f      	ldr	r3, [pc, #444]	; (8006e3c <_scanf_i+0x1dc>)
 8006c7e:	69a1      	ldr	r1, [r4, #24]
 8006c80:	4a6f      	ldr	r2, [pc, #444]	; (8006e40 <_scanf_i+0x1e0>)
 8006c82:	2903      	cmp	r1, #3
 8006c84:	bf08      	it	eq
 8006c86:	461a      	moveq	r2, r3
 8006c88:	1e7b      	subs	r3, r7, #1
 8006c8a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006c8e:	bf84      	itt	hi
 8006c90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c94:	60a3      	strhi	r3, [r4, #8]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	9200      	str	r2, [sp, #0]
 8006c9a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006c9e:	bf88      	it	hi
 8006ca0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ca4:	f104 091c 	add.w	r9, r4, #28
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bf8c      	ite	hi
 8006cac:	197f      	addhi	r7, r7, r5
 8006cae:	2700      	movls	r7, #0
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	6831      	ldr	r1, [r6, #0]
 8006cba:	ab03      	add	r3, sp, #12
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006cc2:	7809      	ldrb	r1, [r1, #0]
 8006cc4:	f7f9 fa9c 	bl	8000200 <memchr>
 8006cc8:	9b01      	ldr	r3, [sp, #4]
 8006cca:	b330      	cbz	r0, 8006d1a <_scanf_i+0xba>
 8006ccc:	f1b8 0f01 	cmp.w	r8, #1
 8006cd0:	d15a      	bne.n	8006d88 <_scanf_i+0x128>
 8006cd2:	6862      	ldr	r2, [r4, #4]
 8006cd4:	b92a      	cbnz	r2, 8006ce2 <_scanf_i+0x82>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	2108      	movs	r1, #8
 8006cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cde:	6061      	str	r1, [r4, #4]
 8006ce0:	6022      	str	r2, [r4, #0]
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	68a2      	ldr	r2, [r4, #8]
 8006cec:	1e51      	subs	r1, r2, #1
 8006cee:	60a1      	str	r1, [r4, #8]
 8006cf0:	b19a      	cbz	r2, 8006d1a <_scanf_i+0xba>
 8006cf2:	6832      	ldr	r2, [r6, #0]
 8006cf4:	1c51      	adds	r1, r2, #1
 8006cf6:	6031      	str	r1, [r6, #0]
 8006cf8:	7812      	ldrb	r2, [r2, #0]
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	1c5d      	adds	r5, r3, #1
 8006cfe:	6873      	ldr	r3, [r6, #4]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	6073      	str	r3, [r6, #4]
 8006d06:	dc07      	bgt.n	8006d18 <_scanf_i+0xb8>
 8006d08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4658      	mov	r0, fp
 8006d10:	4798      	blx	r3
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f040 8086 	bne.w	8006e24 <_scanf_i+0x1c4>
 8006d18:	462b      	mov	r3, r5
 8006d1a:	f108 0801 	add.w	r8, r8, #1
 8006d1e:	f1b8 0f03 	cmp.w	r8, #3
 8006d22:	d1c8      	bne.n	8006cb6 <_scanf_i+0x56>
 8006d24:	6862      	ldr	r2, [r4, #4]
 8006d26:	b90a      	cbnz	r2, 8006d2c <_scanf_i+0xcc>
 8006d28:	220a      	movs	r2, #10
 8006d2a:	6062      	str	r2, [r4, #4]
 8006d2c:	6862      	ldr	r2, [r4, #4]
 8006d2e:	4945      	ldr	r1, [pc, #276]	; (8006e44 <_scanf_i+0x1e4>)
 8006d30:	6960      	ldr	r0, [r4, #20]
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	1a89      	subs	r1, r1, r2
 8006d36:	f000 f887 	bl	8006e48 <__sccl>
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	f04f 0800 	mov.w	r8, #0
 8006d40:	461d      	mov	r5, r3
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d03a      	beq.n	8006dc0 <_scanf_i+0x160>
 8006d4a:	6831      	ldr	r1, [r6, #0]
 8006d4c:	6960      	ldr	r0, [r4, #20]
 8006d4e:	f891 c000 	ldrb.w	ip, [r1]
 8006d52:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d032      	beq.n	8006dc0 <_scanf_i+0x160>
 8006d5a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006d5e:	d121      	bne.n	8006da4 <_scanf_i+0x144>
 8006d60:	0510      	lsls	r0, r2, #20
 8006d62:	d51f      	bpl.n	8006da4 <_scanf_i+0x144>
 8006d64:	f108 0801 	add.w	r8, r8, #1
 8006d68:	b117      	cbz	r7, 8006d70 <_scanf_i+0x110>
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	3f01      	subs	r7, #1
 8006d6e:	60a3      	str	r3, [r4, #8]
 8006d70:	6873      	ldr	r3, [r6, #4]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	6073      	str	r3, [r6, #4]
 8006d78:	dd1b      	ble.n	8006db2 <_scanf_i+0x152>
 8006d7a:	6833      	ldr	r3, [r6, #0]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	68a3      	ldr	r3, [r4, #8]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	e7dc      	b.n	8006d42 <_scanf_i+0xe2>
 8006d88:	f1b8 0f02 	cmp.w	r8, #2
 8006d8c:	d1ad      	bne.n	8006cea <_scanf_i+0x8a>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006d94:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006d98:	d1bf      	bne.n	8006d1a <_scanf_i+0xba>
 8006d9a:	2110      	movs	r1, #16
 8006d9c:	6061      	str	r1, [r4, #4]
 8006d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006da2:	e7a1      	b.n	8006ce8 <_scanf_i+0x88>
 8006da4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006da8:	6022      	str	r2, [r4, #0]
 8006daa:	780b      	ldrb	r3, [r1, #0]
 8006dac:	702b      	strb	r3, [r5, #0]
 8006dae:	3501      	adds	r5, #1
 8006db0:	e7de      	b.n	8006d70 <_scanf_i+0x110>
 8006db2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006db6:	4631      	mov	r1, r6
 8006db8:	4658      	mov	r0, fp
 8006dba:	4798      	blx	r3
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0df      	beq.n	8006d80 <_scanf_i+0x120>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	05d9      	lsls	r1, r3, #23
 8006dc4:	d50c      	bpl.n	8006de0 <_scanf_i+0x180>
 8006dc6:	454d      	cmp	r5, r9
 8006dc8:	d908      	bls.n	8006ddc <_scanf_i+0x17c>
 8006dca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	4798      	blx	r3
 8006dd8:	1e6f      	subs	r7, r5, #1
 8006dda:	463d      	mov	r5, r7
 8006ddc:	454d      	cmp	r5, r9
 8006dde:	d029      	beq.n	8006e34 <_scanf_i+0x1d4>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	f012 0210 	ands.w	r2, r2, #16
 8006de6:	d113      	bne.n	8006e10 <_scanf_i+0x1b0>
 8006de8:	702a      	strb	r2, [r5, #0]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	9e00      	ldr	r6, [sp, #0]
 8006dee:	4649      	mov	r1, r9
 8006df0:	4658      	mov	r0, fp
 8006df2:	47b0      	blx	r6
 8006df4:	f8da 3000 	ldr.w	r3, [sl]
 8006df8:	6821      	ldr	r1, [r4, #0]
 8006dfa:	1d1a      	adds	r2, r3, #4
 8006dfc:	f8ca 2000 	str.w	r2, [sl]
 8006e00:	f011 0f20 	tst.w	r1, #32
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	d010      	beq.n	8006e2a <_scanf_i+0x1ca>
 8006e08:	6018      	str	r0, [r3, #0]
 8006e0a:	68e3      	ldr	r3, [r4, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60e3      	str	r3, [r4, #12]
 8006e10:	eba5 0509 	sub.w	r5, r5, r9
 8006e14:	44a8      	add	r8, r5
 8006e16:	6925      	ldr	r5, [r4, #16]
 8006e18:	4445      	add	r5, r8
 8006e1a:	6125      	str	r5, [r4, #16]
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	b007      	add	sp, #28
 8006e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	e7ca      	b.n	8006dc0 <_scanf_i+0x160>
 8006e2a:	07ca      	lsls	r2, r1, #31
 8006e2c:	bf4c      	ite	mi
 8006e2e:	8018      	strhmi	r0, [r3, #0]
 8006e30:	6018      	strpl	r0, [r3, #0]
 8006e32:	e7ea      	b.n	8006e0a <_scanf_i+0x1aa>
 8006e34:	2001      	movs	r0, #1
 8006e36:	e7f2      	b.n	8006e1e <_scanf_i+0x1be>
 8006e38:	0800710c 	.word	0x0800710c
 8006e3c:	08006fa5 	.word	0x08006fa5
 8006e40:	08006715 	.word	0x08006715
 8006e44:	080072a2 	.word	0x080072a2

08006e48 <__sccl>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	780b      	ldrb	r3, [r1, #0]
 8006e4c:	2b5e      	cmp	r3, #94	; 0x5e
 8006e4e:	bf13      	iteet	ne
 8006e50:	1c4a      	addne	r2, r1, #1
 8006e52:	1c8a      	addeq	r2, r1, #2
 8006e54:	784b      	ldrbeq	r3, [r1, #1]
 8006e56:	2100      	movne	r1, #0
 8006e58:	bf08      	it	eq
 8006e5a:	2101      	moveq	r1, #1
 8006e5c:	1e44      	subs	r4, r0, #1
 8006e5e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006e62:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006e66:	42ac      	cmp	r4, r5
 8006e68:	d1fb      	bne.n	8006e62 <__sccl+0x1a>
 8006e6a:	b913      	cbnz	r3, 8006e72 <__sccl+0x2a>
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	4610      	mov	r0, r2
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	f081 0401 	eor.w	r4, r1, #1
 8006e76:	54c4      	strb	r4, [r0, r3]
 8006e78:	1c51      	adds	r1, r2, #1
 8006e7a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006e7e:	2d2d      	cmp	r5, #45	; 0x2d
 8006e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8006e84:	460a      	mov	r2, r1
 8006e86:	d006      	beq.n	8006e96 <__sccl+0x4e>
 8006e88:	2d5d      	cmp	r5, #93	; 0x5d
 8006e8a:	d0f0      	beq.n	8006e6e <__sccl+0x26>
 8006e8c:	b90d      	cbnz	r5, 8006e92 <__sccl+0x4a>
 8006e8e:	4632      	mov	r2, r6
 8006e90:	e7ed      	b.n	8006e6e <__sccl+0x26>
 8006e92:	462b      	mov	r3, r5
 8006e94:	e7ef      	b.n	8006e76 <__sccl+0x2e>
 8006e96:	780e      	ldrb	r6, [r1, #0]
 8006e98:	2e5d      	cmp	r6, #93	; 0x5d
 8006e9a:	d0fa      	beq.n	8006e92 <__sccl+0x4a>
 8006e9c:	42b3      	cmp	r3, r6
 8006e9e:	dcf8      	bgt.n	8006e92 <__sccl+0x4a>
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	429e      	cmp	r6, r3
 8006ea4:	54c4      	strb	r4, [r0, r3]
 8006ea6:	dcfb      	bgt.n	8006ea0 <__sccl+0x58>
 8006ea8:	3102      	adds	r1, #2
 8006eaa:	e7e6      	b.n	8006e7a <__sccl+0x32>

08006eac <_strtol_l.isra.0>:
 8006eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4689      	mov	r9, r1
 8006eb4:	4692      	mov	sl, r2
 8006eb6:	461e      	mov	r6, r3
 8006eb8:	460f      	mov	r7, r1
 8006eba:	463d      	mov	r5, r7
 8006ebc:	9808      	ldr	r0, [sp, #32]
 8006ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ec2:	f7ff fc51 	bl	8006768 <__locale_ctype_ptr_l>
 8006ec6:	4420      	add	r0, r4
 8006ec8:	7843      	ldrb	r3, [r0, #1]
 8006eca:	f013 0308 	ands.w	r3, r3, #8
 8006ece:	d132      	bne.n	8006f36 <_strtol_l.isra.0+0x8a>
 8006ed0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ed2:	d132      	bne.n	8006f3a <_strtol_l.isra.0+0x8e>
 8006ed4:	787c      	ldrb	r4, [r7, #1]
 8006ed6:	1cbd      	adds	r5, r7, #2
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d05d      	beq.n	8006f9a <_strtol_l.isra.0+0xee>
 8006ede:	2e10      	cmp	r6, #16
 8006ee0:	d109      	bne.n	8006ef6 <_strtol_l.isra.0+0x4a>
 8006ee2:	2c30      	cmp	r4, #48	; 0x30
 8006ee4:	d107      	bne.n	8006ef6 <_strtol_l.isra.0+0x4a>
 8006ee6:	782b      	ldrb	r3, [r5, #0]
 8006ee8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006eec:	2b58      	cmp	r3, #88	; 0x58
 8006eee:	d14f      	bne.n	8006f90 <_strtol_l.isra.0+0xe4>
 8006ef0:	786c      	ldrb	r4, [r5, #1]
 8006ef2:	2610      	movs	r6, #16
 8006ef4:	3502      	adds	r5, #2
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006efe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006f02:	2700      	movs	r7, #0
 8006f04:	fbb1 fcf6 	udiv	ip, r1, r6
 8006f08:	4638      	mov	r0, r7
 8006f0a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006f0e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006f12:	2b09      	cmp	r3, #9
 8006f14:	d817      	bhi.n	8006f46 <_strtol_l.isra.0+0x9a>
 8006f16:	461c      	mov	r4, r3
 8006f18:	42a6      	cmp	r6, r4
 8006f1a:	dd23      	ble.n	8006f64 <_strtol_l.isra.0+0xb8>
 8006f1c:	1c7b      	adds	r3, r7, #1
 8006f1e:	d007      	beq.n	8006f30 <_strtol_l.isra.0+0x84>
 8006f20:	4584      	cmp	ip, r0
 8006f22:	d31c      	bcc.n	8006f5e <_strtol_l.isra.0+0xb2>
 8006f24:	d101      	bne.n	8006f2a <_strtol_l.isra.0+0x7e>
 8006f26:	45a6      	cmp	lr, r4
 8006f28:	db19      	blt.n	8006f5e <_strtol_l.isra.0+0xb2>
 8006f2a:	fb00 4006 	mla	r0, r0, r6, r4
 8006f2e:	2701      	movs	r7, #1
 8006f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f34:	e7eb      	b.n	8006f0e <_strtol_l.isra.0+0x62>
 8006f36:	462f      	mov	r7, r5
 8006f38:	e7bf      	b.n	8006eba <_strtol_l.isra.0+0xe>
 8006f3a:	2c2b      	cmp	r4, #43	; 0x2b
 8006f3c:	bf04      	itt	eq
 8006f3e:	1cbd      	addeq	r5, r7, #2
 8006f40:	787c      	ldrbeq	r4, [r7, #1]
 8006f42:	461a      	mov	r2, r3
 8006f44:	e7c9      	b.n	8006eda <_strtol_l.isra.0+0x2e>
 8006f46:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006f4a:	2b19      	cmp	r3, #25
 8006f4c:	d801      	bhi.n	8006f52 <_strtol_l.isra.0+0xa6>
 8006f4e:	3c37      	subs	r4, #55	; 0x37
 8006f50:	e7e2      	b.n	8006f18 <_strtol_l.isra.0+0x6c>
 8006f52:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006f56:	2b19      	cmp	r3, #25
 8006f58:	d804      	bhi.n	8006f64 <_strtol_l.isra.0+0xb8>
 8006f5a:	3c57      	subs	r4, #87	; 0x57
 8006f5c:	e7dc      	b.n	8006f18 <_strtol_l.isra.0+0x6c>
 8006f5e:	f04f 37ff 	mov.w	r7, #4294967295
 8006f62:	e7e5      	b.n	8006f30 <_strtol_l.isra.0+0x84>
 8006f64:	1c7b      	adds	r3, r7, #1
 8006f66:	d108      	bne.n	8006f7a <_strtol_l.isra.0+0xce>
 8006f68:	2322      	movs	r3, #34	; 0x22
 8006f6a:	f8c8 3000 	str.w	r3, [r8]
 8006f6e:	4608      	mov	r0, r1
 8006f70:	f1ba 0f00 	cmp.w	sl, #0
 8006f74:	d107      	bne.n	8006f86 <_strtol_l.isra.0+0xda>
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	b102      	cbz	r2, 8006f7e <_strtol_l.isra.0+0xd2>
 8006f7c:	4240      	negs	r0, r0
 8006f7e:	f1ba 0f00 	cmp.w	sl, #0
 8006f82:	d0f8      	beq.n	8006f76 <_strtol_l.isra.0+0xca>
 8006f84:	b10f      	cbz	r7, 8006f8a <_strtol_l.isra.0+0xde>
 8006f86:	f105 39ff 	add.w	r9, r5, #4294967295
 8006f8a:	f8ca 9000 	str.w	r9, [sl]
 8006f8e:	e7f2      	b.n	8006f76 <_strtol_l.isra.0+0xca>
 8006f90:	2430      	movs	r4, #48	; 0x30
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	d1af      	bne.n	8006ef6 <_strtol_l.isra.0+0x4a>
 8006f96:	2608      	movs	r6, #8
 8006f98:	e7ad      	b.n	8006ef6 <_strtol_l.isra.0+0x4a>
 8006f9a:	2c30      	cmp	r4, #48	; 0x30
 8006f9c:	d0a3      	beq.n	8006ee6 <_strtol_l.isra.0+0x3a>
 8006f9e:	260a      	movs	r6, #10
 8006fa0:	e7a9      	b.n	8006ef6 <_strtol_l.isra.0+0x4a>
	...

08006fa4 <_strtol_r>:
 8006fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fa6:	4c06      	ldr	r4, [pc, #24]	; (8006fc0 <_strtol_r+0x1c>)
 8006fa8:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_strtol_r+0x20>)
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	6a24      	ldr	r4, [r4, #32]
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	bf08      	it	eq
 8006fb2:	462c      	moveq	r4, r5
 8006fb4:	9400      	str	r4, [sp, #0]
 8006fb6:	f7ff ff79 	bl	8006eac <_strtol_l.isra.0>
 8006fba:	b003      	add	sp, #12
 8006fbc:	bd30      	pop	{r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000010 	.word	0x20000010
 8006fc4:	200000d8 	.word	0x200000d8

08006fc8 <__submore>:
 8006fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fcc:	460c      	mov	r4, r1
 8006fce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	d11d      	bne.n	8007014 <__submore+0x4c>
 8006fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fdc:	f7fe fbd8 	bl	8005790 <_malloc_r>
 8006fe0:	b918      	cbnz	r0, 8006fea <__submore+0x22>
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fee:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ff0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ff6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006ffe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007002:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007006:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800700a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800700e:	6020      	str	r0, [r4, #0]
 8007010:	2000      	movs	r0, #0
 8007012:	e7e8      	b.n	8006fe6 <__submore+0x1e>
 8007014:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007016:	0077      	lsls	r7, r6, #1
 8007018:	463a      	mov	r2, r7
 800701a:	f7ff fbed 	bl	80067f8 <_realloc_r>
 800701e:	4605      	mov	r5, r0
 8007020:	2800      	cmp	r0, #0
 8007022:	d0de      	beq.n	8006fe2 <__submore+0x1a>
 8007024:	eb00 0806 	add.w	r8, r0, r6
 8007028:	4601      	mov	r1, r0
 800702a:	4632      	mov	r2, r6
 800702c:	4640      	mov	r0, r8
 800702e:	f7ff fbbf 	bl	80067b0 <memcpy>
 8007032:	f8c4 8000 	str.w	r8, [r4]
 8007036:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800703a:	e7e9      	b.n	8007010 <__submore+0x48>

0800703c <__ascii_wctomb>:
 800703c:	b149      	cbz	r1, 8007052 <__ascii_wctomb+0x16>
 800703e:	2aff      	cmp	r2, #255	; 0xff
 8007040:	bf85      	ittet	hi
 8007042:	238a      	movhi	r3, #138	; 0x8a
 8007044:	6003      	strhi	r3, [r0, #0]
 8007046:	700a      	strbls	r2, [r1, #0]
 8007048:	f04f 30ff 	movhi.w	r0, #4294967295
 800704c:	bf98      	it	ls
 800704e:	2001      	movls	r0, #1
 8007050:	4770      	bx	lr
 8007052:	4608      	mov	r0, r1
 8007054:	4770      	bx	lr

08007056 <_malloc_usable_size_r>:
 8007056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800705a:	1f18      	subs	r0, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfbc      	itt	lt
 8007060:	580b      	ldrlt	r3, [r1, r0]
 8007062:	18c0      	addlt	r0, r0, r3
 8007064:	4770      	bx	lr
	...

08007068 <_gettimeofday>:
 8007068:	4b02      	ldr	r3, [pc, #8]	; (8007074 <_gettimeofday+0xc>)
 800706a:	2258      	movs	r2, #88	; 0x58
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
 8007072:	4770      	bx	lr
 8007074:	20000470 	.word	0x20000470

08007078 <_init>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr

08007084 <_fini>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr
