
SeniorDesignMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005378  08005378  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005380  08005380  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08005394  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005394  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010281  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eff  00000000  00000000  000302bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  000321c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00033090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000281a2  00000000  00000000  00033e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6c2  00000000  00000000  0005c00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000feab2  00000000  00000000  000676cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016617e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  001661fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052dc 	.word	0x080052dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052dc 	.word	0x080052dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc[6], buffer[6], sensor1, sensor2, sensor3, pot1in, pot2in, pot3in;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<6; i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e00a      	b.n	80004ec <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc[i] = buffer[i];
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_ADC_ConvCpltCallback+0x38>)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004de:	4909      	ldr	r1, [pc, #36]	; (8000504 <HAL_ADC_ConvCpltCallback+0x3c>)
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<6; i++)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b05      	cmp	r3, #5
 80004f0:	ddf1      	ble.n	80004d6 <HAL_ADC_ConvCpltCallback+0xe>
		}
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000009c 	.word	0x2000009c
 8000504:	200000b4 	.word	0x200000b4

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc64 	bl	8000dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f87d 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9f5 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f9d5 	bl	80008c8 <MX_DMA_Init>
  MX_SPI1_Init();
 800051e:	f000 f965 	bl	80007ec <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f9a1 	bl	8000868 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000526:	f000 f8eb 	bl	8000700 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //DMA stores ADC values in memory to be called back when needed.
  //buffer holds the values until conversions are complete,
  //at which point the adc[] array holds the referenced values.
  HAL_ADC_Start_DMA (&hadc1, buffer, 6);
 800052a:	2206      	movs	r2, #6
 800052c:	4930      	ldr	r1, [pc, #192]	; (80005f0 <main+0xe8>)
 800052e:	4831      	ldr	r0, [pc, #196]	; (80005f4 <main+0xec>)
 8000530:	f001 f814 	bl	800155c <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	482f      	ldr	r0, [pc, #188]	; (80005f8 <main+0xf0>)
 800053c:	f002 fb36 	bl	8002bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);	//set CS2 pin HIGH.
 8000540:	2201      	movs	r2, #1
 8000542:	2180      	movs	r1, #128	; 0x80
 8000544:	482c      	ldr	r0, [pc, #176]	; (80005f8 <main+0xf0>)
 8000546:	f002 fb31 	bl	8002bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);	//set CS3 pin HIGH.
 800054a:	2201      	movs	r2, #1
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	482a      	ldr	r0, [pc, #168]	; (80005f8 <main+0xf0>)
 8000550:	f002 fb2c 	bl	8002bac <HAL_GPIO_WritePin>

  uart_buf_len =sprintf(uart_buf, "Testing line 130\r\n");	  			//load print buffer with message
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4a28      	ldr	r2, [pc, #160]	; (80005fc <main+0xf4>)
 800055a:	461c      	mov	r4, r3
 800055c:	4615      	mov	r5, r2
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	682b      	ldr	r3, [r5, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	8022      	strh	r2, [r4, #0]
 8000568:	3402      	adds	r4, #2
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	7023      	strb	r3, [r4, #0]
 800056e:	2312      	movs	r3, #18
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);	//print to terminal
 8000572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000574:	b29a      	uxth	r2, r3
 8000576:	f107 0118 	add.w	r1, r7, #24
 800057a:	2364      	movs	r3, #100	; 0x64
 800057c:	4820      	ldr	r0, [pc, #128]	; (8000600 <main+0xf8>)
 800057e:	f004 fa01 	bl	8004984 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//set CS1 pin HIGH.
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <main+0xf0>)
 800058a:	f002 fb0f 	bl	8002bac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&SET_RDAC, 2, 400);
 800058e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000592:	2202      	movs	r2, #2
 8000594:	491b      	ldr	r1, [pc, #108]	; (8000604 <main+0xfc>)
 8000596:	481c      	ldr	r0, [pc, #112]	; (8000608 <main+0x100>)
 8000598:	f003 fedb 	bl	8004352 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	4815      	ldr	r0, [pc, #84]	; (80005f8 <main+0xf0>)
 80005a4:	f002 fb02 	bl	8002bac <HAL_GPIO_WritePin>

  uart_buf_len =sprintf(uart_buf, "Completed Digipot 1 Transmission\r\n");	//load print buffer with message
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	4a17      	ldr	r2, [pc, #92]	; (800060c <main+0x104>)
 80005ae:	461c      	mov	r4, r3
 80005b0:	4615      	mov	r5, r2
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	682b      	ldr	r3, [r5, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	8022      	strh	r2, [r4, #0]
 80005c0:	3402      	adds	r4, #2
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	7023      	strb	r3, [r4, #0]
 80005c6:	2322      	movs	r3, #34	; 0x22
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80005ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0118 	add.w	r1, r7, #24
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <main+0xf8>)
 80005d6:	f004 f9d5 	bl	8004984 <HAL_UART_Transmit>
	//HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80005da:	2120      	movs	r1, #32
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f002 fafc 	bl	8002bdc <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e8:	f000 fc6c 	bl	8000ec4 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80005ec:	e7f5      	b.n	80005da <main+0xd2>
 80005ee:	bf00      	nop
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	20000034 	.word	0x20000034
 80005f8:	48000800 	.word	0x48000800
 80005fc:	080052f4 	.word	0x080052f4
 8000600:	2000017c 	.word	0x2000017c
 8000604:	0800532c 	.word	0x0800532c
 8000608:	20000114 	.word	0x20000114
 800060c:	08005308 	.word	0x08005308

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0b8      	sub	sp, #224	; 0xe0
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fe54 	bl	80052cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2288      	movs	r2, #136	; 0x88
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fe46 	bl	80052cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000640:	2310      	movs	r3, #16
 8000642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000652:	2360      	movs	r3, #96	; 0x60
 8000654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fb38 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800066e:	f000 f9c7 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 ff04 	bl	80034a4 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f9ad 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80006a6:	f244 0302 	movw	r3, #16386	; 0x4002
 80006aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006b4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b6:	2301      	movs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006be:	2310      	movs	r3, #16
 80006c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f8e8 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006e2:	f000 f98d 	bl	8000a00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f002 fa9f 	bl	8002c2c <HAL_PWREx_ControlVoltageScaling>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80006f4:	f000 f984 	bl	8000a00 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	37e0      	adds	r7, #224	; 0xe0
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000724:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <MX_ADC1_Init+0xe4>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072e:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000742:	2204      	movs	r2, #4
 8000744:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000754:	2201      	movs	r2, #1
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000782:	4817      	ldr	r0, [pc, #92]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000784:	f000 fd96 	bl	80012b4 <HAL_ADC_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800078e:	f000 f937 	bl	8000a00 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4810      	ldr	r0, [pc, #64]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800079e:	f001 fca7 	bl	80020f0 <HAL_ADCEx_MultiModeConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007a8:	f000 f92a 	bl	8000a00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_ADC1_Init+0xe8>)
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b0:	2306      	movs	r3, #6
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b8:	237f      	movs	r3, #127	; 0x7f
 80007ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007bc:	2304      	movs	r3, #4
 80007be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0xe0>)
 80007ca:	f000 ff8f 	bl	80016ec <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007d4:	f000 f914 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000034 	.word	0x20000034
 80007e4:	50040000 	.word	0x50040000
 80007e8:	04300002 	.word	0x04300002

080007ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_SPI1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_SPI1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_SPI1_Init+0x74>)
 80007f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_SPI1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI1_Init+0x74>)
 8000806:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800080a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_SPI1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI1_Init+0x74>)
 800081a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI1_Init+0x74>)
 800083a:	2207      	movs	r2, #7
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_SPI1_Init+0x74>)
 800084c:	f003 fcde 	bl	800420c <HAL_SPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 f8d3 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000114 	.word	0x20000114
 8000864:	40013000 	.word	0x40013000

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART2_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000890:	220c      	movs	r2, #12
 8000892:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_USART2_UART_Init+0x58>)
 80008ae:	f004 f81b 	bl	80048e8 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80008b8:	f000 f8a2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000017c 	.word	0x2000017c
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_DMA_Init+0x38>)
 80008d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <MX_DMA_Init+0x38>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6493      	str	r3, [r2, #72]	; 0x48
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x38>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	200b      	movs	r0, #11
 80008ec:	f001 fd87 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008f0:	200b      	movs	r0, #11
 80008f2:	f001 fda0 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <MX_GPIO_Init+0xf0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_GPIO_Init+0xf0>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a29      	ldr	r2, [pc, #164]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_GPIO_Init+0xf0>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED_Pin|G_LED_Pin|Heater_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f240 4106 	movw	r1, #1030	; 0x406
 8000968:	4823      	ldr	r0, [pc, #140]	; (80009f8 <MX_GPIO_Init+0xf4>)
 800096a:	f002 f91f 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000974:	4821      	ldr	r0, [pc, #132]	; (80009fc <MX_GPIO_Init+0xf8>)
 8000976:	f002 f919 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800097a:	2301      	movs	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <MX_GPIO_Init+0xf4>)
 800098e:	f001 ff65 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin Heater_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin|Heater_Pin;
 8000992:	f240 4306 	movw	r3, #1030	; 0x406
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_GPIO_Init+0xf4>)
 80009ac:	f001 ff56 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 80009b0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_GPIO_Init+0xf8>)
 80009ca:	f001 ff47 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip5_Pin Dip4_Pin Dip3_Pin Dip2_Pin
                           Dip1_Pin */
  GPIO_InitStruct.Pin = Dip5_Pin|Dip4_Pin|Dip3_Pin|Dip2_Pin
 80009ce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009d2:	60fb      	str	r3, [r7, #12]
                          |Dip1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f001 ff39 	bl	800285c <HAL_GPIO_Init>

}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000400 	.word	0x48000400
 80009fc:	48000800 	.word	0x48000800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a37      	ldr	r2, [pc, #220]	; (8000b54 <HAL_ADC_MspInit+0xfc>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d167      	bne.n	8000b4a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a7a:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000a80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a30      	ldr	r2, [pc, #192]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <HAL_ADC_MspInit+0x100>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin|Pot3_Pin;
 8000ac2:	2317      	movs	r3, #23
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac6:	230b      	movs	r3, #11
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4821      	ldr	r0, [pc, #132]	; (8000b5c <HAL_ADC_MspInit+0x104>)
 8000ad6:	f001 fec1 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot1_Pin|Pot2_Pin;
 8000ada:	23c0      	movs	r3, #192	; 0xc0
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ade:	230b      	movs	r3, #11
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f001 feb4 	bl	800285c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000af6:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_ADC_MspInit+0x10c>)
 8000af8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b30:	f001 fc9c 	bl	800246c <HAL_DMA_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000b3a:	f7ff ff61 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b42:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_ADC_MspInit+0x108>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	50040000 	.word	0x50040000
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	200000cc 	.word	0x200000cc
 8000b64:	40020008 	.word	0x40020008

08000b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a25      	ldr	r2, [pc, #148]	; (8000c1c <HAL_SPI_MspInit+0xb4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d144      	bne.n	8000c14 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b94:	6613      	str	r3, [r2, #96]	; 0x60
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_SPI_MspInit+0xb8>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be2:	2305      	movs	r3, #5
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fe34 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c04:	2305      	movs	r3, #5
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_SPI_MspInit+0xbc>)
 8000c10:	f001 fe24 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40013000 	.word	0x40013000
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000400 	.word	0x48000400

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x7c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d128      	bne.n	8000c9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0x80>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <HAL_UART_MspInit+0x80>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x80>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_MspInit+0x80>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_UART_MspInit+0x80>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_UART_MspInit+0x80>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f001 fde0 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8c0 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <DMA1_Channel1_IRQHandler+0x10>)
 8000d0e:	f001 fcc5 	bl	800269c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000cc 	.word	0x200000cc

08000d1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <SystemInit+0x64>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <SystemInit+0x64>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <SystemInit+0x68>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <SystemInit+0x68>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <SystemInit+0x68>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <SystemInit+0x68>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <SystemInit+0x68>)
 8000d48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <SystemInit+0x68>)
 8000d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <SystemInit+0x68>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <SystemInit+0x68>)
 8000d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <SystemInit+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SystemInit+0x64>)
 8000d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d72:	609a      	str	r2, [r3, #8]
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00
 8000d84:	40021000 	.word	0x40021000

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffc6 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
	ldr	r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f004 fa65 	bl	8005284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fba5 	bl	8000508 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000dc4:	08005388 	.word	0x08005388
	ldr	r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000dd0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000dd4:	20000204 	.word	0x20000204

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>

08000dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f001 faff 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f80e 	bl	8000e0c <HAL_InitTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e001      	b.n	8000e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfc:	f7ff fe08 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e00:	79fb      	ldrb	r3, [r7, #7]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fb0b 	bl	8002452 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d809      	bhi.n	8000e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f001 fad5 	bl	80023fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e004      	b.n	8000e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e001      	b.n	8000e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000200 	.word	0x20000200

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000200 	.word	0x20000200

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_Delay+0x40>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000008 	.word	0x20000008

08000f08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	609a      	str	r2, [r3, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3360      	adds	r3, #96	; 0x60
 8000f82:	461a      	mov	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <LL_ADC_SetOffset+0x44>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	03fff000 	.word	0x03fff000

08000fb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3360      	adds	r3, #96	; 0x60
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3360      	adds	r3, #96	; 0x60
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3330      	adds	r3, #48	; 0x30
 8001050:	461a      	mov	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	4413      	add	r3, r2
 800105e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	211f      	movs	r1, #31
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0e9b      	lsrs	r3, r3, #26
 8001078:	f003 011f 	and.w	r1, r3, #31
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	431a      	orrs	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800108c:	bf00      	nop
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3314      	adds	r3, #20
 80010a8:	461a      	mov	r2, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	0e5b      	lsrs	r3, r3, #25
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0d1b      	lsrs	r3, r3, #20
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	2107      	movs	r1, #7
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	0d1b      	lsrs	r3, r3, #20
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	431a      	orrs	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001108:	43db      	mvns	r3, r3
 800110a:	401a      	ands	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0318 	and.w	r3, r3, #24
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001114:	40d9      	lsrs	r1, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	400b      	ands	r3, r1
 800111a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800111e:	431a      	orrs	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	0007ffff 	.word	0x0007ffff

08001138 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 031f 	and.w	r3, r3, #31
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6093      	str	r3, [r2, #8]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800118c:	d101      	bne.n	8001192 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011dc:	d101      	bne.n	80011e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <LL_ADC_IsEnabled+0x18>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <LL_ADC_IsEnabled+0x1a>
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800124e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001252:	f043 0204 	orr.w	r2, r3, #4
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b04      	cmp	r3, #4
 8001278:	d101      	bne.n	800127e <LL_ADC_REG_IsConversionOngoing+0x18>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b08      	cmp	r3, #8
 800129e:	d101      	bne.n	80012a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e134      	b.n	8001538 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fbbb 	bl	8000a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff3f 	bl	8001178 <LL_ADC_IsDeepPowerDownEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff25 	bl	8001154 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff5a 	bl	80011c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d113      	bne.n	8001342 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff3e 	bl	80011a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001324:	4b86      	ldr	r3, [pc, #536]	; (8001540 <HAL_ADC_Init+0x28c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	4a86      	ldr	r2, [pc, #536]	; (8001544 <HAL_ADC_Init+0x290>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001334:	e002      	b.n	800133c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff3e 	bl	80011c8 <LL_ADC_IsInternalRegulatorEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff77 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80cf 	bne.w	8001526 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 80cb 	bne.w	8001526 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff37 	bl	8001218 <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d115      	bne.n	80013dc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b0:	4865      	ldr	r0, [pc, #404]	; (8001548 <HAL_ADC_Init+0x294>)
 80013b2:	f7ff ff31 	bl	8001218 <LL_ADC_IsEnabled>
 80013b6:	4604      	mov	r4, r0
 80013b8:	4864      	ldr	r0, [pc, #400]	; (800154c <HAL_ADC_Init+0x298>)
 80013ba:	f7ff ff2d 	bl	8001218 <LL_ADC_IsEnabled>
 80013be:	4603      	mov	r3, r0
 80013c0:	431c      	orrs	r4, r3
 80013c2:	4863      	ldr	r0, [pc, #396]	; (8001550 <HAL_ADC_Init+0x29c>)
 80013c4:	f7ff ff28 	bl	8001218 <LL_ADC_IsEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4323      	orrs	r3, r4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4619      	mov	r1, r3
 80013d6:	485f      	ldr	r0, [pc, #380]	; (8001554 <HAL_ADC_Init+0x2a0>)
 80013d8:	f7ff fd96 	bl	8000f08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e5b      	ldrb	r3, [r3, #25]
 80013e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	3b01      	subs	r3, #1
 8001410:	045b      	lsls	r3, r3, #17
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_ADC_Init+0x2a4>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	430b      	orrs	r3, r1
 8001446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff0a 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001452:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff17 	bl	800128c <LL_ADC_INJ_IsConversionOngoing>
 800145e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d13d      	bne.n	80014e2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d13a      	bne.n	80014e2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001470:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001478:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001488:	f023 0302 	bic.w	r3, r3, #2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	69b9      	ldr	r1, [r7, #24]
 8001492:	430b      	orrs	r3, r1
 8001494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149c:	2b01      	cmp	r3, #1
 800149e:	d118      	bne.n	80014d2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014b6:	4311      	orrs	r1, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014bc:	4311      	orrs	r1, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014c2:	430a      	orrs	r2, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	e007      	b.n	80014e2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10c      	bne.n	8001504 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f023 010f 	bic.w	r1, r3, #15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	e007      	b.n	8001514 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020f 	bic.w	r2, r2, #15
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f023 0303 	bic.w	r3, r3, #3
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
 8001524:	e007      	b.n	8001536 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001536:	7ffb      	ldrb	r3, [r7, #31]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3724      	adds	r7, #36	; 0x24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	053e2d63 	.word	0x053e2d63
 8001548:	50040000 	.word	0x50040000
 800154c:	50040100 	.word	0x50040100
 8001550:	50040200 	.word	0x50040200
 8001554:	50040300 	.word	0x50040300
 8001558:	fff0c007 	.word	0xfff0c007

0800155c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001568:	4850      	ldr	r0, [pc, #320]	; (80016ac <HAL_ADC_Start_DMA+0x150>)
 800156a:	f7ff fde5 	bl	8001138 <LL_ADC_GetMultimode>
 800156e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe76 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 808e 	bne.w	800169e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_Start_DMA+0x34>
 800158c:	2302      	movs	r3, #2
 800158e:	e089      	b.n	80016a4 <HAL_ADC_Start_DMA+0x148>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d002      	beq.n	80015aa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b09      	cmp	r3, #9
 80015a8:	d172      	bne.n	8001690 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 fc8c 	bl	8001ec8 <ADC_Enable>
 80015b0:	4603      	mov	r3, r0
 80015b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d165      	bne.n	8001686 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a37      	ldr	r2, [pc, #220]	; (80016b0 <HAL_ADC_Start_DMA+0x154>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d002      	beq.n	80015de <HAL_ADC_Start_DMA+0x82>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_Start_DMA+0x84>
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_ADC_Start_DMA+0x158>)
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d002      	beq.n	80015ee <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f023 0206 	bic.w	r2, r3, #6
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	659a      	str	r2, [r3, #88]	; 0x58
 8001612:	e002      	b.n	800161a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <HAL_ADC_Start_DMA+0x15c>)
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a25      	ldr	r2, [pc, #148]	; (80016bc <HAL_ADC_Start_DMA+0x160>)
 8001628:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <HAL_ADC_Start_DMA+0x164>)
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	221c      	movs	r2, #28
 8001638:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0210 	orr.w	r2, r2, #16
 8001650:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3340      	adds	r3, #64	; 0x40
 800166c:	4619      	mov	r1, r3
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f000 ffb3 	bl	80025dc <HAL_DMA_Start_IT>
 8001676:	4603      	mov	r3, r0
 8001678:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fddd 	bl	800123e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001684:	e00d      	b.n	80016a2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800168e:	e008      	b.n	80016a2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800169c:	e001      	b.n	80016a2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800169e:	2302      	movs	r3, #2
 80016a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	50040300 	.word	0x50040300
 80016b0:	50040100 	.word	0x50040100
 80016b4:	50040000 	.word	0x50040000
 80016b8:	08001f7d 	.word	0x08001f7d
 80016bc:	08002055 	.word	0x08002055
 80016c0:	08002071 	.word	0x08002071

080016c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0b6      	sub	sp, #216	; 0xd8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConfigChannel+0x22>
 800170a:	2302      	movs	r3, #2
 800170c:	e3c6      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x7b0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fda3 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 83a7 	bne.w	8001e76 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d824      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	3b02      	subs	r3, #2
 8001736:	2b03      	cmp	r3, #3
 8001738:	d81b      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x86>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_ADC_ConfigChannel+0x54>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001751 	.word	0x08001751
 8001744:	08001759 	.word	0x08001759
 8001748:	08001761 	.word	0x08001761
 800174c:	08001769 	.word	0x08001769
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	220c      	movs	r2, #12
 8001754:	605a      	str	r2, [r3, #4]
          break;
 8001756:	e011      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2212      	movs	r2, #18
 800175c:	605a      	str	r2, [r3, #4]
          break;
 800175e:	e00d      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2218      	movs	r2, #24
 8001764:	605a      	str	r2, [r3, #4]
          break;
 8001766:	e009      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176e:	605a      	str	r2, [r3, #4]
          break;
 8001770:	e004      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2206      	movs	r2, #6
 8001776:	605a      	str	r2, [r3, #4]
          break;
 8001778:	e000      	b.n	800177c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800177a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	f7ff fc59 	bl	8001040 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd67 	bl	8001266 <LL_ADC_REG_IsConversionOngoing>
 8001798:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd73 	bl	800128c <LL_ADC_INJ_IsConversionOngoing>
 80017a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 81a6 	bne.w	8001b00 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 81a1 	bne.w	8001b00 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f7ff fc64 	bl	8001098 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d00a      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6919      	ldr	r1, [r3, #16]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001802:	f7ff fbb5 	bl	8000f70 <LL_ADC_SetOffset>
 8001806:	e17b      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fbd2 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x148>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fbc7 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	0e9b      	lsrs	r3, r3, #26
 800182e:	f003 021f 	and.w	r2, r3, #31
 8001832:	e01e      	b.n	8001872 <HAL_ADC_ConfigChannel+0x186>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fbbc 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800185a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001862:	2320      	movs	r3, #32
 8001864:	e004      	b.n	8001870 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <HAL_ADC_ConfigChannel+0x19e>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0e9b      	lsrs	r3, r3, #26
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	e018      	b.n	80018bc <HAL_ADC_ConfigChannel+0x1d0>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800189e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80018ae:	2320      	movs	r3, #32
 80018b0:	e004      	b.n	80018bc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80018b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018bc:	429a      	cmp	r2, r3
 80018be:	d106      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fb8b 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2101      	movs	r1, #1
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fb6f 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x20e>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fb64 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	0e9b      	lsrs	r3, r3, #26
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	e01e      	b.n	8001938 <HAL_ADC_ConfigChannel+0x24c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fb59 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e004      	b.n	8001936 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800192c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x264>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0e9b      	lsrs	r3, r3, #26
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	e018      	b.n	8001982 <HAL_ADC_ConfigChannel+0x296>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800196c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001974:	2320      	movs	r3, #32
 8001976:	e004      	b.n	8001982 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001982:	429a      	cmp	r2, r3
 8001984:	d106      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	2101      	movs	r1, #1
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb28 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2102      	movs	r1, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fb0c 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x2d4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2102      	movs	r1, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb01 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	f003 021f 	and.w	r2, r3, #31
 80019be:	e01e      	b.n	80019fe <HAL_ADC_ConfigChannel+0x312>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff faf6 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e004      	b.n	80019fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x32a>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0e9b      	lsrs	r3, r3, #26
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	e016      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x358>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a36:	2320      	movs	r3, #32
 8001a38:	e004      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d106      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fac7 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff faab 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x396>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2103      	movs	r1, #3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff faa0 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	e017      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x3c6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2103      	movs	r1, #3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fa95 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	e003      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x3de>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	e011      	b.n	8001aee <HAL_ADC_ConfigChannel+0x402>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e003      	b.n	8001aee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	2103      	movs	r1, #3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa72 	bl	8000fe4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb87 	bl	8001218 <LL_ADC_IsEnabled>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f040 813f 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f7ff fae6 	bl	80010f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a8e      	ldr	r2, [pc, #568]	; (8001d64 <HAL_ADC_ConfigChannel+0x678>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	f040 8130 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10b      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x46c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	bf94      	ite	ls
 8001b50:	2301      	movls	r3, #1
 8001b52:	2300      	movhi	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	e019      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4a0>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2b09      	cmp	r3, #9
 8001b84:	bf94      	ite	ls
 8001b86:	2301      	movls	r3, #1
 8001b88:	2300      	movhi	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d079      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x4c0>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	069b      	lsls	r3, r3, #26
 8001ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001baa:	e015      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x4ec>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	e003      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	069b      	lsls	r3, r3, #26
 8001bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x50c>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	3301      	adds	r3, #1
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	e017      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x53c>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c10:	2320      	movs	r3, #32
 8001c12:	e003      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	ea42 0103 	orr.w	r1, r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x562>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0e9b      	lsrs	r3, r3, #26
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	051b      	lsls	r3, r3, #20
 8001c4c:	e018      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x594>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c66:	2320      	movs	r3, #32
 8001c68:	e003      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c80:	430b      	orrs	r3, r1
 8001c82:	e080      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x5b4>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	069b      	lsls	r3, r3, #26
 8001c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c9e:	e015      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x5e0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	e003      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	069b      	lsls	r3, r3, #26
 8001cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x600>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	e017      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x630>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d04:	2320      	movs	r3, #32
 8001d06:	e003      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	ea42 0103 	orr.w	r1, r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x65c>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	3301      	adds	r3, #1
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	051b      	lsls	r3, r3, #20
 8001d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d46:	e01d      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x698>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	613b      	str	r3, [r7, #16]
  return result;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e005      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x684>
 8001d64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b1e      	subs	r3, #30
 8001d7e:	051b      	lsls	r3, r3, #20
 8001d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d84:	430b      	orrs	r3, r1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	6892      	ldr	r2, [r2, #8]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7ff f984 	bl	8001098 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d079      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d9c:	4842      	ldr	r0, [pc, #264]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d9e:	f7ff f8d9 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 8001da2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <HAL_ADC_ConfigChannel+0x7c0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d12b      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d125      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x6e4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d15c      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4833      	ldr	r0, [pc, #204]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ddc:	f7ff f8a7 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <HAL_ADC_ConfigChannel+0x7d0>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099a      	lsrs	r2, r3, #6
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df8:	e002      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f9      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e06:	e040      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x758>
 8001e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d112      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x746>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d12d      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e3e:	f7ff f876 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e42:	e024      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d120      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d115      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e70:	f7ff f85d 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
 8001e74:	e00c      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f043 0220 	orr.w	r2, r3, #32
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e8e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e98:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	37d8      	adds	r7, #216	; 0xd8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	80080000 	.word	0x80080000
 8001ea8:	50040300 	.word	0x50040300
 8001eac:	c7520000 	.word	0xc7520000
 8001eb0:	50040000 	.word	0x50040000
 8001eb4:	50040200 	.word	0x50040200
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	053e2d63 	.word	0x053e2d63
 8001ec0:	cb840000 	.word	0xcb840000
 8001ec4:	80000001 	.word	0x80000001

08001ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f99f 	bl	8001218 <LL_ADC_IsEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d146      	bne.n	8001f6e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <ADC_Enable+0xb0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e032      	b.n	8001f70 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f96e 	bl	80011f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f14:	f7fe ffca 	bl	8000eac <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f1a:	e021      	b.n	8001f60 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f979 	bl	8001218 <LL_ADC_IsEnabled>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d104      	bne.n	8001f36 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f95d 	bl	80011f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f36:	f7fe ffb9 	bl	8000eac <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d90d      	bls.n	8001f60 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0210 	orr.w	r2, r3, #16
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d1d6      	bne.n	8001f1c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	8000003f 	.word	0x8000003f

08001f7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d14b      	bne.n	800202e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d021      	beq.n	8001ff4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f830 	bl	800101a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d032      	beq.n	8002026 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d12b      	bne.n	8002026 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11f      	bne.n	8002026 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ff2:	e018      	b.n	8002026 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d111      	bne.n	8002026 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7fe fa4e 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800202c:	e00e      	b.n	800204c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fb4c 	bl	80016d8 <HAL_ADC_ErrorCallback>
}
 8002040:	e004      	b.n	800204c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fb2e 	bl	80016c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	f043 0204 	orr.w	r2, r3, #4
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff fb1e 	bl	80016d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <LL_ADC_IsEnabled>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <LL_ADC_IsEnabled+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_IsEnabled+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_REG_IsConversionOngoing>:
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b09f      	sub	sp, #124	; 0x7c
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800210a:	2302      	movs	r3, #2
 800210c:	e08f      	b.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a47      	ldr	r2, [pc, #284]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d102      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	e001      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e072      	b.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ffbd 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 8002150:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffb7 	bl	80020ca <LL_ADC_REG_IsConversionOngoing>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d154      	bne.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002164:	2b00      	cmp	r3, #0
 8002166:	d151      	bne.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002168:	4b35      	ldr	r3, [pc, #212]	; (8002240 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800216a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02c      	beq.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	035b      	lsls	r3, r3, #13
 8002188:	430b      	orrs	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002190:	4829      	ldr	r0, [pc, #164]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002192:	f7ff ff87 	bl	80020a4 <LL_ADC_IsEnabled>
 8002196:	4604      	mov	r4, r0
 8002198:	4828      	ldr	r0, [pc, #160]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800219a:	f7ff ff83 	bl	80020a4 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	431c      	orrs	r4, r3
 80021a2:	4828      	ldr	r0, [pc, #160]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021a4:	f7ff ff7e 	bl	80020a4 <LL_ADC_IsEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4323      	orrs	r3, r4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d137      	bne.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b8:	f023 030f 	bic.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6892      	ldr	r2, [r2, #8]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021cc:	e028      	b.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021da:	4817      	ldr	r0, [pc, #92]	; (8002238 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80021dc:	f7ff ff62 	bl	80020a4 <LL_ADC_IsEnabled>
 80021e0:	4604      	mov	r4, r0
 80021e2:	4816      	ldr	r0, [pc, #88]	; (800223c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021e4:	f7ff ff5e 	bl	80020a4 <LL_ADC_IsEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	431c      	orrs	r4, r3
 80021ec:	4815      	ldr	r0, [pc, #84]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ee:	f7ff ff59 	bl	80020a4 <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4323      	orrs	r3, r4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d112      	bne.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002202:	f023 030f 	bic.w	r3, r3, #15
 8002206:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002208:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800220a:	e009      	b.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800221e:	e000      	b.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002220:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800222a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800222e:	4618      	mov	r0, r3
 8002230:	377c      	adds	r7, #124	; 0x7c
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}
 8002236:	bf00      	nop
 8002238:	50040000 	.word	0x50040000
 800223c:	50040100 	.word	0x50040100
 8002240:	50040300 	.word	0x50040300
 8002244:	50040200 	.word	0x50040200

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff29 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff3e 	bl	8002290 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff8e 	bl	800233c <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff31 	bl	80022ac <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e098      	b.n	80025b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_DMA_Init+0x150>)
 8002486:	429a      	cmp	r2, r3
 8002488:	d80f      	bhi.n	80024aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <HAL_DMA_Init+0x154>)
 8002492:	4413      	add	r3, r2
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_DMA_Init+0x158>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	009a      	lsls	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a48      	ldr	r2, [pc, #288]	; (80025c8 <HAL_DMA_Init+0x15c>)
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
 80024a8:	e00e      	b.n	80024c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_DMA_Init+0x160>)
 80024b2:	4413      	add	r3, r2
 80024b4:	4a43      	ldr	r2, [pc, #268]	; (80025c4 <HAL_DMA_Init+0x158>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	009a      	lsls	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <HAL_DMA_Init+0x164>)
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002522:	d039      	beq.n	8002598 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_DMA_Init+0x15c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d11a      	bne.n	8002564 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_DMA_Init+0x168>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f003 031c 	and.w	r3, r3, #28
 800253a:	210f      	movs	r1, #15
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <HAL_DMA_Init+0x168>)
 8002544:	4013      	ands	r3, r2
 8002546:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_DMA_Init+0x168>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f003 031c 	and.w	r3, r3, #28
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	491d      	ldr	r1, [pc, #116]	; (80025d4 <HAL_DMA_Init+0x168>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
 8002562:	e019      	b.n	8002598 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_DMA_Init+0x16c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f003 031c 	and.w	r3, r3, #28
 8002570:	210f      	movs	r1, #15
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	4917      	ldr	r1, [pc, #92]	; (80025d8 <HAL_DMA_Init+0x16c>)
 800257a:	4013      	ands	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800257e:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_DMA_Init+0x16c>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f003 031c 	and.w	r3, r3, #28
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	4911      	ldr	r1, [pc, #68]	; (80025d8 <HAL_DMA_Init+0x16c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40020407 	.word	0x40020407
 80025c0:	bffdfff8 	.word	0xbffdfff8
 80025c4:	cccccccd 	.word	0xcccccccd
 80025c8:	40020000 	.word	0x40020000
 80025cc:	bffdfbf8 	.word	0xbffdfbf8
 80025d0:	40020400 	.word	0x40020400
 80025d4:	400200a8 	.word	0x400200a8
 80025d8:	400204a8 	.word	0x400204a8

080025dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_DMA_Start_IT+0x20>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e04b      	b.n	8002694 <HAL_DMA_Start_IT+0xb8>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d13a      	bne.n	8002686 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f8e0 	bl	80027fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 020e 	orr.w	r2, r2, #14
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00f      	b.n	8002674 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 020a 	orr.w	r2, r2, #10
 8002672:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e005      	b.n	8002692 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002692:	7dfb      	ldrb	r3, [r7, #23]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f003 031c 	and.w	r3, r3, #28
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d026      	beq.n	8002716 <HAL_DMA_IRQHandler+0x7a>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d021      	beq.n	8002716 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f003 021c 	and.w	r2, r3, #28
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2104      	movs	r1, #4
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2b00      	cmp	r3, #0
 800270a:	d071      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002714:	e06c      	b.n	80027f0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 031c 	and.w	r3, r3, #28
 800271e:	2202      	movs	r2, #2
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02e      	beq.n	8002788 <HAL_DMA_IRQHandler+0xec>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d029      	beq.n	8002788 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020a 	bic.w	r2, r2, #10
 8002750:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f003 021c 	and.w	r2, r3, #28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2102      	movs	r1, #2
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d038      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002786:	e033      	b.n	80027f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f003 031c 	and.w	r3, r3, #28
 8002790:	2208      	movs	r2, #8
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02a      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x156>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d025      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 020e 	bic.w	r2, r2, #14
 80027b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 021c 	and.w	r2, r3, #28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2101      	movs	r1, #1
 80027c4:	fa01 f202 	lsl.w	r2, r1, r2
 80027c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
}
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f003 021c 	and.w	r2, r3, #28
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d108      	bne.n	800283e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800283c:	e007      	b.n	800284e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286a:	e17f      	b.n	8002b6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8171 	beq.w	8002b66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d00b      	beq.n	80028a4 <HAL_GPIO_Init+0x48>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d007      	beq.n	80028a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002898:	2b11      	cmp	r3, #17
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b12      	cmp	r3, #18
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d118      	bne.n	8002944 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002918:	2201      	movs	r2, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	f003 0201 	and.w	r2, r3, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x128>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b12      	cmp	r3, #18
 8002982:	d123      	bne.n	80029cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	6939      	ldr	r1, [r7, #16]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80ac 	beq.w	8002b66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	; (8002b88 <HAL_GPIO_Init+0x32c>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	4a5d      	ldr	r2, [pc, #372]	; (8002b88 <HAL_GPIO_Init+0x32c>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6613      	str	r3, [r2, #96]	; 0x60
 8002a1a:	4b5b      	ldr	r3, [pc, #364]	; (8002b88 <HAL_GPIO_Init+0x32c>)
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a26:	4a59      	ldr	r2, [pc, #356]	; (8002b8c <HAL_GPIO_Init+0x330>)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a50:	d025      	beq.n	8002a9e <HAL_GPIO_Init+0x242>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <HAL_GPIO_Init+0x334>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <HAL_GPIO_Init+0x23e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x338>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x23a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_GPIO_Init+0x33c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x236>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4b      	ldr	r2, [pc, #300]	; (8002b9c <HAL_GPIO_Init+0x340>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x232>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_GPIO_Init+0x344>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x22e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a49      	ldr	r2, [pc, #292]	; (8002ba4 <HAL_GPIO_Init+0x348>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x22a>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e00c      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e00a      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e008      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x244>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ab0:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_GPIO_Init+0x330>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae2:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f ae78 	bne.w	800286c <HAL_GPIO_Init+0x10>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	48000400 	.word	0x48000400
 8002b94:	48000800 	.word	0x48000800
 8002b98:	48000c00 	.word	0x48000c00
 8002b9c:	48001000 	.word	0x48001000
 8002ba0:	48001400 	.word	0x48001400
 8002ba4:	48001800 	.word	0x48001800
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43d9      	mvns	r1, r3
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	619a      	str	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000

08002c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3a:	d130      	bne.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c48:	d038      	beq.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c52:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2232      	movs	r2, #50	; 0x32
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c70:	e002      	b.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c84:	d102      	bne.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f2      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d110      	bne.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e00f      	b.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002caa:	d007      	beq.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb4:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	431bde83 	.word	0x431bde83

08002cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e3d4      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cea:	4ba1      	ldr	r3, [pc, #644]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf4:	4b9e      	ldr	r3, [pc, #632]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80e4 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4a>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	f040 808b 	bne.w	8002e30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 8087 	bne.w	8002e30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d22:	4b93      	ldr	r3, [pc, #588]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e3ac      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_OscConfig+0x7c>
 8002d4a:	4b89      	ldr	r3, [pc, #548]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d52:	e005      	b.n	8002d60 <HAL_RCC_OscConfig+0x88>
 8002d54:	4b86      	ldr	r3, [pc, #536]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d223      	bcs.n	8002dac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fd3f 	bl	80037ec <RCC_SetFlashLatencyFromMSIRange>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e38d      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b7d      	ldr	r3, [pc, #500]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a7c      	ldr	r2, [pc, #496]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b7a      	ldr	r3, [pc, #488]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4977      	ldr	r1, [pc, #476]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4972      	ldr	r1, [pc, #456]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
 8002daa:	e025      	b.n	8002df8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6f      	ldr	r2, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	496a      	ldr	r1, [pc, #424]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4965      	ldr	r1, [pc, #404]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fcff 	bl	80037ec <RCC_SetFlashLatencyFromMSIRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e34d      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df8:	f000 fc36 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	4b5c      	ldr	r3, [pc, #368]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x29c>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa21 f303 	lsr.w	r3, r1, r3
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <HAL_RCC_OscConfig+0x2a0>)
 8002e16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e18:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <HAL_RCC_OscConfig+0x2a4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fff5 	bl	8000e0c <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d052      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	e331      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d032      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e38:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f832 	bl	8000eac <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4c:	f7fe f82e 	bl	8000eac <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e31a      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a40      	ldr	r2, [pc, #256]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	493b      	ldr	r1, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	4936      	ldr	r1, [pc, #216]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e01a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e9e:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a33      	ldr	r2, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eaa:	f7fd ffff 	bl	8000eac <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb2:	f7fd fffb 	bl	8000eac <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e2e7      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1da>
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ed2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d074      	beq.n	8002fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x21a>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d10e      	bne.n	8002f0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d064      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d160      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e2c4      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x24a>
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e01d      	b.n	8002f5e <HAL_RCC_OscConfig+0x286>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCC_OscConfig+0x26e>
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e00b      	b.n	8002f5e <HAL_RCC_OscConfig+0x286>
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <HAL_RCC_OscConfig+0x298>)
 8002f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fd ffa1 	bl	8000eac <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6c:	e011      	b.n	8002f92 <HAL_RCC_OscConfig+0x2ba>
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08005330 	.word	0x08005330
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fd ff94 	bl	8000eac <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e280      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	4baf      	ldr	r3, [pc, #700]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2a8>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fd ff84 	bl	8000eac <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fd ff80 	bl	8000eac <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e26c      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fba:	4ba5      	ldr	r3, [pc, #660]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2d0>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d060      	beq.n	8003098 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x310>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d116      	bne.n	8003016 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	4b99      	ldr	r3, [pc, #612]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_OscConfig+0x328>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e249      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b93      	ldr	r3, [pc, #588]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4990      	ldr	r1, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e040      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301e:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a8b      	ldr	r2, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd ff3f 	bl	8000eac <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7fd ff3b 	bl	8000eac <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e227      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003044:	4b82      	ldr	r3, [pc, #520]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	497c      	ldr	r1, [pc, #496]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a79      	ldr	r2, [pc, #484]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 800306c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fd ff1b 	bl	8000eac <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307a:	f7fd ff17 	bl	8000eac <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e203      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308c:	4b70      	ldr	r3, [pc, #448]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03c      	beq.n	800311e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	4a67      	ldr	r2, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fd fef6 	bl	8000eac <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fd fef2 	bl	8000eac <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1de      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d6:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
 80030e4:	e01b      	b.n	800311e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b5a      	ldr	r3, [pc, #360]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fd fed9 	bl	8000eac <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fd fed5 	bl	8000eac <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1c1      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ef      	bne.n	80030fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a6 	beq.w	8003278 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003130:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a43      	ldr	r2, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003158:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_OscConfig+0x57c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d118      	bne.n	8003196 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <HAL_RCC_OscConfig+0x57c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a3a      	ldr	r2, [pc, #232]	; (8003254 <HAL_RCC_OscConfig+0x57c>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003170:	f7fd fe9c 	bl	8000eac <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fd fe98 	bl	8000eac <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e184      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_RCC_OscConfig+0x57c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4d8>
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	4a2a      	ldr	r2, [pc, #168]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ae:	e024      	b.n	80031fa <HAL_RCC_OscConfig+0x522>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d110      	bne.n	80031da <HAL_RCC_OscConfig+0x502>
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c8:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	4a20      	ldr	r2, [pc, #128]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d8:	e00f      	b.n	80031fa <HAL_RCC_OscConfig+0x522>
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	4a17      	ldr	r2, [pc, #92]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 80031f2:	f023 0304 	bic.w	r3, r3, #4
 80031f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd fe53 	bl	8000eac <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fd fe4f 	bl	8000eac <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e139      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x578>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ed      	beq.n	800320a <HAL_RCC_OscConfig+0x532>
 800322e:	e01a      	b.n	8003266 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd fe3c 	bl	8000eac <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003236:	e00f      	b.n	8003258 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fd fe38 	bl	8000eac <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d906      	bls.n	8003258 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e122      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003258:	4b90      	ldr	r3, [pc, #576]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e8      	bne.n	8003238 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7ffb      	ldrb	r3, [r7, #31]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b8b      	ldr	r3, [pc, #556]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	4a8a      	ldr	r2, [pc, #552]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8108 	beq.w	8003492 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 80d0 	bne.w	800342c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800328c:	4b83      	ldr	r3, [pc, #524]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	429a      	cmp	r2, r3
 800329e:	d130      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	3b01      	subs	r3, #1
 80032ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d127      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d11f      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	2a07      	cmp	r2, #7
 80032ce:	bf14      	ite	ne
 80032d0:	2201      	movne	r2, #1
 80032d2:	2200      	moveq	r2, #0
 80032d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d06e      	beq.n	80033e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d069      	beq.n	80033dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003308:	4b64      	ldr	r3, [pc, #400]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003314:	4b61      	ldr	r3, [pc, #388]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b7      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003324:	4b5d      	ldr	r3, [pc, #372]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5c      	ldr	r2, [pc, #368]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003330:	f7fd fdbc 	bl	8000eac <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fdb8 	bl	8000eac <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0a4      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334a:	4b54      	ldr	r3, [pc, #336]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003356:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <HAL_RCC_OscConfig+0x7c8>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003366:	3a01      	subs	r2, #1
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003370:	0212      	lsls	r2, r2, #8
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	3a01      	subs	r2, #1
 800337c:	0552      	lsls	r2, r2, #21
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	3a01      	subs	r2, #1
 8003388:	0652      	lsls	r2, r2, #25
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003390:	0912      	lsrs	r2, r2, #4
 8003392:	0452      	lsls	r2, r2, #17
 8003394:	430a      	orrs	r2, r1
 8003396:	4941      	ldr	r1, [pc, #260]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3e      	ldr	r2, [pc, #248]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a3b      	ldr	r2, [pc, #236]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b4:	f7fd fd7a 	bl	8000eac <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fd fd76 	bl	8000eac <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e062      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033da:	e05a      	b.n	8003492 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e059      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e0:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d152      	bne.n	8003492 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2a      	ldr	r2, [pc, #168]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003402:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003404:	f7fd fd52 	bl	8000eac <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fd4e 	bl	8000eac <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e03a      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	4b1f      	ldr	r3, [pc, #124]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x734>
 800342a:	e032      	b.n	8003492 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d02d      	beq.n	800348e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	4a13      	ldr	r2, [pc, #76]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003450:	f023 0303 	bic.w	r3, r3, #3
 8003454:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 800345c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003464:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fd fd21 	bl	8000eac <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fd fd1d 	bl	8000eac <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e009      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_OscConfig+0x7c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x796>
 800348c:	e001      	b.n	8003492 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	f99d808c 	.word	0xf99d808c

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0c8      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d910      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4961      	ldr	r1, [pc, #388]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b0      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d04c      	beq.n	800358e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fc:	4b56      	ldr	r3, [pc, #344]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d121      	bne.n	800354c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e09e      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d115      	bne.n	800354c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e092      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e086      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e07e      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800354c:	4b42      	ldr	r3, [pc, #264]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 0203 	bic.w	r2, r3, #3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	493f      	ldr	r1, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355e:	f7fd fca5 	bl	8000eac <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	e00a      	b.n	800357c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003566:	f7fd fca1 	bl	8000eac <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e066      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357c:	4b36      	ldr	r3, [pc, #216]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 020c 	and.w	r2, r3, #12
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	429a      	cmp	r2, r3
 800358c:	d1eb      	bne.n	8003566 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	492c      	ldr	r1, [pc, #176]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d210      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 0207 	bic.w	r2, r3, #7
 80035c2:	4924      	ldr	r1, [pc, #144]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e036      	b.n	800364a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4918      	ldr	r1, [pc, #96]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4910      	ldr	r1, [pc, #64]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800361a:	f000 f825 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 800361e:	4601      	mov	r1, r0
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	4a0c      	ldr	r2, [pc, #48]	; (800365c <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	fa21 f303 	lsr.w	r3, r1, r3
 8003636:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fbe4 	bl	8000e0c <HAL_InitTick>
 8003644:	4603      	mov	r3, r0
 8003646:	72fb      	strb	r3, [r7, #11]

  return status;
 8003648:	7afb      	ldrb	r3, [r7, #11]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40022000 	.word	0x40022000
 8003658:	40021000 	.word	0x40021000
 800365c:	08005330 	.word	0x08005330
 8003660:	20000000 	.word	0x20000000
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d121      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11e      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800369c:	4b33      	ldr	r3, [pc, #204]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036a8:	4b30      	ldr	r3, [pc, #192]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036b8:	4b2c      	ldr	r3, [pc, #176]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e004      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d133      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0xa4>
 8003706:	2b03      	cmp	r3, #3
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0xaa>
 800370a:	e005      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_GetSysClockFreq+0x10c>)
 800370e:	617b      	str	r3, [r7, #20]
      break;
 8003710:	e005      	b.n	800371e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003712:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_RCC_GetSysClockFreq+0x110>)
 8003714:	617b      	str	r3, [r7, #20]
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	617b      	str	r3, [r7, #20]
      break;
 800371c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	3301      	adds	r3, #1
 800372a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	fb02 f203 	mul.w	r2, r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_GetSysClockFreq+0x104>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0e5b      	lsrs	r3, r3, #25
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800375e:	69bb      	ldr	r3, [r7, #24]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3724      	adds	r7, #36	; 0x24
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40021000 	.word	0x40021000
 8003770:	08005348 	.word	0x08005348
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4601      	mov	r1, r0
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037aa:	5cd3      	ldrb	r3, [r2, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08005340 	.word	0x08005340

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037c4:	f7ff ffda 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c8:	4601      	mov	r1, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0adb      	lsrs	r3, r3, #11
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08005340 	.word	0x08005340

080037ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003804:	f7ff fa04 	bl	8002c10 <HAL_PWREx_GetVoltageRange>
 8003808:	6178      	str	r0, [r7, #20]
 800380a:	e014      	b.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	6593      	str	r3, [r2, #88]	; 0x58
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003824:	f7ff f9f4 	bl	8002c10 <HAL_PWREx_GetVoltageRange>
 8003828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383c:	d10b      	bne.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d919      	bls.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2ba0      	cmp	r3, #160	; 0xa0
 8003848:	d902      	bls.n	8003850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800384a:	2302      	movs	r3, #2
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e013      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003850:	2301      	movs	r3, #1
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e010      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d902      	bls.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800385c:	2303      	movs	r3, #3
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	e00a      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d102      	bne.n	800386e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003868:	2302      	movs	r3, #2
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e004      	b.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d101      	bne.n	8003878 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003874:	2301      	movs	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 0207 	bic.w	r2, r3, #7
 8003880:	4909      	ldr	r1, [pc, #36]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	429a      	cmp	r2, r3
 8003894:	d001      	beq.n	800389a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40022000 	.word	0x40022000

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b4:	2300      	movs	r3, #0
 80038b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b8:	2300      	movs	r3, #0
 80038ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d03f      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d0:	d01c      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d6:	d802      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80038dc:	e01f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80038de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e2:	d003      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80038e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038e8:	d01c      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80038ea:	e018      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038ec:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a84      	ldr	r2, [pc, #528]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f8:	e015      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fab9 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800390a:	e00c      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3320      	adds	r3, #32
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fba0 	bl	8004058 <RCCEx_PLLSAI2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	74fb      	strb	r3, [r7, #19]
      break;
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800392c:	4b75      	ldr	r3, [pc, #468]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393a:	4972      	ldr	r1, [pc, #456]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003942:	e001      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03f      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395c:	d01c      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800395e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003962:	d802      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003968:	e01f      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800396a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003970:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003974:	d01c      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003976:	e018      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003978:	4b62      	ldr	r3, [pc, #392]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a61      	ldr	r2, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003984:	e015      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fa73 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003996:	e00c      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3320      	adds	r3, #32
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb5a 	bl	8004058 <RCCEx_PLLSAI2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039a8:	e003      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	74fb      	strb	r3, [r7, #19]
      break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80039b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039b8:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c6:	494f      	ldr	r1, [pc, #316]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a0 	beq.w	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b3e      	ldr	r3, [pc, #248]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fa42 	bl	8000eac <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a2a:	e009      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fd fa3e 	bl	8000eac <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a3e:	e005      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ef      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d15c      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01f      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d019      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd f9fd 	bl	8000eac <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab4:	e00b      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd f9f9 	bl	8000eac <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d902      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	74fb      	strb	r3, [r7, #19]
            break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ec      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003afa:	e009      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b10:	7c7b      	ldrb	r3, [r7, #17]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4b9e      	ldr	r3, [pc, #632]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a9d      	ldr	r2, [pc, #628]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2e:	4b98      	ldr	r3, [pc, #608]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 0203 	bic.w	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	4994      	ldr	r1, [pc, #592]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b50:	4b8f      	ldr	r3, [pc, #572]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 020c 	bic.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	498c      	ldr	r1, [pc, #560]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b72:	4b87      	ldr	r3, [pc, #540]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4983      	ldr	r1, [pc, #524]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b94:	4b7e      	ldr	r3, [pc, #504]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	497b      	ldr	r1, [pc, #492]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb6:	4b76      	ldr	r3, [pc, #472]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	4972      	ldr	r1, [pc, #456]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd8:	4b6d      	ldr	r3, [pc, #436]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	496a      	ldr	r1, [pc, #424]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bfa:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	4961      	ldr	r1, [pc, #388]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c1c:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	4959      	ldr	r1, [pc, #356]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3e:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	4950      	ldr	r1, [pc, #320]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	4948      	ldr	r1, [pc, #288]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	493f      	ldr	r1, [pc, #252]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d028      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca4:	4b3a      	ldr	r3, [pc, #232]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb2:	4937      	ldr	r1, [pc, #220]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a31      	ldr	r2, [pc, #196]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f8c8 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d028      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	491f      	ldr	r1, [pc, #124]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d20:	d106      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4a1a      	ldr	r2, [pc, #104]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d2c:	60d3      	str	r3, [r2, #12]
 8003d2e:	e011      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f899 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6e:	4908      	ldr	r1, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a02      	ldr	r2, [pc, #8]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
 8003d8c:	e014      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f867 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02f      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	4928      	ldr	r1, [pc, #160]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2102      	movs	r1, #2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f844 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	74bb      	strb	r3, [r7, #18]
 8003dfe:	e011      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3320      	adds	r3, #32
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f921 	bl	8004058 <RCCEx_PLLSAI2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3e:	490d      	ldr	r1, [pc, #52]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	4904      	ldr	r1, [pc, #16]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e86:	4b73      	ldr	r3, [pc, #460]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d018      	beq.n	8003ec4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e92:	4b70      	ldr	r3, [pc, #448]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d10d      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d044      	beq.n	8003f48 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e041      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d00c      	beq.n	8003ee6 <RCCEx_PLLSAI1_Config+0x6e>
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d013      	beq.n	8003ef8 <RCCEx_PLLSAI1_Config+0x80>
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d120      	bne.n	8003f16 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed4:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11d      	bne.n	8003f1c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee4:	e01a      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef6:	e013      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ef8:	4b56      	ldr	r3, [pc, #344]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10f      	bne.n	8003f24 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f14:	e006      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1a:	e004      	b.n	8003f26 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f1c:	bf00      	nop
 8003f1e:	e002      	b.n	8003f26 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f24:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2c:	4b49      	ldr	r3, [pc, #292]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	430b      	orrs	r3, r1
 8003f42:	4944      	ldr	r1, [pc, #272]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d17d      	bne.n	800404a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f4e:	4b41      	ldr	r3, [pc, #260]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a40      	ldr	r2, [pc, #256]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fc ffa7 	bl	8000eac <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f60:	e009      	b.n	8003f76 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f62:	f7fc ffa3 	bl	8000eac <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
        break;
 8003f74:	e005      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f76:	4b37      	ldr	r3, [pc, #220]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ef      	bne.n	8003f62 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d160      	bne.n	800404a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d111      	bne.n	8003fb2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	0211      	lsls	r1, r2, #8
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68d2      	ldr	r2, [r2, #12]
 8003fa4:	0912      	lsrs	r2, r2, #4
 8003fa6:	0452      	lsls	r2, r2, #17
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	492a      	ldr	r1, [pc, #168]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	610b      	str	r3, [r1, #16]
 8003fb0:	e027      	b.n	8004002 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d112      	bne.n	8003fde <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fb8:	4b26      	ldr	r3, [pc, #152]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6892      	ldr	r2, [r2, #8]
 8003fc8:	0211      	lsls	r1, r2, #8
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6912      	ldr	r2, [r2, #16]
 8003fce:	0852      	lsrs	r2, r2, #1
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	0552      	lsls	r2, r2, #21
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	491f      	ldr	r1, [pc, #124]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	610b      	str	r3, [r1, #16]
 8003fdc:	e011      	b.n	8004002 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6892      	ldr	r2, [r2, #8]
 8003fee:	0211      	lsls	r1, r2, #8
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6952      	ldr	r2, [r2, #20]
 8003ff4:	0852      	lsrs	r2, r2, #1
 8003ff6:	3a01      	subs	r2, #1
 8003ff8:	0652      	lsls	r2, r2, #25
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	4915      	ldr	r1, [pc, #84]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004008:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800400c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fc ff4d 	bl	8000eac <HAL_GetTick>
 8004012:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004014:	e009      	b.n	800402a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004016:	f7fc ff49 	bl	8000eac <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d902      	bls.n	800402a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	73fb      	strb	r3, [r7, #15]
          break;
 8004028:	e005      	b.n	8004036 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ef      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4903      	ldr	r1, [pc, #12]	; (8004054 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000

08004058 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004066:	4b68      	ldr	r3, [pc, #416]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004072:	4b65      	ldr	r3, [pc, #404]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0203 	and.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d10d      	bne.n	800409e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
       ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800408a:	4b5f      	ldr	r3, [pc, #380]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
       ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d044      	beq.n	8004128 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	e041      	b.n	8004128 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d00c      	beq.n	80040c6 <RCCEx_PLLSAI2_Config+0x6e>
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d013      	beq.n	80040d8 <RCCEx_PLLSAI2_Config+0x80>
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d120      	bne.n	80040f6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b4:	4b54      	ldr	r3, [pc, #336]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d11d      	bne.n	80040fc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c4:	e01a      	b.n	80040fc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c6:	4b50      	ldr	r3, [pc, #320]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d116      	bne.n	8004100 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d6:	e013      	b.n	8004100 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040d8:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040f4:	e006      	b.n	8004104 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      break;
 80040fa:	e004      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040fc:	bf00      	nop
 80040fe:	e002      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004100:	bf00      	nop
 8004102:	e000      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004104:	bf00      	nop
    }

    if(status == HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6819      	ldr	r1, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	3b01      	subs	r3, #1
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	430b      	orrs	r3, r1
 8004122:	4939      	ldr	r1, [pc, #228]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d167      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a35      	ldr	r2, [pc, #212]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fc feb7 	bl	8000eac <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004140:	e009      	b.n	8004156 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004142:	f7fc feb3 	bl	8000eac <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d902      	bls.n	8004156 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	73fb      	strb	r3, [r7, #15]
        break;
 8004154:	e005      	b.n	8004162 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ef      	bne.n	8004142 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d14a      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d111      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6892      	ldr	r2, [r2, #8]
 800417e:	0211      	lsls	r1, r2, #8
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68d2      	ldr	r2, [r2, #12]
 8004184:	0912      	lsrs	r2, r2, #4
 8004186:	0452      	lsls	r2, r2, #17
 8004188:	430a      	orrs	r2, r1
 800418a:	491f      	ldr	r1, [pc, #124]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	614b      	str	r3, [r1, #20]
 8004190:	e011      	b.n	80041b6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800419a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6892      	ldr	r2, [r2, #8]
 80041a2:	0211      	lsls	r1, r2, #8
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6912      	ldr	r2, [r2, #16]
 80041a8:	0852      	lsrs	r2, r2, #1
 80041aa:	3a01      	subs	r2, #1
 80041ac:	0652      	lsls	r2, r2, #25
 80041ae:	430a      	orrs	r2, r1
 80041b0:	4915      	ldr	r1, [pc, #84]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fc fe73 	bl	8000eac <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041c8:	e009      	b.n	80041de <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041ca:	f7fc fe6f 	bl	8000eac <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d902      	bls.n	80041de <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	73fb      	strb	r3, [r7, #15]
          break;
 80041dc:	e005      	b.n	80041ea <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ef      	beq.n	80041ca <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e095      	b.n	800434a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422e:	d009      	beq.n	8004244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
 8004236:	e005      	b.n	8004244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fc82 	bl	8000b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004284:	d902      	bls.n	800428c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e002      	b.n	8004292 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800429a:	d007      	beq.n	80042ac <HAL_SPI_Init+0xa0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	ea42 0103 	orr.w	r1, r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0204 	and.w	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004328:	ea42 0103 	orr.w	r1, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b088      	sub	sp, #32
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_SPI_Transmit+0x22>
 8004370:	2302      	movs	r3, #2
 8004372:	e158      	b.n	8004626 <HAL_SPI_Transmit+0x2d4>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800437c:	f7fc fd96 	bl	8000eac <HAL_GetTick>
 8004380:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d002      	beq.n	8004398 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004396:	e13d      	b.n	8004614 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_SPI_Transmit+0x52>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a8:	e134      	b.n	8004614 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2203      	movs	r2, #3
 80043ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f4:	d10f      	bne.n	8004416 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	d007      	beq.n	8004434 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800443c:	d94b      	bls.n	80044d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_SPI_Transmit+0xfa>
 8004446:	8afb      	ldrh	r3, [r7, #22]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d13e      	bne.n	80044ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	1c9a      	adds	r2, r3, #2
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004470:	e02b      	b.n	80044ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b02      	cmp	r3, #2
 800447e:	d112      	bne.n	80044a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044a4:	e011      	b.n	80044ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a6:	f7fc fd01 	bl	8000eac <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d803      	bhi.n	80044be <HAL_SPI_Transmit+0x16c>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d102      	bne.n	80044c4 <HAL_SPI_Transmit+0x172>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044c8:	e0a4      	b.n	8004614 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ce      	bne.n	8004472 <HAL_SPI_Transmit+0x120>
 80044d4:	e07c      	b.n	80045d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0x192>
 80044de:	8afb      	ldrh	r3, [r7, #22]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d170      	bne.n	80045c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d912      	bls.n	8004514 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	1c9a      	adds	r2, r3, #2
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b02      	subs	r3, #2
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004512:	e058      	b.n	80045c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800453a:	e044      	b.n	80045c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d12b      	bne.n	80045a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d912      	bls.n	800457a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b02      	subs	r3, #2
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004578:	e025      	b.n	80045c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	7812      	ldrb	r2, [r2, #0]
 8004586:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a0:	e011      	b.n	80045c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a2:	f7fc fc83 	bl	8000eac <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_Transmit+0x268>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_Transmit+0x26e>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045c4:	e026      	b.n	8004614 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1b5      	bne.n	800453c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f941 	bl	800485c <SPI_EndRxTxTransaction>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e000      	b.n	8004614 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004612:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004624:	7ffb      	ldrb	r3, [r7, #31]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004640:	f7fc fc34 	bl	8000eac <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4413      	add	r3, r2
 800464e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004650:	f7fc fc2c 	bl	8000eac <HAL_GetTick>
 8004654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004656:	4b39      	ldr	r3, [pc, #228]	; (800473c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	015b      	lsls	r3, r3, #5
 800465c:	0d1b      	lsrs	r3, r3, #20
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	fb02 f303 	mul.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004666:	e054      	b.n	8004712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d050      	beq.n	8004712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004670:	f7fc fc1c 	bl	8000eac <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	429a      	cmp	r2, r3
 800467e:	d902      	bls.n	8004686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d13d      	bne.n	8004702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469e:	d111      	bne.n	80046c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a8:	d004      	beq.n	80046b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d107      	bne.n	80046c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d10f      	bne.n	80046ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e017      	b.n	8004732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3b01      	subs	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	429a      	cmp	r2, r3
 800472e:	d19b      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000

08004740 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800474e:	f7fc fbad 	bl	8000eac <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4413      	add	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800475e:	f7fc fba5 	bl	8000eac <HAL_GetTick>
 8004762:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004764:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	00da      	lsls	r2, r3, #3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	0d1b      	lsrs	r3, r3, #20
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800477c:	e05f      	b.n	800483e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004784:	d106      	bne.n	8004794 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d050      	beq.n	800483e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800479c:	f7fc fb86 	bl	8000eac <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d902      	bls.n	80047b2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d13d      	bne.n	800482e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ca:	d111      	bne.n	80047f0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	d004      	beq.n	80047e0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d107      	bne.n	80047f0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	d10f      	bne.n	800481a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e010      	b.n	8004850 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3b01      	subs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d197      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000000 	.word	0x20000000

0800485c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff63 	bl	8004740 <SPI_WaitFifoStateUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e027      	b.n	80048e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff fec8 	bl	8004630 <SPI_WaitFlagStateUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e014      	b.n	80048e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff ff3c 	bl	8004740 <SPI_WaitFifoStateUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	f043 0220 	orr.w	r2, r3, #32
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e000      	b.n	80048e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e040      	b.n	800497c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc f98c 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8c0 	bl	8004aac <UART_SetConfig>
 800492c:	4603      	mov	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e022      	b.n	800497c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fb3e 	bl	8004fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fbc5 	bl	8005104 <UART_CheckIdleState>
 800497a:	4603      	mov	r3, r0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004998:	2b20      	cmp	r3, #32
 800499a:	f040 8081 	bne.w	8004aa0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_UART_Transmit+0x26>
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e079      	b.n	8004aa2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_UART_Transmit+0x38>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e072      	b.n	8004aa2 <HAL_UART_Transmit+0x11e>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2221      	movs	r2, #33	; 0x21
 80049ce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80049d0:	f7fc fa6c 	bl	8000eac <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	88fa      	ldrh	r2, [r7, #6]
 80049da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ee:	d108      	bne.n	8004a02 <HAL_UART_Transmit+0x7e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e003      	b.n	8004a0a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004a12:	e02d      	b.n	8004a70 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fbb5 	bl	800518e <UART_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e039      	b.n	8004aa2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	881a      	ldrh	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	b292      	uxth	r2, r2
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3302      	adds	r3, #2
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	e008      	b.n	8004a5e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b292      	uxth	r2, r2
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1cb      	bne.n	8004a14 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2140      	movs	r1, #64	; 0x40
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fb81 	bl	800518e <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e005      	b.n	8004aa2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ab0:	b088      	sub	sp, #32
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4bac      	ldr	r3, [pc, #688]	; (8004d8c <UART_SetConfig+0x2e0>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	69f9      	ldr	r1, [r7, #28]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4aa2      	ldr	r2, [pc, #648]	; (8004d90 <UART_SetConfig+0x2e4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a99      	ldr	r2, [pc, #612]	; (8004d94 <UART_SetConfig+0x2e8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d121      	bne.n	8004b78 <UART_SetConfig+0xcc>
 8004b34:	4b98      	ldr	r3, [pc, #608]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d816      	bhi.n	8004b70 <UART_SetConfig+0xc4>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x9c>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b5f 	.word	0x08004b5f
 8004b54:	08004b6b 	.word	0x08004b6b
 8004b58:	2301      	movs	r3, #1
 8004b5a:	76fb      	strb	r3, [r7, #27]
 8004b5c:	e0e8      	b.n	8004d30 <UART_SetConfig+0x284>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	76fb      	strb	r3, [r7, #27]
 8004b62:	e0e5      	b.n	8004d30 <UART_SetConfig+0x284>
 8004b64:	2304      	movs	r3, #4
 8004b66:	76fb      	strb	r3, [r7, #27]
 8004b68:	e0e2      	b.n	8004d30 <UART_SetConfig+0x284>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	76fb      	strb	r3, [r7, #27]
 8004b6e:	e0df      	b.n	8004d30 <UART_SetConfig+0x284>
 8004b70:	2310      	movs	r3, #16
 8004b72:	76fb      	strb	r3, [r7, #27]
 8004b74:	bf00      	nop
 8004b76:	e0db      	b.n	8004d30 <UART_SetConfig+0x284>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a87      	ldr	r2, [pc, #540]	; (8004d9c <UART_SetConfig+0x2f0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d134      	bne.n	8004bec <UART_SetConfig+0x140>
 8004b82:	4b85      	ldr	r3, [pc, #532]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d829      	bhi.n	8004be4 <UART_SetConfig+0x138>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <UART_SetConfig+0xec>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004bcd 	.word	0x08004bcd
 8004b9c:	08004be5 	.word	0x08004be5
 8004ba0:	08004be5 	.word	0x08004be5
 8004ba4:	08004be5 	.word	0x08004be5
 8004ba8:	08004bd9 	.word	0x08004bd9
 8004bac:	08004be5 	.word	0x08004be5
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004be5 	.word	0x08004be5
 8004bb8:	08004bd3 	.word	0x08004bd3
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004be5 	.word	0x08004be5
 8004bc8:	08004bdf 	.word	0x08004bdf
 8004bcc:	2300      	movs	r3, #0
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	e0ae      	b.n	8004d30 <UART_SetConfig+0x284>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	76fb      	strb	r3, [r7, #27]
 8004bd6:	e0ab      	b.n	8004d30 <UART_SetConfig+0x284>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	76fb      	strb	r3, [r7, #27]
 8004bdc:	e0a8      	b.n	8004d30 <UART_SetConfig+0x284>
 8004bde:	2308      	movs	r3, #8
 8004be0:	76fb      	strb	r3, [r7, #27]
 8004be2:	e0a5      	b.n	8004d30 <UART_SetConfig+0x284>
 8004be4:	2310      	movs	r3, #16
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	bf00      	nop
 8004bea:	e0a1      	b.n	8004d30 <UART_SetConfig+0x284>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6b      	ldr	r2, [pc, #428]	; (8004da0 <UART_SetConfig+0x2f4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d120      	bne.n	8004c38 <UART_SetConfig+0x18c>
 8004bf6:	4b68      	ldr	r3, [pc, #416]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d00f      	beq.n	8004c24 <UART_SetConfig+0x178>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d802      	bhi.n	8004c0e <UART_SetConfig+0x162>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <UART_SetConfig+0x16c>
 8004c0c:	e010      	b.n	8004c30 <UART_SetConfig+0x184>
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d005      	beq.n	8004c1e <UART_SetConfig+0x172>
 8004c12:	2b30      	cmp	r3, #48	; 0x30
 8004c14:	d009      	beq.n	8004c2a <UART_SetConfig+0x17e>
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x184>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	e088      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	76fb      	strb	r3, [r7, #27]
 8004c22:	e085      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c24:	2304      	movs	r3, #4
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e082      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	76fb      	strb	r3, [r7, #27]
 8004c2e:	e07f      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c30:	2310      	movs	r3, #16
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	bf00      	nop
 8004c36:	e07b      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a59      	ldr	r2, [pc, #356]	; (8004da4 <UART_SetConfig+0x2f8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d120      	bne.n	8004c84 <UART_SetConfig+0x1d8>
 8004c42:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d00f      	beq.n	8004c70 <UART_SetConfig+0x1c4>
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d802      	bhi.n	8004c5a <UART_SetConfig+0x1ae>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0x1b8>
 8004c58:	e010      	b.n	8004c7c <UART_SetConfig+0x1d0>
 8004c5a:	2b80      	cmp	r3, #128	; 0x80
 8004c5c:	d005      	beq.n	8004c6a <UART_SetConfig+0x1be>
 8004c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c60:	d009      	beq.n	8004c76 <UART_SetConfig+0x1ca>
 8004c62:	e00b      	b.n	8004c7c <UART_SetConfig+0x1d0>
 8004c64:	2300      	movs	r3, #0
 8004c66:	76fb      	strb	r3, [r7, #27]
 8004c68:	e062      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e05f      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c70:	2304      	movs	r3, #4
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e05c      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c76:	2308      	movs	r3, #8
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e059      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	bf00      	nop
 8004c82:	e055      	b.n	8004d30 <UART_SetConfig+0x284>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a47      	ldr	r2, [pc, #284]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d124      	bne.n	8004cd8 <UART_SetConfig+0x22c>
 8004c8e:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9c:	d012      	beq.n	8004cc4 <UART_SetConfig+0x218>
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d802      	bhi.n	8004caa <UART_SetConfig+0x1fe>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <UART_SetConfig+0x20c>
 8004ca8:	e012      	b.n	8004cd0 <UART_SetConfig+0x224>
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cae:	d006      	beq.n	8004cbe <UART_SetConfig+0x212>
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb4:	d009      	beq.n	8004cca <UART_SetConfig+0x21e>
 8004cb6:	e00b      	b.n	8004cd0 <UART_SetConfig+0x224>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	76fb      	strb	r3, [r7, #27]
 8004cbc:	e038      	b.n	8004d30 <UART_SetConfig+0x284>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	76fb      	strb	r3, [r7, #27]
 8004cc2:	e035      	b.n	8004d30 <UART_SetConfig+0x284>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	76fb      	strb	r3, [r7, #27]
 8004cc8:	e032      	b.n	8004d30 <UART_SetConfig+0x284>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	76fb      	strb	r3, [r7, #27]
 8004cce:	e02f      	b.n	8004d30 <UART_SetConfig+0x284>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	76fb      	strb	r3, [r7, #27]
 8004cd4:	bf00      	nop
 8004cd6:	e02b      	b.n	8004d30 <UART_SetConfig+0x284>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <UART_SetConfig+0x2e4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d124      	bne.n	8004d2c <UART_SetConfig+0x280>
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d012      	beq.n	8004d18 <UART_SetConfig+0x26c>
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d802      	bhi.n	8004cfe <UART_SetConfig+0x252>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <UART_SetConfig+0x260>
 8004cfc:	e012      	b.n	8004d24 <UART_SetConfig+0x278>
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d02:	d006      	beq.n	8004d12 <UART_SetConfig+0x266>
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d08:	d009      	beq.n	8004d1e <UART_SetConfig+0x272>
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x278>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e00e      	b.n	8004d30 <UART_SetConfig+0x284>
 8004d12:	2302      	movs	r3, #2
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e00b      	b.n	8004d30 <UART_SetConfig+0x284>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	e008      	b.n	8004d30 <UART_SetConfig+0x284>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	76fb      	strb	r3, [r7, #27]
 8004d22:	e005      	b.n	8004d30 <UART_SetConfig+0x284>
 8004d24:	2310      	movs	r3, #16
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	bf00      	nop
 8004d2a:	e001      	b.n	8004d30 <UART_SetConfig+0x284>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <UART_SetConfig+0x2e4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f040 8087 	bne.w	8004e4a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d3c:	7efb      	ldrb	r3, [r7, #27]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d836      	bhi.n	8004db0 <UART_SetConfig+0x304>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x29c>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004db1 	.word	0x08004db1
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004db1 	.word	0x08004db1
 8004d58:	08004d7b 	.word	0x08004d7b
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004db1 	.word	0x08004db1
 8004d68:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fe fd12 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8004d70:	6178      	str	r0, [r7, #20]
        break;
 8004d72:	e022      	b.n	8004dba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <UART_SetConfig+0x300>)
 8004d76:	617b      	str	r3, [r7, #20]
        break;
 8004d78:	e01f      	b.n	8004dba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fe fc75 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8004d7e:	6178      	str	r0, [r7, #20]
        break;
 8004d80:	e01b      	b.n	8004dba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	617b      	str	r3, [r7, #20]
        break;
 8004d88:	e017      	b.n	8004dba <UART_SetConfig+0x30e>
 8004d8a:	bf00      	nop
 8004d8c:	efff69f3 	.word	0xefff69f3
 8004d90:	40008000 	.word	0x40008000
 8004d94:	40013800 	.word	0x40013800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40004400 	.word	0x40004400
 8004da0:	40004800 	.word	0x40004800
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	40005000 	.word	0x40005000
 8004dac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	76bb      	strb	r3, [r7, #26]
        break;
 8004db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80f1 	beq.w	8004fa4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4413      	add	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d305      	bcc.n	8004dde <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d902      	bls.n	8004de4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	76bb      	strb	r3, [r7, #26]
 8004de2:	e0df      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	f04f 0400 	mov.w	r4, #0
 8004df4:	0214      	lsls	r4, r2, #8
 8004df6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004dfa:	020b      	lsls	r3, r1, #8
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6852      	ldr	r2, [r2, #4]
 8004e00:	0852      	lsrs	r2, r2, #1
 8004e02:	4611      	mov	r1, r2
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	eb13 0b01 	adds.w	fp, r3, r1
 8004e0c:	eb44 0c02 	adc.w	ip, r4, r2
 8004e10:	4658      	mov	r0, fp
 8004e12:	4661      	mov	r1, ip
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f04f 0400 	mov.w	r4, #0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4623      	mov	r3, r4
 8004e20:	f7fb f9d2 	bl	80001c8 <__aeabi_uldivmod>
 8004e24:	4603      	mov	r3, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e30:	d308      	bcc.n	8004e44 <UART_SetConfig+0x398>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e38:	d204      	bcs.n	8004e44 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	e0af      	b.n	8004fa4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	76bb      	strb	r3, [r7, #26]
 8004e48:	e0ac      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d15b      	bne.n	8004f0c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d827      	bhi.n	8004eaa <UART_SetConfig+0x3fe>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x3b4>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004eab 	.word	0x08004eab
 8004e78:	08004eab 	.word	0x08004eab
 8004e7c:	08004eab 	.word	0x08004eab
 8004e80:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe fc86 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8004e88:	6178      	str	r0, [r7, #20]
        break;
 8004e8a:	e013      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7fe fc98 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8004e90:	6178      	str	r0, [r7, #20]
        break;
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <UART_SetConfig+0x510>)
 8004e96:	617b      	str	r3, [r7, #20]
        break;
 8004e98:	e00c      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fe fbe5 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8004e9e:	6178      	str	r0, [r7, #20]
        break;
 8004ea0:	e008      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea6:	617b      	str	r3, [r7, #20]
        break;
 8004ea8:	e004      	b.n	8004eb4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d074      	beq.n	8004fa4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	005a      	lsls	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	441a      	add	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d916      	bls.n	8004f06 <UART_SetConfig+0x45a>
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ede:	d212      	bcs.n	8004f06 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f023 030f 	bic.w	r3, r3, #15
 8004ee8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	89fb      	ldrh	r3, [r7, #14]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	89fa      	ldrh	r2, [r7, #14]
 8004f02:	60da      	str	r2, [r3, #12]
 8004f04:	e04e      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	76bb      	strb	r3, [r7, #26]
 8004f0a:	e04b      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0c:	7efb      	ldrb	r3, [r7, #27]
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d827      	bhi.n	8004f62 <UART_SetConfig+0x4b6>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x46c>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fe fc2a 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8004f40:	6178      	str	r0, [r7, #20]
        break;
 8004f42:	e013      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7fe fc3c 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8004f48:	6178      	str	r0, [r7, #20]
        break;
 8004f4a:	e00f      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <UART_SetConfig+0x510>)
 8004f4e:	617b      	str	r3, [r7, #20]
        break;
 8004f50:	e00c      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fe fb89 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8004f56:	6178      	str	r0, [r7, #20]
        break;
 8004f58:	e008      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	617b      	str	r3, [r7, #20]
        break;
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	76bb      	strb	r3, [r7, #26]
        break;
 8004f6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d018      	beq.n	8004fa4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	085a      	lsrs	r2, r3, #1
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d908      	bls.n	8004fa0 <UART_SetConfig+0x4f4>
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f94:	d204      	bcs.n	8004fa0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e001      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004fb0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050be:	d10a      	bne.n	80050d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005112:	f7fb fecb 	bl	8000eac <HAL_GetTick>
 8005116:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b08      	cmp	r3, #8
 8005124:	d10e      	bne.n	8005144 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005126:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f82a 	bl	800518e <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e020      	b.n	8005186 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b04      	cmp	r3, #4
 8005150:	d10e      	bne.n	8005170 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f814 	bl	800518e <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e00a      	b.n	8005186 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4613      	mov	r3, r2
 800519c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519e:	e05d      	b.n	800525c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d059      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a8:	f7fb fe80 	bl	8000eac <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d302      	bcc.n	80051be <UART_WaitOnFlagUntilTimeout+0x30>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11b      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e042      	b.n	800527c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02b      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005212:	d123      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800521c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800522c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e00f      	b.n	800527c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	429a      	cmp	r2, r3
 8005278:	d092      	beq.n	80051a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <__libc_init_array>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4e0d      	ldr	r6, [pc, #52]	; (80052bc <__libc_init_array+0x38>)
 8005288:	4c0d      	ldr	r4, [pc, #52]	; (80052c0 <__libc_init_array+0x3c>)
 800528a:	1ba4      	subs	r4, r4, r6
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	2500      	movs	r5, #0
 8005290:	42a5      	cmp	r5, r4
 8005292:	d109      	bne.n	80052a8 <__libc_init_array+0x24>
 8005294:	4e0b      	ldr	r6, [pc, #44]	; (80052c4 <__libc_init_array+0x40>)
 8005296:	4c0c      	ldr	r4, [pc, #48]	; (80052c8 <__libc_init_array+0x44>)
 8005298:	f000 f820 	bl	80052dc <_init>
 800529c:	1ba4      	subs	r4, r4, r6
 800529e:	10a4      	asrs	r4, r4, #2
 80052a0:	2500      	movs	r5, #0
 80052a2:	42a5      	cmp	r5, r4
 80052a4:	d105      	bne.n	80052b2 <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ac:	4798      	blx	r3
 80052ae:	3501      	adds	r5, #1
 80052b0:	e7ee      	b.n	8005290 <__libc_init_array+0xc>
 80052b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b6:	4798      	blx	r3
 80052b8:	3501      	adds	r5, #1
 80052ba:	e7f2      	b.n	80052a2 <__libc_init_array+0x1e>
 80052bc:	08005380 	.word	0x08005380
 80052c0:	08005380 	.word	0x08005380
 80052c4:	08005380 	.word	0x08005380
 80052c8:	08005384 	.word	0x08005384

080052cc <memset>:
 80052cc:	4402      	add	r2, r0
 80052ce:	4603      	mov	r3, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <_init>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr

080052e8 <_fini>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr
