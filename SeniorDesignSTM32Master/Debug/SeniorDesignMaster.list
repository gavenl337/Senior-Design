
SeniorDesignMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08009e70  08009e70  00019e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a280  0800a280  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a288  0800a288  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a288  0800a288  0001a288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a28c  0800a28c  0001a28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021cc  200001dc  0800a46c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a8  0800a46c  000223a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d4c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e5  00000000  00000000  00030f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00033040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00033f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000284a1  00000000  00000000  00034d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc7b  00000000  00000000  0005d1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fef6b  00000000  00000000  00068e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf4  00000000  00000000  00167e5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e54 	.word	0x08009e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009e54 	.word	0x08009e54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<6; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e00a      	b.n	8000fac <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc[i] = adc_buf[i];
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f9e:	4a09      	ldr	r2, [pc, #36]	; (8000fc4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i<6; i++)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	ddf1      	ble.n	8000f96 <HAL_ADC_ConvCpltCallback+0xe>
		}
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000320 	.word	0x20000320
 8000fc4:	20000268 	.word	0x20000268

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09a      	sub	sp, #104	; 0x68
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char uart_buf[50] = {'\0'};	//buffer for output data
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2232      	movs	r2, #50	; 0x32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 f9fd 	bl	80063d4 <memset>
	int uart_buf_len = {'\0'};
 8000fda:	2300      	movs	r3, #0
 8000fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 ff84 	bl	8001eea <HAL_Init>

  /* USER CODE BEGIN Init */
	//byte address = 0x00;
	int val1 = 0;  // variable to store the value read
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	65bb      	str	r3, [r7, #88]	; 0x58
	int val2 = 0;  // variable to store the value read
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	657b      	str	r3, [r7, #84]	; 0x54
	int val3 = 0;  // variable to store the value read
 8000fea:	2300      	movs	r3, #0
 8000fec:	653b      	str	r3, [r7, #80]	; 0x50
	int val4 = 0;  // variable to store the value read
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
	int val5 = 0;  // variable to store the value read
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
	int val6 = 0;  // variable to store the value read
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	647b      	str	r3, [r7, #68]	; 0x44

	int i = 64; //starting value of 540
 8000ffa:	2340      	movs	r3, #64	; 0x40
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
	int target = 256; //target analog bit value
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
	int tNum = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	667b      	str	r3, [r7, #100]	; 0x64
	//int NOP = 0b00000000;
	int NOP = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f90e 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 fad8 	bl	80015c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001014:	f000 fab8 	bl	8001588 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001018:	f000 fa86 	bl	8001528 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800101c:	f000 fa46 	bl	80014ac <MX_SPI1_Init>
  MX_ADC1_Init();
 8001020:	f000 f98e 	bl	8001340 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	4972      	ldr	r1, [pc, #456]	; (80011f4 <main+0x22c>)
 800102a:	4873      	ldr	r0, [pc, #460]	; (80011f8 <main+0x230>)
 800102c:	f001 fb1e 	bl	800266c <HAL_ADC_Start_DMA>
  //DMA stores ADC values in memory to be called back when needed.
  //buffer holds the values until conversions are complete,
  //at which point the adc[] array holds the referenced values.
  //HAL_ADC_Start_DMA (&hadc1, buffer, 6);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	4871      	ldr	r0, [pc, #452]	; (80011fc <main+0x234>)
 8001038:	f002 fe36 	bl	8003ca8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t spiData[1];
  spiData[0] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	703b      	strb	r3, [r7, #0]
  while (1){

	  for(int measurement = 0; measurement <= 10; measurement++){
 8001040:	2300      	movs	r3, #0
 8001042:	663b      	str	r3, [r7, #96]	; 0x60
 8001044:	e0c9      	b.n	80011da <main+0x212>
		  //HAL_ADC_Start(&hadc1);								//Start ADC conversion
		  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);		//wait for ADC conversion
		  //val = HAL_ADC_GetValue(&hadc1);
		  //HAL_ADC_Start(&hadc1);
		  val1 = adc[0];
 8001046:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <main+0x238>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
		  val2 = adc[1];
 800104c:	4b6c      	ldr	r3, [pc, #432]	; (8001200 <main+0x238>)
 800104e:	885b      	ldrh	r3, [r3, #2]
 8001050:	657b      	str	r3, [r7, #84]	; 0x54
		  val3 = adc[2];
 8001052:	4b6b      	ldr	r3, [pc, #428]	; (8001200 <main+0x238>)
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	653b      	str	r3, [r7, #80]	; 0x50
		  val4 = adc[3];
 8001058:	4b69      	ldr	r3, [pc, #420]	; (8001200 <main+0x238>)
 800105a:	88db      	ldrh	r3, [r3, #6]
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  val5 = adc[4];
 800105e:	4b68      	ldr	r3, [pc, #416]	; (8001200 <main+0x238>)
 8001060:	891b      	ldrh	r3, [r3, #8]
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
		  val6 = adc[5];
 8001064:	4b66      	ldr	r3, [pc, #408]	; (8001200 <main+0x238>)
 8001066:	895b      	ldrh	r3, [r3, #10]
 8001068:	647b      	str	r3, [r7, #68]	; 0x44

		  uart_buf_len =sprintf(uart_buf, "\'val1\'= %d\r\n", val1);	  	//load print buffer with message
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800106e:	4965      	ldr	r1, [pc, #404]	; (8001204 <main+0x23c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f005 fffb 	bl	800706c <siprintf>
 8001076:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107a:	b29a      	uxth	r2, r3
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	4861      	ldr	r0, [pc, #388]	; (8001208 <main+0x240>)
 8001082:	f004 fcfd 	bl	8005a80 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\'val2\'= %d\r\n", val2);	  	//load print buffer with message
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800108a:	4960      	ldr	r1, [pc, #384]	; (800120c <main+0x244>)
 800108c:	4618      	mov	r0, r3
 800108e:	f005 ffed 	bl	800706c <siprintf>
 8001092:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001096:	b29a      	uxth	r2, r3
 8001098:	1d39      	adds	r1, r7, #4
 800109a:	2364      	movs	r3, #100	; 0x64
 800109c:	485a      	ldr	r0, [pc, #360]	; (8001208 <main+0x240>)
 800109e:	f004 fcef 	bl	8005a80 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\'val3\'= %d\r\n", val3);	  	//load print buffer with message
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010a6:	495a      	ldr	r1, [pc, #360]	; (8001210 <main+0x248>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 ffdf 	bl	800706c <siprintf>
 80010ae:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80010b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	4853      	ldr	r0, [pc, #332]	; (8001208 <main+0x240>)
 80010ba:	f004 fce1 	bl	8005a80 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\'val4\'= %d\r\n", val4);	  	//load print buffer with message
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010c2:	4954      	ldr	r1, [pc, #336]	; (8001214 <main+0x24c>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 ffd1 	bl	800706c <siprintf>
 80010ca:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80010cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	1d39      	adds	r1, r7, #4
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	484c      	ldr	r0, [pc, #304]	; (8001208 <main+0x240>)
 80010d6:	f004 fcd3 	bl	8005a80 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\'val5\'= %d\r\n", val5);	  	//load print buffer with message
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010de:	494e      	ldr	r1, [pc, #312]	; (8001218 <main+0x250>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 ffc3 	bl	800706c <siprintf>
 80010e6:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80010e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	1d39      	adds	r1, r7, #4
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	4845      	ldr	r0, [pc, #276]	; (8001208 <main+0x240>)
 80010f2:	f004 fcc5 	bl	8005a80 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\'val6\'= %d\r\n", val6);	  	//load print buffer with message
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010fa:	4948      	ldr	r1, [pc, #288]	; (800121c <main+0x254>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 ffb5 	bl	800706c <siprintf>
 8001102:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001106:	b29a      	uxth	r2, r3
 8001108:	1d39      	adds	r1, r7, #4
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	483e      	ldr	r0, [pc, #248]	; (8001208 <main+0x240>)
 800110e:	f004 fcb7 	bl	8005a80 <HAL_UART_Transmit>

		  uart_buf_len =sprintf(uart_buf, "\'i\' Before Conversion = %d\r\n", spiData[0]);	  	//load print buffer with message
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4941      	ldr	r1, [pc, #260]	; (8001220 <main+0x258>)
 800111a:	4618      	mov	r0, r3
 800111c:	f005 ffa6 	bl	800706c <siprintf>
 8001120:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001124:	b29a      	uxth	r2, r3
 8001126:	1d39      	adds	r1, r7, #4
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	4837      	ldr	r0, [pc, #220]	; (8001208 <main+0x240>)
 800112c:	f004 fca8 	bl	8005a80 <HAL_UART_Transmit>

		  spiData[0] = targetCheck(val1, target, spiData[0]);
 8001130:	783b      	ldrb	r3, [r7, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001136:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001138:	f000 fb4e 	bl	80017d8 <targetCheck>
 800113c:	4603      	mov	r3, r0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	703b      	strb	r3, [r7, #0]

		  uart_buf_len =sprintf(uart_buf, "\'i\' After Conversion = %d\r\n", spiData[0]);	  	//load print buffer with message
 8001142:	783b      	ldrb	r3, [r7, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4936      	ldr	r1, [pc, #216]	; (8001224 <main+0x25c>)
 800114a:	4618      	mov	r0, r3
 800114c:	f005 ff8e 	bl	800706c <siprintf>
 8001150:	65f8      	str	r0, [r7, #92]	; 0x5c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001154:	b29a      	uxth	r2, r3
 8001156:	1d39      	adds	r1, r7, #4
 8001158:	2364      	movs	r3, #100	; 0x64
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <main+0x240>)
 800115c:	f004 fc90 	bl	8005a80 <HAL_UART_Transmit>

		  //dataString = createCSV(val,val,val,tNum);
		  if(spiData[0] > 128){
 8001160:	783b      	ldrb	r3, [r7, #0]
 8001162:	2b80      	cmp	r3, #128	; 0x80
 8001164:	d901      	bls.n	800116a <main+0x1a2>
			  //uart_buf_len =sprintf(uart_buf, "Entered if Statement about 128\n");	  	//load print buffer with message
			  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
			  i = 128;
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	643b      	str	r3, [r7, #64]	; 0x40
			  //uart_buf_len =sprintf(uart_buf, "Entered if Statement below 0\n");	  	//load print buffer with message
			  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
			  spiData[0] = 0;
		  }

		  displayResults(measurement, spiData[0], val1);
 800116a:	783b      	ldrb	r3, [r7, #0]
 800116c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800116e:	4619      	mov	r1, r3
 8001170:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001172:	f000 fa99 	bl	80016a8 <displayResults>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//set CS1 pin LOW.
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <main+0x234>)
 800117e:	f002 fd93 	bl	8003ca8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	f000 ff26 	bl	8001fd4 <HAL_Delay>
		  HAL_SPI_Transmit(&hspi1, spiData, 1, 100); //handle SPI, Cast data to a 16 bit unsigned integer, 2 bytes of data, 400 ms delay
 8001188:	4639      	mov	r1, r7
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	2201      	movs	r2, #1
 800118e:	4826      	ldr	r0, [pc, #152]	; (8001228 <main+0x260>)
 8001190:	f004 f95d 	bl	800544e <HAL_SPI_Transmit>
		  HAL_Delay(100);
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f000 ff1d 	bl	8001fd4 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 800119a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119c:	b29a      	uxth	r2, r3
 800119e:	1d39      	adds	r1, r7, #4
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	4819      	ldr	r0, [pc, #100]	; (8001208 <main+0x240>)
 80011a4:	f004 fc6c 	bl	8005a80 <HAL_UART_Transmit>
		  HAL_Delay(100);
 80011a8:	2064      	movs	r0, #100	; 0x64
 80011aa:	f000 ff13 	bl	8001fd4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <main+0x234>)
 80011b6:	f002 fd77 	bl	8003ca8 <HAL_GPIO_WritePin>

		  //digitalPotWrite(i);
		  HAL_Delay(1000);
 80011ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011be:	f000 ff09 	bl	8001fd4 <HAL_Delay>
		//HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80011c2:	2120      	movs	r1, #32
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f002 fd86 	bl	8003cd8 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80011cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d0:	f000 ff00 	bl	8001fd4 <HAL_Delay>
	  for(int measurement = 0; measurement <= 10; measurement++){
 80011d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d6:	3301      	adds	r3, #1
 80011d8:	663b      	str	r3, [r7, #96]	; 0x60
 80011da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	f77f af32 	ble.w	8001046 <main+0x7e>
		  //Using DMA to scan ADC values. Array adc[] holds the values
		  //from the 6 ADC inputs. sensor1=adc[0] sensor2=adc[1] etc.
	  	  }
	tNum++;
 80011e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e4:	3301      	adds	r3, #1
 80011e6:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_Delay(3000);
 80011e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011ec:	f000 fef2 	bl	8001fd4 <HAL_Delay>
	  for(int measurement = 0; measurement <= 10; measurement++){
 80011f0:	e726      	b.n	8001040 <main+0x78>
 80011f2:	bf00      	nop
 80011f4:	20000320 	.word	0x20000320
 80011f8:	20000204 	.word	0x20000204
 80011fc:	48000800 	.word	0x48000800
 8001200:	20000268 	.word	0x20000268
 8001204:	08009e70 	.word	0x08009e70
 8001208:	20002320 	.word	0x20002320
 800120c:	08009e80 	.word	0x08009e80
 8001210:	08009e90 	.word	0x08009e90
 8001214:	08009ea0 	.word	0x08009ea0
 8001218:	08009eb0 	.word	0x08009eb0
 800121c:	08009ec0 	.word	0x08009ec0
 8001220:	08009ed0 	.word	0x08009ed0
 8001224:	08009ef0 	.word	0x08009ef0
 8001228:	200002bc 	.word	0x200002bc

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0b8      	sub	sp, #224	; 0xe0
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001236:	2244      	movs	r2, #68	; 0x44
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 f8ca 	bl	80063d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2288      	movs	r2, #136	; 0x88
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f005 f8bc 	bl	80063d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800125c:	2310      	movs	r3, #16
 800125e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001262:	2301      	movs	r3, #1
 8001264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800126e:	2360      	movs	r3, #96	; 0x60
 8001270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800127a:	2301      	movs	r3, #1
 800127c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001286:	2328      	movs	r3, #40	; 0x28
 8001288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800128c:	2307      	movs	r3, #7
 800128e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fd96 	bl	8003dd4 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80012ae:	f000 fc1b 	bl	8001ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012d4:	2104      	movs	r1, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 f962 	bl	80045a0 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80012e2:	f000 fc01 	bl	8001ae8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80012e6:	f244 0302 	movw	r3, #16386	; 0x4002
 80012ea:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80012f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80012f4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80012fe:	2310      	movs	r3, #16
 8001300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001302:	2307      	movs	r3, #7
 8001304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800130e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001312:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fb46 	bl	80049a8 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001322:	f000 fbe1 	bl	8001ae8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001326:	f44f 7000 	mov.w	r0, #512	; 0x200
 800132a:	f002 fcfd 	bl	8003d28 <HAL_PWREx_ControlVoltageScaling>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001334:	f000 fbd8 	bl	8001ae8 <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	37e0      	adds	r7, #224	; 0xe0
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001362:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <MX_ADC1_Init+0x164>)
 8001366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <MX_ADC1_Init+0x160>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001370:	2208      	movs	r2, #8
 8001372:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <MX_ADC1_Init+0x160>)
 800137c:	2201      	movs	r2, #1
 800137e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001382:	2208      	movs	r2, #8
 8001384:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001388:	2200      	movs	r2, #0
 800138a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <MX_ADC1_Init+0x160>)
 800138e:	2201      	movs	r2, #1
 8001390:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001394:	2206      	movs	r2, #6
 8001396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <MX_ADC1_Init+0x160>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013b4:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	4836      	ldr	r0, [pc, #216]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013c6:	f000 fffd 	bl	80023c4 <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013d0:	f000 fb8a 	bl	8001ae8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4830      	ldr	r0, [pc, #192]	; (80014a0 <MX_ADC1_Init+0x160>)
 80013e0:	f001 ff04 	bl	80031ec <HAL_ADCEx_MultiModeConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80013ea:	f000 fb7d 	bl	8001ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <MX_ADC1_Init+0x168>)
 80013f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f2:	2306      	movs	r3, #6
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013fa:	237f      	movs	r3, #127	; 0x7f
 80013fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013fe:	2304      	movs	r3, #4
 8001400:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4825      	ldr	r0, [pc, #148]	; (80014a0 <MX_ADC1_Init+0x160>)
 800140c:	f001 f9ec 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001416:	f000 fb67 	bl	8001ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800141a:	230c      	movs	r3, #12
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	481f      	ldr	r0, [pc, #124]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001424:	f001 f9e0 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800142e:	f000 fb5b 	bl	8001ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001432:	2312      	movs	r3, #18
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4819      	ldr	r0, [pc, #100]	; (80014a0 <MX_ADC1_Init+0x160>)
 800143c:	f001 f9d4 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8001446:	f000 fb4f 	bl	8001ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800144a:	2318      	movs	r3, #24
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001454:	f001 f9c8 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800145e:	f000 fb43 	bl	8001ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001466:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_ADC1_Init+0x160>)
 800146e:	f001 f9bb 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001478:	f000 fb36 	bl	8001ae8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800147c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_ADC1_Init+0x160>)
 8001488:	f001 f9ae 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001492:	f000 fb29 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000204 	.word	0x20000204
 80014a4:	50040000 	.word	0x50040000
 80014a8:	04300002 	.word	0x04300002

080014ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_SPI1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_SPI1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_SPI1_Init+0x74>)
 80014b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_SPI1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_SPI1_Init+0x74>)
 80014c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_SPI1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_SPI1_Init+0x74>)
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_SPI1_Init+0x74>)
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_SPI1_Init+0x74>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_SPI1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_SPI1_Init+0x74>)
 800150c:	f003 fefc 	bl	8005308 <HAL_SPI_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fae7 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002bc 	.word	0x200002bc
 8001524:	40013000 	.word	0x40013000

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800152e:	4a15      	ldr	r2, [pc, #84]	; (8001584 <MX_USART2_UART_Init+0x5c>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART2_UART_Init+0x58>)
 800156c:	f004 fa3a 	bl	80059e4 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001576:	f000 fab7 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20002320 	.word	0x20002320
 8001584:	40004400 	.word	0x40004400

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_DMA_Init+0x38>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <MX_DMA_Init+0x38>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6493      	str	r3, [r2, #72]	; 0x48
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_DMA_Init+0x38>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200b      	movs	r0, #11
 80015ac:	f001 ffa5 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015b0:	200b      	movs	r0, #11
 80015b2:	f001 ffbe 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <MX_GPIO_Init+0xd8>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a2f      	ldr	r2, [pc, #188]	; (800169c <MX_GPIO_Init+0xd8>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <MX_GPIO_Init+0xd8>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <MX_GPIO_Init+0xd8>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <MX_GPIO_Init+0xd8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <MX_GPIO_Init+0xd8>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <MX_GPIO_Init+0xd8>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a23      	ldr	r2, [pc, #140]	; (800169c <MX_GPIO_Init+0xd8>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <MX_GPIO_Init+0xd8>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001628:	481d      	ldr	r0, [pc, #116]	; (80016a0 <MX_GPIO_Init+0xdc>)
 800162a:	f002 fb3d 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <MX_GPIO_Init+0xe0>)
 8001636:	f002 fb37 	bl	8003ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_GPIO_Init+0xdc>)
 8001654:	f002 f980 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 8001658:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800165c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <MX_GPIO_Init+0xe0>)
 8001672:	f002 f971 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip5_Pin Dip4_Pin Dip3_Pin Dip2_Pin
                           Dip1_Pin */
  GPIO_InitStruct.Pin = Dip5_Pin|Dip4_Pin|Dip3_Pin|Dip2_Pin
 8001676:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800167a:	60fb      	str	r3, [r7, #12]
                          |Dip1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f002 f963 	bl	8003958 <HAL_GPIO_Init>

}
 8001692:	bf00      	nop
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800

080016a8 <displayResults>:

/* USER CODE BEGIN 4 */
void displayResults(int measurement, int i, int val){
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b095      	sub	sp, #84	; 0x54
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  char uart_buf[50] = {'\0'};	//buffer for output data
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	2232      	movs	r2, #50	; 0x32
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fe89 	bl	80063d4 <memset>
  int uart_buf_len = {'\0'};
 80016c2:	2300      	movs	r3, #0
 80016c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  float voltage = ((3.3/4096) * val);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7fe ff2c 	bl	8000524 <__aeabi_i2d>
 80016cc:	a340      	add	r3, pc, #256	; (adr r3, 80017d0 <displayResults+0x128>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ff91 	bl	80005f8 <__aeabi_dmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4618      	mov	r0, r3
 80016dc:	4621      	mov	r1, r4
 80016de:	f7ff fa83 	bl	8000be8 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
  float potValue = (10000/128) * i;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	224e      	movs	r2, #78	; 0x4e
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

  //sprintf(uart_buf, "Test # %d", measurement);	  			//load print buffer with message
  //HAL_UART_Transmit(&huart2, (uint8_t *)MSG, uart_buf_len, 100);		//print to terminal

  uart_buf_len =sprintf(uart_buf, "Testing #%d\n", measurement);	  	//load print buffer with message
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	492d      	ldr	r1, [pc, #180]	; (80017b8 <displayResults+0x110>)
 8001702:	4618      	mov	r0, r3
 8001704:	f005 fcb2 	bl	800706c <siprintf>
 8001708:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 800170a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800170c:	b29a      	uxth	r2, r3
 800170e:	f107 0110 	add.w	r1, r7, #16
 8001712:	2364      	movs	r3, #100	; 0x64
 8001714:	4829      	ldr	r0, [pc, #164]	; (80017bc <displayResults+0x114>)
 8001716:	f004 f9b3 	bl	8005a80 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tPotentiometer Bit Value: %d\n", i);	//load print buffer with message
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	4927      	ldr	r1, [pc, #156]	; (80017c0 <displayResults+0x118>)
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fca2 	bl	800706c <siprintf>
 8001728:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 800172a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172c:	b29a      	uxth	r2, r3
 800172e:	f107 0110 	add.w	r1, r7, #16
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	4821      	ldr	r0, [pc, #132]	; (80017bc <displayResults+0x114>)
 8001736:	f004 f9a3 	bl	8005a80 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tPotentiometer (Ohms): %f\n", potValue);	//load print buffer with message
 800173a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_f2d>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	f107 0010 	add.w	r0, r7, #16
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	491d      	ldr	r1, [pc, #116]	; (80017c4 <displayResults+0x11c>)
 800174e:	f005 fc8d 	bl	800706c <siprintf>
 8001752:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001756:	b29a      	uxth	r2, r3
 8001758:	f107 0110 	add.w	r1, r7, #16
 800175c:	2364      	movs	r3, #100	; 0x64
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <displayResults+0x114>)
 8001760:	f004 f98e 	bl	8005a80 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tOutput Bit Value: %d\n", val);	  		//load print buffer with message
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4917      	ldr	r1, [pc, #92]	; (80017c8 <displayResults+0x120>)
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fc7d 	bl	800706c <siprintf>
 8001772:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 0110 	add.w	r1, r7, #16
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	480f      	ldr	r0, [pc, #60]	; (80017bc <displayResults+0x114>)
 8001780:	f004 f97e 	bl	8005a80 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tVoltage: %fV\n\n\r", voltage);	  			//load print buffer with message
 8001784:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001786:	f7fe fedf 	bl	8000548 <__aeabi_f2d>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	f107 0010 	add.w	r0, r7, #16
 8001792:	461a      	mov	r2, r3
 8001794:	4623      	mov	r3, r4
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <displayResults+0x124>)
 8001798:	f005 fc68 	bl	800706c <siprintf>
 800179c:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 800179e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	f107 0110 	add.w	r1, r7, #16
 80017a6:	2364      	movs	r3, #100	; 0x64
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <displayResults+0x114>)
 80017aa:	f004 f969 	bl	8005a80 <HAL_UART_Transmit>

}
 80017ae:	bf00      	nop
 80017b0:	3754      	adds	r7, #84	; 0x54
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08009f0c 	.word	0x08009f0c
 80017bc:	20002320 	.word	0x20002320
 80017c0:	08009f1c 	.word	0x08009f1c
 80017c4:	08009f3c 	.word	0x08009f3c
 80017c8:	08009f58 	.word	0x08009f58
 80017cc:	08009f70 	.word	0x08009f70
 80017d0:	66666666 	.word	0x66666666
 80017d4:	3f4a6666 	.word	0x3f4a6666

080017d8 <targetCheck>:

int targetCheck(int val, int target, int i){
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	//uart_buf_len =sprintf(uart_buf, "\r\'Target\' inside function = %d\r\n", target);	  	//load print buffer with message
	//HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal

	//check for distance val is from the target
	//if the analog value is greater than 50% of the target value, decrease 'i' by 50
	if (val > 1.50 * target)
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7fe fe9d 	bl	8000524 <__aeabi_i2d>
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4bb3      	ldr	r3, [pc, #716]	; (8001ac8 <targetCheck+0x2f0>)
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7ff f987 	bl	8000b18 <__aeabi_dcmpgt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <targetCheck+0x40>
		i = i - 50;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b32      	subs	r3, #50	; 0x32
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	e12c      	b.n	8001a72 <targetCheck+0x29a>
	//if the analog value is greater than 40% of the target value, decrease 'i' by 40
	else if (val > 1.40 * target)
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7fe fe83 	bl	8000524 <__aeabi_i2d>
 800181e:	4604      	mov	r4, r0
 8001820:	460d      	mov	r5, r1
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f7fe fe7e 	bl	8000524 <__aeabi_i2d>
 8001828:	a395      	add	r3, pc, #596	; (adr r3, 8001a80 <targetCheck+0x2a8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fee3 	bl	80005f8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7ff f96d 	bl	8000b18 <__aeabi_dcmpgt>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <targetCheck+0x74>
		i = i - 40;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b28      	subs	r3, #40	; 0x28
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e112      	b.n	8001a72 <targetCheck+0x29a>
	//if the analog value is greater than 30% of the target value, decrease 'i' by 30
	else if (val > 1.30 * target)
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7fe fe69 	bl	8000524 <__aeabi_i2d>
 8001852:	4604      	mov	r4, r0
 8001854:	460d      	mov	r5, r1
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f7fe fe64 	bl	8000524 <__aeabi_i2d>
 800185c:	a38a      	add	r3, pc, #552	; (adr r3, 8001a88 <targetCheck+0x2b0>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7ff f953 	bl	8000b18 <__aeabi_dcmpgt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <targetCheck+0xa8>
		i = i - 30;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b1e      	subs	r3, #30
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	e0f8      	b.n	8001a72 <targetCheck+0x29a>
	//if the analog value is greater than 20% of the target value, decrease 'i' by 20
	else if (val > 1.20 * target)
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7fe fe4f 	bl	8000524 <__aeabi_i2d>
 8001886:	4604      	mov	r4, r0
 8001888:	460d      	mov	r5, r1
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f7fe fe4a 	bl	8000524 <__aeabi_i2d>
 8001890:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001894:	4b8d      	ldr	r3, [pc, #564]	; (8001acc <targetCheck+0x2f4>)
 8001896:	f7fe feaf 	bl	80005f8 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7ff f939 	bl	8000b18 <__aeabi_dcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <targetCheck+0xdc>
		i = i - 20;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b14      	subs	r3, #20
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	e0de      	b.n	8001a72 <targetCheck+0x29a>
	//if the analog value is greater than 10% of the target value, decrease 'i' by 10
	else if (val > 1.10 * target)
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7fe fe35 	bl	8000524 <__aeabi_i2d>
 80018ba:	4604      	mov	r4, r0
 80018bc:	460d      	mov	r5, r1
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f7fe fe30 	bl	8000524 <__aeabi_i2d>
 80018c4:	a372      	add	r3, pc, #456	; (adr r3, 8001a90 <targetCheck+0x2b8>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7ff f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <targetCheck+0x110>
		i = i - 10;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b0a      	subs	r3, #10
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	e0c4      	b.n	8001a72 <targetCheck+0x29a>
	//if the analog value is greater than 20% of the target value, decrease 'i' by 5
	else if (val > 1.04 * target)
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7fe fe1b 	bl	8000524 <__aeabi_i2d>
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
 80018f2:	68b8      	ldr	r0, [r7, #8]
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_i2d>
 80018f8:	a367      	add	r3, pc, #412	; (adr r3, 8001a98 <targetCheck+0x2c0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe7b 	bl	80005f8 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7ff f905 	bl	8000b18 <__aeabi_dcmpgt>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <targetCheck+0x144>
		i = i - 5;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b05      	subs	r3, #5
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	e0aa      	b.n	8001a72 <targetCheck+0x29a>
	//if the analog value is greater than 20% of the target value, decrease 'i' by 1
	else if (val > target)
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	dd03      	ble.n	800192c <targetCheck+0x154>
		i = i - 1;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e0a2      	b.n	8001a72 <targetCheck+0x29a>
	//--------------------------------------------------------------------------------------------------------------
	//if the analog value is greater than 20% of the target value, decrease 'i' by 50
	else if (val < (1- 0.50) * target){
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7fe fdf9 	bl	8000524 <__aeabi_i2d>
 8001932:	4604      	mov	r4, r0
 8001934:	460d      	mov	r5, r1
 8001936:	68b8      	ldr	r0, [r7, #8]
 8001938:	f7fe fdf4 	bl	8000524 <__aeabi_i2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <targetCheck+0x2f8>)
 8001942:	f7fe fe59 	bl	80005f8 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7ff f8c5 	bl	8000adc <__aeabi_dcmplt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <targetCheck+0x188>
		i = i + 50;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3332      	adds	r3, #50	; 0x32
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e088      	b.n	8001a72 <targetCheck+0x29a>
	}
	else if (val < (1- 0.04) * target){
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7fe fddf 	bl	8000524 <__aeabi_i2d>
 8001966:	4604      	mov	r4, r0
 8001968:	460d      	mov	r5, r1
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f7fe fdda 	bl	8000524 <__aeabi_i2d>
 8001970:	a34b      	add	r3, pc, #300	; (adr r3, 8001aa0 <targetCheck+0x2c8>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fe3f 	bl	80005f8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f7ff f8ab 	bl	8000adc <__aeabi_dcmplt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <targetCheck+0x1bc>
		i = i + 5;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3305      	adds	r3, #5
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	e06e      	b.n	8001a72 <targetCheck+0x29a>
	}
	//if the analog value is greater than 40% of the target value, decrease 'i' by 50
	else if (val < (1- 0.10) * target){
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7fe fdc5 	bl	8000524 <__aeabi_i2d>
 800199a:	4604      	mov	r4, r0
 800199c:	460d      	mov	r5, r1
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	f7fe fdc0 	bl	8000524 <__aeabi_i2d>
 80019a4:	a340      	add	r3, pc, #256	; (adr r3, 8001aa8 <targetCheck+0x2d0>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fe25 	bl	80005f8 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7ff f891 	bl	8000adc <__aeabi_dcmplt>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <targetCheck+0x1f0>
		i = i + 10;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	330a      	adds	r3, #10
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	e054      	b.n	8001a72 <targetCheck+0x29a>
	}
	//if the analog value is greater than 30% of the target value, decrease 'i' by 50
	else if (val < (1- 0.20) * target){
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7fe fdab 	bl	8000524 <__aeabi_i2d>
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f7fe fda6 	bl	8000524 <__aeabi_i2d>
 80019d8:	a335      	add	r3, pc, #212	; (adr r3, 8001ab0 <targetCheck+0x2d8>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7ff f877 	bl	8000adc <__aeabi_dcmplt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <targetCheck+0x224>
		i = i + 20;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3314      	adds	r3, #20
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	e03a      	b.n	8001a72 <targetCheck+0x29a>
	}
	//if the analog value is greater than 20% of the target value, decrease 'i' by 50
	else if (val < (1- 0.30) * target){
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7fe fd91 	bl	8000524 <__aeabi_i2d>
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	f7fe fd8c 	bl	8000524 <__aeabi_i2d>
 8001a0c:	a32a      	add	r3, pc, #168	; (adr r3, 8001ab8 <targetCheck+0x2e0>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fdf1 	bl	80005f8 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7ff f85d 	bl	8000adc <__aeabi_dcmplt>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <targetCheck+0x258>
		i = i + 30;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	331e      	adds	r3, #30
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e020      	b.n	8001a72 <targetCheck+0x29a>
	}
	//if the analog value is greater than 10% of the target value, decrease 'i' by 50
	else if (val < (1- 0.40) * target){
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7fe fd77 	bl	8000524 <__aeabi_i2d>
 8001a36:	4604      	mov	r4, r0
 8001a38:	460d      	mov	r5, r1
 8001a3a:	68b8      	ldr	r0, [r7, #8]
 8001a3c:	f7fe fd72 	bl	8000524 <__aeabi_i2d>
 8001a40:	a31f      	add	r3, pc, #124	; (adr r3, 8001ac0 <targetCheck+0x2e8>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fdd7 	bl	80005f8 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7ff f843 	bl	8000adc <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <targetCheck+0x28c>
		i = i + 40;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3328      	adds	r3, #40	; 0x28
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	e006      	b.n	8001a72 <targetCheck+0x29a>
	}
	else if (val < target){
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	da02      	bge.n	8001a72 <targetCheck+0x29a>
		i = i + 1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	607b      	str	r3, [r7, #4]
	}
	return i;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	f3af 8000 	nop.w
 8001a80:	66666666 	.word	0x66666666
 8001a84:	3ff66666 	.word	0x3ff66666
 8001a88:	cccccccd 	.word	0xcccccccd
 8001a8c:	3ff4cccc 	.word	0x3ff4cccc
 8001a90:	9999999a 	.word	0x9999999a
 8001a94:	3ff19999 	.word	0x3ff19999
 8001a98:	0a3d70a4 	.word	0x0a3d70a4
 8001a9c:	3ff0a3d7 	.word	0x3ff0a3d7
 8001aa0:	eb851eb8 	.word	0xeb851eb8
 8001aa4:	3feeb851 	.word	0x3feeb851
 8001aa8:	cccccccd 	.word	0xcccccccd
 8001aac:	3feccccc 	.word	0x3feccccc
 8001ab0:	9999999a 	.word	0x9999999a
 8001ab4:	3fe99999 	.word	0x3fe99999
 8001ab8:	66666666 	.word	0x66666666
 8001abc:	3fe66666 	.word	0x3fe66666
 8001ac0:	33333333 	.word	0x33333333
 8001ac4:	3fe33333 	.word	0x3fe33333
 8001ac8:	3ff80000 	.word	0x3ff80000
 8001acc:	3ff33333 	.word	0x3ff33333
 8001ad0:	3fe00000 	.word	0x3fe00000

08001ad4 <HAL_ADC_ConvHalfCpltCallback>:
	//HAL_Delay(100);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
	//HAL_Delay(100);
	}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	/*char uart_buf[50] = {'\0'};	//buffer for output data
	int uart_buf_len = {'\0'};
	uart_buf_len =sprintf(uart_buf, "\rFirt ADC Handle\r\n\n");	  	//load print buffer with message
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);*/
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1){
 8001aee:	e7fe      	b.n	8001aee <Error_Handler+0x6>

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_MspInit+0x44>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_MspInit+0x44>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6613      	str	r3, [r2, #96]	; 0x60
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x44>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x44>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a37      	ldr	r2, [pc, #220]	; (8001c34 <HAL_ADC_MspInit+0xfc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d167      	bne.n	8001c2a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a2a      	ldr	r2, [pc, #168]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <HAL_ADC_MspInit+0x100>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Sensor_1_Pin|Sensor_2_Pin|Sensor_3_Pin|Pot_IN_1_Pin;
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ba6:	230b      	movs	r3, #11
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4821      	ldr	r0, [pc, #132]	; (8001c3c <HAL_ADC_MspInit+0x104>)
 8001bb6:	f001 fecf 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot_IN_2_Pin|Pot_IN_3_Pin;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bbe:	230b      	movs	r3, #11
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd0:	f001 fec2 	bl	8003958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_ADC_MspInit+0x10c>)
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001c04:	2220      	movs	r2, #32
 8001c06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c0e:	480c      	ldr	r0, [pc, #48]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001c10:	f001 fcaa 	bl	8003568 <HAL_DMA_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001c1a:	f7ff ff65 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001c22:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_ADC_MspInit+0x108>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	50040000 	.word	0x50040000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	20000274 	.word	0x20000274
 8001c44:	40020008 	.word	0x40020008

08001c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_SPI_MspInit+0x7c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d128      	bne.n	8001cbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c74:	6613      	str	r3, [r2, #96]	; 0x60
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c9a:	23a0      	movs	r3, #160	; 0xa0
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f001 fe4e 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_UART_MspInit+0x7c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d128      	bne.n	8001d40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_UART_MspInit+0x80>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_UART_MspInit+0x80>)
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_UART_MspInit+0x80>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_UART_MspInit+0x80>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_UART_MspInit+0x80>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_UART_MspInit+0x80>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin|GPIO_PIN_3;
 8001d1e:	230c      	movs	r3, #12
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2e:	2307      	movs	r3, #7
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f001 fe0c 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	40021000 	.word	0x40021000

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 f8f6 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA1_Channel1_IRQHandler+0x10>)
 8001db2:	f001 fcf1 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000274 	.word	0x20000274

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d207      	bcs.n	8001e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df0:	f004 fac6 	bl	8006380 <__errno>
 8001df4:	4602      	mov	r2, r0
 8001df6:	230c      	movs	r3, #12
 8001df8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	e009      	b.n	8001e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <_sbrk+0x64>)
 8001e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20018000 	.word	0x20018000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	200001f8 	.word	0x200001f8
 8001e28:	200023a8 	.word	0x200023a8

08001e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <SystemInit+0x64>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <SystemInit+0x64>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <SystemInit+0x68>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <SystemInit+0x68>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <SystemInit+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <SystemInit+0x68>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <SystemInit+0x68>)
 8001e58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <SystemInit+0x68>)
 8001e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <SystemInit+0x68>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <SystemInit+0x68>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <SystemInit+0x68>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SystemInit+0x64>)
 8001e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e82:	609a      	str	r2, [r3, #8]
#endif
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	40021000 	.word	0x40021000

08001e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e9c:	f7ff ffc6 	bl	8001e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ea0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ea2:	e003      	b.n	8001eac <LoopCopyDataInit>

08001ea4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ea6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ea8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eaa:	3104      	adds	r1, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001eb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001eb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001eb4:	d3f6      	bcc.n	8001ea4 <CopyDataInit>
	ldr	r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001eb8:	e002      	b.n	8001ec0 <LoopFillZerobss>

08001eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001eba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ebc:	f842 3b04 	str.w	r3, [r2], #4

08001ec0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <LoopForever+0x16>)
	cmp	r2, r3
 8001ec2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ec4:	d3f9      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f004 fa61 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eca:	f7ff f87d 	bl	8000fc8 <main>

08001ece <LoopForever>:

LoopForever:
    b LoopForever
 8001ece:	e7fe      	b.n	8001ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ed4:	0800a290 	.word	0x0800a290
	ldr	r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001edc:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001ee0:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001ee4:	200023a8 	.word	0x200023a8

08001ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC1_2_IRQHandler>

08001eea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f001 faf5 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f80e 	bl	8001f1c <HAL_InitTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	71fb      	strb	r3, [r7, #7]
 8001f0a:	e001      	b.n	8001f10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f0c:	f7ff fdf0 	bl	8001af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f10:	79fb      	ldrb	r3, [r7, #7]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_InitTick+0x6c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_InitTick+0x70>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_InitTick+0x6c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fb01 	bl	800354e <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d809      	bhi.n	8001f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f001 facb 	bl	80034fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_InitTick+0x74>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e007      	b.n	8001f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e004      	b.n	8001f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e001      	b.n	8001f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	200023a0 	.word	0x200023a0

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200023a0 	.word	0x200023a0

08001fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff ffee 	bl	8001fbc <HAL_GetTick>
 8001fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d005      	beq.n	8001ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_Delay+0x40>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffa:	bf00      	nop
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	d8f7      	bhi.n	8001ffc <HAL_Delay+0x28>
  {
  }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000008 	.word	0x20000008

08002018 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3360      	adds	r3, #96	; 0x60
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <LL_ADC_SetOffset+0x44>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	03fff000 	.word	0x03fff000

080020c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3360      	adds	r3, #96	; 0x60
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3360      	adds	r3, #96	; 0x60
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3330      	adds	r3, #48	; 0x30
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	4413      	add	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	211f      	movs	r1, #31
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	f003 011f 	and.w	r1, r3, #31
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	431a      	orrs	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3314      	adds	r3, #20
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	0e5b      	lsrs	r3, r3, #25
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	0d1b      	lsrs	r3, r3, #20
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2107      	movs	r1, #7
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	401a      	ands	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0d1b      	lsrs	r3, r3, #20
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0318 	and.w	r3, r3, #24
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002224:	40d9      	lsrs	r1, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	400b      	ands	r3, r1
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	0007ffff 	.word	0x0007ffff

08002248 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 031f 	and.w	r3, r3, #31
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6093      	str	r3, [r2, #8]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229c:	d101      	bne.n	80022a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <LL_ADC_IsEnabled+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_ADC_IsEnabled+0x1a>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800235e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d101      	bne.n	800238e <LL_ADC_REG_IsConversionOngoing+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d101      	bne.n	80023b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e134      	b.n	8002648 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fba3 	bl	8001b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff3f 	bl	8002288 <LL_ADC_IsDeepPowerDownEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff25 	bl	8002264 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff5a 	bl	80022d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff3e 	bl	80022b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002434:	4b86      	ldr	r3, [pc, #536]	; (8002650 <HAL_ADC_Init+0x28c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	4a86      	ldr	r2, [pc, #536]	; (8002654 <HAL_ADC_Init+0x290>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002444:	e002      	b.n	800244c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff3e 	bl	80022d8 <LL_ADC_IsInternalRegulatorEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff77 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 8002488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 80cf 	bne.w	8002636 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 80cb 	bne.w	8002636 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024a8:	f043 0202 	orr.w	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff37 	bl	8002328 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d115      	bne.n	80024ec <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c0:	4865      	ldr	r0, [pc, #404]	; (8002658 <HAL_ADC_Init+0x294>)
 80024c2:	f7ff ff31 	bl	8002328 <LL_ADC_IsEnabled>
 80024c6:	4604      	mov	r4, r0
 80024c8:	4864      	ldr	r0, [pc, #400]	; (800265c <HAL_ADC_Init+0x298>)
 80024ca:	f7ff ff2d 	bl	8002328 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	431c      	orrs	r4, r3
 80024d2:	4863      	ldr	r0, [pc, #396]	; (8002660 <HAL_ADC_Init+0x29c>)
 80024d4:	f7ff ff28 	bl	8002328 <LL_ADC_IsEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	4323      	orrs	r3, r4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4619      	mov	r1, r3
 80024e6:	485f      	ldr	r0, [pc, #380]	; (8002664 <HAL_ADC_Init+0x2a0>)
 80024e8:	f7ff fd96 	bl	8002018 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e5b      	ldrb	r3, [r3, #25]
 80024f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002502:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d106      	bne.n	8002528 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	3b01      	subs	r3, #1
 8002520:	045b      	lsls	r3, r3, #17
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_ADC_Init+0x2a4>)
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	430b      	orrs	r3, r1
 8002556:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff0a 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 8002562:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff17 	bl	800239c <LL_ADC_INJ_IsConversionOngoing>
 800256e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13d      	bne.n	80025f2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d13a      	bne.n	80025f2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002580:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002588:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d118      	bne.n	80025e2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025d2:	430a      	orrs	r2, r1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	e007      	b.n	80025f2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10c      	bne.n	8002614 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f023 010f 	bic.w	r1, r3, #15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
 8002612:	e007      	b.n	8002624 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020f 	bic.w	r2, r2, #15
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f023 0303 	bic.w	r3, r3, #3
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
 8002634:	e007      	b.n	8002646 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002646:	7ffb      	ldrb	r3, [r7, #31]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3724      	adds	r7, #36	; 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50040000 	.word	0x50040000
 800265c:	50040100 	.word	0x50040100
 8002660:	50040200 	.word	0x50040200
 8002664:	50040300 	.word	0x50040300
 8002668:	fff0c007 	.word	0xfff0c007

0800266c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002678:	4850      	ldr	r0, [pc, #320]	; (80027bc <HAL_ADC_Start_DMA+0x150>)
 800267a:	f7ff fde5 	bl	8002248 <LL_ADC_GetMultimode>
 800267e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fe76 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 808e 	bne.w	80027ae <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_Start_DMA+0x34>
 800269c:	2302      	movs	r3, #2
 800269e:	e089      	b.n	80027b4 <HAL_ADC_Start_DMA+0x148>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d002      	beq.n	80026ba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	d172      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fc82 	bl	8002fc4 <ADC_Enable>
 80026c0:	4603      	mov	r3, r0
 80026c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d165      	bne.n	8002796 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a37      	ldr	r2, [pc, #220]	; (80027c0 <HAL_ADC_Start_DMA+0x154>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d002      	beq.n	80026ee <HAL_ADC_Start_DMA+0x82>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_Start_DMA+0x84>
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_ADC_Start_DMA+0x158>)
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d002      	beq.n	80026fe <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f023 0206 	bic.w	r2, r3, #6
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58
 8002722:	e002      	b.n	800272a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_ADC_Start_DMA+0x15c>)
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_ADC_Start_DMA+0x160>)
 8002738:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <HAL_ADC_Start_DMA+0x164>)
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	221c      	movs	r2, #28
 8002748:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0210 	orr.w	r2, r2, #16
 8002760:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3340      	adds	r3, #64	; 0x40
 800277c:	4619      	mov	r1, r3
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f000 ffa9 	bl	80036d8 <HAL_DMA_Start_IT>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fddd 	bl	800234e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002794:	e00d      	b.n	80027b2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800279e:	e008      	b.n	80027b2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027ac:	e001      	b.n	80027b2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	50040300 	.word	0x50040300
 80027c0:	50040100 	.word	0x50040100
 80027c4:	50040000 	.word	0x50040000
 80027c8:	08003079 	.word	0x08003079
 80027cc:	08003151 	.word	0x08003151
 80027d0:	0800316d 	.word	0x0800316d

080027d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0b6      	sub	sp, #216	; 0xd8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22>
 8002806:	2302      	movs	r3, #2
 8002808:	e3c6      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x7b0>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fdad 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 83a7 	bne.w	8002f72 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	3b02      	subs	r3, #2
 8002832:	2b03      	cmp	r3, #3
 8002834:	d81b      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x86>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_ADC_ConfigChannel+0x54>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	220c      	movs	r2, #12
 8002850:	605a      	str	r2, [r3, #4]
          break;
 8002852:	e011      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2212      	movs	r2, #18
 8002858:	605a      	str	r2, [r3, #4]
          break;
 800285a:	e00d      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2218      	movs	r2, #24
 8002860:	605a      	str	r2, [r3, #4]
          break;
 8002862:	e009      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286a:	605a      	str	r2, [r3, #4]
          break;
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2206      	movs	r2, #6
 8002872:	605a      	str	r2, [r3, #4]
          break;
 8002874:	e000      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002876:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff fc63 	bl	8002150 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fd71 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 8002894:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fd7d 	bl	800239c <LL_ADC_INJ_IsConversionOngoing>
 80028a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 81a6 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 81a1 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff fc6e 	bl	80021a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d00a      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028fe:	f7ff fbbf 	bl	8002080 <LL_ADC_SetOffset>
 8002902:	e17b      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fbdc 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x148>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fbd1 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	e01e      	b.n	800296e <HAL_ADC_ConfigChannel+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fbc6 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e004      	b.n	800296c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	e018      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800299a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fb95 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fb79 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x20e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fb6e 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	e01e      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x24c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fb63 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e004      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x264>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	e018      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x296>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fb32 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fb16 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x2d4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fb0b 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e01e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x312>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fb00 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e004      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x32a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	e016      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e004      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fad1 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2103      	movs	r1, #3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fab5 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x396>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff faaa 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	e017      	b.n	8002bae <HAL_ADC_ConfigChannel+0x3c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2103      	movs	r1, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fa9f 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b98:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x3de>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	e011      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e003      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fa7c 	bl	80020f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fb91 	bl	8002328 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f040 813f 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff faf0 	bl	8002200 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a8e      	ldr	r2, [pc, #568]	; (8002e60 <HAL_ADC_ConfigChannel+0x678>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f040 8130 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x46c>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e019      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x4a0>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e003      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	bf94      	ite	ls
 8002c82:	2301      	movls	r3, #1
 8002c84:	2300      	movhi	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d079      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x4c0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	069b      	lsls	r3, r3, #26
 8002ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca6:	e015      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4ec>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x50c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	e017      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x53c>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x562>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	051b      	lsls	r3, r3, #20
 8002d48:	e018      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x594>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	e080      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x5b4>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	069b      	lsls	r3, r3, #26
 8002d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9a:	e015      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5e0>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x600>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	e017      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x630>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	61fb      	str	r3, [r7, #28]
  return result;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10d      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x65c>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	051b      	lsls	r3, r3, #20
 8002e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e42:	e01d      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x698>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
  return result;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e005      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x684>
 8002e60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	051b      	lsls	r3, r3, #20
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff f98e 	bl	80021a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d079      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	4842      	ldr	r0, [pc, #264]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e9a:	f7ff f8e3 	bl	8002064 <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a40      	ldr	r2, [pc, #256]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12b      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d125      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <HAL_ADC_ConfigChannel+0x7c4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x6e4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3a      	ldr	r2, [pc, #232]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d15c      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4833      	ldr	r0, [pc, #204]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ed8:	f7ff f8b1 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099a      	lsrs	r2, r3, #6
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f02:	e040      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <HAL_ADC_ConfigChannel+0x7d4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d118      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x758>
 8002f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d112      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a23      	ldr	r2, [pc, #140]	; (8002fac <HAL_ADC_ConfigChannel+0x7c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x746>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12d      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f36:	4619      	mov	r1, r3
 8002f38:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f3a:	f7ff f880 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f3e:	e024      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d120      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11a      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_ADC_ConfigChannel+0x7c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d115      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f68:	4619      	mov	r1, r3
 8002f6a:	480e      	ldr	r0, [pc, #56]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f6c:	f7ff f867 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
 8002f70:	e00c      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f94:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	37d8      	adds	r7, #216	; 0xd8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	80080000 	.word	0x80080000
 8002fa4:	50040300 	.word	0x50040300
 8002fa8:	c7520000 	.word	0xc7520000
 8002fac:	50040000 	.word	0x50040000
 8002fb0:	50040200 	.word	0x50040200
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	053e2d63 	.word	0x053e2d63
 8002fbc:	cb840000 	.word	0xcb840000
 8002fc0:	80000001 	.word	0x80000001

08002fc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f9a9 	bl	8002328 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d146      	bne.n	800306a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <ADC_Enable+0xb0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f043 0210 	orr.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e032      	b.n	800306c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f978 	bl	8002300 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003010:	f7fe ffd4 	bl	8001fbc <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003016:	e021      	b.n	800305c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f983 	bl	8002328 <LL_ADC_IsEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f967 	bl	8002300 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003032:	f7fe ffc3 	bl	8001fbc <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d90d      	bls.n	800305c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0210 	orr.w	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e007      	b.n	800306c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d1d6      	bne.n	8003018 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	8000003f 	.word	0x8000003f

08003078 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800308e:	2b00      	cmp	r3, #0
 8003090:	d14b      	bne.n	800312a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d021      	beq.n	80030f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f83a 	bl	800212a <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d032      	beq.n	8003122 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d12b      	bne.n	8003122 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11f      	bne.n	8003122 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
 80030ee:	e018      	b.n	8003122 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d111      	bne.n	8003122 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7fd ff30 	bl	8000f88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003128:	e00e      	b.n	8003148 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7ff fb4c 	bl	80027d4 <HAL_ADC_ErrorCallback>
}
 800313c:	e004      	b.n	8003148 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7fe fcb8 	bl	8001ad4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff fb1e 	bl	80027d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <LL_ADC_IsEnabled>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <LL_ADC_IsEnabled+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_ADC_IsEnabled+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d101      	bne.n	80031de <LL_ADC_REG_IsConversionOngoing+0x18>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b09f      	sub	sp, #124	; 0x7c
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003206:	2302      	movs	r3, #2
 8003208:	e08f      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a47      	ldr	r2, [pc, #284]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d102      	bne.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800321c:	4b46      	ldr	r3, [pc, #280]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	e001      	b.n	8003226 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e072      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ffbd 	bl	80031c6 <LL_ADC_REG_IsConversionOngoing>
 800324c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ffb7 	bl	80031c6 <LL_ADC_REG_IsConversionOngoing>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d154      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800325e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003260:	2b00      	cmp	r3, #0
 8003262:	d151      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003264:	4b35      	ldr	r3, [pc, #212]	; (800333c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003266:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02c      	beq.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003282:	035b      	lsls	r3, r3, #13
 8003284:	430b      	orrs	r3, r1
 8003286:	431a      	orrs	r2, r3
 8003288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800328c:	4829      	ldr	r0, [pc, #164]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800328e:	f7ff ff87 	bl	80031a0 <LL_ADC_IsEnabled>
 8003292:	4604      	mov	r4, r0
 8003294:	4828      	ldr	r0, [pc, #160]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003296:	f7ff ff83 	bl	80031a0 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	431c      	orrs	r4, r3
 800329e:	4828      	ldr	r0, [pc, #160]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032a0:	f7ff ff7e 	bl	80031a0 <LL_ADC_IsEnabled>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4323      	orrs	r3, r4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d137      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032b4:	f023 030f 	bic.w	r3, r3, #15
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	6811      	ldr	r1, [r2, #0]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	6892      	ldr	r2, [r2, #8]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	431a      	orrs	r2, r3
 80032c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c8:	e028      	b.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d6:	4817      	ldr	r0, [pc, #92]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80032d8:	f7ff ff62 	bl	80031a0 <LL_ADC_IsEnabled>
 80032dc:	4604      	mov	r4, r0
 80032de:	4816      	ldr	r0, [pc, #88]	; (8003338 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80032e0:	f7ff ff5e 	bl	80031a0 <LL_ADC_IsEnabled>
 80032e4:	4603      	mov	r3, r0
 80032e6:	431c      	orrs	r4, r3
 80032e8:	4815      	ldr	r0, [pc, #84]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032ea:	f7ff ff59 	bl	80031a0 <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4323      	orrs	r3, r4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d112      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032fe:	f023 030f 	bic.w	r3, r3, #15
 8003302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003304:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003306:	e009      	b.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800331a:	e000      	b.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800331c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003326:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800332a:	4618      	mov	r0, r3
 800332c:	377c      	adds	r7, #124	; 0x7c
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	bf00      	nop
 8003334:	50040000 	.word	0x50040000
 8003338:	50040100 	.word	0x50040100
 800333c:	50040300 	.word	0x50040300
 8003340:	50040200 	.word	0x50040200

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800336c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff8e 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff29 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff ff3e 	bl	800338c <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff8e 	bl	8003438 <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5d 	bl	80033e4 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff31 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffa2 	bl	80034a0 <SysTick_Config>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e098      	b.n	80036ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_DMA_Init+0x150>)
 8003582:	429a      	cmp	r2, r3
 8003584:	d80f      	bhi.n	80035a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <HAL_DMA_Init+0x154>)
 800358e:	4413      	add	r3, r2
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_DMA_Init+0x158>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	009a      	lsls	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a48      	ldr	r2, [pc, #288]	; (80036c4 <HAL_DMA_Init+0x15c>)
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
 80035a4:	e00e      	b.n	80035c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b46      	ldr	r3, [pc, #280]	; (80036c8 <HAL_DMA_Init+0x160>)
 80035ae:	4413      	add	r3, r2
 80035b0:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <HAL_DMA_Init+0x158>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a42      	ldr	r2, [pc, #264]	; (80036cc <HAL_DMA_Init+0x164>)
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361e:	d039      	beq.n	8003694 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <HAL_DMA_Init+0x15c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d11a      	bne.n	8003660 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_DMA_Init+0x168>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f003 031c 	and.w	r3, r3, #28
 8003636:	210f      	movs	r1, #15
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	4924      	ldr	r1, [pc, #144]	; (80036d0 <HAL_DMA_Init+0x168>)
 8003640:	4013      	ands	r3, r2
 8003642:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_DMA_Init+0x168>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f003 031c 	and.w	r3, r3, #28
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	491d      	ldr	r1, [pc, #116]	; (80036d0 <HAL_DMA_Init+0x168>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
 800365e:	e019      	b.n	8003694 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <HAL_DMA_Init+0x16c>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f003 031c 	and.w	r3, r3, #28
 800366c:	210f      	movs	r1, #15
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	4917      	ldr	r1, [pc, #92]	; (80036d4 <HAL_DMA_Init+0x16c>)
 8003676:	4013      	ands	r3, r2
 8003678:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_DMA_Init+0x16c>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f003 031c 	and.w	r3, r3, #28
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	4911      	ldr	r1, [pc, #68]	; (80036d4 <HAL_DMA_Init+0x16c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40020407 	.word	0x40020407
 80036bc:	bffdfff8 	.word	0xbffdfff8
 80036c0:	cccccccd 	.word	0xcccccccd
 80036c4:	40020000 	.word	0x40020000
 80036c8:	bffdfbf8 	.word	0xbffdfbf8
 80036cc:	40020400 	.word	0x40020400
 80036d0:	400200a8 	.word	0x400200a8
 80036d4:	400204a8 	.word	0x400204a8

080036d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_DMA_Start_IT+0x20>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e04b      	b.n	8003790 <HAL_DMA_Start_IT+0xb8>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d13a      	bne.n	8003782 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f8e0 	bl	80038f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 020e 	orr.w	r2, r2, #14
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e00f      	b.n	8003770 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0204 	bic.w	r2, r2, #4
 800375e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 020a 	orr.w	r2, r2, #10
 800376e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e005      	b.n	800378e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800378a:	2302      	movs	r3, #2
 800378c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800378e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f003 031c 	and.w	r3, r3, #28
 80037b8:	2204      	movs	r2, #4
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d026      	beq.n	8003812 <HAL_DMA_IRQHandler+0x7a>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d021      	beq.n	8003812 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	f003 021c 	and.w	r2, r3, #28
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2104      	movs	r1, #4
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	2b00      	cmp	r3, #0
 8003806:	d071      	beq.n	80038ec <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003810:	e06c      	b.n	80038ec <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	f003 031c 	and.w	r3, r3, #28
 800381a:	2202      	movs	r2, #2
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_DMA_IRQHandler+0xec>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d029      	beq.n	8003884 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 020a 	bic.w	r2, r2, #10
 800384c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f003 021c 	and.w	r2, r3, #28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2102      	movs	r1, #2
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d038      	beq.n	80038ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003882:	e033      	b.n	80038ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f003 031c 	and.w	r3, r3, #28
 800388c:	2208      	movs	r2, #8
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02a      	beq.n	80038ee <HAL_DMA_IRQHandler+0x156>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d025      	beq.n	80038ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020e 	bic.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f003 021c 	and.w	r2, r3, #28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
}
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 021c 	and.w	r2, r3, #28
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b10      	cmp	r3, #16
 8003926:	d108      	bne.n	800393a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003938:	e007      	b.n	800394a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	60da      	str	r2, [r3, #12]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003966:	e17f      	b.n	8003c68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8171 	beq.w	8003c62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d00b      	beq.n	80039a0 <HAL_GPIO_Init+0x48>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d007      	beq.n	80039a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003994:	2b11      	cmp	r3, #17
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b12      	cmp	r3, #18
 800399e:	d130      	bne.n	8003a02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039d6:	2201      	movs	r2, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0201 	and.w	r2, r3, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d118      	bne.n	8003a40 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a14:	2201      	movs	r2, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f003 0201 	and.w	r2, r3, #1
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x128>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b12      	cmp	r3, #18
 8003a7e:	d123      	bne.n	8003ac8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3208      	adds	r2, #8
 8003a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	6939      	ldr	r1, [r7, #16]
 8003ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80ac 	beq.w	8003c62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0a:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <HAL_GPIO_Init+0x32c>)
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <HAL_GPIO_Init+0x32c>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6613      	str	r3, [r2, #96]	; 0x60
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <HAL_GPIO_Init+0x32c>)
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b22:	4a59      	ldr	r2, [pc, #356]	; (8003c88 <HAL_GPIO_Init+0x330>)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b4c:	d025      	beq.n	8003b9a <HAL_GPIO_Init+0x242>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_GPIO_Init+0x334>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01f      	beq.n	8003b96 <HAL_GPIO_Init+0x23e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_GPIO_Init+0x338>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d019      	beq.n	8003b92 <HAL_GPIO_Init+0x23a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <HAL_GPIO_Init+0x33c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_GPIO_Init+0x236>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <HAL_GPIO_Init+0x340>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00d      	beq.n	8003b8a <HAL_GPIO_Init+0x232>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4a      	ldr	r2, [pc, #296]	; (8003c9c <HAL_GPIO_Init+0x344>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <HAL_GPIO_Init+0x22e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a49      	ldr	r2, [pc, #292]	; (8003ca0 <HAL_GPIO_Init+0x348>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_GPIO_Init+0x22a>
 8003b7e:	2306      	movs	r3, #6
 8003b80:	e00c      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b82:	2307      	movs	r3, #7
 8003b84:	e00a      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b86:	2305      	movs	r3, #5
 8003b88:	e008      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x244>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	f002 0203 	and.w	r2, r2, #3
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bac:	4936      	ldr	r1, [pc, #216]	; (8003c88 <HAL_GPIO_Init+0x330>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bde:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003be4:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c08:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c5c:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	3301      	adds	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f47f ae78 	bne.w	8003968 <HAL_GPIO_Init+0x10>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	48000400 	.word	0x48000400
 8003c90:	48000800 	.word	0x48000800
 8003c94:	48000c00 	.word	0x48000c00
 8003c98:	48001000 	.word	0x48001000
 8003c9c:	48001400 	.word	0x48001400
 8003ca0:	48001800 	.word	0x48001800
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb8:	787b      	ldrb	r3, [r7, #1]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc4:	e002      	b.n	8003ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	43d9      	mvns	r1, r3
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	619a      	str	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40007000 	.word	0x40007000

08003d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d36:	d130      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d44:	d038      	beq.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2232      	movs	r2, #50	; 0x32
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6c:	e002      	b.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d74:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	d102      	bne.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f2      	bne.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d110      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d007      	beq.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db0:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	431bde83 	.word	0x431bde83

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e3d4      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de6:	4ba1      	ldr	r3, [pc, #644]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df0:	4b9e      	ldr	r3, [pc, #632]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80e4 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_RCC_OscConfig+0x4a>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	f040 808b 	bne.w	8003f2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 8087 	bne.w	8003f2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e1e:	4b93      	ldr	r3, [pc, #588]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e3ac      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	4b8c      	ldr	r3, [pc, #560]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_RCC_OscConfig+0x7c>
 8003e46:	4b89      	ldr	r3, [pc, #548]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e4e:	e005      	b.n	8003e5c <HAL_RCC_OscConfig+0x88>
 8003e50:	4b86      	ldr	r3, [pc, #536]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d223      	bcs.n	8003ea8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fd3f 	bl	80048e8 <RCC_SetFlashLatencyFromMSIRange>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e38d      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e74:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7c      	ldr	r2, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b7a      	ldr	r3, [pc, #488]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4977      	ldr	r1, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e92:	4b76      	ldr	r3, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	4972      	ldr	r1, [pc, #456]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
 8003ea6:	e025      	b.n	8003ef4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea8:	4b70      	ldr	r3, [pc, #448]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a6f      	ldr	r2, [pc, #444]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003eae:	f043 0308 	orr.w	r3, r3, #8
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	496a      	ldr	r1, [pc, #424]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec6:	4b69      	ldr	r3, [pc, #420]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4965      	ldr	r1, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fcff 	bl	80048e8 <RCC_SetFlashLatencyFromMSIRange>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e34d      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef4:	f000 fc36 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8003ef8:	4601      	mov	r1, r0
 8003efa:	4b5c      	ldr	r3, [pc, #368]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	4a5a      	ldr	r2, [pc, #360]	; (8004070 <HAL_RCC_OscConfig+0x29c>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8003f10:	4a58      	ldr	r2, [pc, #352]	; (8004074 <HAL_RCC_OscConfig+0x2a0>)
 8003f12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f14:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_RCC_OscConfig+0x2a4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd ffff 	bl	8001f1c <HAL_InitTick>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d052      	beq.n	8003fce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	e331      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d032      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f34:	4b4d      	ldr	r3, [pc, #308]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a4c      	ldr	r2, [pc, #304]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f40:	f7fe f83c 	bl	8001fbc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f48:	f7fe f838 	bl	8001fbc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e31a      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f5a:	4b44      	ldr	r3, [pc, #272]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a40      	ldr	r2, [pc, #256]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f6c:	f043 0308 	orr.w	r3, r3, #8
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b3e      	ldr	r3, [pc, #248]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	493b      	ldr	r1, [pc, #236]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f84:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	4936      	ldr	r1, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e01a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f9a:	4b34      	ldr	r3, [pc, #208]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe f809 	bl	8001fbc <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fae:	f7fe f805 	bl	8001fbc <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e2e7      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x1da>
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d074      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x21a>
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b0c      	cmp	r3, #12
 8003fe6:	d10e      	bne.n	8004006 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d10b      	bne.n	8004006 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fee:	4b1f      	ldr	r3, [pc, #124]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d064      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d160      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e2c4      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x24a>
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e01d      	b.n	800405a <HAL_RCC_OscConfig+0x286>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004026:	d10c      	bne.n	8004042 <HAL_RCC_OscConfig+0x26e>
 8004028:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x298>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0f      	ldr	r2, [pc, #60]	; (800406c <HAL_RCC_OscConfig+0x298>)
 800402e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0c      	ldr	r2, [pc, #48]	; (800406c <HAL_RCC_OscConfig+0x298>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e00b      	b.n	800405a <HAL_RCC_OscConfig+0x286>
 8004042:	4b0a      	ldr	r3, [pc, #40]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a06      	ldr	r2, [pc, #24]	; (800406c <HAL_RCC_OscConfig+0x298>)
 8004054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01c      	beq.n	800409c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd ffab 	bl	8001fbc <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004068:	e011      	b.n	800408e <HAL_RCC_OscConfig+0x2ba>
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	08009f84 	.word	0x08009f84
 8004074:	20000000 	.word	0x20000000
 8004078:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fd ff9e 	bl	8001fbc <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e280      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408e:	4baf      	ldr	r3, [pc, #700]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x2a8>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd ff8e 	bl	8001fbc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fd ff8a 	bl	8001fbc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e26c      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	4ba5      	ldr	r3, [pc, #660]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2d0>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d060      	beq.n	8004194 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x310>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d116      	bne.n	8004112 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	4b99      	ldr	r3, [pc, #612]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_OscConfig+0x328>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e249      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b93      	ldr	r3, [pc, #588]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	4990      	ldr	r1, [pc, #576]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	e040      	b.n	8004194 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d023      	beq.n	8004162 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411a:	4b8c      	ldr	r3, [pc, #560]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a8b      	ldr	r2, [pc, #556]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd ff49 	bl	8001fbc <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7fd ff45 	bl	8001fbc <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e227      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004140:	4b82      	ldr	r3, [pc, #520]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b7f      	ldr	r3, [pc, #508]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	497c      	ldr	r1, [pc, #496]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
 8004160:	e018      	b.n	8004194 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004162:	4b7a      	ldr	r3, [pc, #488]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a79      	ldr	r2, [pc, #484]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd ff25 	bl	8001fbc <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd ff21 	bl	8001fbc <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e203      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004188:	4b70      	ldr	r3, [pc, #448]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03c      	beq.n	800421a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	4a67      	ldr	r2, [pc, #412]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd ff00 	bl	8001fbc <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd fefc 	bl	8001fbc <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1de      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d2:	4b5e      	ldr	r3, [pc, #376]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3ec>
 80041e0:	e01b      	b.n	800421a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b5a      	ldr	r3, [pc, #360]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fd fee3 	bl	8001fbc <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fd fedf 	bl	8001fbc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1c1      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800420c:	4b4f      	ldr	r3, [pc, #316]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ef      	bne.n	80041fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80a6 	beq.w	8004374 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004228:	2300      	movs	r3, #0
 800422a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800422c:	4b47      	ldr	r3, [pc, #284]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004238:	4b44      	ldr	r3, [pc, #272]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a43      	ldr	r2, [pc, #268]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800423e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
 8004244:	4b41      	ldr	r3, [pc, #260]	; (800434c <HAL_RCC_OscConfig+0x578>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004254:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <HAL_RCC_OscConfig+0x57c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d118      	bne.n	8004292 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004260:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_OscConfig+0x57c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a3a      	ldr	r2, [pc, #232]	; (8004350 <HAL_RCC_OscConfig+0x57c>)
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426c:	f7fd fea6 	bl	8001fbc <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004274:	f7fd fea2 	bl	8001fbc <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e184      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004286:	4b32      	ldr	r3, [pc, #200]	; (8004350 <HAL_RCC_OscConfig+0x57c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <HAL_RCC_OscConfig+0x4d8>
 800429a:	4b2c      	ldr	r3, [pc, #176]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a2a      	ldr	r2, [pc, #168]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042aa:	e024      	b.n	80042f6 <HAL_RCC_OscConfig+0x522>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d110      	bne.n	80042d6 <HAL_RCC_OscConfig+0x502>
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a24      	ldr	r2, [pc, #144]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	4b21      	ldr	r3, [pc, #132]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a20      	ldr	r2, [pc, #128]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d4:	e00f      	b.n	80042f6 <HAL_RCC_OscConfig+0x522>
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e6:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	4a17      	ldr	r2, [pc, #92]	; (800434c <HAL_RCC_OscConfig+0x578>)
 80042ee:	f023 0304 	bic.w	r3, r3, #4
 80042f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd fe5d 	bl	8001fbc <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fd fe59 	bl	8001fbc <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e139      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_OscConfig+0x578>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ed      	beq.n	8004306 <HAL_RCC_OscConfig+0x532>
 800432a:	e01a      	b.n	8004362 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fd fe46 	bl	8001fbc <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004332:	e00f      	b.n	8004354 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fd fe42 	bl	8001fbc <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d906      	bls.n	8004354 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e122      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004354:	4b90      	ldr	r3, [pc, #576]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e8      	bne.n	8004334 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b8b      	ldr	r3, [pc, #556]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	4a8a      	ldr	r2, [pc, #552]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004372:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8108 	beq.w	800458e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	2b02      	cmp	r3, #2
 8004384:	f040 80d0 	bne.w	8004528 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004388:	4b83      	ldr	r3, [pc, #524]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	429a      	cmp	r2, r3
 800439a:	d130      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	3b01      	subs	r3, #1
 80043a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d127      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11f      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c8:	2a07      	cmp	r2, #7
 80043ca:	bf14      	ite	ne
 80043cc:	2201      	movne	r2, #1
 80043ce:	2200      	moveq	r2, #0
 80043d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d113      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d06e      	beq.n	80044dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b0c      	cmp	r3, #12
 8004402:	d069      	beq.n	80044d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004404:	4b64      	ldr	r3, [pc, #400]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004410:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b7      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5c      	ldr	r2, [pc, #368]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800442c:	f7fd fdc6 	bl	8001fbc <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fdc2 	bl	8001fbc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0a4      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004446:	4b54      	ldr	r3, [pc, #336]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	4b51      	ldr	r3, [pc, #324]	; (800459c <HAL_RCC_OscConfig+0x7c8>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004462:	3a01      	subs	r2, #1
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446c:	0212      	lsls	r2, r2, #8
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004474:	0852      	lsrs	r2, r2, #1
 8004476:	3a01      	subs	r2, #1
 8004478:	0552      	lsls	r2, r2, #21
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004480:	0852      	lsrs	r2, r2, #1
 8004482:	3a01      	subs	r2, #1
 8004484:	0652      	lsls	r2, r2, #25
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800448c:	0912      	lsrs	r2, r2, #4
 800448e:	0452      	lsls	r2, r2, #17
 8004490:	430a      	orrs	r2, r1
 8004492:	4941      	ldr	r1, [pc, #260]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004498:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a3e      	ldr	r2, [pc, #248]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800449e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a4:	4b3c      	ldr	r3, [pc, #240]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044b0:	f7fd fd84 	bl	8001fbc <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fd fd80 	bl	8001fbc <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e062      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d6:	e05a      	b.n	800458e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e059      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044dc:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d152      	bne.n	800458e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 80044fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004500:	f7fd fd5c 	bl	8001fbc <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7fd fd58 	bl	8001fbc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e03a      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451a:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x734>
 8004526:	e032      	b.n	800458e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d02d      	beq.n	800458a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a19      	ldr	r2, [pc, #100]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004538:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800453a:	4b17      	ldr	r3, [pc, #92]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800454c:	f023 0303 	bic.w	r3, r3, #3
 8004550:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 8004558:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800455c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004560:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fd fd2b 	bl	8001fbc <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456a:	f7fd fd27 	bl	8001fbc <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_OscConfig+0x7c4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x796>
 8004588:	e001      	b.n	800458e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	f99d808c 	.word	0xf99d808c

080045a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0c8      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b66      	ldr	r3, [pc, #408]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d910      	bls.n	80045e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b63      	ldr	r3, [pc, #396]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 0207 	bic.w	r2, r3, #7
 80045ca:	4961      	ldr	r1, [pc, #388]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b0      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04c      	beq.n	800468a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f8:	4b56      	ldr	r3, [pc, #344]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d121      	bne.n	8004648 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e09e      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d107      	bne.n	8004620 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004610:	4b50      	ldr	r3, [pc, #320]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d115      	bne.n	8004648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e092      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004628:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e086      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	4b46      	ldr	r3, [pc, #280]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e07e      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f023 0203 	bic.w	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	493f      	ldr	r1, [pc, #252]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465a:	f7fd fcaf 	bl	8001fbc <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004660:	e00a      	b.n	8004678 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004662:	f7fd fcab 	bl	8001fbc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e066      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 020c 	and.w	r2, r3, #12
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	429a      	cmp	r2, r3
 8004688:	d1eb      	bne.n	8004662 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	492c      	ldr	r1, [pc, #176]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d210      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b26      	ldr	r3, [pc, #152]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	4924      	ldr	r1, [pc, #144]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_RCC_ClockConfig+0x1b0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e036      	b.n	8004746 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4918      	ldr	r1, [pc, #96]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4910      	ldr	r1, [pc, #64]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004716:	f000 f825 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 800471a:	4601      	mov	r1, r0
 800471c:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCC_ClockConfig+0x1b4>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	5cd3      	ldrb	r3, [r2, r3]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	fa21 f303 	lsr.w	r3, r1, r3
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fbee 	bl	8001f1c <HAL_InitTick>
 8004740:	4603      	mov	r3, r0
 8004742:	72fb      	strb	r3, [r7, #11]

  return status;
 8004744:	7afb      	ldrb	r3, [r7, #11]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40022000 	.word	0x40022000
 8004754:	40021000 	.word	0x40021000
 8004758:	08009f84 	.word	0x08009f84
 800475c:	20000000 	.word	0x20000000
 8004760:	20000004 	.word	0x20000004

08004764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004772:	4b3d      	ldr	r3, [pc, #244]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800477c:	4b3a      	ldr	r3, [pc, #232]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x34>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d121      	bne.n	80047d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d11e      	bne.n	80047d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004798:	4b33      	ldr	r3, [pc, #204]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047a4:	4b30      	ldr	r3, [pc, #192]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e005      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047c0:	4a2a      	ldr	r2, [pc, #168]	; (800486c <HAL_RCC_GetSysClockFreq+0x108>)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10d      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047d4:	e00a      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d102      	bne.n	80047e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047dc:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e004      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d133      	bne.n	800485a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0xa4>
 8004802:	2b03      	cmp	r3, #3
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0xaa>
 8004806:	e005      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_RCC_GetSysClockFreq+0x10c>)
 800480a:	617b      	str	r3, [r7, #20]
      break;
 800480c:	e005      	b.n	800481a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_GetSysClockFreq+0x110>)
 8004810:	617b      	str	r3, [r7, #20]
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	617b      	str	r3, [r7, #20]
      break;
 8004818:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	3301      	adds	r3, #1
 8004826:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	fb02 f203 	mul.w	r2, r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HAL_RCC_GetSysClockFreq+0x104>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0e5b      	lsrs	r3, r3, #25
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	3301      	adds	r3, #1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800485a:	69bb      	ldr	r3, [r7, #24]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3724      	adds	r7, #36	; 0x24
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	40021000 	.word	0x40021000
 800486c:	08009f9c 	.word	0x08009f9c
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200

08004878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004894:	f7ff fff0 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004898:	4601      	mov	r1, r0
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a1b      	lsrs	r3, r3, #8
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048a6:	5cd3      	ldrb	r3, [r2, r3]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40021000 	.word	0x40021000
 80048b8:	08009f94 	.word	0x08009f94

080048bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048c0:	f7ff ffda 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048c4:	4601      	mov	r1, r0
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	0adb      	lsrs	r3, r3, #11
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	4a04      	ldr	r2, [pc, #16]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08009f94 	.word	0x08009f94

080048e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f4:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004900:	f7ff fa04 	bl	8003d0c <HAL_PWREx_GetVoltageRange>
 8004904:	6178      	str	r0, [r7, #20]
 8004906:	e014      	b.n	8004932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	4a24      	ldr	r2, [pc, #144]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	; 0x58
 8004914:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004920:	f7ff f9f4 	bl	8003d0c <HAL_PWREx_GetVoltageRange>
 8004924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d10b      	bne.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d919      	bls.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2ba0      	cmp	r3, #160	; 0xa0
 8004944:	d902      	bls.n	800494c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004946:	2302      	movs	r3, #2
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e013      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800494c:	2301      	movs	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e010      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d902      	bls.n	800495e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004958:	2303      	movs	r3, #3
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e00a      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d102      	bne.n	800496a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004964:	2302      	movs	r3, #2
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e004      	b.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d101      	bne.n	8004974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004970:	2301      	movs	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 0207 	bic.w	r2, r3, #7
 800497c:	4909      	ldr	r1, [pc, #36]	; (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40022000 	.word	0x40022000

080049a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b0:	2300      	movs	r3, #0
 80049b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b4:	2300      	movs	r3, #0
 80049b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03f      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049cc:	d01c      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d2:	d802      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80049d8:	e01f      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80049da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80049e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049e4:	d01c      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80049e6:	e018      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e8:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a84      	ldr	r2, [pc, #528]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f4:	e015      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fab9 	bl	8004f74 <RCCEx_PLLSAI1_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a06:	e00c      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3320      	adds	r3, #32
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fba0 	bl	8005154 <RCCEx_PLLSAI2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a28:	4b75      	ldr	r3, [pc, #468]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a36:	4972      	ldr	r1, [pc, #456]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a3e:	e001      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d03f      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a58:	d01c      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a5e:	d802      	bhi.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004a64:	e01f      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a6a:	d003      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a70:	d01c      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004a72:	e018      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a74:	4b62      	ldr	r3, [pc, #392]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a61      	ldr	r2, [pc, #388]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a80:	e015      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fa73 	bl	8004f74 <RCCEx_PLLSAI1_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a92:	e00c      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3320      	adds	r3, #32
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fb5a 	bl	8005154 <RCCEx_PLLSAI2_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa4:	e003      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab4:	4b52      	ldr	r3, [pc, #328]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac2:	494f      	ldr	r1, [pc, #316]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004aca:	e001      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a0 	beq.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ae2:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af8:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6593      	str	r3, [r2, #88]	; 0x58
 8004b04:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b10:	2301      	movs	r3, #1
 8004b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b14:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3a      	ldr	r2, [pc, #232]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b20:	f7fd fa4c 	bl	8001fbc <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b26:	e009      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b28:	f7fd fa48 	bl	8001fbc <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d902      	bls.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	74fb      	strb	r3, [r7, #19]
        break;
 8004b3a:	e005      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ef      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d15c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d019      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b6c:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d016      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fd fa07 	bl	8001fbc <HAL_GetTick>
 8004bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb0:	e00b      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd fa03 	bl	8001fbc <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d902      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc8:	e006      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ec      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bee:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bf6:	e009      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
 8004bfa:	74bb      	strb	r3, [r7, #18]
 8004bfc:	e006      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c0c:	7c7b      	ldrb	r3, [r7, #17]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d105      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c12:	4b9e      	ldr	r3, [pc, #632]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	4a9d      	ldr	r2, [pc, #628]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c2a:	4b98      	ldr	r3, [pc, #608]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f023 0203 	bic.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	4994      	ldr	r1, [pc, #592]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c4c:	4b8f      	ldr	r3, [pc, #572]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 020c 	bic.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	498c      	ldr	r1, [pc, #560]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c6e:	4b87      	ldr	r3, [pc, #540]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	4983      	ldr	r1, [pc, #524]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c90:	4b7e      	ldr	r3, [pc, #504]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	497b      	ldr	r1, [pc, #492]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cb2:	4b76      	ldr	r3, [pc, #472]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	4972      	ldr	r1, [pc, #456]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd4:	4b6d      	ldr	r3, [pc, #436]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	496a      	ldr	r1, [pc, #424]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	4961      	ldr	r1, [pc, #388]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d18:	4b5c      	ldr	r3, [pc, #368]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	4959      	ldr	r1, [pc, #356]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3a:	4b54      	ldr	r3, [pc, #336]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	4950      	ldr	r1, [pc, #320]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d5c:	4b4b      	ldr	r3, [pc, #300]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	4948      	ldr	r1, [pc, #288]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d7e:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	493f      	ldr	r1, [pc, #252]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d028      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da0:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dae:	4937      	ldr	r1, [pc, #220]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dbe:	d106      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc0:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	60d3      	str	r3, [r2, #12]
 8004dcc:	e011      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd6:	d10c      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f8c8 	bl	8004f74 <RCCEx_PLLSAI1_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfe:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	491f      	ldr	r1, [pc, #124]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1c:	d106      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e28:	60d3      	str	r3, [r2, #12]
 8004e2a:	e011      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f899 	bl	8004f74 <RCCEx_PLLSAI1_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02b      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	4908      	ldr	r1, [pc, #32]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a02      	ldr	r2, [pc, #8]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e86:	60d3      	str	r3, [r2, #12]
 8004e88:	e014      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f867 	bl	8004f74 <RCCEx_PLLSAI1_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02f      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ece:	4928      	ldr	r1, [pc, #160]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ede:	d10d      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f844 	bl	8004f74 <RCCEx_PLLSAI1_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d014      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	74bb      	strb	r3, [r7, #18]
 8004efa:	e011      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3320      	adds	r3, #32
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 f921 	bl	8005154 <RCCEx_PLLSAI2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004f1c:	7cfb      	ldrb	r3, [r7, #19]
 8004f1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3a:	490d      	ldr	r1, [pc, #52]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5e:	4904      	ldr	r1, [pc, #16]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f66:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000

08004f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f82:	4b73      	ldr	r3, [pc, #460]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f8e:	4b70      	ldr	r3, [pc, #448]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0203 	and.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d10d      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fa6:	4b6a      	ldr	r3, [pc, #424]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d044      	beq.n	8005044 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e041      	b.n	8005044 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d00c      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0x6e>
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d013      	beq.n	8004ff4 <RCCEx_PLLSAI1_Config+0x80>
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d120      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fd0:	4b5f      	ldr	r3, [pc, #380]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11d      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe0:	e01a      	b.n	8005018 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d116      	bne.n	800501c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff2:	e013      	b.n	800501c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ff4:	4b56      	ldr	r3, [pc, #344]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10f      	bne.n	8005020 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005000:	4b53      	ldr	r3, [pc, #332]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005010:	e006      	b.n	8005020 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      break;
 8005016:	e004      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005018:	bf00      	nop
 800501a:	e002      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005020:	bf00      	nop
    }

    if(status == HAL_OK)
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10d      	bne.n	8005044 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005028:	4b49      	ldr	r3, [pc, #292]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	3b01      	subs	r3, #1
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	430b      	orrs	r3, r1
 800503e:	4944      	ldr	r1, [pc, #272]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d17d      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a40      	ldr	r2, [pc, #256]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005050:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005056:	f7fc ffb1 	bl	8001fbc <HAL_GetTick>
 800505a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800505c:	e009      	b.n	8005072 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800505e:	f7fc ffad 	bl	8001fbc <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d902      	bls.n	8005072 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	73fb      	strb	r3, [r7, #15]
        break;
 8005070:	e005      	b.n	800507e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005072:	4b37      	ldr	r3, [pc, #220]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1ef      	bne.n	800505e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d160      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d111      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800508a:	4b31      	ldr	r3, [pc, #196]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6892      	ldr	r2, [r2, #8]
 800509a:	0211      	lsls	r1, r2, #8
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68d2      	ldr	r2, [r2, #12]
 80050a0:	0912      	lsrs	r2, r2, #4
 80050a2:	0452      	lsls	r2, r2, #17
 80050a4:	430a      	orrs	r2, r1
 80050a6:	492a      	ldr	r1, [pc, #168]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	610b      	str	r3, [r1, #16]
 80050ac:	e027      	b.n	80050fe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d112      	bne.n	80050da <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6892      	ldr	r2, [r2, #8]
 80050c4:	0211      	lsls	r1, r2, #8
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6912      	ldr	r2, [r2, #16]
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0552      	lsls	r2, r2, #21
 80050d0:	430a      	orrs	r2, r1
 80050d2:	491f      	ldr	r1, [pc, #124]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	610b      	str	r3, [r1, #16]
 80050d8:	e011      	b.n	80050fe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6892      	ldr	r2, [r2, #8]
 80050ea:	0211      	lsls	r1, r2, #8
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6952      	ldr	r2, [r2, #20]
 80050f0:	0852      	lsrs	r2, r2, #1
 80050f2:	3a01      	subs	r2, #1
 80050f4:	0652      	lsls	r2, r2, #25
 80050f6:	430a      	orrs	r2, r1
 80050f8:	4915      	ldr	r1, [pc, #84]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a13      	ldr	r2, [pc, #76]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005108:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510a:	f7fc ff57 	bl	8001fbc <HAL_GetTick>
 800510e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005110:	e009      	b.n	8005126 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005112:	f7fc ff53 	bl	8001fbc <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d902      	bls.n	8005126 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	73fb      	strb	r3, [r7, #15]
          break;
 8005124:	e005      	b.n	8005132 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0ef      	beq.n	8005112 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005138:	4b05      	ldr	r3, [pc, #20]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	4903      	ldr	r1, [pc, #12]	; (8005150 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000

08005154 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005162:	4b68      	ldr	r3, [pc, #416]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0203 	and.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d10d      	bne.n	800519a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
       ||
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005186:	4b5f      	ldr	r3, [pc, #380]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
       ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d044      	beq.n	8005224 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e041      	b.n	8005224 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d00c      	beq.n	80051c2 <RCCEx_PLLSAI2_Config+0x6e>
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d013      	beq.n	80051d4 <RCCEx_PLLSAI2_Config+0x80>
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d120      	bne.n	80051f2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051b0:	4b54      	ldr	r3, [pc, #336]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11d      	bne.n	80051f8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c0:	e01a      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051c2:	4b50      	ldr	r3, [pc, #320]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d2:	e013      	b.n	80051fc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10f      	bne.n	8005200 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051e0:	4b48      	ldr	r3, [pc, #288]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051f0:	e006      	b.n	8005200 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
      break;
 80051f6:	e004      	b.n	8005202 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051f8:	bf00      	nop
 80051fa:	e002      	b.n	8005202 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051fc:	bf00      	nop
 80051fe:	e000      	b.n	8005202 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005200:	bf00      	nop
    }

    if(status == HAL_OK)
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10d      	bne.n	8005224 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005208:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	430b      	orrs	r3, r1
 800521e:	4939      	ldr	r1, [pc, #228]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005220:	4313      	orrs	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d167      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a35      	ldr	r2, [pc, #212]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005236:	f7fc fec1 	bl	8001fbc <HAL_GetTick>
 800523a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800523c:	e009      	b.n	8005252 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800523e:	f7fc febd 	bl	8001fbc <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d902      	bls.n	8005252 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	73fb      	strb	r3, [r7, #15]
        break;
 8005250:	e005      	b.n	800525e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005252:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ef      	bne.n	800523e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d14a      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d111      	bne.n	800528e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6892      	ldr	r2, [r2, #8]
 800527a:	0211      	lsls	r1, r2, #8
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68d2      	ldr	r2, [r2, #12]
 8005280:	0912      	lsrs	r2, r2, #4
 8005282:	0452      	lsls	r2, r2, #17
 8005284:	430a      	orrs	r2, r1
 8005286:	491f      	ldr	r1, [pc, #124]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005288:	4313      	orrs	r3, r2
 800528a:	614b      	str	r3, [r1, #20]
 800528c:	e011      	b.n	80052b2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6892      	ldr	r2, [r2, #8]
 800529e:	0211      	lsls	r1, r2, #8
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6912      	ldr	r2, [r2, #16]
 80052a4:	0852      	lsrs	r2, r2, #1
 80052a6:	3a01      	subs	r2, #1
 80052a8:	0652      	lsls	r2, r2, #25
 80052aa:	430a      	orrs	r2, r1
 80052ac:	4915      	ldr	r1, [pc, #84]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a13      	ldr	r2, [pc, #76]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fc fe7d 	bl	8001fbc <HAL_GetTick>
 80052c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052c4:	e009      	b.n	80052da <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052c6:	f7fc fe79 	bl	8001fbc <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d902      	bls.n	80052da <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	73fb      	strb	r3, [r7, #15]
          break;
 80052d8:	e005      	b.n	80052e6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0ef      	beq.n	80052c6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	4903      	ldr	r1, [pc, #12]	; (8005304 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000

08005308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e095      	b.n	8005446 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532a:	d009      	beq.n	8005340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	61da      	str	r2, [r3, #28]
 8005332:	e005      	b.n	8005340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc fc74 	bl	8001c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005376:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005380:	d902      	bls.n	8005388 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e002      	b.n	800538e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800538c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005396:	d007      	beq.n	80053a8 <HAL_SPI_Init+0xa0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a0:	d002      	beq.n	80053a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	ea42 0103 	orr.w	r1, r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	f003 0204 	and.w	r2, r3, #4
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005424:	ea42 0103 	orr.w	r1, r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b088      	sub	sp, #32
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_SPI_Transmit+0x22>
 800546c:	2302      	movs	r3, #2
 800546e:	e158      	b.n	8005722 <HAL_SPI_Transmit+0x2d4>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005478:	f7fc fda0 	bl	8001fbc <HAL_GetTick>
 800547c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800548e:	2302      	movs	r3, #2
 8005490:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005492:	e13d      	b.n	8005710 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_SPI_Transmit+0x52>
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054a4:	e134      	b.n	8005710 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2203      	movs	r2, #3
 80054aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f0:	d10f      	bne.n	8005512 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005510:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d007      	beq.n	8005530 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005538:	d94b      	bls.n	80055d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Transmit+0xfa>
 8005542:	8afb      	ldrh	r3, [r7, #22]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d13e      	bne.n	80055c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800556c:	e02b      	b.n	80055c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d112      	bne.n	80055a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055a0:	e011      	b.n	80055c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a2:	f7fc fd0b 	bl	8001fbc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d803      	bhi.n	80055ba <HAL_SPI_Transmit+0x16c>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d102      	bne.n	80055c0 <HAL_SPI_Transmit+0x172>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055c4:	e0a4      	b.n	8005710 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ce      	bne.n	800556e <HAL_SPI_Transmit+0x120>
 80055d0:	e07c      	b.n	80056cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Transmit+0x192>
 80055da:	8afb      	ldrh	r3, [r7, #22]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d170      	bne.n	80056c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d912      	bls.n	8005610 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	881a      	ldrh	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b02      	subs	r3, #2
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800560e:	e058      	b.n	80056c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005636:	e044      	b.n	80056c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b02      	cmp	r3, #2
 8005644:	d12b      	bne.n	800569e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d912      	bls.n	8005676 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b02      	subs	r3, #2
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005674:	e025      	b.n	80056c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	7812      	ldrb	r2, [r2, #0]
 8005682:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800569c:	e011      	b.n	80056c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800569e:	f7fc fc8d 	bl	8001fbc <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d803      	bhi.n	80056b6 <HAL_SPI_Transmit+0x268>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d102      	bne.n	80056bc <HAL_SPI_Transmit+0x26e>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056c0:	e026      	b.n	8005710 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1b5      	bne.n	8005638 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f941 	bl	8005958 <SPI_EndRxTxTransaction>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e000      	b.n	8005710 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800570e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005720:	7ffb      	ldrb	r3, [r7, #31]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800573c:	f7fc fc3e 	bl	8001fbc <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	4413      	add	r3, r2
 800574a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800574c:	f7fc fc36 	bl	8001fbc <HAL_GetTick>
 8005750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005752:	4b39      	ldr	r3, [pc, #228]	; (8005838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	015b      	lsls	r3, r3, #5
 8005758:	0d1b      	lsrs	r3, r3, #20
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	fb02 f303 	mul.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005762:	e054      	b.n	800580e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d050      	beq.n	800580e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800576c:	f7fc fc26 	bl	8001fbc <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	429a      	cmp	r2, r3
 800577a:	d902      	bls.n	8005782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d13d      	bne.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579a:	d111      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a4:	d004      	beq.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ae:	d107      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d10f      	bne.n	80057ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e017      	b.n	800582e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3b01      	subs	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	429a      	cmp	r2, r3
 800581c:	bf0c      	ite	eq
 800581e:	2301      	moveq	r3, #1
 8005820:	2300      	movne	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	429a      	cmp	r2, r3
 800582a:	d19b      	bne.n	8005764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000000 	.word	0x20000000

0800583c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800584a:	f7fc fbb7 	bl	8001fbc <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	4413      	add	r3, r2
 8005858:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800585a:	f7fc fbaf 	bl	8001fbc <HAL_GetTick>
 800585e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005860:	4b3c      	ldr	r3, [pc, #240]	; (8005954 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	00da      	lsls	r2, r3, #3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	0d1b      	lsrs	r3, r3, #20
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005878:	e05f      	b.n	800593a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005880:	d106      	bne.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d050      	beq.n	800593a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005898:	f7fc fb90 	bl	8001fbc <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d902      	bls.n	80058ae <SPI_WaitFifoStateUntilTimeout+0x72>
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d13d      	bne.n	800592a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c6:	d111      	bne.n	80058ec <SPI_WaitFifoStateUntilTimeout+0xb0>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	d004      	beq.n	80058dc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058da:	d107      	bne.n	80058ec <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f4:	d10f      	bne.n	8005916 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e010      	b.n	800594c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3b01      	subs	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d197      	bne.n	800587a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000000 	.word	0x20000000

08005958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2200      	movs	r2, #0
 800596c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff63 	bl	800583c <SPI_WaitFifoStateUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e027      	b.n	80059dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fec8 	bl	800572c <SPI_WaitFlagStateUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e014      	b.n	80059dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ff3c 	bl	800583c <SPI_WaitFifoStateUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e000      	b.n	80059dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e040      	b.n	8005a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc f960 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8c0 	bl	8005ba8 <UART_SetConfig>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e022      	b.n	8005a78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fb3e 	bl	80060bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fbc5 	bl	8006200 <UART_CheckIdleState>
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	f040 8081 	bne.w	8005b9c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_UART_Transmit+0x26>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e079      	b.n	8005b9e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Transmit+0x38>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e072      	b.n	8005b9e <HAL_UART_Transmit+0x11e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2221      	movs	r2, #33	; 0x21
 8005aca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005acc:	f7fc fa76 	bl	8001fbc <HAL_GetTick>
 8005ad0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d108      	bne.n	8005afe <HAL_UART_Transmit+0x7e>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e003      	b.n	8005b06 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005b0e:	e02d      	b.n	8005b6c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	2180      	movs	r1, #128	; 0x80
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fbb5 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e039      	b.n	8005b9e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	3302      	adds	r3, #2
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e008      	b.n	8005b5a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	b292      	uxth	r2, r2
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1cb      	bne.n	8005b10 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fb81 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e005      	b.n	8005b9e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005bac:	b088      	sub	sp, #32
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4bac      	ldr	r3, [pc, #688]	; (8005e88 <UART_SetConfig+0x2e0>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	69f9      	ldr	r1, [r7, #28]
 8005bde:	430b      	orrs	r3, r1
 8005be0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4aa2      	ldr	r2, [pc, #648]	; (8005e8c <UART_SetConfig+0x2e4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a99      	ldr	r2, [pc, #612]	; (8005e90 <UART_SetConfig+0x2e8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d121      	bne.n	8005c74 <UART_SetConfig+0xcc>
 8005c30:	4b98      	ldr	r3, [pc, #608]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d816      	bhi.n	8005c6c <UART_SetConfig+0xc4>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x9c>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c5b 	.word	0x08005c5b
 8005c50:	08005c67 	.word	0x08005c67
 8005c54:	2301      	movs	r3, #1
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e0e8      	b.n	8005e2c <UART_SetConfig+0x284>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e0e5      	b.n	8005e2c <UART_SetConfig+0x284>
 8005c60:	2304      	movs	r3, #4
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e0e2      	b.n	8005e2c <UART_SetConfig+0x284>
 8005c66:	2308      	movs	r3, #8
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e0df      	b.n	8005e2c <UART_SetConfig+0x284>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	bf00      	nop
 8005c72:	e0db      	b.n	8005e2c <UART_SetConfig+0x284>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a87      	ldr	r2, [pc, #540]	; (8005e98 <UART_SetConfig+0x2f0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d134      	bne.n	8005ce8 <UART_SetConfig+0x140>
 8005c7e:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d829      	bhi.n	8005ce0 <UART_SetConfig+0x138>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0xec>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005cc9 	.word	0x08005cc9
 8005c98:	08005ce1 	.word	0x08005ce1
 8005c9c:	08005ce1 	.word	0x08005ce1
 8005ca0:	08005ce1 	.word	0x08005ce1
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005ce1 	.word	0x08005ce1
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005ce1 	.word	0x08005ce1
 8005cb4:	08005ccf 	.word	0x08005ccf
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005ce1 	.word	0x08005ce1
 8005cc4:	08005cdb 	.word	0x08005cdb
 8005cc8:	2300      	movs	r3, #0
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	e0ae      	b.n	8005e2c <UART_SetConfig+0x284>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	76fb      	strb	r3, [r7, #27]
 8005cd2:	e0ab      	b.n	8005e2c <UART_SetConfig+0x284>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	76fb      	strb	r3, [r7, #27]
 8005cd8:	e0a8      	b.n	8005e2c <UART_SetConfig+0x284>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	76fb      	strb	r3, [r7, #27]
 8005cde:	e0a5      	b.n	8005e2c <UART_SetConfig+0x284>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	76fb      	strb	r3, [r7, #27]
 8005ce4:	bf00      	nop
 8005ce6:	e0a1      	b.n	8005e2c <UART_SetConfig+0x284>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6b      	ldr	r2, [pc, #428]	; (8005e9c <UART_SetConfig+0x2f4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d120      	bne.n	8005d34 <UART_SetConfig+0x18c>
 8005cf2:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d00f      	beq.n	8005d20 <UART_SetConfig+0x178>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d802      	bhi.n	8005d0a <UART_SetConfig+0x162>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <UART_SetConfig+0x16c>
 8005d08:	e010      	b.n	8005d2c <UART_SetConfig+0x184>
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d005      	beq.n	8005d1a <UART_SetConfig+0x172>
 8005d0e:	2b30      	cmp	r3, #48	; 0x30
 8005d10:	d009      	beq.n	8005d26 <UART_SetConfig+0x17e>
 8005d12:	e00b      	b.n	8005d2c <UART_SetConfig+0x184>
 8005d14:	2300      	movs	r3, #0
 8005d16:	76fb      	strb	r3, [r7, #27]
 8005d18:	e088      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	76fb      	strb	r3, [r7, #27]
 8005d1e:	e085      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d20:	2304      	movs	r3, #4
 8005d22:	76fb      	strb	r3, [r7, #27]
 8005d24:	e082      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d26:	2308      	movs	r3, #8
 8005d28:	76fb      	strb	r3, [r7, #27]
 8005d2a:	e07f      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	76fb      	strb	r3, [r7, #27]
 8005d30:	bf00      	nop
 8005d32:	e07b      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a59      	ldr	r2, [pc, #356]	; (8005ea0 <UART_SetConfig+0x2f8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d120      	bne.n	8005d80 <UART_SetConfig+0x1d8>
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d48:	2b40      	cmp	r3, #64	; 0x40
 8005d4a:	d00f      	beq.n	8005d6c <UART_SetConfig+0x1c4>
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d802      	bhi.n	8005d56 <UART_SetConfig+0x1ae>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <UART_SetConfig+0x1b8>
 8005d54:	e010      	b.n	8005d78 <UART_SetConfig+0x1d0>
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d005      	beq.n	8005d66 <UART_SetConfig+0x1be>
 8005d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d5c:	d009      	beq.n	8005d72 <UART_SetConfig+0x1ca>
 8005d5e:	e00b      	b.n	8005d78 <UART_SetConfig+0x1d0>
 8005d60:	2300      	movs	r3, #0
 8005d62:	76fb      	strb	r3, [r7, #27]
 8005d64:	e062      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d66:	2302      	movs	r3, #2
 8005d68:	76fb      	strb	r3, [r7, #27]
 8005d6a:	e05f      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	e05c      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d72:	2308      	movs	r3, #8
 8005d74:	76fb      	strb	r3, [r7, #27]
 8005d76:	e059      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	76fb      	strb	r3, [r7, #27]
 8005d7c:	bf00      	nop
 8005d7e:	e055      	b.n	8005e2c <UART_SetConfig+0x284>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a47      	ldr	r2, [pc, #284]	; (8005ea4 <UART_SetConfig+0x2fc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d124      	bne.n	8005dd4 <UART_SetConfig+0x22c>
 8005d8a:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d98:	d012      	beq.n	8005dc0 <UART_SetConfig+0x218>
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	d802      	bhi.n	8005da6 <UART_SetConfig+0x1fe>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <UART_SetConfig+0x20c>
 8005da4:	e012      	b.n	8005dcc <UART_SetConfig+0x224>
 8005da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005daa:	d006      	beq.n	8005dba <UART_SetConfig+0x212>
 8005dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db0:	d009      	beq.n	8005dc6 <UART_SetConfig+0x21e>
 8005db2:	e00b      	b.n	8005dcc <UART_SetConfig+0x224>
 8005db4:	2300      	movs	r3, #0
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e038      	b.n	8005e2c <UART_SetConfig+0x284>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e035      	b.n	8005e2c <UART_SetConfig+0x284>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e032      	b.n	8005e2c <UART_SetConfig+0x284>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	76fb      	strb	r3, [r7, #27]
 8005dca:	e02f      	b.n	8005e2c <UART_SetConfig+0x284>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	bf00      	nop
 8005dd2:	e02b      	b.n	8005e2c <UART_SetConfig+0x284>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <UART_SetConfig+0x2e4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d124      	bne.n	8005e28 <UART_SetConfig+0x280>
 8005dde:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dec:	d012      	beq.n	8005e14 <UART_SetConfig+0x26c>
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d802      	bhi.n	8005dfa <UART_SetConfig+0x252>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <UART_SetConfig+0x260>
 8005df8:	e012      	b.n	8005e20 <UART_SetConfig+0x278>
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfe:	d006      	beq.n	8005e0e <UART_SetConfig+0x266>
 8005e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e04:	d009      	beq.n	8005e1a <UART_SetConfig+0x272>
 8005e06:	e00b      	b.n	8005e20 <UART_SetConfig+0x278>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e00e      	b.n	8005e2c <UART_SetConfig+0x284>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	76fb      	strb	r3, [r7, #27]
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x284>
 8005e14:	2304      	movs	r3, #4
 8005e16:	76fb      	strb	r3, [r7, #27]
 8005e18:	e008      	b.n	8005e2c <UART_SetConfig+0x284>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	76fb      	strb	r3, [r7, #27]
 8005e1e:	e005      	b.n	8005e2c <UART_SetConfig+0x284>
 8005e20:	2310      	movs	r3, #16
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	bf00      	nop
 8005e26:	e001      	b.n	8005e2c <UART_SetConfig+0x284>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <UART_SetConfig+0x2e4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f040 8087 	bne.w	8005f46 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e38:	7efb      	ldrb	r3, [r7, #27]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d836      	bhi.n	8005eac <UART_SetConfig+0x304>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x29c>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fd12 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8005e6c:	6178      	str	r0, [r7, #20]
        break;
 8005e6e:	e022      	b.n	8005eb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <UART_SetConfig+0x300>)
 8005e72:	617b      	str	r3, [r7, #20]
        break;
 8005e74:	e01f      	b.n	8005eb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fc75 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8005e7a:	6178      	str	r0, [r7, #20]
        break;
 8005e7c:	e01b      	b.n	8005eb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	617b      	str	r3, [r7, #20]
        break;
 8005e84:	e017      	b.n	8005eb6 <UART_SetConfig+0x30e>
 8005e86:	bf00      	nop
 8005e88:	efff69f3 	.word	0xefff69f3
 8005e8c:	40008000 	.word	0x40008000
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40004400 	.word	0x40004400
 8005e9c:	40004800 	.word	0x40004800
 8005ea0:	40004c00 	.word	0x40004c00
 8005ea4:	40005000 	.word	0x40005000
 8005ea8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	76bb      	strb	r3, [r7, #26]
        break;
 8005eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80f1 	beq.w	80060a0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d305      	bcc.n	8005eda <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d902      	bls.n	8005ee0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	76bb      	strb	r3, [r7, #26]
 8005ede:	e0df      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	f04f 0400 	mov.w	r4, #0
 8005ef0:	0214      	lsls	r4, r2, #8
 8005ef2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ef6:	020b      	lsls	r3, r1, #8
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	0852      	lsrs	r2, r2, #1
 8005efe:	4611      	mov	r1, r2
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	eb13 0b01 	adds.w	fp, r3, r1
 8005f08:	eb44 0c02 	adc.w	ip, r4, r2
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	4661      	mov	r1, ip
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f04f 0400 	mov.w	r4, #0
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	f7fa feb4 	bl	8000c88 <__aeabi_uldivmod>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2c:	d308      	bcc.n	8005f40 <UART_SetConfig+0x398>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f34:	d204      	bcs.n	8005f40 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	e0af      	b.n	80060a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	76bb      	strb	r3, [r7, #26]
 8005f44:	e0ac      	b.n	80060a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4e:	d15b      	bne.n	8006008 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005f50:	7efb      	ldrb	r3, [r7, #27]
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d827      	bhi.n	8005fa6 <UART_SetConfig+0x3fe>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x3b4>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	08005fa7 	.word	0x08005fa7
 8005f6c:	08005f97 	.word	0x08005f97
 8005f70:	08005fa7 	.word	0x08005fa7
 8005f74:	08005fa7 	.word	0x08005fa7
 8005f78:	08005fa7 	.word	0x08005fa7
 8005f7c:	08005f9f 	.word	0x08005f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fe fc86 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8005f84:	6178      	str	r0, [r7, #20]
        break;
 8005f86:	e013      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f88:	f7fe fc98 	bl	80048bc <HAL_RCC_GetPCLK2Freq>
 8005f8c:	6178      	str	r0, [r7, #20]
        break;
 8005f8e:	e00f      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f90:	4b49      	ldr	r3, [pc, #292]	; (80060b8 <UART_SetConfig+0x510>)
 8005f92:	617b      	str	r3, [r7, #20]
        break;
 8005f94:	e00c      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f96:	f7fe fbe5 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8005f9a:	6178      	str	r0, [r7, #20]
        break;
 8005f9c:	e008      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa2:	617b      	str	r3, [r7, #20]
        break;
 8005fa4:	e004      	b.n	8005fb0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	76bb      	strb	r3, [r7, #26]
        break;
 8005fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d074      	beq.n	80060a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	d916      	bls.n	8006002 <UART_SetConfig+0x45a>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fda:	d212      	bcs.n	8006002 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f023 030f 	bic.w	r3, r3, #15
 8005fe4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	89fa      	ldrh	r2, [r7, #14]
 8005ffe:	60da      	str	r2, [r3, #12]
 8006000:	e04e      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	76bb      	strb	r3, [r7, #26]
 8006006:	e04b      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006008:	7efb      	ldrb	r3, [r7, #27]
 800600a:	2b08      	cmp	r3, #8
 800600c:	d827      	bhi.n	800605e <UART_SetConfig+0x4b6>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <UART_SetConfig+0x46c>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	0800605f 	.word	0x0800605f
 8006024:	0800604f 	.word	0x0800604f
 8006028:	0800605f 	.word	0x0800605f
 800602c:	0800605f 	.word	0x0800605f
 8006030:	0800605f 	.word	0x0800605f
 8006034:	08006057 	.word	0x08006057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fe fc2a 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 800603c:	6178      	str	r0, [r7, #20]
        break;
 800603e:	e013      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fe fc3c 	bl	80048bc <HAL_RCC_GetPCLK2Freq>
 8006044:	6178      	str	r0, [r7, #20]
        break;
 8006046:	e00f      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <UART_SetConfig+0x510>)
 800604a:	617b      	str	r3, [r7, #20]
        break;
 800604c:	e00c      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604e:	f7fe fb89 	bl	8004764 <HAL_RCC_GetSysClockFreq>
 8006052:	6178      	str	r0, [r7, #20]
        break;
 8006054:	e008      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605a:	617b      	str	r3, [r7, #20]
        break;
 800605c:	e004      	b.n	8006068 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	76bb      	strb	r3, [r7, #26]
        break;
 8006066:	bf00      	nop
    }

    if (pclk != 0U)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d018      	beq.n	80060a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	085a      	lsrs	r2, r3, #1
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	441a      	add	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d908      	bls.n	800609c <UART_SetConfig+0x4f4>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006090:	d204      	bcs.n	800609c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	e001      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80060ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80060b8:	00f42400 	.word	0x00f42400

080060bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ba:	d10a      	bne.n	80061d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af02      	add	r7, sp, #8
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800620e:	f7fb fed5 	bl	8001fbc <HAL_GetTick>
 8006212:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b08      	cmp	r3, #8
 8006220:	d10e      	bne.n	8006240 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006222:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f82a 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e020      	b.n	8006282 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b04      	cmp	r3, #4
 800624c:	d10e      	bne.n	800626c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f814 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e00a      	b.n	8006282 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	e05d      	b.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d059      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a4:	f7fb fe8a 	bl	8001fbc <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d302      	bcc.n	80062ba <UART_WaitOnFlagUntilTimeout+0x30>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d11b      	bne.n	80062f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e042      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02b      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630e:	d123      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006318:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006328:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e00f      	b.n	8006378 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	429a      	cmp	r2, r3
 8006374:	d092      	beq.n	800629c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <__errno>:
 8006380:	4b01      	ldr	r3, [pc, #4]	; (8006388 <__errno+0x8>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	2000000c 	.word	0x2000000c

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4e0d      	ldr	r6, [pc, #52]	; (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	; (80063c8 <__libc_init_array+0x3c>)
 8006392:	1ba4      	subs	r4, r4, r6
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2500      	movs	r5, #0
 8006398:	42a5      	cmp	r5, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4e0b      	ldr	r6, [pc, #44]	; (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	; (80063d0 <__libc_init_array+0x44>)
 80063a0:	f003 fd58 	bl	8009e54 <_init>
 80063a4:	1ba4      	subs	r4, r4, r6
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2500      	movs	r5, #0
 80063aa:	42a5      	cmp	r5, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063b4:	4798      	blx	r3
 80063b6:	3501      	adds	r5, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063be:	4798      	blx	r3
 80063c0:	3501      	adds	r5, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	0800a288 	.word	0x0800a288
 80063c8:	0800a288 	.word	0x0800a288
 80063cc:	0800a288 	.word	0x0800a288
 80063d0:	0800a28c 	.word	0x0800a28c

080063d4 <memset>:
 80063d4:	4402      	add	r2, r0
 80063d6:	4603      	mov	r3, r0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d100      	bne.n	80063de <memset+0xa>
 80063dc:	4770      	bx	lr
 80063de:	f803 1b01 	strb.w	r1, [r3], #1
 80063e2:	e7f9      	b.n	80063d8 <memset+0x4>

080063e4 <__cvt>:
 80063e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	ec55 4b10 	vmov	r4, r5, d0
 80063ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80063ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	460e      	mov	r6, r1
 80063f6:	4691      	mov	r9, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	bfb8      	it	lt
 80063fc:	4622      	movlt	r2, r4
 80063fe:	462b      	mov	r3, r5
 8006400:	f027 0720 	bic.w	r7, r7, #32
 8006404:	bfbb      	ittet	lt
 8006406:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800640a:	461d      	movlt	r5, r3
 800640c:	2300      	movge	r3, #0
 800640e:	232d      	movlt	r3, #45	; 0x2d
 8006410:	bfb8      	it	lt
 8006412:	4614      	movlt	r4, r2
 8006414:	2f46      	cmp	r7, #70	; 0x46
 8006416:	700b      	strb	r3, [r1, #0]
 8006418:	d004      	beq.n	8006424 <__cvt+0x40>
 800641a:	2f45      	cmp	r7, #69	; 0x45
 800641c:	d100      	bne.n	8006420 <__cvt+0x3c>
 800641e:	3601      	adds	r6, #1
 8006420:	2102      	movs	r1, #2
 8006422:	e000      	b.n	8006426 <__cvt+0x42>
 8006424:	2103      	movs	r1, #3
 8006426:	ab03      	add	r3, sp, #12
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	ab02      	add	r3, sp, #8
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4632      	mov	r2, r6
 8006430:	4653      	mov	r3, sl
 8006432:	ec45 4b10 	vmov	d0, r4, r5
 8006436:	f001 fd77 	bl	8007f28 <_dtoa_r>
 800643a:	2f47      	cmp	r7, #71	; 0x47
 800643c:	4680      	mov	r8, r0
 800643e:	d102      	bne.n	8006446 <__cvt+0x62>
 8006440:	f019 0f01 	tst.w	r9, #1
 8006444:	d026      	beq.n	8006494 <__cvt+0xb0>
 8006446:	2f46      	cmp	r7, #70	; 0x46
 8006448:	eb08 0906 	add.w	r9, r8, r6
 800644c:	d111      	bne.n	8006472 <__cvt+0x8e>
 800644e:	f898 3000 	ldrb.w	r3, [r8]
 8006452:	2b30      	cmp	r3, #48	; 0x30
 8006454:	d10a      	bne.n	800646c <__cvt+0x88>
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	4620      	mov	r0, r4
 800645c:	4629      	mov	r1, r5
 800645e:	f7fa fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006462:	b918      	cbnz	r0, 800646c <__cvt+0x88>
 8006464:	f1c6 0601 	rsb	r6, r6, #1
 8006468:	f8ca 6000 	str.w	r6, [sl]
 800646c:	f8da 3000 	ldr.w	r3, [sl]
 8006470:	4499      	add	r9, r3
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7fa fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800647e:	b938      	cbnz	r0, 8006490 <__cvt+0xac>
 8006480:	2230      	movs	r2, #48	; 0x30
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	454b      	cmp	r3, r9
 8006486:	d205      	bcs.n	8006494 <__cvt+0xb0>
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	9103      	str	r1, [sp, #12]
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e7f8      	b.n	8006482 <__cvt+0x9e>
 8006490:	f8cd 900c 	str.w	r9, [sp, #12]
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006498:	eba3 0308 	sub.w	r3, r3, r8
 800649c:	4640      	mov	r0, r8
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	b004      	add	sp, #16
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080064a6 <__exponent>:
 80064a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a8:	2900      	cmp	r1, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	bfba      	itte	lt
 80064ae:	4249      	neglt	r1, r1
 80064b0:	232d      	movlt	r3, #45	; 0x2d
 80064b2:	232b      	movge	r3, #43	; 0x2b
 80064b4:	2909      	cmp	r1, #9
 80064b6:	f804 2b02 	strb.w	r2, [r4], #2
 80064ba:	7043      	strb	r3, [r0, #1]
 80064bc:	dd20      	ble.n	8006500 <__exponent+0x5a>
 80064be:	f10d 0307 	add.w	r3, sp, #7
 80064c2:	461f      	mov	r7, r3
 80064c4:	260a      	movs	r6, #10
 80064c6:	fb91 f5f6 	sdiv	r5, r1, r6
 80064ca:	fb06 1115 	mls	r1, r6, r5, r1
 80064ce:	3130      	adds	r1, #48	; 0x30
 80064d0:	2d09      	cmp	r5, #9
 80064d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064d6:	f103 32ff 	add.w	r2, r3, #4294967295
 80064da:	4629      	mov	r1, r5
 80064dc:	dc09      	bgt.n	80064f2 <__exponent+0x4c>
 80064de:	3130      	adds	r1, #48	; 0x30
 80064e0:	3b02      	subs	r3, #2
 80064e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80064e6:	42bb      	cmp	r3, r7
 80064e8:	4622      	mov	r2, r4
 80064ea:	d304      	bcc.n	80064f6 <__exponent+0x50>
 80064ec:	1a10      	subs	r0, r2, r0
 80064ee:	b003      	add	sp, #12
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	4613      	mov	r3, r2
 80064f4:	e7e7      	b.n	80064c6 <__exponent+0x20>
 80064f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fa:	f804 2b01 	strb.w	r2, [r4], #1
 80064fe:	e7f2      	b.n	80064e6 <__exponent+0x40>
 8006500:	2330      	movs	r3, #48	; 0x30
 8006502:	4419      	add	r1, r3
 8006504:	7083      	strb	r3, [r0, #2]
 8006506:	1d02      	adds	r2, r0, #4
 8006508:	70c1      	strb	r1, [r0, #3]
 800650a:	e7ef      	b.n	80064ec <__exponent+0x46>

0800650c <_printf_float>:
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	b08d      	sub	sp, #52	; 0x34
 8006512:	460c      	mov	r4, r1
 8006514:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006518:	4616      	mov	r6, r2
 800651a:	461f      	mov	r7, r3
 800651c:	4605      	mov	r5, r0
 800651e:	f002 fde7 	bl	80090f0 <_localeconv_r>
 8006522:	6803      	ldr	r3, [r0, #0]
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	4618      	mov	r0, r3
 8006528:	f7f9 fe52 	bl	80001d0 <strlen>
 800652c:	2300      	movs	r3, #0
 800652e:	930a      	str	r3, [sp, #40]	; 0x28
 8006530:	f8d8 3000 	ldr.w	r3, [r8]
 8006534:	9005      	str	r0, [sp, #20]
 8006536:	3307      	adds	r3, #7
 8006538:	f023 0307 	bic.w	r3, r3, #7
 800653c:	f103 0208 	add.w	r2, r3, #8
 8006540:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006544:	f8d4 b000 	ldr.w	fp, [r4]
 8006548:	f8c8 2000 	str.w	r2, [r8]
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006554:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006558:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800655c:	9307      	str	r3, [sp, #28]
 800655e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	4ba7      	ldr	r3, [pc, #668]	; (8006804 <_printf_float+0x2f8>)
 8006568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800656c:	f7fa fade 	bl	8000b2c <__aeabi_dcmpun>
 8006570:	bb70      	cbnz	r0, 80065d0 <_printf_float+0xc4>
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	4ba3      	ldr	r3, [pc, #652]	; (8006804 <_printf_float+0x2f8>)
 8006578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800657c:	f7fa fab8 	bl	8000af0 <__aeabi_dcmple>
 8006580:	bb30      	cbnz	r0, 80065d0 <_printf_float+0xc4>
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	f7fa faa7 	bl	8000adc <__aeabi_dcmplt>
 800658e:	b110      	cbz	r0, 8006596 <_printf_float+0x8a>
 8006590:	232d      	movs	r3, #45	; 0x2d
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006596:	4a9c      	ldr	r2, [pc, #624]	; (8006808 <_printf_float+0x2fc>)
 8006598:	4b9c      	ldr	r3, [pc, #624]	; (800680c <_printf_float+0x300>)
 800659a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800659e:	bf8c      	ite	hi
 80065a0:	4690      	movhi	r8, r2
 80065a2:	4698      	movls	r8, r3
 80065a4:	2303      	movs	r3, #3
 80065a6:	f02b 0204 	bic.w	r2, fp, #4
 80065aa:	6123      	str	r3, [r4, #16]
 80065ac:	6022      	str	r2, [r4, #0]
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	9700      	str	r7, [sp, #0]
 80065b4:	4633      	mov	r3, r6
 80065b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f9e6 	bl	800698c <_printf_common>
 80065c0:	3001      	adds	r0, #1
 80065c2:	f040 808d 	bne.w	80066e0 <_printf_float+0x1d4>
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	b00d      	add	sp, #52	; 0x34
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa faa8 	bl	8000b2c <__aeabi_dcmpun>
 80065dc:	b110      	cbz	r0, 80065e4 <_printf_float+0xd8>
 80065de:	4a8c      	ldr	r2, [pc, #560]	; (8006810 <_printf_float+0x304>)
 80065e0:	4b8c      	ldr	r3, [pc, #560]	; (8006814 <_printf_float+0x308>)
 80065e2:	e7da      	b.n	800659a <_printf_float+0x8e>
 80065e4:	6861      	ldr	r1, [r4, #4]
 80065e6:	1c4b      	adds	r3, r1, #1
 80065e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80065ec:	a80a      	add	r0, sp, #40	; 0x28
 80065ee:	d13e      	bne.n	800666e <_printf_float+0x162>
 80065f0:	2306      	movs	r3, #6
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	2300      	movs	r3, #0
 80065f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80065fa:	ab09      	add	r3, sp, #36	; 0x24
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	ec49 8b10 	vmov	d0, r8, r9
 8006602:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006606:	6022      	str	r2, [r4, #0]
 8006608:	f8cd a004 	str.w	sl, [sp, #4]
 800660c:	6861      	ldr	r1, [r4, #4]
 800660e:	4628      	mov	r0, r5
 8006610:	f7ff fee8 	bl	80063e4 <__cvt>
 8006614:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006618:	2b47      	cmp	r3, #71	; 0x47
 800661a:	4680      	mov	r8, r0
 800661c:	d109      	bne.n	8006632 <_printf_float+0x126>
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	1cd8      	adds	r0, r3, #3
 8006622:	db02      	blt.n	800662a <_printf_float+0x11e>
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	4293      	cmp	r3, r2
 8006628:	dd47      	ble.n	80066ba <_printf_float+0x1ae>
 800662a:	f1aa 0a02 	sub.w	sl, sl, #2
 800662e:	fa5f fa8a 	uxtb.w	sl, sl
 8006632:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006636:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006638:	d824      	bhi.n	8006684 <_printf_float+0x178>
 800663a:	3901      	subs	r1, #1
 800663c:	4652      	mov	r2, sl
 800663e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006642:	9109      	str	r1, [sp, #36]	; 0x24
 8006644:	f7ff ff2f 	bl	80064a6 <__exponent>
 8006648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800664a:	1813      	adds	r3, r2, r0
 800664c:	2a01      	cmp	r2, #1
 800664e:	4681      	mov	r9, r0
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	dc02      	bgt.n	800665a <_printf_float+0x14e>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	07d1      	lsls	r1, r2, #31
 8006658:	d501      	bpl.n	800665e <_printf_float+0x152>
 800665a:	3301      	adds	r3, #1
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0a5      	beq.n	80065b2 <_printf_float+0xa6>
 8006666:	232d      	movs	r3, #45	; 0x2d
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666c:	e7a1      	b.n	80065b2 <_printf_float+0xa6>
 800666e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006672:	f000 8177 	beq.w	8006964 <_printf_float+0x458>
 8006676:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800667a:	d1bb      	bne.n	80065f4 <_printf_float+0xe8>
 800667c:	2900      	cmp	r1, #0
 800667e:	d1b9      	bne.n	80065f4 <_printf_float+0xe8>
 8006680:	2301      	movs	r3, #1
 8006682:	e7b6      	b.n	80065f2 <_printf_float+0xe6>
 8006684:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006688:	d119      	bne.n	80066be <_printf_float+0x1b2>
 800668a:	2900      	cmp	r1, #0
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	dd0c      	ble.n	80066aa <_printf_float+0x19e>
 8006690:	6121      	str	r1, [r4, #16]
 8006692:	b913      	cbnz	r3, 800669a <_printf_float+0x18e>
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	07d2      	lsls	r2, r2, #31
 8006698:	d502      	bpl.n	80066a0 <_printf_float+0x194>
 800669a:	3301      	adds	r3, #1
 800669c:	440b      	add	r3, r1
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80066a4:	f04f 0900 	mov.w	r9, #0
 80066a8:	e7d9      	b.n	800665e <_printf_float+0x152>
 80066aa:	b913      	cbnz	r3, 80066b2 <_printf_float+0x1a6>
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	07d0      	lsls	r0, r2, #31
 80066b0:	d501      	bpl.n	80066b6 <_printf_float+0x1aa>
 80066b2:	3302      	adds	r3, #2
 80066b4:	e7f3      	b.n	800669e <_printf_float+0x192>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e7f1      	b.n	800669e <_printf_float+0x192>
 80066ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80066be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066c2:	4293      	cmp	r3, r2
 80066c4:	db05      	blt.n	80066d2 <_printf_float+0x1c6>
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	07d1      	lsls	r1, r2, #31
 80066cc:	d5e8      	bpl.n	80066a0 <_printf_float+0x194>
 80066ce:	3301      	adds	r3, #1
 80066d0:	e7e5      	b.n	800669e <_printf_float+0x192>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfd4      	ite	le
 80066d6:	f1c3 0302 	rsble	r3, r3, #2
 80066da:	2301      	movgt	r3, #1
 80066dc:	4413      	add	r3, r2
 80066de:	e7de      	b.n	800669e <_printf_float+0x192>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	055a      	lsls	r2, r3, #21
 80066e4:	d407      	bmi.n	80066f6 <_printf_float+0x1ea>
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	4642      	mov	r2, r8
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	d12b      	bne.n	800674c <_printf_float+0x240>
 80066f4:	e767      	b.n	80065c6 <_printf_float+0xba>
 80066f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80066fa:	f240 80dc 	bls.w	80068b6 <_printf_float+0x3aa>
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006706:	f7fa f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800670a:	2800      	cmp	r0, #0
 800670c:	d033      	beq.n	8006776 <_printf_float+0x26a>
 800670e:	2301      	movs	r3, #1
 8006710:	4a41      	ldr	r2, [pc, #260]	; (8006818 <_printf_float+0x30c>)
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f af54 	beq.w	80065c6 <_printf_float+0xba>
 800671e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006722:	429a      	cmp	r2, r3
 8006724:	db02      	blt.n	800672c <_printf_float+0x220>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	07d8      	lsls	r0, r3, #31
 800672a:	d50f      	bpl.n	800674c <_printf_float+0x240>
 800672c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af45 	beq.w	80065c6 <_printf_float+0xba>
 800673c:	f04f 0800 	mov.w	r8, #0
 8006740:	f104 091a 	add.w	r9, r4, #26
 8006744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006746:	3b01      	subs	r3, #1
 8006748:	4543      	cmp	r3, r8
 800674a:	dc09      	bgt.n	8006760 <_printf_float+0x254>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	079b      	lsls	r3, r3, #30
 8006750:	f100 8103 	bmi.w	800695a <_printf_float+0x44e>
 8006754:	68e0      	ldr	r0, [r4, #12]
 8006756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006758:	4298      	cmp	r0, r3
 800675a:	bfb8      	it	lt
 800675c:	4618      	movlt	r0, r3
 800675e:	e734      	b.n	80065ca <_printf_float+0xbe>
 8006760:	2301      	movs	r3, #1
 8006762:	464a      	mov	r2, r9
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f af2b 	beq.w	80065c6 <_printf_float+0xba>
 8006770:	f108 0801 	add.w	r8, r8, #1
 8006774:	e7e6      	b.n	8006744 <_printf_float+0x238>
 8006776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc2b      	bgt.n	80067d4 <_printf_float+0x2c8>
 800677c:	2301      	movs	r3, #1
 800677e:	4a26      	ldr	r2, [pc, #152]	; (8006818 <_printf_float+0x30c>)
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	f43f af1d 	beq.w	80065c6 <_printf_float+0xba>
 800678c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678e:	b923      	cbnz	r3, 800679a <_printf_float+0x28e>
 8006790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006792:	b913      	cbnz	r3, 800679a <_printf_float+0x28e>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	07d9      	lsls	r1, r3, #31
 8006798:	d5d8      	bpl.n	800674c <_printf_float+0x240>
 800679a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	f43f af0e 	beq.w	80065c6 <_printf_float+0xba>
 80067aa:	f04f 0900 	mov.w	r9, #0
 80067ae:	f104 0a1a 	add.w	sl, r4, #26
 80067b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b4:	425b      	negs	r3, r3
 80067b6:	454b      	cmp	r3, r9
 80067b8:	dc01      	bgt.n	80067be <_printf_float+0x2b2>
 80067ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067bc:	e794      	b.n	80066e8 <_printf_float+0x1dc>
 80067be:	2301      	movs	r3, #1
 80067c0:	4652      	mov	r2, sl
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f aefc 	beq.w	80065c6 <_printf_float+0xba>
 80067ce:	f109 0901 	add.w	r9, r9, #1
 80067d2:	e7ee      	b.n	80067b2 <_printf_float+0x2a6>
 80067d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067d8:	429a      	cmp	r2, r3
 80067da:	bfa8      	it	ge
 80067dc:	461a      	movge	r2, r3
 80067de:	2a00      	cmp	r2, #0
 80067e0:	4691      	mov	r9, r2
 80067e2:	dd07      	ble.n	80067f4 <_printf_float+0x2e8>
 80067e4:	4613      	mov	r3, r2
 80067e6:	4631      	mov	r1, r6
 80067e8:	4642      	mov	r2, r8
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f aee9 	beq.w	80065c6 <_printf_float+0xba>
 80067f4:	f104 031a 	add.w	r3, r4, #26
 80067f8:	f04f 0b00 	mov.w	fp, #0
 80067fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006800:	9306      	str	r3, [sp, #24]
 8006802:	e015      	b.n	8006830 <_printf_float+0x324>
 8006804:	7fefffff 	.word	0x7fefffff
 8006808:	08009fd0 	.word	0x08009fd0
 800680c:	08009fcc 	.word	0x08009fcc
 8006810:	08009fd8 	.word	0x08009fd8
 8006814:	08009fd4 	.word	0x08009fd4
 8006818:	08009fdc 	.word	0x08009fdc
 800681c:	2301      	movs	r3, #1
 800681e:	9a06      	ldr	r2, [sp, #24]
 8006820:	4631      	mov	r1, r6
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f aecd 	beq.w	80065c6 <_printf_float+0xba>
 800682c:	f10b 0b01 	add.w	fp, fp, #1
 8006830:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006834:	ebaa 0309 	sub.w	r3, sl, r9
 8006838:	455b      	cmp	r3, fp
 800683a:	dcef      	bgt.n	800681c <_printf_float+0x310>
 800683c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006840:	429a      	cmp	r2, r3
 8006842:	44d0      	add	r8, sl
 8006844:	db15      	blt.n	8006872 <_printf_float+0x366>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	07da      	lsls	r2, r3, #31
 800684a:	d412      	bmi.n	8006872 <_printf_float+0x366>
 800684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006850:	eba3 020a 	sub.w	r2, r3, sl
 8006854:	eba3 0a01 	sub.w	sl, r3, r1
 8006858:	4592      	cmp	sl, r2
 800685a:	bfa8      	it	ge
 800685c:	4692      	movge	sl, r2
 800685e:	f1ba 0f00 	cmp.w	sl, #0
 8006862:	dc0e      	bgt.n	8006882 <_printf_float+0x376>
 8006864:	f04f 0800 	mov.w	r8, #0
 8006868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800686c:	f104 091a 	add.w	r9, r4, #26
 8006870:	e019      	b.n	80068a6 <_printf_float+0x39a>
 8006872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	d1e5      	bne.n	800684c <_printf_float+0x340>
 8006880:	e6a1      	b.n	80065c6 <_printf_float+0xba>
 8006882:	4653      	mov	r3, sl
 8006884:	4642      	mov	r2, r8
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	d1e9      	bne.n	8006864 <_printf_float+0x358>
 8006890:	e699      	b.n	80065c6 <_printf_float+0xba>
 8006892:	2301      	movs	r3, #1
 8006894:	464a      	mov	r2, r9
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f ae92 	beq.w	80065c6 <_printf_float+0xba>
 80068a2:	f108 0801 	add.w	r8, r8, #1
 80068a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	eba3 030a 	sub.w	r3, r3, sl
 80068b0:	4543      	cmp	r3, r8
 80068b2:	dcee      	bgt.n	8006892 <_printf_float+0x386>
 80068b4:	e74a      	b.n	800674c <_printf_float+0x240>
 80068b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b8:	2a01      	cmp	r2, #1
 80068ba:	dc01      	bgt.n	80068c0 <_printf_float+0x3b4>
 80068bc:	07db      	lsls	r3, r3, #31
 80068be:	d53a      	bpl.n	8006936 <_printf_float+0x42a>
 80068c0:	2301      	movs	r3, #1
 80068c2:	4642      	mov	r2, r8
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f ae7b 	beq.w	80065c6 <_printf_float+0xba>
 80068d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f108 0801 	add.w	r8, r8, #1
 80068e0:	f43f ae71 	beq.w	80065c6 <_printf_float+0xba>
 80068e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e6:	2200      	movs	r2, #0
 80068e8:	f103 3aff 	add.w	sl, r3, #4294967295
 80068ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f0:	2300      	movs	r3, #0
 80068f2:	f7fa f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f6:	b9c8      	cbnz	r0, 800692c <_printf_float+0x420>
 80068f8:	4653      	mov	r3, sl
 80068fa:	4642      	mov	r2, r8
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	d10e      	bne.n	8006924 <_printf_float+0x418>
 8006906:	e65e      	b.n	80065c6 <_printf_float+0xba>
 8006908:	2301      	movs	r3, #1
 800690a:	4652      	mov	r2, sl
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	47b8      	blx	r7
 8006912:	3001      	adds	r0, #1
 8006914:	f43f ae57 	beq.w	80065c6 <_printf_float+0xba>
 8006918:	f108 0801 	add.w	r8, r8, #1
 800691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691e:	3b01      	subs	r3, #1
 8006920:	4543      	cmp	r3, r8
 8006922:	dcf1      	bgt.n	8006908 <_printf_float+0x3fc>
 8006924:	464b      	mov	r3, r9
 8006926:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800692a:	e6de      	b.n	80066ea <_printf_float+0x1de>
 800692c:	f04f 0800 	mov.w	r8, #0
 8006930:	f104 0a1a 	add.w	sl, r4, #26
 8006934:	e7f2      	b.n	800691c <_printf_float+0x410>
 8006936:	2301      	movs	r3, #1
 8006938:	e7df      	b.n	80068fa <_printf_float+0x3ee>
 800693a:	2301      	movs	r3, #1
 800693c:	464a      	mov	r2, r9
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae3e 	beq.w	80065c6 <_printf_float+0xba>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	4543      	cmp	r3, r8
 8006956:	dcf0      	bgt.n	800693a <_printf_float+0x42e>
 8006958:	e6fc      	b.n	8006754 <_printf_float+0x248>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	f104 0919 	add.w	r9, r4, #25
 8006962:	e7f4      	b.n	800694e <_printf_float+0x442>
 8006964:	2900      	cmp	r1, #0
 8006966:	f43f ae8b 	beq.w	8006680 <_printf_float+0x174>
 800696a:	2300      	movs	r3, #0
 800696c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006970:	ab09      	add	r3, sp, #36	; 0x24
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	ec49 8b10 	vmov	d0, r8, r9
 8006978:	6022      	str	r2, [r4, #0]
 800697a:	f8cd a004 	str.w	sl, [sp, #4]
 800697e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006982:	4628      	mov	r0, r5
 8006984:	f7ff fd2e 	bl	80063e4 <__cvt>
 8006988:	4680      	mov	r8, r0
 800698a:	e648      	b.n	800661e <_printf_float+0x112>

0800698c <_printf_common>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	4691      	mov	r9, r2
 8006992:	461f      	mov	r7, r3
 8006994:	688a      	ldr	r2, [r1, #8]
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800699c:	4293      	cmp	r3, r2
 800699e:	bfb8      	it	lt
 80069a0:	4613      	movlt	r3, r2
 80069a2:	f8c9 3000 	str.w	r3, [r9]
 80069a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069aa:	4606      	mov	r6, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	b112      	cbz	r2, 80069b6 <_printf_common+0x2a>
 80069b0:	3301      	adds	r3, #1
 80069b2:	f8c9 3000 	str.w	r3, [r9]
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	0699      	lsls	r1, r3, #26
 80069ba:	bf42      	ittt	mi
 80069bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069c0:	3302      	addmi	r3, #2
 80069c2:	f8c9 3000 	strmi.w	r3, [r9]
 80069c6:	6825      	ldr	r5, [r4, #0]
 80069c8:	f015 0506 	ands.w	r5, r5, #6
 80069cc:	d107      	bne.n	80069de <_printf_common+0x52>
 80069ce:	f104 0a19 	add.w	sl, r4, #25
 80069d2:	68e3      	ldr	r3, [r4, #12]
 80069d4:	f8d9 2000 	ldr.w	r2, [r9]
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	42ab      	cmp	r3, r5
 80069dc:	dc28      	bgt.n	8006a30 <_printf_common+0xa4>
 80069de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	3300      	adds	r3, #0
 80069e6:	bf18      	it	ne
 80069e8:	2301      	movne	r3, #1
 80069ea:	0692      	lsls	r2, r2, #26
 80069ec:	d42d      	bmi.n	8006a4a <_printf_common+0xbe>
 80069ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f2:	4639      	mov	r1, r7
 80069f4:	4630      	mov	r0, r6
 80069f6:	47c0      	blx	r8
 80069f8:	3001      	adds	r0, #1
 80069fa:	d020      	beq.n	8006a3e <_printf_common+0xb2>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	68e5      	ldr	r5, [r4, #12]
 8006a00:	f8d9 2000 	ldr.w	r2, [r9]
 8006a04:	f003 0306 	and.w	r3, r3, #6
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	bf08      	it	eq
 8006a0c:	1aad      	subeq	r5, r5, r2
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	6922      	ldr	r2, [r4, #16]
 8006a12:	bf0c      	ite	eq
 8006a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a18:	2500      	movne	r5, #0
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	bfc4      	itt	gt
 8006a1e:	1a9b      	subgt	r3, r3, r2
 8006a20:	18ed      	addgt	r5, r5, r3
 8006a22:	f04f 0900 	mov.w	r9, #0
 8006a26:	341a      	adds	r4, #26
 8006a28:	454d      	cmp	r5, r9
 8006a2a:	d11a      	bne.n	8006a62 <_printf_common+0xd6>
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e008      	b.n	8006a42 <_printf_common+0xb6>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4652      	mov	r2, sl
 8006a34:	4639      	mov	r1, r7
 8006a36:	4630      	mov	r0, r6
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d103      	bne.n	8006a46 <_printf_common+0xba>
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a46:	3501      	adds	r5, #1
 8006a48:	e7c3      	b.n	80069d2 <_printf_common+0x46>
 8006a4a:	18e1      	adds	r1, r4, r3
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	2030      	movs	r0, #48	; 0x30
 8006a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a54:	4422      	add	r2, r4
 8006a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a5e:	3302      	adds	r3, #2
 8006a60:	e7c5      	b.n	80069ee <_printf_common+0x62>
 8006a62:	2301      	movs	r3, #1
 8006a64:	4622      	mov	r2, r4
 8006a66:	4639      	mov	r1, r7
 8006a68:	4630      	mov	r0, r6
 8006a6a:	47c0      	blx	r8
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d0e6      	beq.n	8006a3e <_printf_common+0xb2>
 8006a70:	f109 0901 	add.w	r9, r9, #1
 8006a74:	e7d8      	b.n	8006a28 <_printf_common+0x9c>
	...

08006a78 <_printf_i>:
 8006a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a80:	460c      	mov	r4, r1
 8006a82:	7e09      	ldrb	r1, [r1, #24]
 8006a84:	b085      	sub	sp, #20
 8006a86:	296e      	cmp	r1, #110	; 0x6e
 8006a88:	4617      	mov	r7, r2
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	4698      	mov	r8, r3
 8006a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a90:	f000 80b3 	beq.w	8006bfa <_printf_i+0x182>
 8006a94:	d822      	bhi.n	8006adc <_printf_i+0x64>
 8006a96:	2963      	cmp	r1, #99	; 0x63
 8006a98:	d036      	beq.n	8006b08 <_printf_i+0x90>
 8006a9a:	d80a      	bhi.n	8006ab2 <_printf_i+0x3a>
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	f000 80b9 	beq.w	8006c14 <_printf_i+0x19c>
 8006aa2:	2958      	cmp	r1, #88	; 0x58
 8006aa4:	f000 8083 	beq.w	8006bae <_printf_i+0x136>
 8006aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ab0:	e032      	b.n	8006b18 <_printf_i+0xa0>
 8006ab2:	2964      	cmp	r1, #100	; 0x64
 8006ab4:	d001      	beq.n	8006aba <_printf_i+0x42>
 8006ab6:	2969      	cmp	r1, #105	; 0x69
 8006ab8:	d1f6      	bne.n	8006aa8 <_printf_i+0x30>
 8006aba:	6820      	ldr	r0, [r4, #0]
 8006abc:	6813      	ldr	r3, [r2, #0]
 8006abe:	0605      	lsls	r5, r0, #24
 8006ac0:	f103 0104 	add.w	r1, r3, #4
 8006ac4:	d52a      	bpl.n	8006b1c <_printf_i+0xa4>
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da03      	bge.n	8006ad6 <_printf_i+0x5e>
 8006ace:	222d      	movs	r2, #45	; 0x2d
 8006ad0:	425b      	negs	r3, r3
 8006ad2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ad6:	486f      	ldr	r0, [pc, #444]	; (8006c94 <_printf_i+0x21c>)
 8006ad8:	220a      	movs	r2, #10
 8006ada:	e039      	b.n	8006b50 <_printf_i+0xd8>
 8006adc:	2973      	cmp	r1, #115	; 0x73
 8006ade:	f000 809d 	beq.w	8006c1c <_printf_i+0x1a4>
 8006ae2:	d808      	bhi.n	8006af6 <_printf_i+0x7e>
 8006ae4:	296f      	cmp	r1, #111	; 0x6f
 8006ae6:	d020      	beq.n	8006b2a <_printf_i+0xb2>
 8006ae8:	2970      	cmp	r1, #112	; 0x70
 8006aea:	d1dd      	bne.n	8006aa8 <_printf_i+0x30>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	f043 0320 	orr.w	r3, r3, #32
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	e003      	b.n	8006afe <_printf_i+0x86>
 8006af6:	2975      	cmp	r1, #117	; 0x75
 8006af8:	d017      	beq.n	8006b2a <_printf_i+0xb2>
 8006afa:	2978      	cmp	r1, #120	; 0x78
 8006afc:	d1d4      	bne.n	8006aa8 <_printf_i+0x30>
 8006afe:	2378      	movs	r3, #120	; 0x78
 8006b00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b04:	4864      	ldr	r0, [pc, #400]	; (8006c98 <_printf_i+0x220>)
 8006b06:	e055      	b.n	8006bb4 <_printf_i+0x13c>
 8006b08:	6813      	ldr	r3, [r2, #0]
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6011      	str	r1, [r2, #0]
 8006b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e08c      	b.n	8006c36 <_printf_i+0x1be>
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6011      	str	r1, [r2, #0]
 8006b20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b24:	bf18      	it	ne
 8006b26:	b21b      	sxthne	r3, r3
 8006b28:	e7cf      	b.n	8006aca <_printf_i+0x52>
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	6825      	ldr	r5, [r4, #0]
 8006b2e:	1d18      	adds	r0, r3, #4
 8006b30:	6010      	str	r0, [r2, #0]
 8006b32:	0628      	lsls	r0, r5, #24
 8006b34:	d501      	bpl.n	8006b3a <_printf_i+0xc2>
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	e002      	b.n	8006b40 <_printf_i+0xc8>
 8006b3a:	0668      	lsls	r0, r5, #25
 8006b3c:	d5fb      	bpl.n	8006b36 <_printf_i+0xbe>
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	4854      	ldr	r0, [pc, #336]	; (8006c94 <_printf_i+0x21c>)
 8006b42:	296f      	cmp	r1, #111	; 0x6f
 8006b44:	bf14      	ite	ne
 8006b46:	220a      	movne	r2, #10
 8006b48:	2208      	moveq	r2, #8
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b50:	6865      	ldr	r5, [r4, #4]
 8006b52:	60a5      	str	r5, [r4, #8]
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	f2c0 8095 	blt.w	8006c84 <_printf_i+0x20c>
 8006b5a:	6821      	ldr	r1, [r4, #0]
 8006b5c:	f021 0104 	bic.w	r1, r1, #4
 8006b60:	6021      	str	r1, [r4, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d13d      	bne.n	8006be2 <_printf_i+0x16a>
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	f040 808e 	bne.w	8006c88 <_printf_i+0x210>
 8006b6c:	4665      	mov	r5, ip
 8006b6e:	2a08      	cmp	r2, #8
 8006b70:	d10b      	bne.n	8006b8a <_printf_i+0x112>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	07db      	lsls	r3, r3, #31
 8006b76:	d508      	bpl.n	8006b8a <_printf_i+0x112>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	6862      	ldr	r2, [r4, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	bfde      	ittt	le
 8006b80:	2330      	movle	r3, #48	; 0x30
 8006b82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b8a:	ebac 0305 	sub.w	r3, ip, r5
 8006b8e:	6123      	str	r3, [r4, #16]
 8006b90:	f8cd 8000 	str.w	r8, [sp]
 8006b94:	463b      	mov	r3, r7
 8006b96:	aa03      	add	r2, sp, #12
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff fef6 	bl	800698c <_printf_common>
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d14d      	bne.n	8006c40 <_printf_i+0x1c8>
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	b005      	add	sp, #20
 8006baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bae:	4839      	ldr	r0, [pc, #228]	; (8006c94 <_printf_i+0x21c>)
 8006bb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006bb4:	6813      	ldr	r3, [r2, #0]
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	1d1d      	adds	r5, r3, #4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6015      	str	r5, [r2, #0]
 8006bbe:	060a      	lsls	r2, r1, #24
 8006bc0:	d50b      	bpl.n	8006bda <_printf_i+0x162>
 8006bc2:	07ca      	lsls	r2, r1, #31
 8006bc4:	bf44      	itt	mi
 8006bc6:	f041 0120 	orrmi.w	r1, r1, #32
 8006bca:	6021      	strmi	r1, [r4, #0]
 8006bcc:	b91b      	cbnz	r3, 8006bd6 <_printf_i+0x15e>
 8006bce:	6822      	ldr	r2, [r4, #0]
 8006bd0:	f022 0220 	bic.w	r2, r2, #32
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	e7b7      	b.n	8006b4a <_printf_i+0xd2>
 8006bda:	064d      	lsls	r5, r1, #25
 8006bdc:	bf48      	it	mi
 8006bde:	b29b      	uxthmi	r3, r3
 8006be0:	e7ef      	b.n	8006bc2 <_printf_i+0x14a>
 8006be2:	4665      	mov	r5, ip
 8006be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006be8:	fb02 3311 	mls	r3, r2, r1, r3
 8006bec:	5cc3      	ldrb	r3, [r0, r3]
 8006bee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	d1f5      	bne.n	8006be4 <_printf_i+0x16c>
 8006bf8:	e7b9      	b.n	8006b6e <_printf_i+0xf6>
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	6961      	ldr	r1, [r4, #20]
 8006c00:	1d18      	adds	r0, r3, #4
 8006c02:	6010      	str	r0, [r2, #0]
 8006c04:	0628      	lsls	r0, r5, #24
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	d501      	bpl.n	8006c0e <_printf_i+0x196>
 8006c0a:	6019      	str	r1, [r3, #0]
 8006c0c:	e002      	b.n	8006c14 <_printf_i+0x19c>
 8006c0e:	066a      	lsls	r2, r5, #25
 8006c10:	d5fb      	bpl.n	8006c0a <_printf_i+0x192>
 8006c12:	8019      	strh	r1, [r3, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	6123      	str	r3, [r4, #16]
 8006c18:	4665      	mov	r5, ip
 8006c1a:	e7b9      	b.n	8006b90 <_printf_i+0x118>
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	1d19      	adds	r1, r3, #4
 8006c20:	6011      	str	r1, [r2, #0]
 8006c22:	681d      	ldr	r5, [r3, #0]
 8006c24:	6862      	ldr	r2, [r4, #4]
 8006c26:	2100      	movs	r1, #0
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f7f9 fad9 	bl	80001e0 <memchr>
 8006c2e:	b108      	cbz	r0, 8006c34 <_printf_i+0x1bc>
 8006c30:	1b40      	subs	r0, r0, r5
 8006c32:	6060      	str	r0, [r4, #4]
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c3e:	e7a7      	b.n	8006b90 <_printf_i+0x118>
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	462a      	mov	r2, r5
 8006c44:	4639      	mov	r1, r7
 8006c46:	4630      	mov	r0, r6
 8006c48:	47c0      	blx	r8
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d0aa      	beq.n	8006ba4 <_printf_i+0x12c>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	079b      	lsls	r3, r3, #30
 8006c52:	d413      	bmi.n	8006c7c <_printf_i+0x204>
 8006c54:	68e0      	ldr	r0, [r4, #12]
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	4298      	cmp	r0, r3
 8006c5a:	bfb8      	it	lt
 8006c5c:	4618      	movlt	r0, r3
 8006c5e:	e7a3      	b.n	8006ba8 <_printf_i+0x130>
 8006c60:	2301      	movs	r3, #1
 8006c62:	464a      	mov	r2, r9
 8006c64:	4639      	mov	r1, r7
 8006c66:	4630      	mov	r0, r6
 8006c68:	47c0      	blx	r8
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	d09a      	beq.n	8006ba4 <_printf_i+0x12c>
 8006c6e:	3501      	adds	r5, #1
 8006c70:	68e3      	ldr	r3, [r4, #12]
 8006c72:	9a03      	ldr	r2, [sp, #12]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	dcf2      	bgt.n	8006c60 <_printf_i+0x1e8>
 8006c7a:	e7eb      	b.n	8006c54 <_printf_i+0x1dc>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	f104 0919 	add.w	r9, r4, #25
 8006c82:	e7f5      	b.n	8006c70 <_printf_i+0x1f8>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1ac      	bne.n	8006be2 <_printf_i+0x16a>
 8006c88:	7803      	ldrb	r3, [r0, #0]
 8006c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c92:	e76c      	b.n	8006b6e <_printf_i+0xf6>
 8006c94:	08009fde 	.word	0x08009fde
 8006c98:	08009fef 	.word	0x08009fef

08006c9c <_scanf_float>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	688b      	ldr	r3, [r1, #8]
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	1e5a      	subs	r2, r3, #1
 8006ca8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006cac:	b087      	sub	sp, #28
 8006cae:	bf83      	ittte	hi
 8006cb0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006cb4:	189b      	addhi	r3, r3, r2
 8006cb6:	9301      	strhi	r3, [sp, #4]
 8006cb8:	2300      	movls	r3, #0
 8006cba:	bf86      	itte	hi
 8006cbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cc0:	608b      	strhi	r3, [r1, #8]
 8006cc2:	9301      	strls	r3, [sp, #4]
 8006cc4:	680b      	ldr	r3, [r1, #0]
 8006cc6:	4688      	mov	r8, r1
 8006cc8:	f04f 0b00 	mov.w	fp, #0
 8006ccc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006cd0:	f848 3b1c 	str.w	r3, [r8], #28
 8006cd4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006cd8:	4607      	mov	r7, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4645      	mov	r5, r8
 8006cde:	465a      	mov	r2, fp
 8006ce0:	46d9      	mov	r9, fp
 8006ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8006ce6:	68a1      	ldr	r1, [r4, #8]
 8006ce8:	b181      	cbz	r1, 8006d0c <_scanf_float+0x70>
 8006cea:	6833      	ldr	r3, [r6, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b49      	cmp	r3, #73	; 0x49
 8006cf0:	d071      	beq.n	8006dd6 <_scanf_float+0x13a>
 8006cf2:	d84d      	bhi.n	8006d90 <_scanf_float+0xf4>
 8006cf4:	2b39      	cmp	r3, #57	; 0x39
 8006cf6:	d840      	bhi.n	8006d7a <_scanf_float+0xde>
 8006cf8:	2b31      	cmp	r3, #49	; 0x31
 8006cfa:	f080 8088 	bcs.w	8006e0e <_scanf_float+0x172>
 8006cfe:	2b2d      	cmp	r3, #45	; 0x2d
 8006d00:	f000 8090 	beq.w	8006e24 <_scanf_float+0x188>
 8006d04:	d815      	bhi.n	8006d32 <_scanf_float+0x96>
 8006d06:	2b2b      	cmp	r3, #43	; 0x2b
 8006d08:	f000 808c 	beq.w	8006e24 <_scanf_float+0x188>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	d003      	beq.n	8006d1a <_scanf_float+0x7e>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	3a01      	subs	r2, #1
 8006d1c:	2a01      	cmp	r2, #1
 8006d1e:	f200 80ea 	bhi.w	8006ef6 <_scanf_float+0x25a>
 8006d22:	4545      	cmp	r5, r8
 8006d24:	f200 80dc 	bhi.w	8006ee0 <_scanf_float+0x244>
 8006d28:	2601      	movs	r6, #1
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	b007      	add	sp, #28
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d32:	2b2e      	cmp	r3, #46	; 0x2e
 8006d34:	f000 809f 	beq.w	8006e76 <_scanf_float+0x1da>
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d1e7      	bne.n	8006d0c <_scanf_float+0x70>
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006d42:	d064      	beq.n	8006e0e <_scanf_float+0x172>
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006d4a:	6020      	str	r0, [r4, #0]
 8006d4c:	f109 0901 	add.w	r9, r9, #1
 8006d50:	b11b      	cbz	r3, 8006d5a <_scanf_float+0xbe>
 8006d52:	3b01      	subs	r3, #1
 8006d54:	3101      	adds	r1, #1
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	60a1      	str	r1, [r4, #8]
 8006d5a:	68a3      	ldr	r3, [r4, #8]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	60a3      	str	r3, [r4, #8]
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	3301      	adds	r3, #1
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	6873      	ldr	r3, [r6, #4]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	6073      	str	r3, [r6, #4]
 8006d6e:	f340 80ac 	ble.w	8006eca <_scanf_float+0x22e>
 8006d72:	6833      	ldr	r3, [r6, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	6033      	str	r3, [r6, #0]
 8006d78:	e7b5      	b.n	8006ce6 <_scanf_float+0x4a>
 8006d7a:	2b45      	cmp	r3, #69	; 0x45
 8006d7c:	f000 8085 	beq.w	8006e8a <_scanf_float+0x1ee>
 8006d80:	2b46      	cmp	r3, #70	; 0x46
 8006d82:	d06a      	beq.n	8006e5a <_scanf_float+0x1be>
 8006d84:	2b41      	cmp	r3, #65	; 0x41
 8006d86:	d1c1      	bne.n	8006d0c <_scanf_float+0x70>
 8006d88:	2a01      	cmp	r2, #1
 8006d8a:	d1bf      	bne.n	8006d0c <_scanf_float+0x70>
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	e046      	b.n	8006e1e <_scanf_float+0x182>
 8006d90:	2b65      	cmp	r3, #101	; 0x65
 8006d92:	d07a      	beq.n	8006e8a <_scanf_float+0x1ee>
 8006d94:	d818      	bhi.n	8006dc8 <_scanf_float+0x12c>
 8006d96:	2b54      	cmp	r3, #84	; 0x54
 8006d98:	d066      	beq.n	8006e68 <_scanf_float+0x1cc>
 8006d9a:	d811      	bhi.n	8006dc0 <_scanf_float+0x124>
 8006d9c:	2b4e      	cmp	r3, #78	; 0x4e
 8006d9e:	d1b5      	bne.n	8006d0c <_scanf_float+0x70>
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d146      	bne.n	8006e32 <_scanf_float+0x196>
 8006da4:	f1b9 0f00 	cmp.w	r9, #0
 8006da8:	d145      	bne.n	8006e36 <_scanf_float+0x19a>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006db0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006db4:	d13f      	bne.n	8006e36 <_scanf_float+0x19a>
 8006db6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006dba:	6021      	str	r1, [r4, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	e02e      	b.n	8006e1e <_scanf_float+0x182>
 8006dc0:	2b59      	cmp	r3, #89	; 0x59
 8006dc2:	d01e      	beq.n	8006e02 <_scanf_float+0x166>
 8006dc4:	2b61      	cmp	r3, #97	; 0x61
 8006dc6:	e7de      	b.n	8006d86 <_scanf_float+0xea>
 8006dc8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dca:	d0e9      	beq.n	8006da0 <_scanf_float+0x104>
 8006dcc:	d815      	bhi.n	8006dfa <_scanf_float+0x15e>
 8006dce:	2b66      	cmp	r3, #102	; 0x66
 8006dd0:	d043      	beq.n	8006e5a <_scanf_float+0x1be>
 8006dd2:	2b69      	cmp	r3, #105	; 0x69
 8006dd4:	d19a      	bne.n	8006d0c <_scanf_float+0x70>
 8006dd6:	f1bb 0f00 	cmp.w	fp, #0
 8006dda:	d138      	bne.n	8006e4e <_scanf_float+0x1b2>
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	d197      	bne.n	8006d12 <_scanf_float+0x76>
 8006de2:	6821      	ldr	r1, [r4, #0]
 8006de4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006de8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006dec:	d195      	bne.n	8006d1a <_scanf_float+0x7e>
 8006dee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006df2:	6021      	str	r1, [r4, #0]
 8006df4:	f04f 0b01 	mov.w	fp, #1
 8006df8:	e011      	b.n	8006e1e <_scanf_float+0x182>
 8006dfa:	2b74      	cmp	r3, #116	; 0x74
 8006dfc:	d034      	beq.n	8006e68 <_scanf_float+0x1cc>
 8006dfe:	2b79      	cmp	r3, #121	; 0x79
 8006e00:	d184      	bne.n	8006d0c <_scanf_float+0x70>
 8006e02:	f1bb 0f07 	cmp.w	fp, #7
 8006e06:	d181      	bne.n	8006d0c <_scanf_float+0x70>
 8006e08:	f04f 0b08 	mov.w	fp, #8
 8006e0c:	e007      	b.n	8006e1e <_scanf_float+0x182>
 8006e0e:	eb12 0f0b 	cmn.w	r2, fp
 8006e12:	f47f af7b 	bne.w	8006d0c <_scanf_float+0x70>
 8006e16:	6821      	ldr	r1, [r4, #0]
 8006e18:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006e1c:	6021      	str	r1, [r4, #0]
 8006e1e:	702b      	strb	r3, [r5, #0]
 8006e20:	3501      	adds	r5, #1
 8006e22:	e79a      	b.n	8006d5a <_scanf_float+0xbe>
 8006e24:	6821      	ldr	r1, [r4, #0]
 8006e26:	0608      	lsls	r0, r1, #24
 8006e28:	f57f af70 	bpl.w	8006d0c <_scanf_float+0x70>
 8006e2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e30:	e7f4      	b.n	8006e1c <_scanf_float+0x180>
 8006e32:	2a02      	cmp	r2, #2
 8006e34:	d047      	beq.n	8006ec6 <_scanf_float+0x22a>
 8006e36:	f1bb 0f01 	cmp.w	fp, #1
 8006e3a:	d003      	beq.n	8006e44 <_scanf_float+0x1a8>
 8006e3c:	f1bb 0f04 	cmp.w	fp, #4
 8006e40:	f47f af64 	bne.w	8006d0c <_scanf_float+0x70>
 8006e44:	f10b 0b01 	add.w	fp, fp, #1
 8006e48:	fa5f fb8b 	uxtb.w	fp, fp
 8006e4c:	e7e7      	b.n	8006e1e <_scanf_float+0x182>
 8006e4e:	f1bb 0f03 	cmp.w	fp, #3
 8006e52:	d0f7      	beq.n	8006e44 <_scanf_float+0x1a8>
 8006e54:	f1bb 0f05 	cmp.w	fp, #5
 8006e58:	e7f2      	b.n	8006e40 <_scanf_float+0x1a4>
 8006e5a:	f1bb 0f02 	cmp.w	fp, #2
 8006e5e:	f47f af55 	bne.w	8006d0c <_scanf_float+0x70>
 8006e62:	f04f 0b03 	mov.w	fp, #3
 8006e66:	e7da      	b.n	8006e1e <_scanf_float+0x182>
 8006e68:	f1bb 0f06 	cmp.w	fp, #6
 8006e6c:	f47f af4e 	bne.w	8006d0c <_scanf_float+0x70>
 8006e70:	f04f 0b07 	mov.w	fp, #7
 8006e74:	e7d3      	b.n	8006e1e <_scanf_float+0x182>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	0588      	lsls	r0, r1, #22
 8006e7a:	f57f af47 	bpl.w	8006d0c <_scanf_float+0x70>
 8006e7e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006e82:	6021      	str	r1, [r4, #0]
 8006e84:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e88:	e7c9      	b.n	8006e1e <_scanf_float+0x182>
 8006e8a:	6821      	ldr	r1, [r4, #0]
 8006e8c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006e90:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006e94:	d006      	beq.n	8006ea4 <_scanf_float+0x208>
 8006e96:	0548      	lsls	r0, r1, #21
 8006e98:	f57f af38 	bpl.w	8006d0c <_scanf_float+0x70>
 8006e9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ea0:	f43f af3b 	beq.w	8006d1a <_scanf_float+0x7e>
 8006ea4:	0588      	lsls	r0, r1, #22
 8006ea6:	bf58      	it	pl
 8006ea8:	9802      	ldrpl	r0, [sp, #8]
 8006eaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006eae:	bf58      	it	pl
 8006eb0:	eba9 0000 	subpl.w	r0, r9, r0
 8006eb4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006eb8:	bf58      	it	pl
 8006eba:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006ebe:	6021      	str	r1, [r4, #0]
 8006ec0:	f04f 0900 	mov.w	r9, #0
 8006ec4:	e7ab      	b.n	8006e1e <_scanf_float+0x182>
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	e7a9      	b.n	8006e1e <_scanf_float+0x182>
 8006eca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ece:	9205      	str	r2, [sp, #20]
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	4798      	blx	r3
 8006ed6:	9a05      	ldr	r2, [sp, #20]
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	f43f af04 	beq.w	8006ce6 <_scanf_float+0x4a>
 8006ede:	e715      	b.n	8006d0c <_scanf_float+0x70>
 8006ee0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ee8:	4632      	mov	r2, r6
 8006eea:	4638      	mov	r0, r7
 8006eec:	4798      	blx	r3
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	e715      	b.n	8006d22 <_scanf_float+0x86>
 8006ef6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006efa:	2b06      	cmp	r3, #6
 8006efc:	d80a      	bhi.n	8006f14 <_scanf_float+0x278>
 8006efe:	f1bb 0f02 	cmp.w	fp, #2
 8006f02:	d968      	bls.n	8006fd6 <_scanf_float+0x33a>
 8006f04:	f1ab 0b03 	sub.w	fp, fp, #3
 8006f08:	fa5f fb8b 	uxtb.w	fp, fp
 8006f0c:	eba5 0b0b 	sub.w	fp, r5, fp
 8006f10:	455d      	cmp	r5, fp
 8006f12:	d14b      	bne.n	8006fac <_scanf_float+0x310>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	05da      	lsls	r2, r3, #23
 8006f18:	d51f      	bpl.n	8006f5a <_scanf_float+0x2be>
 8006f1a:	055b      	lsls	r3, r3, #21
 8006f1c:	d468      	bmi.n	8006ff0 <_scanf_float+0x354>
 8006f1e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	2965      	cmp	r1, #101	; 0x65
 8006f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f2a:	f105 3bff 	add.w	fp, r5, #4294967295
 8006f2e:	6123      	str	r3, [r4, #16]
 8006f30:	d00d      	beq.n	8006f4e <_scanf_float+0x2b2>
 8006f32:	2945      	cmp	r1, #69	; 0x45
 8006f34:	d00b      	beq.n	8006f4e <_scanf_float+0x2b2>
 8006f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	4798      	blx	r3
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	f1a5 0b02 	sub.w	fp, r5, #2
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f52:	4632      	mov	r2, r6
 8006f54:	4638      	mov	r0, r7
 8006f56:	4798      	blx	r3
 8006f58:	465d      	mov	r5, fp
 8006f5a:	6826      	ldr	r6, [r4, #0]
 8006f5c:	f016 0610 	ands.w	r6, r6, #16
 8006f60:	d17a      	bne.n	8007058 <_scanf_float+0x3bc>
 8006f62:	702e      	strb	r6, [r5, #0]
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6e:	d142      	bne.n	8006ff6 <_scanf_float+0x35a>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	eba9 0303 	sub.w	r3, r9, r3
 8006f76:	425a      	negs	r2, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d149      	bne.n	8007010 <_scanf_float+0x374>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4641      	mov	r1, r8
 8006f80:	4638      	mov	r0, r7
 8006f82:	f000 fea5 	bl	8007cd0 <_strtod_r>
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f8da 3000 	ldr.w	r3, [sl]
 8006f8c:	f015 0f02 	tst.w	r5, #2
 8006f90:	f103 0204 	add.w	r2, r3, #4
 8006f94:	ec59 8b10 	vmov	r8, r9, d0
 8006f98:	f8ca 2000 	str.w	r2, [sl]
 8006f9c:	d043      	beq.n	8007026 <_scanf_float+0x38a>
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	e9c3 8900 	strd	r8, r9, [r3]
 8006fa4:	68e3      	ldr	r3, [r4, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60e3      	str	r3, [r4, #12]
 8006faa:	e6be      	b.n	8006d2a <_scanf_float+0x8e>
 8006fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	4798      	blx	r3
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	e7a6      	b.n	8006f10 <_scanf_float+0x274>
 8006fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fc6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006fca:	4632      	mov	r2, r6
 8006fcc:	4638      	mov	r0, r7
 8006fce:	4798      	blx	r3
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	4545      	cmp	r5, r8
 8006fd8:	d8f3      	bhi.n	8006fc2 <_scanf_float+0x326>
 8006fda:	e6a5      	b.n	8006d28 <_scanf_float+0x8c>
 8006fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fe0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	4798      	blx	r3
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	4545      	cmp	r5, r8
 8006ff2:	d8f3      	bhi.n	8006fdc <_scanf_float+0x340>
 8006ff4:	e698      	b.n	8006d28 <_scanf_float+0x8c>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0bf      	beq.n	8006f7c <_scanf_float+0x2e0>
 8006ffc:	9904      	ldr	r1, [sp, #16]
 8006ffe:	230a      	movs	r3, #10
 8007000:	4632      	mov	r2, r6
 8007002:	3101      	adds	r1, #1
 8007004:	4638      	mov	r0, r7
 8007006:	f000 feef 	bl	8007de8 <_strtol_r>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	9d04      	ldr	r5, [sp, #16]
 800700e:	1ac2      	subs	r2, r0, r3
 8007010:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007014:	429d      	cmp	r5, r3
 8007016:	bf28      	it	cs
 8007018:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800701c:	490f      	ldr	r1, [pc, #60]	; (800705c <_scanf_float+0x3c0>)
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f824 	bl	800706c <siprintf>
 8007024:	e7aa      	b.n	8006f7c <_scanf_float+0x2e0>
 8007026:	f015 0504 	ands.w	r5, r5, #4
 800702a:	d1b8      	bne.n	8006f9e <_scanf_float+0x302>
 800702c:	681f      	ldr	r7, [r3, #0]
 800702e:	ee10 2a10 	vmov	r2, s0
 8007032:	464b      	mov	r3, r9
 8007034:	ee10 0a10 	vmov	r0, s0
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fd77 	bl	8000b2c <__aeabi_dcmpun>
 800703e:	b128      	cbz	r0, 800704c <_scanf_float+0x3b0>
 8007040:	4628      	mov	r0, r5
 8007042:	f000 f80d 	bl	8007060 <nanf>
 8007046:	ed87 0a00 	vstr	s0, [r7]
 800704a:	e7ab      	b.n	8006fa4 <_scanf_float+0x308>
 800704c:	4640      	mov	r0, r8
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fdca 	bl	8000be8 <__aeabi_d2f>
 8007054:	6038      	str	r0, [r7, #0]
 8007056:	e7a5      	b.n	8006fa4 <_scanf_float+0x308>
 8007058:	2600      	movs	r6, #0
 800705a:	e666      	b.n	8006d2a <_scanf_float+0x8e>
 800705c:	0800a000 	.word	0x0800a000

08007060 <nanf>:
 8007060:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007068 <nanf+0x8>
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	7fc00000 	.word	0x7fc00000

0800706c <siprintf>:
 800706c:	b40e      	push	{r1, r2, r3}
 800706e:	b500      	push	{lr}
 8007070:	b09c      	sub	sp, #112	; 0x70
 8007072:	ab1d      	add	r3, sp, #116	; 0x74
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800707c:	4809      	ldr	r0, [pc, #36]	; (80070a4 <siprintf+0x38>)
 800707e:	9107      	str	r1, [sp, #28]
 8007080:	9104      	str	r1, [sp, #16]
 8007082:	4909      	ldr	r1, [pc, #36]	; (80070a8 <siprintf+0x3c>)
 8007084:	f853 2b04 	ldr.w	r2, [r3], #4
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	a902      	add	r1, sp, #8
 8007090:	f002 fd70 	bl	8009b74 <_svfiprintf_r>
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	b01c      	add	sp, #112	; 0x70
 800709c:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a0:	b003      	add	sp, #12
 80070a2:	4770      	bx	lr
 80070a4:	2000000c 	.word	0x2000000c
 80070a8:	ffff0208 	.word	0xffff0208

080070ac <sulp>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	ec45 4b10 	vmov	d0, r4, r5
 80070b6:	4616      	mov	r6, r2
 80070b8:	f002 fb18 	bl	80096ec <__ulp>
 80070bc:	ec51 0b10 	vmov	r0, r1, d0
 80070c0:	b17e      	cbz	r6, 80070e2 <sulp+0x36>
 80070c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dd09      	ble.n	80070e2 <sulp+0x36>
 80070ce:	051b      	lsls	r3, r3, #20
 80070d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070d4:	2400      	movs	r4, #0
 80070d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070da:	4622      	mov	r2, r4
 80070dc:	462b      	mov	r3, r5
 80070de:	f7f9 fa8b 	bl	80005f8 <__aeabi_dmul>
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	0000      	movs	r0, r0
	...

080070e8 <_strtod_l>:
 80070e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ec:	461f      	mov	r7, r3
 80070ee:	b0a1      	sub	sp, #132	; 0x84
 80070f0:	2300      	movs	r3, #0
 80070f2:	4681      	mov	r9, r0
 80070f4:	4638      	mov	r0, r7
 80070f6:	460e      	mov	r6, r1
 80070f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80070fa:	931c      	str	r3, [sp, #112]	; 0x70
 80070fc:	f001 fff5 	bl	80090ea <__localeconv_l>
 8007100:	4680      	mov	r8, r0
 8007102:	6800      	ldr	r0, [r0, #0]
 8007104:	f7f9 f864 	bl	80001d0 <strlen>
 8007108:	f04f 0a00 	mov.w	sl, #0
 800710c:	4604      	mov	r4, r0
 800710e:	f04f 0b00 	mov.w	fp, #0
 8007112:	961b      	str	r6, [sp, #108]	; 0x6c
 8007114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	2a0d      	cmp	r2, #13
 800711a:	d832      	bhi.n	8007182 <_strtod_l+0x9a>
 800711c:	2a09      	cmp	r2, #9
 800711e:	d236      	bcs.n	800718e <_strtod_l+0xa6>
 8007120:	2a00      	cmp	r2, #0
 8007122:	d03e      	beq.n	80071a2 <_strtod_l+0xba>
 8007124:	2300      	movs	r3, #0
 8007126:	930d      	str	r3, [sp, #52]	; 0x34
 8007128:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800712a:	782b      	ldrb	r3, [r5, #0]
 800712c:	2b30      	cmp	r3, #48	; 0x30
 800712e:	f040 80ac 	bne.w	800728a <_strtod_l+0x1a2>
 8007132:	786b      	ldrb	r3, [r5, #1]
 8007134:	2b58      	cmp	r3, #88	; 0x58
 8007136:	d001      	beq.n	800713c <_strtod_l+0x54>
 8007138:	2b78      	cmp	r3, #120	; 0x78
 800713a:	d167      	bne.n	800720c <_strtod_l+0x124>
 800713c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	ab1c      	add	r3, sp, #112	; 0x70
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	9702      	str	r7, [sp, #8]
 8007146:	ab1d      	add	r3, sp, #116	; 0x74
 8007148:	4a88      	ldr	r2, [pc, #544]	; (800736c <_strtod_l+0x284>)
 800714a:	a91b      	add	r1, sp, #108	; 0x6c
 800714c:	4648      	mov	r0, r9
 800714e:	f001 fcf2 	bl	8008b36 <__gethex>
 8007152:	f010 0407 	ands.w	r4, r0, #7
 8007156:	4606      	mov	r6, r0
 8007158:	d005      	beq.n	8007166 <_strtod_l+0x7e>
 800715a:	2c06      	cmp	r4, #6
 800715c:	d12b      	bne.n	80071b6 <_strtod_l+0xce>
 800715e:	3501      	adds	r5, #1
 8007160:	2300      	movs	r3, #0
 8007162:	951b      	str	r5, [sp, #108]	; 0x6c
 8007164:	930d      	str	r3, [sp, #52]	; 0x34
 8007166:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007168:	2b00      	cmp	r3, #0
 800716a:	f040 859a 	bne.w	8007ca2 <_strtod_l+0xbba>
 800716e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007170:	b1e3      	cbz	r3, 80071ac <_strtod_l+0xc4>
 8007172:	4652      	mov	r2, sl
 8007174:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007178:	ec43 2b10 	vmov	d0, r2, r3
 800717c:	b021      	add	sp, #132	; 0x84
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	2a2b      	cmp	r2, #43	; 0x2b
 8007184:	d015      	beq.n	80071b2 <_strtod_l+0xca>
 8007186:	2a2d      	cmp	r2, #45	; 0x2d
 8007188:	d004      	beq.n	8007194 <_strtod_l+0xac>
 800718a:	2a20      	cmp	r2, #32
 800718c:	d1ca      	bne.n	8007124 <_strtod_l+0x3c>
 800718e:	3301      	adds	r3, #1
 8007190:	931b      	str	r3, [sp, #108]	; 0x6c
 8007192:	e7bf      	b.n	8007114 <_strtod_l+0x2c>
 8007194:	2201      	movs	r2, #1
 8007196:	920d      	str	r2, [sp, #52]	; 0x34
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	921b      	str	r2, [sp, #108]	; 0x6c
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1c2      	bne.n	8007128 <_strtod_l+0x40>
 80071a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f040 8579 	bne.w	8007c9e <_strtod_l+0xbb6>
 80071ac:	4652      	mov	r2, sl
 80071ae:	465b      	mov	r3, fp
 80071b0:	e7e2      	b.n	8007178 <_strtod_l+0x90>
 80071b2:	2200      	movs	r2, #0
 80071b4:	e7ef      	b.n	8007196 <_strtod_l+0xae>
 80071b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80071b8:	b13a      	cbz	r2, 80071ca <_strtod_l+0xe2>
 80071ba:	2135      	movs	r1, #53	; 0x35
 80071bc:	a81e      	add	r0, sp, #120	; 0x78
 80071be:	f002 fb8d 	bl	80098dc <__copybits>
 80071c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071c4:	4648      	mov	r0, r9
 80071c6:	f001 fffa 	bl	80091be <_Bfree>
 80071ca:	3c01      	subs	r4, #1
 80071cc:	2c04      	cmp	r4, #4
 80071ce:	d806      	bhi.n	80071de <_strtod_l+0xf6>
 80071d0:	e8df f004 	tbb	[pc, r4]
 80071d4:	1714030a 	.word	0x1714030a
 80071d8:	0a          	.byte	0x0a
 80071d9:	00          	.byte	0x00
 80071da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80071de:	0730      	lsls	r0, r6, #28
 80071e0:	d5c1      	bpl.n	8007166 <_strtod_l+0x7e>
 80071e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80071e6:	e7be      	b.n	8007166 <_strtod_l+0x7e>
 80071e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80071ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80071ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071fa:	e7f0      	b.n	80071de <_strtod_l+0xf6>
 80071fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007370 <_strtod_l+0x288>
 8007200:	e7ed      	b.n	80071de <_strtod_l+0xf6>
 8007202:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007206:	f04f 3aff 	mov.w	sl, #4294967295
 800720a:	e7e8      	b.n	80071de <_strtod_l+0xf6>
 800720c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	921b      	str	r2, [sp, #108]	; 0x6c
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b30      	cmp	r3, #48	; 0x30
 8007216:	d0f9      	beq.n	800720c <_strtod_l+0x124>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0a4      	beq.n	8007166 <_strtod_l+0x7e>
 800721c:	2301      	movs	r3, #1
 800721e:	2500      	movs	r5, #0
 8007220:	9306      	str	r3, [sp, #24]
 8007222:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007224:	9308      	str	r3, [sp, #32]
 8007226:	9507      	str	r5, [sp, #28]
 8007228:	9505      	str	r5, [sp, #20]
 800722a:	220a      	movs	r2, #10
 800722c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800722e:	7807      	ldrb	r7, [r0, #0]
 8007230:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007234:	b2d9      	uxtb	r1, r3
 8007236:	2909      	cmp	r1, #9
 8007238:	d929      	bls.n	800728e <_strtod_l+0x1a6>
 800723a:	4622      	mov	r2, r4
 800723c:	f8d8 1000 	ldr.w	r1, [r8]
 8007240:	f002 fda0 	bl	8009d84 <strncmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	d031      	beq.n	80072ac <_strtod_l+0x1c4>
 8007248:	2000      	movs	r0, #0
 800724a:	9c05      	ldr	r4, [sp, #20]
 800724c:	9004      	str	r0, [sp, #16]
 800724e:	463b      	mov	r3, r7
 8007250:	4602      	mov	r2, r0
 8007252:	2b65      	cmp	r3, #101	; 0x65
 8007254:	d001      	beq.n	800725a <_strtod_l+0x172>
 8007256:	2b45      	cmp	r3, #69	; 0x45
 8007258:	d114      	bne.n	8007284 <_strtod_l+0x19c>
 800725a:	b924      	cbnz	r4, 8007266 <_strtod_l+0x17e>
 800725c:	b910      	cbnz	r0, 8007264 <_strtod_l+0x17c>
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d09e      	beq.n	80071a2 <_strtod_l+0xba>
 8007264:	2400      	movs	r4, #0
 8007266:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007268:	1c73      	adds	r3, r6, #1
 800726a:	931b      	str	r3, [sp, #108]	; 0x6c
 800726c:	7873      	ldrb	r3, [r6, #1]
 800726e:	2b2b      	cmp	r3, #43	; 0x2b
 8007270:	d078      	beq.n	8007364 <_strtod_l+0x27c>
 8007272:	2b2d      	cmp	r3, #45	; 0x2d
 8007274:	d070      	beq.n	8007358 <_strtod_l+0x270>
 8007276:	f04f 0c00 	mov.w	ip, #0
 800727a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800727e:	2f09      	cmp	r7, #9
 8007280:	d97c      	bls.n	800737c <_strtod_l+0x294>
 8007282:	961b      	str	r6, [sp, #108]	; 0x6c
 8007284:	f04f 0e00 	mov.w	lr, #0
 8007288:	e09a      	b.n	80073c0 <_strtod_l+0x2d8>
 800728a:	2300      	movs	r3, #0
 800728c:	e7c7      	b.n	800721e <_strtod_l+0x136>
 800728e:	9905      	ldr	r1, [sp, #20]
 8007290:	2908      	cmp	r1, #8
 8007292:	bfdd      	ittte	le
 8007294:	9907      	ldrle	r1, [sp, #28]
 8007296:	fb02 3301 	mlale	r3, r2, r1, r3
 800729a:	9307      	strle	r3, [sp, #28]
 800729c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80072a0:	9b05      	ldr	r3, [sp, #20]
 80072a2:	3001      	adds	r0, #1
 80072a4:	3301      	adds	r3, #1
 80072a6:	9305      	str	r3, [sp, #20]
 80072a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80072aa:	e7bf      	b.n	800722c <_strtod_l+0x144>
 80072ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072ae:	191a      	adds	r2, r3, r4
 80072b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80072b2:	9a05      	ldr	r2, [sp, #20]
 80072b4:	5d1b      	ldrb	r3, [r3, r4]
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d037      	beq.n	800732a <_strtod_l+0x242>
 80072ba:	9c05      	ldr	r4, [sp, #20]
 80072bc:	4602      	mov	r2, r0
 80072be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80072c2:	2909      	cmp	r1, #9
 80072c4:	d913      	bls.n	80072ee <_strtod_l+0x206>
 80072c6:	2101      	movs	r1, #1
 80072c8:	9104      	str	r1, [sp, #16]
 80072ca:	e7c2      	b.n	8007252 <_strtod_l+0x16a>
 80072cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	3001      	adds	r0, #1
 80072d6:	2b30      	cmp	r3, #48	; 0x30
 80072d8:	d0f8      	beq.n	80072cc <_strtod_l+0x1e4>
 80072da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80072de:	2a08      	cmp	r2, #8
 80072e0:	f200 84e4 	bhi.w	8007cac <_strtod_l+0xbc4>
 80072e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072e6:	9208      	str	r2, [sp, #32]
 80072e8:	4602      	mov	r2, r0
 80072ea:	2000      	movs	r0, #0
 80072ec:	4604      	mov	r4, r0
 80072ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80072f2:	f100 0101 	add.w	r1, r0, #1
 80072f6:	d012      	beq.n	800731e <_strtod_l+0x236>
 80072f8:	440a      	add	r2, r1
 80072fa:	eb00 0c04 	add.w	ip, r0, r4
 80072fe:	4621      	mov	r1, r4
 8007300:	270a      	movs	r7, #10
 8007302:	458c      	cmp	ip, r1
 8007304:	d113      	bne.n	800732e <_strtod_l+0x246>
 8007306:	1821      	adds	r1, r4, r0
 8007308:	2908      	cmp	r1, #8
 800730a:	f104 0401 	add.w	r4, r4, #1
 800730e:	4404      	add	r4, r0
 8007310:	dc19      	bgt.n	8007346 <_strtod_l+0x25e>
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	210a      	movs	r1, #10
 8007316:	fb01 e303 	mla	r3, r1, r3, lr
 800731a:	9307      	str	r3, [sp, #28]
 800731c:	2100      	movs	r1, #0
 800731e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007320:	1c58      	adds	r0, r3, #1
 8007322:	901b      	str	r0, [sp, #108]	; 0x6c
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	4608      	mov	r0, r1
 8007328:	e7c9      	b.n	80072be <_strtod_l+0x1d6>
 800732a:	9805      	ldr	r0, [sp, #20]
 800732c:	e7d3      	b.n	80072d6 <_strtod_l+0x1ee>
 800732e:	2908      	cmp	r1, #8
 8007330:	f101 0101 	add.w	r1, r1, #1
 8007334:	dc03      	bgt.n	800733e <_strtod_l+0x256>
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	437b      	muls	r3, r7
 800733a:	9307      	str	r3, [sp, #28]
 800733c:	e7e1      	b.n	8007302 <_strtod_l+0x21a>
 800733e:	2910      	cmp	r1, #16
 8007340:	bfd8      	it	le
 8007342:	437d      	mulle	r5, r7
 8007344:	e7dd      	b.n	8007302 <_strtod_l+0x21a>
 8007346:	2c10      	cmp	r4, #16
 8007348:	bfdc      	itt	le
 800734a:	210a      	movle	r1, #10
 800734c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007350:	e7e4      	b.n	800731c <_strtod_l+0x234>
 8007352:	2301      	movs	r3, #1
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	e781      	b.n	800725c <_strtod_l+0x174>
 8007358:	f04f 0c01 	mov.w	ip, #1
 800735c:	1cb3      	adds	r3, r6, #2
 800735e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007360:	78b3      	ldrb	r3, [r6, #2]
 8007362:	e78a      	b.n	800727a <_strtod_l+0x192>
 8007364:	f04f 0c00 	mov.w	ip, #0
 8007368:	e7f8      	b.n	800735c <_strtod_l+0x274>
 800736a:	bf00      	nop
 800736c:	0800a008 	.word	0x0800a008
 8007370:	7ff00000 	.word	0x7ff00000
 8007374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007376:	1c5f      	adds	r7, r3, #1
 8007378:	971b      	str	r7, [sp, #108]	; 0x6c
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b30      	cmp	r3, #48	; 0x30
 800737e:	d0f9      	beq.n	8007374 <_strtod_l+0x28c>
 8007380:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007384:	2f08      	cmp	r7, #8
 8007386:	f63f af7d 	bhi.w	8007284 <_strtod_l+0x19c>
 800738a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800738e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007390:	930a      	str	r3, [sp, #40]	; 0x28
 8007392:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007394:	1c5f      	adds	r7, r3, #1
 8007396:	971b      	str	r7, [sp, #108]	; 0x6c
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800739e:	f1b8 0f09 	cmp.w	r8, #9
 80073a2:	d937      	bls.n	8007414 <_strtod_l+0x32c>
 80073a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073a6:	1a7f      	subs	r7, r7, r1
 80073a8:	2f08      	cmp	r7, #8
 80073aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80073ae:	dc37      	bgt.n	8007420 <_strtod_l+0x338>
 80073b0:	45be      	cmp	lr, r7
 80073b2:	bfa8      	it	ge
 80073b4:	46be      	movge	lr, r7
 80073b6:	f1bc 0f00 	cmp.w	ip, #0
 80073ba:	d001      	beq.n	80073c0 <_strtod_l+0x2d8>
 80073bc:	f1ce 0e00 	rsb	lr, lr, #0
 80073c0:	2c00      	cmp	r4, #0
 80073c2:	d151      	bne.n	8007468 <_strtod_l+0x380>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f47f aece 	bne.w	8007166 <_strtod_l+0x7e>
 80073ca:	9a06      	ldr	r2, [sp, #24]
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	f47f aeca 	bne.w	8007166 <_strtod_l+0x7e>
 80073d2:	9a04      	ldr	r2, [sp, #16]
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	f47f aee4 	bne.w	80071a2 <_strtod_l+0xba>
 80073da:	2b4e      	cmp	r3, #78	; 0x4e
 80073dc:	d027      	beq.n	800742e <_strtod_l+0x346>
 80073de:	dc21      	bgt.n	8007424 <_strtod_l+0x33c>
 80073e0:	2b49      	cmp	r3, #73	; 0x49
 80073e2:	f47f aede 	bne.w	80071a2 <_strtod_l+0xba>
 80073e6:	49a0      	ldr	r1, [pc, #640]	; (8007668 <_strtod_l+0x580>)
 80073e8:	a81b      	add	r0, sp, #108	; 0x6c
 80073ea:	f001 fdd7 	bl	8008f9c <__match>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f aed7 	beq.w	80071a2 <_strtod_l+0xba>
 80073f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073f6:	499d      	ldr	r1, [pc, #628]	; (800766c <_strtod_l+0x584>)
 80073f8:	3b01      	subs	r3, #1
 80073fa:	a81b      	add	r0, sp, #108	; 0x6c
 80073fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80073fe:	f001 fdcd 	bl	8008f9c <__match>
 8007402:	b910      	cbnz	r0, 800740a <_strtod_l+0x322>
 8007404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007406:	3301      	adds	r3, #1
 8007408:	931b      	str	r3, [sp, #108]	; 0x6c
 800740a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007680 <_strtod_l+0x598>
 800740e:	f04f 0a00 	mov.w	sl, #0
 8007412:	e6a8      	b.n	8007166 <_strtod_l+0x7e>
 8007414:	210a      	movs	r1, #10
 8007416:	fb01 3e0e 	mla	lr, r1, lr, r3
 800741a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800741e:	e7b8      	b.n	8007392 <_strtod_l+0x2aa>
 8007420:	46be      	mov	lr, r7
 8007422:	e7c8      	b.n	80073b6 <_strtod_l+0x2ce>
 8007424:	2b69      	cmp	r3, #105	; 0x69
 8007426:	d0de      	beq.n	80073e6 <_strtod_l+0x2fe>
 8007428:	2b6e      	cmp	r3, #110	; 0x6e
 800742a:	f47f aeba 	bne.w	80071a2 <_strtod_l+0xba>
 800742e:	4990      	ldr	r1, [pc, #576]	; (8007670 <_strtod_l+0x588>)
 8007430:	a81b      	add	r0, sp, #108	; 0x6c
 8007432:	f001 fdb3 	bl	8008f9c <__match>
 8007436:	2800      	cmp	r0, #0
 8007438:	f43f aeb3 	beq.w	80071a2 <_strtod_l+0xba>
 800743c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b28      	cmp	r3, #40	; 0x28
 8007442:	d10e      	bne.n	8007462 <_strtod_l+0x37a>
 8007444:	aa1e      	add	r2, sp, #120	; 0x78
 8007446:	498b      	ldr	r1, [pc, #556]	; (8007674 <_strtod_l+0x58c>)
 8007448:	a81b      	add	r0, sp, #108	; 0x6c
 800744a:	f001 fdbb 	bl	8008fc4 <__hexnan>
 800744e:	2805      	cmp	r0, #5
 8007450:	d107      	bne.n	8007462 <_strtod_l+0x37a>
 8007452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007454:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007458:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800745c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007460:	e681      	b.n	8007166 <_strtod_l+0x7e>
 8007462:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007688 <_strtod_l+0x5a0>
 8007466:	e7d2      	b.n	800740e <_strtod_l+0x326>
 8007468:	ebae 0302 	sub.w	r3, lr, r2
 800746c:	9306      	str	r3, [sp, #24]
 800746e:	9b05      	ldr	r3, [sp, #20]
 8007470:	9807      	ldr	r0, [sp, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	bf08      	it	eq
 8007476:	4623      	moveq	r3, r4
 8007478:	2c10      	cmp	r4, #16
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	46a0      	mov	r8, r4
 800747e:	bfa8      	it	ge
 8007480:	f04f 0810 	movge.w	r8, #16
 8007484:	f7f9 f83e 	bl	8000504 <__aeabi_ui2d>
 8007488:	2c09      	cmp	r4, #9
 800748a:	4682      	mov	sl, r0
 800748c:	468b      	mov	fp, r1
 800748e:	dc13      	bgt.n	80074b8 <_strtod_l+0x3d0>
 8007490:	9b06      	ldr	r3, [sp, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f43f ae67 	beq.w	8007166 <_strtod_l+0x7e>
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	dd7a      	ble.n	8007592 <_strtod_l+0x4aa>
 800749c:	2b16      	cmp	r3, #22
 800749e:	dc61      	bgt.n	8007564 <_strtod_l+0x47c>
 80074a0:	4a75      	ldr	r2, [pc, #468]	; (8007678 <_strtod_l+0x590>)
 80074a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80074a6:	e9de 0100 	ldrd	r0, r1, [lr]
 80074aa:	4652      	mov	r2, sl
 80074ac:	465b      	mov	r3, fp
 80074ae:	f7f9 f8a3 	bl	80005f8 <__aeabi_dmul>
 80074b2:	4682      	mov	sl, r0
 80074b4:	468b      	mov	fp, r1
 80074b6:	e656      	b.n	8007166 <_strtod_l+0x7e>
 80074b8:	4b6f      	ldr	r3, [pc, #444]	; (8007678 <_strtod_l+0x590>)
 80074ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074c2:	f7f9 f899 	bl	80005f8 <__aeabi_dmul>
 80074c6:	4606      	mov	r6, r0
 80074c8:	4628      	mov	r0, r5
 80074ca:	460f      	mov	r7, r1
 80074cc:	f7f9 f81a 	bl	8000504 <__aeabi_ui2d>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	4630      	mov	r0, r6
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f8 fed8 	bl	800028c <__adddf3>
 80074dc:	2c0f      	cmp	r4, #15
 80074de:	4682      	mov	sl, r0
 80074e0:	468b      	mov	fp, r1
 80074e2:	ddd5      	ble.n	8007490 <_strtod_l+0x3a8>
 80074e4:	9b06      	ldr	r3, [sp, #24]
 80074e6:	eba4 0808 	sub.w	r8, r4, r8
 80074ea:	4498      	add	r8, r3
 80074ec:	f1b8 0f00 	cmp.w	r8, #0
 80074f0:	f340 8096 	ble.w	8007620 <_strtod_l+0x538>
 80074f4:	f018 030f 	ands.w	r3, r8, #15
 80074f8:	d00a      	beq.n	8007510 <_strtod_l+0x428>
 80074fa:	495f      	ldr	r1, [pc, #380]	; (8007678 <_strtod_l+0x590>)
 80074fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007500:	4652      	mov	r2, sl
 8007502:	465b      	mov	r3, fp
 8007504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007508:	f7f9 f876 	bl	80005f8 <__aeabi_dmul>
 800750c:	4682      	mov	sl, r0
 800750e:	468b      	mov	fp, r1
 8007510:	f038 080f 	bics.w	r8, r8, #15
 8007514:	d073      	beq.n	80075fe <_strtod_l+0x516>
 8007516:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800751a:	dd47      	ble.n	80075ac <_strtod_l+0x4c4>
 800751c:	2400      	movs	r4, #0
 800751e:	46a0      	mov	r8, r4
 8007520:	9407      	str	r4, [sp, #28]
 8007522:	9405      	str	r4, [sp, #20]
 8007524:	2322      	movs	r3, #34	; 0x22
 8007526:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007680 <_strtod_l+0x598>
 800752a:	f8c9 3000 	str.w	r3, [r9]
 800752e:	f04f 0a00 	mov.w	sl, #0
 8007532:	9b07      	ldr	r3, [sp, #28]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f43f ae16 	beq.w	8007166 <_strtod_l+0x7e>
 800753a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800753c:	4648      	mov	r0, r9
 800753e:	f001 fe3e 	bl	80091be <_Bfree>
 8007542:	9905      	ldr	r1, [sp, #20]
 8007544:	4648      	mov	r0, r9
 8007546:	f001 fe3a 	bl	80091be <_Bfree>
 800754a:	4641      	mov	r1, r8
 800754c:	4648      	mov	r0, r9
 800754e:	f001 fe36 	bl	80091be <_Bfree>
 8007552:	9907      	ldr	r1, [sp, #28]
 8007554:	4648      	mov	r0, r9
 8007556:	f001 fe32 	bl	80091be <_Bfree>
 800755a:	4621      	mov	r1, r4
 800755c:	4648      	mov	r0, r9
 800755e:	f001 fe2e 	bl	80091be <_Bfree>
 8007562:	e600      	b.n	8007166 <_strtod_l+0x7e>
 8007564:	9a06      	ldr	r2, [sp, #24]
 8007566:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800756a:	4293      	cmp	r3, r2
 800756c:	dbba      	blt.n	80074e4 <_strtod_l+0x3fc>
 800756e:	4d42      	ldr	r5, [pc, #264]	; (8007678 <_strtod_l+0x590>)
 8007570:	f1c4 040f 	rsb	r4, r4, #15
 8007574:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007578:	4652      	mov	r2, sl
 800757a:	465b      	mov	r3, fp
 800757c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007580:	f7f9 f83a 	bl	80005f8 <__aeabi_dmul>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	1b1c      	subs	r4, r3, r4
 8007588:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800758c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007590:	e78d      	b.n	80074ae <_strtod_l+0x3c6>
 8007592:	f113 0f16 	cmn.w	r3, #22
 8007596:	dba5      	blt.n	80074e4 <_strtod_l+0x3fc>
 8007598:	4a37      	ldr	r2, [pc, #220]	; (8007678 <_strtod_l+0x590>)
 800759a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800759e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80075a2:	4650      	mov	r0, sl
 80075a4:	4659      	mov	r1, fp
 80075a6:	f7f9 f951 	bl	800084c <__aeabi_ddiv>
 80075aa:	e782      	b.n	80074b2 <_strtod_l+0x3ca>
 80075ac:	2300      	movs	r3, #0
 80075ae:	4e33      	ldr	r6, [pc, #204]	; (800767c <_strtod_l+0x594>)
 80075b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075b4:	4650      	mov	r0, sl
 80075b6:	4659      	mov	r1, fp
 80075b8:	461d      	mov	r5, r3
 80075ba:	f1b8 0f01 	cmp.w	r8, #1
 80075be:	dc21      	bgt.n	8007604 <_strtod_l+0x51c>
 80075c0:	b10b      	cbz	r3, 80075c6 <_strtod_l+0x4de>
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	4b2d      	ldr	r3, [pc, #180]	; (800767c <_strtod_l+0x594>)
 80075c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80075cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80075d0:	4652      	mov	r2, sl
 80075d2:	465b      	mov	r3, fp
 80075d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80075d8:	f7f9 f80e 	bl	80005f8 <__aeabi_dmul>
 80075dc:	4b28      	ldr	r3, [pc, #160]	; (8007680 <_strtod_l+0x598>)
 80075de:	460a      	mov	r2, r1
 80075e0:	400b      	ands	r3, r1
 80075e2:	4928      	ldr	r1, [pc, #160]	; (8007684 <_strtod_l+0x59c>)
 80075e4:	428b      	cmp	r3, r1
 80075e6:	4682      	mov	sl, r0
 80075e8:	d898      	bhi.n	800751c <_strtod_l+0x434>
 80075ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075ee:	428b      	cmp	r3, r1
 80075f0:	bf86      	itte	hi
 80075f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800768c <_strtod_l+0x5a4>
 80075f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80075fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80075fe:	2300      	movs	r3, #0
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	e077      	b.n	80076f4 <_strtod_l+0x60c>
 8007604:	f018 0f01 	tst.w	r8, #1
 8007608:	d006      	beq.n	8007618 <_strtod_l+0x530>
 800760a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f7f8 fff1 	bl	80005f8 <__aeabi_dmul>
 8007616:	2301      	movs	r3, #1
 8007618:	3501      	adds	r5, #1
 800761a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800761e:	e7cc      	b.n	80075ba <_strtod_l+0x4d2>
 8007620:	d0ed      	beq.n	80075fe <_strtod_l+0x516>
 8007622:	f1c8 0800 	rsb	r8, r8, #0
 8007626:	f018 020f 	ands.w	r2, r8, #15
 800762a:	d00a      	beq.n	8007642 <_strtod_l+0x55a>
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <_strtod_l+0x590>)
 800762e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007632:	4650      	mov	r0, sl
 8007634:	4659      	mov	r1, fp
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f9 f907 	bl	800084c <__aeabi_ddiv>
 800763e:	4682      	mov	sl, r0
 8007640:	468b      	mov	fp, r1
 8007642:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007646:	d0da      	beq.n	80075fe <_strtod_l+0x516>
 8007648:	f1b8 0f1f 	cmp.w	r8, #31
 800764c:	dd20      	ble.n	8007690 <_strtod_l+0x5a8>
 800764e:	2400      	movs	r4, #0
 8007650:	46a0      	mov	r8, r4
 8007652:	9407      	str	r4, [sp, #28]
 8007654:	9405      	str	r4, [sp, #20]
 8007656:	2322      	movs	r3, #34	; 0x22
 8007658:	f04f 0a00 	mov.w	sl, #0
 800765c:	f04f 0b00 	mov.w	fp, #0
 8007660:	f8c9 3000 	str.w	r3, [r9]
 8007664:	e765      	b.n	8007532 <_strtod_l+0x44a>
 8007666:	bf00      	nop
 8007668:	08009fd1 	.word	0x08009fd1
 800766c:	0800a05b 	.word	0x0800a05b
 8007670:	08009fd9 	.word	0x08009fd9
 8007674:	0800a01c 	.word	0x0800a01c
 8007678:	0800a098 	.word	0x0800a098
 800767c:	0800a070 	.word	0x0800a070
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	7ca00000 	.word	0x7ca00000
 8007688:	fff80000 	.word	0xfff80000
 800768c:	7fefffff 	.word	0x7fefffff
 8007690:	f018 0310 	ands.w	r3, r8, #16
 8007694:	bf18      	it	ne
 8007696:	236a      	movne	r3, #106	; 0x6a
 8007698:	4da0      	ldr	r5, [pc, #640]	; (800791c <_strtod_l+0x834>)
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	2300      	movs	r3, #0
 80076a2:	f1b8 0f00 	cmp.w	r8, #0
 80076a6:	f300 810a 	bgt.w	80078be <_strtod_l+0x7d6>
 80076aa:	b10b      	cbz	r3, 80076b0 <_strtod_l+0x5c8>
 80076ac:	4682      	mov	sl, r0
 80076ae:	468b      	mov	fp, r1
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	b1bb      	cbz	r3, 80076e4 <_strtod_l+0x5fc>
 80076b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80076b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076bc:	2b00      	cmp	r3, #0
 80076be:	4659      	mov	r1, fp
 80076c0:	dd10      	ble.n	80076e4 <_strtod_l+0x5fc>
 80076c2:	2b1f      	cmp	r3, #31
 80076c4:	f340 8107 	ble.w	80078d6 <_strtod_l+0x7ee>
 80076c8:	2b34      	cmp	r3, #52	; 0x34
 80076ca:	bfde      	ittt	le
 80076cc:	3b20      	suble	r3, #32
 80076ce:	f04f 32ff 	movle.w	r2, #4294967295
 80076d2:	fa02 f303 	lslle.w	r3, r2, r3
 80076d6:	f04f 0a00 	mov.w	sl, #0
 80076da:	bfcc      	ite	gt
 80076dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80076e0:	ea03 0b01 	andle.w	fp, r3, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4650      	mov	r0, sl
 80076ea:	4659      	mov	r1, fp
 80076ec:	f7f9 f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d1ac      	bne.n	800764e <_strtod_l+0x566>
 80076f4:	9b07      	ldr	r3, [sp, #28]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	9a05      	ldr	r2, [sp, #20]
 80076fa:	9908      	ldr	r1, [sp, #32]
 80076fc:	4623      	mov	r3, r4
 80076fe:	4648      	mov	r0, r9
 8007700:	f001 fdaf 	bl	8009262 <__s2b>
 8007704:	9007      	str	r0, [sp, #28]
 8007706:	2800      	cmp	r0, #0
 8007708:	f43f af08 	beq.w	800751c <_strtod_l+0x434>
 800770c:	9a06      	ldr	r2, [sp, #24]
 800770e:	9b06      	ldr	r3, [sp, #24]
 8007710:	2a00      	cmp	r2, #0
 8007712:	f1c3 0300 	rsb	r3, r3, #0
 8007716:	bfa8      	it	ge
 8007718:	2300      	movge	r3, #0
 800771a:	930e      	str	r3, [sp, #56]	; 0x38
 800771c:	2400      	movs	r4, #0
 800771e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007722:	9316      	str	r3, [sp, #88]	; 0x58
 8007724:	46a0      	mov	r8, r4
 8007726:	9b07      	ldr	r3, [sp, #28]
 8007728:	4648      	mov	r0, r9
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	f001 fd13 	bl	8009156 <_Balloc>
 8007730:	9005      	str	r0, [sp, #20]
 8007732:	2800      	cmp	r0, #0
 8007734:	f43f aef6 	beq.w	8007524 <_strtod_l+0x43c>
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	3202      	adds	r2, #2
 800773e:	f103 010c 	add.w	r1, r3, #12
 8007742:	0092      	lsls	r2, r2, #2
 8007744:	300c      	adds	r0, #12
 8007746:	f001 fcfb 	bl	8009140 <memcpy>
 800774a:	aa1e      	add	r2, sp, #120	; 0x78
 800774c:	a91d      	add	r1, sp, #116	; 0x74
 800774e:	ec4b ab10 	vmov	d0, sl, fp
 8007752:	4648      	mov	r0, r9
 8007754:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007758:	f002 f83e 	bl	80097d8 <__d2b>
 800775c:	901c      	str	r0, [sp, #112]	; 0x70
 800775e:	2800      	cmp	r0, #0
 8007760:	f43f aee0 	beq.w	8007524 <_strtod_l+0x43c>
 8007764:	2101      	movs	r1, #1
 8007766:	4648      	mov	r0, r9
 8007768:	f001 fe07 	bl	800937a <__i2b>
 800776c:	4680      	mov	r8, r0
 800776e:	2800      	cmp	r0, #0
 8007770:	f43f aed8 	beq.w	8007524 <_strtod_l+0x43c>
 8007774:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007776:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007778:	2e00      	cmp	r6, #0
 800777a:	bfab      	itete	ge
 800777c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800777e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007780:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007782:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007784:	bfac      	ite	ge
 8007786:	18f7      	addge	r7, r6, r3
 8007788:	1b9d      	sublt	r5, r3, r6
 800778a:	9b04      	ldr	r3, [sp, #16]
 800778c:	1af6      	subs	r6, r6, r3
 800778e:	4416      	add	r6, r2
 8007790:	4b63      	ldr	r3, [pc, #396]	; (8007920 <_strtod_l+0x838>)
 8007792:	3e01      	subs	r6, #1
 8007794:	429e      	cmp	r6, r3
 8007796:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800779a:	f280 80af 	bge.w	80078fc <_strtod_l+0x814>
 800779e:	1b9b      	subs	r3, r3, r6
 80077a0:	2b1f      	cmp	r3, #31
 80077a2:	eba2 0203 	sub.w	r2, r2, r3
 80077a6:	f04f 0101 	mov.w	r1, #1
 80077aa:	f300 809b 	bgt.w	80078e4 <_strtod_l+0x7fc>
 80077ae:	fa01 f303 	lsl.w	r3, r1, r3
 80077b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80077b4:	2300      	movs	r3, #0
 80077b6:	930a      	str	r3, [sp, #40]	; 0x28
 80077b8:	18be      	adds	r6, r7, r2
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	42b7      	cmp	r7, r6
 80077be:	4415      	add	r5, r2
 80077c0:	441d      	add	r5, r3
 80077c2:	463b      	mov	r3, r7
 80077c4:	bfa8      	it	ge
 80077c6:	4633      	movge	r3, r6
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	bfa8      	it	ge
 80077cc:	462b      	movge	r3, r5
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bfc2      	ittt	gt
 80077d2:	1af6      	subgt	r6, r6, r3
 80077d4:	1aed      	subgt	r5, r5, r3
 80077d6:	1aff      	subgt	r7, r7, r3
 80077d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077da:	b1bb      	cbz	r3, 800780c <_strtod_l+0x724>
 80077dc:	4641      	mov	r1, r8
 80077de:	461a      	mov	r2, r3
 80077e0:	4648      	mov	r0, r9
 80077e2:	f001 fe69 	bl	80094b8 <__pow5mult>
 80077e6:	4680      	mov	r8, r0
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f43f ae9b 	beq.w	8007524 <_strtod_l+0x43c>
 80077ee:	4601      	mov	r1, r0
 80077f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077f2:	4648      	mov	r0, r9
 80077f4:	f001 fdca 	bl	800938c <__multiply>
 80077f8:	900c      	str	r0, [sp, #48]	; 0x30
 80077fa:	2800      	cmp	r0, #0
 80077fc:	f43f ae92 	beq.w	8007524 <_strtod_l+0x43c>
 8007800:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007802:	4648      	mov	r0, r9
 8007804:	f001 fcdb 	bl	80091be <_Bfree>
 8007808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780a:	931c      	str	r3, [sp, #112]	; 0x70
 800780c:	2e00      	cmp	r6, #0
 800780e:	dc7a      	bgt.n	8007906 <_strtod_l+0x81e>
 8007810:	9b06      	ldr	r3, [sp, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd08      	ble.n	8007828 <_strtod_l+0x740>
 8007816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007818:	9905      	ldr	r1, [sp, #20]
 800781a:	4648      	mov	r0, r9
 800781c:	f001 fe4c 	bl	80094b8 <__pow5mult>
 8007820:	9005      	str	r0, [sp, #20]
 8007822:	2800      	cmp	r0, #0
 8007824:	f43f ae7e 	beq.w	8007524 <_strtod_l+0x43c>
 8007828:	2d00      	cmp	r5, #0
 800782a:	dd08      	ble.n	800783e <_strtod_l+0x756>
 800782c:	462a      	mov	r2, r5
 800782e:	9905      	ldr	r1, [sp, #20]
 8007830:	4648      	mov	r0, r9
 8007832:	f001 fe8f 	bl	8009554 <__lshift>
 8007836:	9005      	str	r0, [sp, #20]
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f ae73 	beq.w	8007524 <_strtod_l+0x43c>
 800783e:	2f00      	cmp	r7, #0
 8007840:	dd08      	ble.n	8007854 <_strtod_l+0x76c>
 8007842:	4641      	mov	r1, r8
 8007844:	463a      	mov	r2, r7
 8007846:	4648      	mov	r0, r9
 8007848:	f001 fe84 	bl	8009554 <__lshift>
 800784c:	4680      	mov	r8, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f ae68 	beq.w	8007524 <_strtod_l+0x43c>
 8007854:	9a05      	ldr	r2, [sp, #20]
 8007856:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007858:	4648      	mov	r0, r9
 800785a:	f001 fee9 	bl	8009630 <__mdiff>
 800785e:	4604      	mov	r4, r0
 8007860:	2800      	cmp	r0, #0
 8007862:	f43f ae5f 	beq.w	8007524 <_strtod_l+0x43c>
 8007866:	68c3      	ldr	r3, [r0, #12]
 8007868:	930c      	str	r3, [sp, #48]	; 0x30
 800786a:	2300      	movs	r3, #0
 800786c:	60c3      	str	r3, [r0, #12]
 800786e:	4641      	mov	r1, r8
 8007870:	f001 fec4 	bl	80095fc <__mcmp>
 8007874:	2800      	cmp	r0, #0
 8007876:	da55      	bge.n	8007924 <_strtod_l+0x83c>
 8007878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787a:	b9e3      	cbnz	r3, 80078b6 <_strtod_l+0x7ce>
 800787c:	f1ba 0f00 	cmp.w	sl, #0
 8007880:	d119      	bne.n	80078b6 <_strtod_l+0x7ce>
 8007882:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007886:	b9b3      	cbnz	r3, 80078b6 <_strtod_l+0x7ce>
 8007888:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800788c:	0d1b      	lsrs	r3, r3, #20
 800788e:	051b      	lsls	r3, r3, #20
 8007890:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007894:	d90f      	bls.n	80078b6 <_strtod_l+0x7ce>
 8007896:	6963      	ldr	r3, [r4, #20]
 8007898:	b913      	cbnz	r3, 80078a0 <_strtod_l+0x7b8>
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	2b01      	cmp	r3, #1
 800789e:	dd0a      	ble.n	80078b6 <_strtod_l+0x7ce>
 80078a0:	4621      	mov	r1, r4
 80078a2:	2201      	movs	r2, #1
 80078a4:	4648      	mov	r0, r9
 80078a6:	f001 fe55 	bl	8009554 <__lshift>
 80078aa:	4641      	mov	r1, r8
 80078ac:	4604      	mov	r4, r0
 80078ae:	f001 fea5 	bl	80095fc <__mcmp>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	dc67      	bgt.n	8007986 <_strtod_l+0x89e>
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d171      	bne.n	80079a0 <_strtod_l+0x8b8>
 80078bc:	e63d      	b.n	800753a <_strtod_l+0x452>
 80078be:	f018 0f01 	tst.w	r8, #1
 80078c2:	d004      	beq.n	80078ce <_strtod_l+0x7e6>
 80078c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078c8:	f7f8 fe96 	bl	80005f8 <__aeabi_dmul>
 80078cc:	2301      	movs	r3, #1
 80078ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078d2:	3508      	adds	r5, #8
 80078d4:	e6e5      	b.n	80076a2 <_strtod_l+0x5ba>
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	ea03 0a0a 	and.w	sl, r3, sl
 80078e2:	e6ff      	b.n	80076e4 <_strtod_l+0x5fc>
 80078e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80078e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80078ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80078f0:	36e2      	adds	r6, #226	; 0xe2
 80078f2:	fa01 f306 	lsl.w	r3, r1, r6
 80078f6:	930a      	str	r3, [sp, #40]	; 0x28
 80078f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80078fa:	e75d      	b.n	80077b8 <_strtod_l+0x6d0>
 80078fc:	2300      	movs	r3, #0
 80078fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007900:	2301      	movs	r3, #1
 8007902:	930f      	str	r3, [sp, #60]	; 0x3c
 8007904:	e758      	b.n	80077b8 <_strtod_l+0x6d0>
 8007906:	4632      	mov	r2, r6
 8007908:	991c      	ldr	r1, [sp, #112]	; 0x70
 800790a:	4648      	mov	r0, r9
 800790c:	f001 fe22 	bl	8009554 <__lshift>
 8007910:	901c      	str	r0, [sp, #112]	; 0x70
 8007912:	2800      	cmp	r0, #0
 8007914:	f47f af7c 	bne.w	8007810 <_strtod_l+0x728>
 8007918:	e604      	b.n	8007524 <_strtod_l+0x43c>
 800791a:	bf00      	nop
 800791c:	0800a030 	.word	0x0800a030
 8007920:	fffffc02 	.word	0xfffffc02
 8007924:	465d      	mov	r5, fp
 8007926:	f040 8086 	bne.w	8007a36 <_strtod_l+0x94e>
 800792a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800792c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007930:	b32a      	cbz	r2, 800797e <_strtod_l+0x896>
 8007932:	4aaf      	ldr	r2, [pc, #700]	; (8007bf0 <_strtod_l+0xb08>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d153      	bne.n	80079e0 <_strtod_l+0x8f8>
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	4650      	mov	r0, sl
 800793c:	b1d3      	cbz	r3, 8007974 <_strtod_l+0x88c>
 800793e:	4aad      	ldr	r2, [pc, #692]	; (8007bf4 <_strtod_l+0xb0c>)
 8007940:	402a      	ands	r2, r5
 8007942:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007946:	f04f 31ff 	mov.w	r1, #4294967295
 800794a:	d816      	bhi.n	800797a <_strtod_l+0x892>
 800794c:	0d12      	lsrs	r2, r2, #20
 800794e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007952:	fa01 f303 	lsl.w	r3, r1, r3
 8007956:	4298      	cmp	r0, r3
 8007958:	d142      	bne.n	80079e0 <_strtod_l+0x8f8>
 800795a:	4ba7      	ldr	r3, [pc, #668]	; (8007bf8 <_strtod_l+0xb10>)
 800795c:	429d      	cmp	r5, r3
 800795e:	d102      	bne.n	8007966 <_strtod_l+0x87e>
 8007960:	3001      	adds	r0, #1
 8007962:	f43f addf 	beq.w	8007524 <_strtod_l+0x43c>
 8007966:	4ba3      	ldr	r3, [pc, #652]	; (8007bf4 <_strtod_l+0xb0c>)
 8007968:	402b      	ands	r3, r5
 800796a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800796e:	f04f 0a00 	mov.w	sl, #0
 8007972:	e7a0      	b.n	80078b6 <_strtod_l+0x7ce>
 8007974:	f04f 33ff 	mov.w	r3, #4294967295
 8007978:	e7ed      	b.n	8007956 <_strtod_l+0x86e>
 800797a:	460b      	mov	r3, r1
 800797c:	e7eb      	b.n	8007956 <_strtod_l+0x86e>
 800797e:	bb7b      	cbnz	r3, 80079e0 <_strtod_l+0x8f8>
 8007980:	f1ba 0f00 	cmp.w	sl, #0
 8007984:	d12c      	bne.n	80079e0 <_strtod_l+0x8f8>
 8007986:	9904      	ldr	r1, [sp, #16]
 8007988:	4a9a      	ldr	r2, [pc, #616]	; (8007bf4 <_strtod_l+0xb0c>)
 800798a:	465b      	mov	r3, fp
 800798c:	b1f1      	cbz	r1, 80079cc <_strtod_l+0x8e4>
 800798e:	ea02 010b 	and.w	r1, r2, fp
 8007992:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007996:	dc19      	bgt.n	80079cc <_strtod_l+0x8e4>
 8007998:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800799c:	f77f ae5b 	ble.w	8007656 <_strtod_l+0x56e>
 80079a0:	4a96      	ldr	r2, [pc, #600]	; (8007bfc <_strtod_l+0xb14>)
 80079a2:	2300      	movs	r3, #0
 80079a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80079a8:	4650      	mov	r0, sl
 80079aa:	4659      	mov	r1, fp
 80079ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80079b0:	f7f8 fe22 	bl	80005f8 <__aeabi_dmul>
 80079b4:	4682      	mov	sl, r0
 80079b6:	468b      	mov	fp, r1
 80079b8:	2900      	cmp	r1, #0
 80079ba:	f47f adbe 	bne.w	800753a <_strtod_l+0x452>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f47f adbb 	bne.w	800753a <_strtod_l+0x452>
 80079c4:	2322      	movs	r3, #34	; 0x22
 80079c6:	f8c9 3000 	str.w	r3, [r9]
 80079ca:	e5b6      	b.n	800753a <_strtod_l+0x452>
 80079cc:	4013      	ands	r3, r2
 80079ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80079d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80079da:	f04f 3aff 	mov.w	sl, #4294967295
 80079de:	e76a      	b.n	80078b6 <_strtod_l+0x7ce>
 80079e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e2:	b193      	cbz	r3, 8007a0a <_strtod_l+0x922>
 80079e4:	422b      	tst	r3, r5
 80079e6:	f43f af66 	beq.w	80078b6 <_strtod_l+0x7ce>
 80079ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ec:	9a04      	ldr	r2, [sp, #16]
 80079ee:	4650      	mov	r0, sl
 80079f0:	4659      	mov	r1, fp
 80079f2:	b173      	cbz	r3, 8007a12 <_strtod_l+0x92a>
 80079f4:	f7ff fb5a 	bl	80070ac <sulp>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a00:	f7f8 fc44 	bl	800028c <__adddf3>
 8007a04:	4682      	mov	sl, r0
 8007a06:	468b      	mov	fp, r1
 8007a08:	e755      	b.n	80078b6 <_strtod_l+0x7ce>
 8007a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a0c:	ea13 0f0a 	tst.w	r3, sl
 8007a10:	e7e9      	b.n	80079e6 <_strtod_l+0x8fe>
 8007a12:	f7ff fb4b 	bl	80070ac <sulp>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a1e:	f7f8 fc33 	bl	8000288 <__aeabi_dsub>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4682      	mov	sl, r0
 8007a28:	468b      	mov	fp, r1
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f47f ae11 	bne.w	8007656 <_strtod_l+0x56e>
 8007a34:	e73f      	b.n	80078b6 <_strtod_l+0x7ce>
 8007a36:	4641      	mov	r1, r8
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f001 ff1c 	bl	8009876 <__ratio>
 8007a3e:	ec57 6b10 	vmov	r6, r7, d0
 8007a42:	2200      	movs	r2, #0
 8007a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a48:	ee10 0a10 	vmov	r0, s0
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f9 f84f 	bl	8000af0 <__aeabi_dcmple>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d077      	beq.n	8007b46 <_strtod_l+0xa5e>
 8007a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d04a      	beq.n	8007af2 <_strtod_l+0xa0a>
 8007a5c:	4b68      	ldr	r3, [pc, #416]	; (8007c00 <_strtod_l+0xb18>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a64:	4f66      	ldr	r7, [pc, #408]	; (8007c00 <_strtod_l+0xb18>)
 8007a66:	2600      	movs	r6, #0
 8007a68:	4b62      	ldr	r3, [pc, #392]	; (8007bf4 <_strtod_l+0xb0c>)
 8007a6a:	402b      	ands	r3, r5
 8007a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a70:	4b64      	ldr	r3, [pc, #400]	; (8007c04 <_strtod_l+0xb1c>)
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f040 80ce 	bne.w	8007c14 <_strtod_l+0xb2c>
 8007a78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a80:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007a84:	ec4b ab10 	vmov	d0, sl, fp
 8007a88:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007a8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a90:	f001 fe2c 	bl	80096ec <__ulp>
 8007a94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a98:	ec53 2b10 	vmov	r2, r3, d0
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	f7f8 fbf2 	bl	800028c <__adddf3>
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4952      	ldr	r1, [pc, #328]	; (8007bf4 <_strtod_l+0xb0c>)
 8007aac:	4a56      	ldr	r2, [pc, #344]	; (8007c08 <_strtod_l+0xb20>)
 8007aae:	4019      	ands	r1, r3
 8007ab0:	4291      	cmp	r1, r2
 8007ab2:	4682      	mov	sl, r0
 8007ab4:	d95b      	bls.n	8007b6e <_strtod_l+0xa86>
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d103      	bne.n	8007ac8 <_strtod_l+0x9e0>
 8007ac0:	9b08      	ldr	r3, [sp, #32]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	f43f ad2e 	beq.w	8007524 <_strtod_l+0x43c>
 8007ac8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007bf8 <_strtod_l+0xb10>
 8007acc:	f04f 3aff 	mov.w	sl, #4294967295
 8007ad0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	f001 fb73 	bl	80091be <_Bfree>
 8007ad8:	9905      	ldr	r1, [sp, #20]
 8007ada:	4648      	mov	r0, r9
 8007adc:	f001 fb6f 	bl	80091be <_Bfree>
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	f001 fb6b 	bl	80091be <_Bfree>
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4648      	mov	r0, r9
 8007aec:	f001 fb67 	bl	80091be <_Bfree>
 8007af0:	e619      	b.n	8007726 <_strtod_l+0x63e>
 8007af2:	f1ba 0f00 	cmp.w	sl, #0
 8007af6:	d11a      	bne.n	8007b2e <_strtod_l+0xa46>
 8007af8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007afc:	b9eb      	cbnz	r3, 8007b3a <_strtod_l+0xa52>
 8007afe:	2200      	movs	r2, #0
 8007b00:	4b3f      	ldr	r3, [pc, #252]	; (8007c00 <_strtod_l+0xb18>)
 8007b02:	4630      	mov	r0, r6
 8007b04:	4639      	mov	r1, r7
 8007b06:	f7f8 ffe9 	bl	8000adc <__aeabi_dcmplt>
 8007b0a:	b9c8      	cbnz	r0, 8007b40 <_strtod_l+0xa58>
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	2200      	movs	r2, #0
 8007b12:	4b3e      	ldr	r3, [pc, #248]	; (8007c0c <_strtod_l+0xb24>)
 8007b14:	f7f8 fd70 	bl	80005f8 <__aeabi_dmul>
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b20:	9618      	str	r6, [sp, #96]	; 0x60
 8007b22:	9319      	str	r3, [sp, #100]	; 0x64
 8007b24:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007b28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b2c:	e79c      	b.n	8007a68 <_strtod_l+0x980>
 8007b2e:	f1ba 0f01 	cmp.w	sl, #1
 8007b32:	d102      	bne.n	8007b3a <_strtod_l+0xa52>
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	f43f ad8e 	beq.w	8007656 <_strtod_l+0x56e>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	4b34      	ldr	r3, [pc, #208]	; (8007c10 <_strtod_l+0xb28>)
 8007b3e:	e78f      	b.n	8007a60 <_strtod_l+0x978>
 8007b40:	2600      	movs	r6, #0
 8007b42:	4f32      	ldr	r7, [pc, #200]	; (8007c0c <_strtod_l+0xb24>)
 8007b44:	e7ea      	b.n	8007b1c <_strtod_l+0xa34>
 8007b46:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <_strtod_l+0xb24>)
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	b933      	cbnz	r3, 8007b68 <_strtod_l+0xa80>
 8007b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b5e:	9010      	str	r0, [sp, #64]	; 0x40
 8007b60:	9311      	str	r3, [sp, #68]	; 0x44
 8007b62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b66:	e7df      	b.n	8007b28 <_strtod_l+0xa40>
 8007b68:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007b6c:	e7f9      	b.n	8007b62 <_strtod_l+0xa7a>
 8007b6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ab      	bne.n	8007ad0 <_strtod_l+0x9e8>
 8007b78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b7c:	0d1b      	lsrs	r3, r3, #20
 8007b7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b80:	051b      	lsls	r3, r3, #20
 8007b82:	429a      	cmp	r2, r3
 8007b84:	465d      	mov	r5, fp
 8007b86:	d1a3      	bne.n	8007ad0 <_strtod_l+0x9e8>
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7f8 ffe4 	bl	8000b58 <__aeabi_d2iz>
 8007b90:	f7f8 fcc8 	bl	8000524 <__aeabi_i2d>
 8007b94:	460b      	mov	r3, r1
 8007b96:	4602      	mov	r2, r0
 8007b98:	4639      	mov	r1, r7
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7f8 fb74 	bl	8000288 <__aeabi_dsub>
 8007ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460f      	mov	r7, r1
 8007ba6:	b933      	cbnz	r3, 8007bb6 <_strtod_l+0xace>
 8007ba8:	f1ba 0f00 	cmp.w	sl, #0
 8007bac:	d103      	bne.n	8007bb6 <_strtod_l+0xace>
 8007bae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	d06d      	beq.n	8007c92 <_strtod_l+0xbaa>
 8007bb6:	a30a      	add	r3, pc, #40	; (adr r3, 8007be0 <_strtod_l+0xaf8>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f47f acb8 	bne.w	800753a <_strtod_l+0x452>
 8007bca:	a307      	add	r3, pc, #28	; (adr r3, 8007be8 <_strtod_l+0xb00>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f43f af79 	beq.w	8007ad0 <_strtod_l+0x9e8>
 8007bde:	e4ac      	b.n	800753a <_strtod_l+0x452>
 8007be0:	94a03595 	.word	0x94a03595
 8007be4:	3fdfffff 	.word	0x3fdfffff
 8007be8:	35afe535 	.word	0x35afe535
 8007bec:	3fe00000 	.word	0x3fe00000
 8007bf0:	000fffff 	.word	0x000fffff
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	39500000 	.word	0x39500000
 8007c00:	3ff00000 	.word	0x3ff00000
 8007c04:	7fe00000 	.word	0x7fe00000
 8007c08:	7c9fffff 	.word	0x7c9fffff
 8007c0c:	3fe00000 	.word	0x3fe00000
 8007c10:	bff00000 	.word	0xbff00000
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	b333      	cbz	r3, 8007c66 <_strtod_l+0xb7e>
 8007c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c1e:	d822      	bhi.n	8007c66 <_strtod_l+0xb7e>
 8007c20:	a327      	add	r3, pc, #156	; (adr r3, 8007cc0 <_strtod_l+0xbd8>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	4630      	mov	r0, r6
 8007c28:	4639      	mov	r1, r7
 8007c2a:	f7f8 ff61 	bl	8000af0 <__aeabi_dcmple>
 8007c2e:	b1a0      	cbz	r0, 8007c5a <_strtod_l+0xb72>
 8007c30:	4639      	mov	r1, r7
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7f8 ffb8 	bl	8000ba8 <__aeabi_d2uiz>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	bf08      	it	eq
 8007c3c:	2001      	moveq	r0, #1
 8007c3e:	f7f8 fc61 	bl	8000504 <__aeabi_ui2d>
 8007c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c44:	4606      	mov	r6, r0
 8007c46:	460f      	mov	r7, r1
 8007c48:	bb03      	cbnz	r3, 8007c8c <_strtod_l+0xba4>
 8007c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c4e:	9012      	str	r0, [sp, #72]	; 0x48
 8007c50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007c56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c5e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c66:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007c6a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007c6e:	f001 fd3d 	bl	80096ec <__ulp>
 8007c72:	4650      	mov	r0, sl
 8007c74:	ec53 2b10 	vmov	r2, r3, d0
 8007c78:	4659      	mov	r1, fp
 8007c7a:	f7f8 fcbd 	bl	80005f8 <__aeabi_dmul>
 8007c7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c82:	f7f8 fb03 	bl	800028c <__adddf3>
 8007c86:	4682      	mov	sl, r0
 8007c88:	468b      	mov	fp, r1
 8007c8a:	e772      	b.n	8007b72 <_strtod_l+0xa8a>
 8007c8c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007c90:	e7df      	b.n	8007c52 <_strtod_l+0xb6a>
 8007c92:	a30d      	add	r3, pc, #52	; (adr r3, 8007cc8 <_strtod_l+0xbe0>)
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f7f8 ff20 	bl	8000adc <__aeabi_dcmplt>
 8007c9c:	e79c      	b.n	8007bd8 <_strtod_l+0xaf0>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	f7ff ba61 	b.w	800716e <_strtod_l+0x86>
 8007cac:	2b65      	cmp	r3, #101	; 0x65
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	f43f ab4e 	beq.w	8007352 <_strtod_l+0x26a>
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4614      	mov	r4, r2
 8007cba:	9104      	str	r1, [sp, #16]
 8007cbc:	f7ff bacb 	b.w	8007256 <_strtod_l+0x16e>
 8007cc0:	ffc00000 	.word	0xffc00000
 8007cc4:	41dfffff 	.word	0x41dfffff
 8007cc8:	94a03595 	.word	0x94a03595
 8007ccc:	3fcfffff 	.word	0x3fcfffff

08007cd0 <_strtod_r>:
 8007cd0:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <_strtod_r+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	b410      	push	{r4}
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	4c04      	ldr	r4, [pc, #16]	; (8007cec <_strtod_r+0x1c>)
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bf08      	it	eq
 8007cde:	4623      	moveq	r3, r4
 8007ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce4:	f7ff ba00 	b.w	80070e8 <_strtod_l>
 8007ce8:	2000000c 	.word	0x2000000c
 8007cec:	20000070 	.word	0x20000070

08007cf0 <_strtol_l.isra.0>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4689      	mov	r9, r1
 8007cf8:	4692      	mov	sl, r2
 8007cfa:	461e      	mov	r6, r3
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	463d      	mov	r5, r7
 8007d00:	9808      	ldr	r0, [sp, #32]
 8007d02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d06:	f001 f9ed 	bl	80090e4 <__locale_ctype_ptr_l>
 8007d0a:	4420      	add	r0, r4
 8007d0c:	7843      	ldrb	r3, [r0, #1]
 8007d0e:	f013 0308 	ands.w	r3, r3, #8
 8007d12:	d132      	bne.n	8007d7a <_strtol_l.isra.0+0x8a>
 8007d14:	2c2d      	cmp	r4, #45	; 0x2d
 8007d16:	d132      	bne.n	8007d7e <_strtol_l.isra.0+0x8e>
 8007d18:	787c      	ldrb	r4, [r7, #1]
 8007d1a:	1cbd      	adds	r5, r7, #2
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	d05d      	beq.n	8007dde <_strtol_l.isra.0+0xee>
 8007d22:	2e10      	cmp	r6, #16
 8007d24:	d109      	bne.n	8007d3a <_strtol_l.isra.0+0x4a>
 8007d26:	2c30      	cmp	r4, #48	; 0x30
 8007d28:	d107      	bne.n	8007d3a <_strtol_l.isra.0+0x4a>
 8007d2a:	782b      	ldrb	r3, [r5, #0]
 8007d2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d30:	2b58      	cmp	r3, #88	; 0x58
 8007d32:	d14f      	bne.n	8007dd4 <_strtol_l.isra.0+0xe4>
 8007d34:	786c      	ldrb	r4, [r5, #1]
 8007d36:	2610      	movs	r6, #16
 8007d38:	3502      	adds	r5, #2
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	bf14      	ite	ne
 8007d3e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007d42:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007d46:	2700      	movs	r7, #0
 8007d48:	fbb1 fcf6 	udiv	ip, r1, r6
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007d52:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007d56:	2b09      	cmp	r3, #9
 8007d58:	d817      	bhi.n	8007d8a <_strtol_l.isra.0+0x9a>
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	42a6      	cmp	r6, r4
 8007d5e:	dd23      	ble.n	8007da8 <_strtol_l.isra.0+0xb8>
 8007d60:	1c7b      	adds	r3, r7, #1
 8007d62:	d007      	beq.n	8007d74 <_strtol_l.isra.0+0x84>
 8007d64:	4584      	cmp	ip, r0
 8007d66:	d31c      	bcc.n	8007da2 <_strtol_l.isra.0+0xb2>
 8007d68:	d101      	bne.n	8007d6e <_strtol_l.isra.0+0x7e>
 8007d6a:	45a6      	cmp	lr, r4
 8007d6c:	db19      	blt.n	8007da2 <_strtol_l.isra.0+0xb2>
 8007d6e:	fb00 4006 	mla	r0, r0, r6, r4
 8007d72:	2701      	movs	r7, #1
 8007d74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d78:	e7eb      	b.n	8007d52 <_strtol_l.isra.0+0x62>
 8007d7a:	462f      	mov	r7, r5
 8007d7c:	e7bf      	b.n	8007cfe <_strtol_l.isra.0+0xe>
 8007d7e:	2c2b      	cmp	r4, #43	; 0x2b
 8007d80:	bf04      	itt	eq
 8007d82:	1cbd      	addeq	r5, r7, #2
 8007d84:	787c      	ldrbeq	r4, [r7, #1]
 8007d86:	461a      	mov	r2, r3
 8007d88:	e7c9      	b.n	8007d1e <_strtol_l.isra.0+0x2e>
 8007d8a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007d8e:	2b19      	cmp	r3, #25
 8007d90:	d801      	bhi.n	8007d96 <_strtol_l.isra.0+0xa6>
 8007d92:	3c37      	subs	r4, #55	; 0x37
 8007d94:	e7e2      	b.n	8007d5c <_strtol_l.isra.0+0x6c>
 8007d96:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007d9a:	2b19      	cmp	r3, #25
 8007d9c:	d804      	bhi.n	8007da8 <_strtol_l.isra.0+0xb8>
 8007d9e:	3c57      	subs	r4, #87	; 0x57
 8007da0:	e7dc      	b.n	8007d5c <_strtol_l.isra.0+0x6c>
 8007da2:	f04f 37ff 	mov.w	r7, #4294967295
 8007da6:	e7e5      	b.n	8007d74 <_strtol_l.isra.0+0x84>
 8007da8:	1c7b      	adds	r3, r7, #1
 8007daa:	d108      	bne.n	8007dbe <_strtol_l.isra.0+0xce>
 8007dac:	2322      	movs	r3, #34	; 0x22
 8007dae:	f8c8 3000 	str.w	r3, [r8]
 8007db2:	4608      	mov	r0, r1
 8007db4:	f1ba 0f00 	cmp.w	sl, #0
 8007db8:	d107      	bne.n	8007dca <_strtol_l.isra.0+0xda>
 8007dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbe:	b102      	cbz	r2, 8007dc2 <_strtol_l.isra.0+0xd2>
 8007dc0:	4240      	negs	r0, r0
 8007dc2:	f1ba 0f00 	cmp.w	sl, #0
 8007dc6:	d0f8      	beq.n	8007dba <_strtol_l.isra.0+0xca>
 8007dc8:	b10f      	cbz	r7, 8007dce <_strtol_l.isra.0+0xde>
 8007dca:	f105 39ff 	add.w	r9, r5, #4294967295
 8007dce:	f8ca 9000 	str.w	r9, [sl]
 8007dd2:	e7f2      	b.n	8007dba <_strtol_l.isra.0+0xca>
 8007dd4:	2430      	movs	r4, #48	; 0x30
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	d1af      	bne.n	8007d3a <_strtol_l.isra.0+0x4a>
 8007dda:	2608      	movs	r6, #8
 8007ddc:	e7ad      	b.n	8007d3a <_strtol_l.isra.0+0x4a>
 8007dde:	2c30      	cmp	r4, #48	; 0x30
 8007de0:	d0a3      	beq.n	8007d2a <_strtol_l.isra.0+0x3a>
 8007de2:	260a      	movs	r6, #10
 8007de4:	e7a9      	b.n	8007d3a <_strtol_l.isra.0+0x4a>
	...

08007de8 <_strtol_r>:
 8007de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dea:	4c06      	ldr	r4, [pc, #24]	; (8007e04 <_strtol_r+0x1c>)
 8007dec:	4d06      	ldr	r5, [pc, #24]	; (8007e08 <_strtol_r+0x20>)
 8007dee:	6824      	ldr	r4, [r4, #0]
 8007df0:	6a24      	ldr	r4, [r4, #32]
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	bf08      	it	eq
 8007df6:	462c      	moveq	r4, r5
 8007df8:	9400      	str	r4, [sp, #0]
 8007dfa:	f7ff ff79 	bl	8007cf0 <_strtol_l.isra.0>
 8007dfe:	b003      	add	sp, #12
 8007e00:	bd30      	pop	{r4, r5, pc}
 8007e02:	bf00      	nop
 8007e04:	2000000c 	.word	0x2000000c
 8007e08:	20000070 	.word	0x20000070

08007e0c <quorem>:
 8007e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	6903      	ldr	r3, [r0, #16]
 8007e12:	690c      	ldr	r4, [r1, #16]
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	4680      	mov	r8, r0
 8007e18:	f2c0 8082 	blt.w	8007f20 <quorem+0x114>
 8007e1c:	3c01      	subs	r4, #1
 8007e1e:	f101 0714 	add.w	r7, r1, #20
 8007e22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e26:	f100 0614 	add.w	r6, r0, #20
 8007e2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e32:	eb06 030c 	add.w	r3, r6, ip
 8007e36:	3501      	adds	r5, #1
 8007e38:	eb07 090c 	add.w	r9, r7, ip
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e42:	b395      	cbz	r5, 8007eaa <quorem+0x9e>
 8007e44:	f04f 0a00 	mov.w	sl, #0
 8007e48:	4638      	mov	r0, r7
 8007e4a:	46b6      	mov	lr, r6
 8007e4c:	46d3      	mov	fp, sl
 8007e4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e52:	b293      	uxth	r3, r2
 8007e54:	fb05 a303 	mla	r3, r5, r3, sl
 8007e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ebab 0303 	sub.w	r3, fp, r3
 8007e62:	0c12      	lsrs	r2, r2, #16
 8007e64:	f8de b000 	ldr.w	fp, [lr]
 8007e68:	fb05 a202 	mla	r2, r5, r2, sl
 8007e6c:	fa13 f38b 	uxtah	r3, r3, fp
 8007e70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007e74:	fa1f fb82 	uxth.w	fp, r2
 8007e78:	f8de 2000 	ldr.w	r2, [lr]
 8007e7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e8a:	4581      	cmp	r9, r0
 8007e8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007e90:	f84e 3b04 	str.w	r3, [lr], #4
 8007e94:	d2db      	bcs.n	8007e4e <quorem+0x42>
 8007e96:	f856 300c 	ldr.w	r3, [r6, ip]
 8007e9a:	b933      	cbnz	r3, 8007eaa <quorem+0x9e>
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	429e      	cmp	r6, r3
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	d330      	bcc.n	8007f08 <quorem+0xfc>
 8007ea6:	f8c8 4010 	str.w	r4, [r8, #16]
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f001 fba6 	bl	80095fc <__mcmp>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	db25      	blt.n	8007f00 <quorem+0xf4>
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f04f 0c00 	mov.w	ip, #0
 8007ebc:	f857 2b04 	ldr.w	r2, [r7], #4
 8007ec0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ec4:	b293      	uxth	r3, r2
 8007ec6:	ebac 0303 	sub.w	r3, ip, r3
 8007eca:	0c12      	lsrs	r2, r2, #16
 8007ecc:	fa13 f38e 	uxtah	r3, r3, lr
 8007ed0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ede:	45b9      	cmp	r9, r7
 8007ee0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ee4:	f840 3b04 	str.w	r3, [r0], #4
 8007ee8:	d2e8      	bcs.n	8007ebc <quorem+0xb0>
 8007eea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007eee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007ef2:	b92a      	cbnz	r2, 8007f00 <quorem+0xf4>
 8007ef4:	3b04      	subs	r3, #4
 8007ef6:	429e      	cmp	r6, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	d30b      	bcc.n	8007f14 <quorem+0x108>
 8007efc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f00:	4628      	mov	r0, r5
 8007f02:	b003      	add	sp, #12
 8007f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	3b04      	subs	r3, #4
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	d1ca      	bne.n	8007ea6 <quorem+0x9a>
 8007f10:	3c01      	subs	r4, #1
 8007f12:	e7c5      	b.n	8007ea0 <quorem+0x94>
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	3b04      	subs	r3, #4
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	d1ef      	bne.n	8007efc <quorem+0xf0>
 8007f1c:	3c01      	subs	r4, #1
 8007f1e:	e7ea      	b.n	8007ef6 <quorem+0xea>
 8007f20:	2000      	movs	r0, #0
 8007f22:	e7ee      	b.n	8007f02 <quorem+0xf6>
 8007f24:	0000      	movs	r0, r0
	...

08007f28 <_dtoa_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	ec57 6b10 	vmov	r6, r7, d0
 8007f30:	b097      	sub	sp, #92	; 0x5c
 8007f32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f34:	9106      	str	r1, [sp, #24]
 8007f36:	4604      	mov	r4, r0
 8007f38:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f40:	e9cd 6700 	strd	r6, r7, [sp]
 8007f44:	b93d      	cbnz	r5, 8007f56 <_dtoa_r+0x2e>
 8007f46:	2010      	movs	r0, #16
 8007f48:	f001 f8e0 	bl	800910c <malloc>
 8007f4c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f52:	6005      	str	r5, [r0, #0]
 8007f54:	60c5      	str	r5, [r0, #12]
 8007f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f58:	6819      	ldr	r1, [r3, #0]
 8007f5a:	b151      	cbz	r1, 8007f72 <_dtoa_r+0x4a>
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	604a      	str	r2, [r1, #4]
 8007f60:	2301      	movs	r3, #1
 8007f62:	4093      	lsls	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
 8007f66:	4620      	mov	r0, r4
 8007f68:	f001 f929 	bl	80091be <_Bfree>
 8007f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	1e3b      	subs	r3, r7, #0
 8007f74:	bfbb      	ittet	lt
 8007f76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f7a:	9301      	strlt	r3, [sp, #4]
 8007f7c:	2300      	movge	r3, #0
 8007f7e:	2201      	movlt	r2, #1
 8007f80:	bfac      	ite	ge
 8007f82:	f8c8 3000 	strge.w	r3, [r8]
 8007f86:	f8c8 2000 	strlt.w	r2, [r8]
 8007f8a:	4baf      	ldr	r3, [pc, #700]	; (8008248 <_dtoa_r+0x320>)
 8007f8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f90:	ea33 0308 	bics.w	r3, r3, r8
 8007f94:	d114      	bne.n	8007fc0 <_dtoa_r+0x98>
 8007f96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f98:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	b923      	cbnz	r3, 8007fac <_dtoa_r+0x84>
 8007fa2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f000 8542 	beq.w	8008a30 <_dtoa_r+0xb08>
 8007fac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800825c <_dtoa_r+0x334>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 8544 	beq.w	8008a40 <_dtoa_r+0xb18>
 8007fb8:	f10b 0303 	add.w	r3, fp, #3
 8007fbc:	f000 bd3e 	b.w	8008a3c <_dtoa_r+0xb14>
 8007fc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd0:	4681      	mov	r9, r0
 8007fd2:	b168      	cbz	r0, 8007ff0 <_dtoa_r+0xc8>
 8007fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8524 	beq.w	8008a2a <_dtoa_r+0xb02>
 8007fe2:	4b9a      	ldr	r3, [pc, #616]	; (800824c <_dtoa_r+0x324>)
 8007fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fe6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	f000 bd28 	b.w	8008a40 <_dtoa_r+0xb18>
 8007ff0:	aa14      	add	r2, sp, #80	; 0x50
 8007ff2:	a915      	add	r1, sp, #84	; 0x54
 8007ff4:	ec47 6b10 	vmov	d0, r6, r7
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fbed 	bl	80097d8 <__d2b>
 8007ffe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008002:	9004      	str	r0, [sp, #16]
 8008004:	2d00      	cmp	r5, #0
 8008006:	d07c      	beq.n	8008102 <_dtoa_r+0x1da>
 8008008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800800c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008010:	46b2      	mov	sl, r6
 8008012:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800801a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800801e:	2200      	movs	r2, #0
 8008020:	4b8b      	ldr	r3, [pc, #556]	; (8008250 <_dtoa_r+0x328>)
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 f92f 	bl	8000288 <__aeabi_dsub>
 800802a:	a381      	add	r3, pc, #516	; (adr r3, 8008230 <_dtoa_r+0x308>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	a380      	add	r3, pc, #512	; (adr r3, 8008238 <_dtoa_r+0x310>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 f927 	bl	800028c <__adddf3>
 800803e:	4606      	mov	r6, r0
 8008040:	4628      	mov	r0, r5
 8008042:	460f      	mov	r7, r1
 8008044:	f7f8 fa6e 	bl	8000524 <__aeabi_i2d>
 8008048:	a37d      	add	r3, pc, #500	; (adr r3, 8008240 <_dtoa_r+0x318>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 fad3 	bl	80005f8 <__aeabi_dmul>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4630      	mov	r0, r6
 8008058:	4639      	mov	r1, r7
 800805a:	f7f8 f917 	bl	800028c <__adddf3>
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	f7f8 fd79 	bl	8000b58 <__aeabi_d2iz>
 8008066:	2200      	movs	r2, #0
 8008068:	4682      	mov	sl, r0
 800806a:	2300      	movs	r3, #0
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 fd34 	bl	8000adc <__aeabi_dcmplt>
 8008074:	b148      	cbz	r0, 800808a <_dtoa_r+0x162>
 8008076:	4650      	mov	r0, sl
 8008078:	f7f8 fa54 	bl	8000524 <__aeabi_i2d>
 800807c:	4632      	mov	r2, r6
 800807e:	463b      	mov	r3, r7
 8008080:	f7f8 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008084:	b908      	cbnz	r0, 800808a <_dtoa_r+0x162>
 8008086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800808a:	f1ba 0f16 	cmp.w	sl, #22
 800808e:	d859      	bhi.n	8008144 <_dtoa_r+0x21c>
 8008090:	4970      	ldr	r1, [pc, #448]	; (8008254 <_dtoa_r+0x32c>)
 8008092:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800809a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800809e:	f7f8 fd3b 	bl	8000b18 <__aeabi_dcmpgt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d050      	beq.n	8008148 <_dtoa_r+0x220>
 80080a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080aa:	2300      	movs	r3, #0
 80080ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80080ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080b0:	1b5d      	subs	r5, r3, r5
 80080b2:	f1b5 0801 	subs.w	r8, r5, #1
 80080b6:	bf49      	itett	mi
 80080b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80080bc:	2300      	movpl	r3, #0
 80080be:	9305      	strmi	r3, [sp, #20]
 80080c0:	f04f 0800 	movmi.w	r8, #0
 80080c4:	bf58      	it	pl
 80080c6:	9305      	strpl	r3, [sp, #20]
 80080c8:	f1ba 0f00 	cmp.w	sl, #0
 80080cc:	db3e      	blt.n	800814c <_dtoa_r+0x224>
 80080ce:	2300      	movs	r3, #0
 80080d0:	44d0      	add	r8, sl
 80080d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	2b09      	cmp	r3, #9
 80080dc:	f200 8090 	bhi.w	8008200 <_dtoa_r+0x2d8>
 80080e0:	2b05      	cmp	r3, #5
 80080e2:	bfc4      	itt	gt
 80080e4:	3b04      	subgt	r3, #4
 80080e6:	9306      	strgt	r3, [sp, #24]
 80080e8:	9b06      	ldr	r3, [sp, #24]
 80080ea:	f1a3 0302 	sub.w	r3, r3, #2
 80080ee:	bfcc      	ite	gt
 80080f0:	2500      	movgt	r5, #0
 80080f2:	2501      	movle	r5, #1
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	f200 808f 	bhi.w	8008218 <_dtoa_r+0x2f0>
 80080fa:	e8df f003 	tbb	[pc, r3]
 80080fe:	7f7d      	.short	0x7f7d
 8008100:	7131      	.short	0x7131
 8008102:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008106:	441d      	add	r5, r3
 8008108:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800810c:	2820      	cmp	r0, #32
 800810e:	dd13      	ble.n	8008138 <_dtoa_r+0x210>
 8008110:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008114:	9b00      	ldr	r3, [sp, #0]
 8008116:	fa08 f800 	lsl.w	r8, r8, r0
 800811a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800811e:	fa23 f000 	lsr.w	r0, r3, r0
 8008122:	ea48 0000 	orr.w	r0, r8, r0
 8008126:	f7f8 f9ed 	bl	8000504 <__aeabi_ui2d>
 800812a:	2301      	movs	r3, #1
 800812c:	4682      	mov	sl, r0
 800812e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008132:	3d01      	subs	r5, #1
 8008134:	9313      	str	r3, [sp, #76]	; 0x4c
 8008136:	e772      	b.n	800801e <_dtoa_r+0xf6>
 8008138:	9b00      	ldr	r3, [sp, #0]
 800813a:	f1c0 0020 	rsb	r0, r0, #32
 800813e:	fa03 f000 	lsl.w	r0, r3, r0
 8008142:	e7f0      	b.n	8008126 <_dtoa_r+0x1fe>
 8008144:	2301      	movs	r3, #1
 8008146:	e7b1      	b.n	80080ac <_dtoa_r+0x184>
 8008148:	900f      	str	r0, [sp, #60]	; 0x3c
 800814a:	e7b0      	b.n	80080ae <_dtoa_r+0x186>
 800814c:	9b05      	ldr	r3, [sp, #20]
 800814e:	eba3 030a 	sub.w	r3, r3, sl
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	f1ca 0300 	rsb	r3, sl, #0
 8008158:	9307      	str	r3, [sp, #28]
 800815a:	2300      	movs	r3, #0
 800815c:	930e      	str	r3, [sp, #56]	; 0x38
 800815e:	e7bb      	b.n	80080d8 <_dtoa_r+0x1b0>
 8008160:	2301      	movs	r3, #1
 8008162:	930a      	str	r3, [sp, #40]	; 0x28
 8008164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd59      	ble.n	800821e <_dtoa_r+0x2f6>
 800816a:	9302      	str	r3, [sp, #8]
 800816c:	4699      	mov	r9, r3
 800816e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008170:	2200      	movs	r2, #0
 8008172:	6072      	str	r2, [r6, #4]
 8008174:	2204      	movs	r2, #4
 8008176:	f102 0014 	add.w	r0, r2, #20
 800817a:	4298      	cmp	r0, r3
 800817c:	6871      	ldr	r1, [r6, #4]
 800817e:	d953      	bls.n	8008228 <_dtoa_r+0x300>
 8008180:	4620      	mov	r0, r4
 8008182:	f000 ffe8 	bl	8009156 <_Balloc>
 8008186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008188:	6030      	str	r0, [r6, #0]
 800818a:	f1b9 0f0e 	cmp.w	r9, #14
 800818e:	f8d3 b000 	ldr.w	fp, [r3]
 8008192:	f200 80e6 	bhi.w	8008362 <_dtoa_r+0x43a>
 8008196:	2d00      	cmp	r5, #0
 8008198:	f000 80e3 	beq.w	8008362 <_dtoa_r+0x43a>
 800819c:	ed9d 7b00 	vldr	d7, [sp]
 80081a0:	f1ba 0f00 	cmp.w	sl, #0
 80081a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80081a8:	dd74      	ble.n	8008294 <_dtoa_r+0x36c>
 80081aa:	4a2a      	ldr	r2, [pc, #168]	; (8008254 <_dtoa_r+0x32c>)
 80081ac:	f00a 030f 	and.w	r3, sl, #15
 80081b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081b4:	ed93 7b00 	vldr	d7, [r3]
 80081b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081bc:	06f0      	lsls	r0, r6, #27
 80081be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80081c2:	d565      	bpl.n	8008290 <_dtoa_r+0x368>
 80081c4:	4b24      	ldr	r3, [pc, #144]	; (8008258 <_dtoa_r+0x330>)
 80081c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081ce:	f7f8 fb3d 	bl	800084c <__aeabi_ddiv>
 80081d2:	e9cd 0100 	strd	r0, r1, [sp]
 80081d6:	f006 060f 	and.w	r6, r6, #15
 80081da:	2503      	movs	r5, #3
 80081dc:	4f1e      	ldr	r7, [pc, #120]	; (8008258 <_dtoa_r+0x330>)
 80081de:	e04c      	b.n	800827a <_dtoa_r+0x352>
 80081e0:	2301      	movs	r3, #1
 80081e2:	930a      	str	r3, [sp, #40]	; 0x28
 80081e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e6:	4453      	add	r3, sl
 80081e8:	f103 0901 	add.w	r9, r3, #1
 80081ec:	9302      	str	r3, [sp, #8]
 80081ee:	464b      	mov	r3, r9
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bfb8      	it	lt
 80081f4:	2301      	movlt	r3, #1
 80081f6:	e7ba      	b.n	800816e <_dtoa_r+0x246>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e7b2      	b.n	8008162 <_dtoa_r+0x23a>
 80081fc:	2300      	movs	r3, #0
 80081fe:	e7f0      	b.n	80081e2 <_dtoa_r+0x2ba>
 8008200:	2501      	movs	r5, #1
 8008202:	2300      	movs	r3, #0
 8008204:	9306      	str	r3, [sp, #24]
 8008206:	950a      	str	r5, [sp, #40]	; 0x28
 8008208:	f04f 33ff 	mov.w	r3, #4294967295
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	4699      	mov	r9, r3
 8008210:	2200      	movs	r2, #0
 8008212:	2312      	movs	r3, #18
 8008214:	920b      	str	r2, [sp, #44]	; 0x2c
 8008216:	e7aa      	b.n	800816e <_dtoa_r+0x246>
 8008218:	2301      	movs	r3, #1
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	e7f4      	b.n	8008208 <_dtoa_r+0x2e0>
 800821e:	2301      	movs	r3, #1
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	4699      	mov	r9, r3
 8008224:	461a      	mov	r2, r3
 8008226:	e7f5      	b.n	8008214 <_dtoa_r+0x2ec>
 8008228:	3101      	adds	r1, #1
 800822a:	6071      	str	r1, [r6, #4]
 800822c:	0052      	lsls	r2, r2, #1
 800822e:	e7a2      	b.n	8008176 <_dtoa_r+0x24e>
 8008230:	636f4361 	.word	0x636f4361
 8008234:	3fd287a7 	.word	0x3fd287a7
 8008238:	8b60c8b3 	.word	0x8b60c8b3
 800823c:	3fc68a28 	.word	0x3fc68a28
 8008240:	509f79fb 	.word	0x509f79fb
 8008244:	3fd34413 	.word	0x3fd34413
 8008248:	7ff00000 	.word	0x7ff00000
 800824c:	08009fdd 	.word	0x08009fdd
 8008250:	3ff80000 	.word	0x3ff80000
 8008254:	0800a098 	.word	0x0800a098
 8008258:	0800a070 	.word	0x0800a070
 800825c:	0800a061 	.word	0x0800a061
 8008260:	07f1      	lsls	r1, r6, #31
 8008262:	d508      	bpl.n	8008276 <_dtoa_r+0x34e>
 8008264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800826c:	f7f8 f9c4 	bl	80005f8 <__aeabi_dmul>
 8008270:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008274:	3501      	adds	r5, #1
 8008276:	1076      	asrs	r6, r6, #1
 8008278:	3708      	adds	r7, #8
 800827a:	2e00      	cmp	r6, #0
 800827c:	d1f0      	bne.n	8008260 <_dtoa_r+0x338>
 800827e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008286:	f7f8 fae1 	bl	800084c <__aeabi_ddiv>
 800828a:	e9cd 0100 	strd	r0, r1, [sp]
 800828e:	e01a      	b.n	80082c6 <_dtoa_r+0x39e>
 8008290:	2502      	movs	r5, #2
 8008292:	e7a3      	b.n	80081dc <_dtoa_r+0x2b4>
 8008294:	f000 80a0 	beq.w	80083d8 <_dtoa_r+0x4b0>
 8008298:	f1ca 0600 	rsb	r6, sl, #0
 800829c:	4b9f      	ldr	r3, [pc, #636]	; (800851c <_dtoa_r+0x5f4>)
 800829e:	4fa0      	ldr	r7, [pc, #640]	; (8008520 <_dtoa_r+0x5f8>)
 80082a0:	f006 020f 	and.w	r2, r6, #15
 80082a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082b0:	f7f8 f9a2 	bl	80005f8 <__aeabi_dmul>
 80082b4:	e9cd 0100 	strd	r0, r1, [sp]
 80082b8:	1136      	asrs	r6, r6, #4
 80082ba:	2300      	movs	r3, #0
 80082bc:	2502      	movs	r5, #2
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d17f      	bne.n	80083c2 <_dtoa_r+0x49a>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e1      	bne.n	800828a <_dtoa_r+0x362>
 80082c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8087 	beq.w	80083dc <_dtoa_r+0x4b4>
 80082ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082d2:	2200      	movs	r2, #0
 80082d4:	4b93      	ldr	r3, [pc, #588]	; (8008524 <_dtoa_r+0x5fc>)
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f8 fbff 	bl	8000adc <__aeabi_dcmplt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d07c      	beq.n	80083dc <_dtoa_r+0x4b4>
 80082e2:	f1b9 0f00 	cmp.w	r9, #0
 80082e6:	d079      	beq.n	80083dc <_dtoa_r+0x4b4>
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dd35      	ble.n	800835a <_dtoa_r+0x432>
 80082ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082f2:	9308      	str	r3, [sp, #32]
 80082f4:	4639      	mov	r1, r7
 80082f6:	2200      	movs	r2, #0
 80082f8:	4b8b      	ldr	r3, [pc, #556]	; (8008528 <_dtoa_r+0x600>)
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	e9cd 0100 	strd	r0, r1, [sp]
 8008304:	9f02      	ldr	r7, [sp, #8]
 8008306:	3501      	adds	r5, #1
 8008308:	4628      	mov	r0, r5
 800830a:	f7f8 f90b 	bl	8000524 <__aeabi_i2d>
 800830e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008312:	f7f8 f971 	bl	80005f8 <__aeabi_dmul>
 8008316:	2200      	movs	r2, #0
 8008318:	4b84      	ldr	r3, [pc, #528]	; (800852c <_dtoa_r+0x604>)
 800831a:	f7f7 ffb7 	bl	800028c <__adddf3>
 800831e:	4605      	mov	r5, r0
 8008320:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008324:	2f00      	cmp	r7, #0
 8008326:	d15d      	bne.n	80083e4 <_dtoa_r+0x4bc>
 8008328:	2200      	movs	r2, #0
 800832a:	4b81      	ldr	r3, [pc, #516]	; (8008530 <_dtoa_r+0x608>)
 800832c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008330:	f7f7 ffaa 	bl	8000288 <__aeabi_dsub>
 8008334:	462a      	mov	r2, r5
 8008336:	4633      	mov	r3, r6
 8008338:	e9cd 0100 	strd	r0, r1, [sp]
 800833c:	f7f8 fbec 	bl	8000b18 <__aeabi_dcmpgt>
 8008340:	2800      	cmp	r0, #0
 8008342:	f040 8288 	bne.w	8008856 <_dtoa_r+0x92e>
 8008346:	462a      	mov	r2, r5
 8008348:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800834c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008350:	f7f8 fbc4 	bl	8000adc <__aeabi_dcmplt>
 8008354:	2800      	cmp	r0, #0
 8008356:	f040 827c 	bne.w	8008852 <_dtoa_r+0x92a>
 800835a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800835e:	e9cd 2300 	strd	r2, r3, [sp]
 8008362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008364:	2b00      	cmp	r3, #0
 8008366:	f2c0 8150 	blt.w	800860a <_dtoa_r+0x6e2>
 800836a:	f1ba 0f0e 	cmp.w	sl, #14
 800836e:	f300 814c 	bgt.w	800860a <_dtoa_r+0x6e2>
 8008372:	4b6a      	ldr	r3, [pc, #424]	; (800851c <_dtoa_r+0x5f4>)
 8008374:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008378:	ed93 7b00 	vldr	d7, [r3]
 800837c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837e:	2b00      	cmp	r3, #0
 8008380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008384:	f280 80d8 	bge.w	8008538 <_dtoa_r+0x610>
 8008388:	f1b9 0f00 	cmp.w	r9, #0
 800838c:	f300 80d4 	bgt.w	8008538 <_dtoa_r+0x610>
 8008390:	f040 825e 	bne.w	8008850 <_dtoa_r+0x928>
 8008394:	2200      	movs	r2, #0
 8008396:	4b66      	ldr	r3, [pc, #408]	; (8008530 <_dtoa_r+0x608>)
 8008398:	ec51 0b17 	vmov	r0, r1, d7
 800839c:	f7f8 f92c 	bl	80005f8 <__aeabi_dmul>
 80083a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a4:	f7f8 fbae 	bl	8000b04 <__aeabi_dcmpge>
 80083a8:	464f      	mov	r7, r9
 80083aa:	464e      	mov	r6, r9
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f040 8234 	bne.w	800881a <_dtoa_r+0x8f2>
 80083b2:	2331      	movs	r3, #49	; 0x31
 80083b4:	f10b 0501 	add.w	r5, fp, #1
 80083b8:	f88b 3000 	strb.w	r3, [fp]
 80083bc:	f10a 0a01 	add.w	sl, sl, #1
 80083c0:	e22f      	b.n	8008822 <_dtoa_r+0x8fa>
 80083c2:	07f2      	lsls	r2, r6, #31
 80083c4:	d505      	bpl.n	80083d2 <_dtoa_r+0x4aa>
 80083c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	3501      	adds	r5, #1
 80083d0:	2301      	movs	r3, #1
 80083d2:	1076      	asrs	r6, r6, #1
 80083d4:	3708      	adds	r7, #8
 80083d6:	e772      	b.n	80082be <_dtoa_r+0x396>
 80083d8:	2502      	movs	r5, #2
 80083da:	e774      	b.n	80082c6 <_dtoa_r+0x39e>
 80083dc:	f8cd a020 	str.w	sl, [sp, #32]
 80083e0:	464f      	mov	r7, r9
 80083e2:	e791      	b.n	8008308 <_dtoa_r+0x3e0>
 80083e4:	4b4d      	ldr	r3, [pc, #308]	; (800851c <_dtoa_r+0x5f4>)
 80083e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d047      	beq.n	8008484 <_dtoa_r+0x55c>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	2000      	movs	r0, #0
 80083fa:	494e      	ldr	r1, [pc, #312]	; (8008534 <_dtoa_r+0x60c>)
 80083fc:	f7f8 fa26 	bl	800084c <__aeabi_ddiv>
 8008400:	462a      	mov	r2, r5
 8008402:	4633      	mov	r3, r6
 8008404:	f7f7 ff40 	bl	8000288 <__aeabi_dsub>
 8008408:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800840c:	465d      	mov	r5, fp
 800840e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008412:	f7f8 fba1 	bl	8000b58 <__aeabi_d2iz>
 8008416:	4606      	mov	r6, r0
 8008418:	f7f8 f884 	bl	8000524 <__aeabi_i2d>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008424:	f7f7 ff30 	bl	8000288 <__aeabi_dsub>
 8008428:	3630      	adds	r6, #48	; 0x30
 800842a:	f805 6b01 	strb.w	r6, [r5], #1
 800842e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008432:	e9cd 0100 	strd	r0, r1, [sp]
 8008436:	f7f8 fb51 	bl	8000adc <__aeabi_dcmplt>
 800843a:	2800      	cmp	r0, #0
 800843c:	d163      	bne.n	8008506 <_dtoa_r+0x5de>
 800843e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008442:	2000      	movs	r0, #0
 8008444:	4937      	ldr	r1, [pc, #220]	; (8008524 <_dtoa_r+0x5fc>)
 8008446:	f7f7 ff1f 	bl	8000288 <__aeabi_dsub>
 800844a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800844e:	f7f8 fb45 	bl	8000adc <__aeabi_dcmplt>
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 80b7 	bne.w	80085c6 <_dtoa_r+0x69e>
 8008458:	eba5 030b 	sub.w	r3, r5, fp
 800845c:	429f      	cmp	r7, r3
 800845e:	f77f af7c 	ble.w	800835a <_dtoa_r+0x432>
 8008462:	2200      	movs	r2, #0
 8008464:	4b30      	ldr	r3, [pc, #192]	; (8008528 <_dtoa_r+0x600>)
 8008466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800846a:	f7f8 f8c5 	bl	80005f8 <__aeabi_dmul>
 800846e:	2200      	movs	r2, #0
 8008470:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008474:	4b2c      	ldr	r3, [pc, #176]	; (8008528 <_dtoa_r+0x600>)
 8008476:	e9dd 0100 	ldrd	r0, r1, [sp]
 800847a:	f7f8 f8bd 	bl	80005f8 <__aeabi_dmul>
 800847e:	e9cd 0100 	strd	r0, r1, [sp]
 8008482:	e7c4      	b.n	800840e <_dtoa_r+0x4e6>
 8008484:	462a      	mov	r2, r5
 8008486:	4633      	mov	r3, r6
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008490:	eb0b 0507 	add.w	r5, fp, r7
 8008494:	465e      	mov	r6, fp
 8008496:	e9dd 0100 	ldrd	r0, r1, [sp]
 800849a:	f7f8 fb5d 	bl	8000b58 <__aeabi_d2iz>
 800849e:	4607      	mov	r7, r0
 80084a0:	f7f8 f840 	bl	8000524 <__aeabi_i2d>
 80084a4:	3730      	adds	r7, #48	; 0x30
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ae:	f7f7 feeb 	bl	8000288 <__aeabi_dsub>
 80084b2:	f806 7b01 	strb.w	r7, [r6], #1
 80084b6:	42ae      	cmp	r6, r5
 80084b8:	e9cd 0100 	strd	r0, r1, [sp]
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	d126      	bne.n	8008510 <_dtoa_r+0x5e8>
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <_dtoa_r+0x60c>)
 80084c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084c8:	f7f7 fee0 	bl	800028c <__adddf3>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084d4:	f7f8 fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d174      	bne.n	80085c6 <_dtoa_r+0x69e>
 80084dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084e0:	2000      	movs	r0, #0
 80084e2:	4914      	ldr	r1, [pc, #80]	; (8008534 <_dtoa_r+0x60c>)
 80084e4:	f7f7 fed0 	bl	8000288 <__aeabi_dsub>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084f0:	f7f8 faf4 	bl	8000adc <__aeabi_dcmplt>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f43f af30 	beq.w	800835a <_dtoa_r+0x432>
 80084fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084fe:	2b30      	cmp	r3, #48	; 0x30
 8008500:	f105 32ff 	add.w	r2, r5, #4294967295
 8008504:	d002      	beq.n	800850c <_dtoa_r+0x5e4>
 8008506:	f8dd a020 	ldr.w	sl, [sp, #32]
 800850a:	e04a      	b.n	80085a2 <_dtoa_r+0x67a>
 800850c:	4615      	mov	r5, r2
 800850e:	e7f4      	b.n	80084fa <_dtoa_r+0x5d2>
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <_dtoa_r+0x600>)
 8008512:	f7f8 f871 	bl	80005f8 <__aeabi_dmul>
 8008516:	e9cd 0100 	strd	r0, r1, [sp]
 800851a:	e7bc      	b.n	8008496 <_dtoa_r+0x56e>
 800851c:	0800a098 	.word	0x0800a098
 8008520:	0800a070 	.word	0x0800a070
 8008524:	3ff00000 	.word	0x3ff00000
 8008528:	40240000 	.word	0x40240000
 800852c:	401c0000 	.word	0x401c0000
 8008530:	40140000 	.word	0x40140000
 8008534:	3fe00000 	.word	0x3fe00000
 8008538:	e9dd 6700 	ldrd	r6, r7, [sp]
 800853c:	465d      	mov	r5, fp
 800853e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008542:	4630      	mov	r0, r6
 8008544:	4639      	mov	r1, r7
 8008546:	f7f8 f981 	bl	800084c <__aeabi_ddiv>
 800854a:	f7f8 fb05 	bl	8000b58 <__aeabi_d2iz>
 800854e:	4680      	mov	r8, r0
 8008550:	f7f7 ffe8 	bl	8000524 <__aeabi_i2d>
 8008554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008558:	f7f8 f84e 	bl	80005f8 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008568:	f7f7 fe8e 	bl	8000288 <__aeabi_dsub>
 800856c:	f805 6b01 	strb.w	r6, [r5], #1
 8008570:	eba5 060b 	sub.w	r6, r5, fp
 8008574:	45b1      	cmp	r9, r6
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	d139      	bne.n	80085f0 <_dtoa_r+0x6c8>
 800857c:	f7f7 fe86 	bl	800028c <__adddf3>
 8008580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	f7f8 fac6 	bl	8000b18 <__aeabi_dcmpgt>
 800858c:	b9c8      	cbnz	r0, 80085c2 <_dtoa_r+0x69a>
 800858e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008592:	4630      	mov	r0, r6
 8008594:	4639      	mov	r1, r7
 8008596:	f7f8 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800859a:	b110      	cbz	r0, 80085a2 <_dtoa_r+0x67a>
 800859c:	f018 0f01 	tst.w	r8, #1
 80085a0:	d10f      	bne.n	80085c2 <_dtoa_r+0x69a>
 80085a2:	9904      	ldr	r1, [sp, #16]
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fe0a 	bl	80091be <_Bfree>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085ae:	702b      	strb	r3, [r5, #0]
 80085b0:	f10a 0301 	add.w	r3, sl, #1
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8241 	beq.w	8008a40 <_dtoa_r+0xb18>
 80085be:	601d      	str	r5, [r3, #0]
 80085c0:	e23e      	b.n	8008a40 <_dtoa_r+0xb18>
 80085c2:	f8cd a020 	str.w	sl, [sp, #32]
 80085c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ca:	2a39      	cmp	r2, #57	; 0x39
 80085cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80085d0:	d108      	bne.n	80085e4 <_dtoa_r+0x6bc>
 80085d2:	459b      	cmp	fp, r3
 80085d4:	d10a      	bne.n	80085ec <_dtoa_r+0x6c4>
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	3301      	adds	r3, #1
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	2330      	movs	r3, #48	; 0x30
 80085de:	f88b 3000 	strb.w	r3, [fp]
 80085e2:	465b      	mov	r3, fp
 80085e4:	781a      	ldrb	r2, [r3, #0]
 80085e6:	3201      	adds	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e78c      	b.n	8008506 <_dtoa_r+0x5de>
 80085ec:	461d      	mov	r5, r3
 80085ee:	e7ea      	b.n	80085c6 <_dtoa_r+0x69e>
 80085f0:	2200      	movs	r2, #0
 80085f2:	4b9b      	ldr	r3, [pc, #620]	; (8008860 <_dtoa_r+0x938>)
 80085f4:	f7f8 f800 	bl	80005f8 <__aeabi_dmul>
 80085f8:	2200      	movs	r2, #0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4606      	mov	r6, r0
 80085fe:	460f      	mov	r7, r1
 8008600:	f7f8 fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8008604:	2800      	cmp	r0, #0
 8008606:	d09a      	beq.n	800853e <_dtoa_r+0x616>
 8008608:	e7cb      	b.n	80085a2 <_dtoa_r+0x67a>
 800860a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860c:	2a00      	cmp	r2, #0
 800860e:	f000 808b 	beq.w	8008728 <_dtoa_r+0x800>
 8008612:	9a06      	ldr	r2, [sp, #24]
 8008614:	2a01      	cmp	r2, #1
 8008616:	dc6e      	bgt.n	80086f6 <_dtoa_r+0x7ce>
 8008618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800861a:	2a00      	cmp	r2, #0
 800861c:	d067      	beq.n	80086ee <_dtoa_r+0x7c6>
 800861e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008622:	9f07      	ldr	r7, [sp, #28]
 8008624:	9d05      	ldr	r5, [sp, #20]
 8008626:	9a05      	ldr	r2, [sp, #20]
 8008628:	2101      	movs	r1, #1
 800862a:	441a      	add	r2, r3
 800862c:	4620      	mov	r0, r4
 800862e:	9205      	str	r2, [sp, #20]
 8008630:	4498      	add	r8, r3
 8008632:	f000 fea2 	bl	800937a <__i2b>
 8008636:	4606      	mov	r6, r0
 8008638:	2d00      	cmp	r5, #0
 800863a:	dd0c      	ble.n	8008656 <_dtoa_r+0x72e>
 800863c:	f1b8 0f00 	cmp.w	r8, #0
 8008640:	dd09      	ble.n	8008656 <_dtoa_r+0x72e>
 8008642:	4545      	cmp	r5, r8
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	462b      	mov	r3, r5
 8008648:	bfa8      	it	ge
 800864a:	4643      	movge	r3, r8
 800864c:	1ad2      	subs	r2, r2, r3
 800864e:	9205      	str	r2, [sp, #20]
 8008650:	1aed      	subs	r5, r5, r3
 8008652:	eba8 0803 	sub.w	r8, r8, r3
 8008656:	9b07      	ldr	r3, [sp, #28]
 8008658:	b1eb      	cbz	r3, 8008696 <_dtoa_r+0x76e>
 800865a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d067      	beq.n	8008730 <_dtoa_r+0x808>
 8008660:	b18f      	cbz	r7, 8008686 <_dtoa_r+0x75e>
 8008662:	4631      	mov	r1, r6
 8008664:	463a      	mov	r2, r7
 8008666:	4620      	mov	r0, r4
 8008668:	f000 ff26 	bl	80094b8 <__pow5mult>
 800866c:	9a04      	ldr	r2, [sp, #16]
 800866e:	4601      	mov	r1, r0
 8008670:	4606      	mov	r6, r0
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fe8a 	bl	800938c <__multiply>
 8008678:	9904      	ldr	r1, [sp, #16]
 800867a:	9008      	str	r0, [sp, #32]
 800867c:	4620      	mov	r0, r4
 800867e:	f000 fd9e 	bl	80091be <_Bfree>
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	1bda      	subs	r2, r3, r7
 800868a:	d004      	beq.n	8008696 <_dtoa_r+0x76e>
 800868c:	9904      	ldr	r1, [sp, #16]
 800868e:	4620      	mov	r0, r4
 8008690:	f000 ff12 	bl	80094b8 <__pow5mult>
 8008694:	9004      	str	r0, [sp, #16]
 8008696:	2101      	movs	r1, #1
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fe6e 	bl	800937a <__i2b>
 800869e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a0:	4607      	mov	r7, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 81d0 	beq.w	8008a48 <_dtoa_r+0xb20>
 80086a8:	461a      	mov	r2, r3
 80086aa:	4601      	mov	r1, r0
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 ff03 	bl	80094b8 <__pow5mult>
 80086b2:	9b06      	ldr	r3, [sp, #24]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	4607      	mov	r7, r0
 80086b8:	dc40      	bgt.n	800873c <_dtoa_r+0x814>
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d139      	bne.n	8008734 <_dtoa_r+0x80c>
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d136      	bne.n	8008738 <_dtoa_r+0x810>
 80086ca:	9b01      	ldr	r3, [sp, #4]
 80086cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	051b      	lsls	r3, r3, #20
 80086d4:	b12b      	cbz	r3, 80086e2 <_dtoa_r+0x7ba>
 80086d6:	9b05      	ldr	r3, [sp, #20]
 80086d8:	3301      	adds	r3, #1
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	f108 0801 	add.w	r8, r8, #1
 80086e0:	2301      	movs	r3, #1
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d12a      	bne.n	8008740 <_dtoa_r+0x818>
 80086ea:	2001      	movs	r0, #1
 80086ec:	e030      	b.n	8008750 <_dtoa_r+0x828>
 80086ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086f4:	e795      	b.n	8008622 <_dtoa_r+0x6fa>
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80086fc:	42bb      	cmp	r3, r7
 80086fe:	bfbf      	itttt	lt
 8008700:	9b07      	ldrlt	r3, [sp, #28]
 8008702:	9707      	strlt	r7, [sp, #28]
 8008704:	1afa      	sublt	r2, r7, r3
 8008706:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008708:	bfbb      	ittet	lt
 800870a:	189b      	addlt	r3, r3, r2
 800870c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800870e:	1bdf      	subge	r7, r3, r7
 8008710:	2700      	movlt	r7, #0
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	bfb5      	itete	lt
 8008718:	9b05      	ldrlt	r3, [sp, #20]
 800871a:	9d05      	ldrge	r5, [sp, #20]
 800871c:	eba3 0509 	sublt.w	r5, r3, r9
 8008720:	464b      	movge	r3, r9
 8008722:	bfb8      	it	lt
 8008724:	2300      	movlt	r3, #0
 8008726:	e77e      	b.n	8008626 <_dtoa_r+0x6fe>
 8008728:	9f07      	ldr	r7, [sp, #28]
 800872a:	9d05      	ldr	r5, [sp, #20]
 800872c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800872e:	e783      	b.n	8008638 <_dtoa_r+0x710>
 8008730:	9a07      	ldr	r2, [sp, #28]
 8008732:	e7ab      	b.n	800868c <_dtoa_r+0x764>
 8008734:	2300      	movs	r3, #0
 8008736:	e7d4      	b.n	80086e2 <_dtoa_r+0x7ba>
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	e7d2      	b.n	80086e2 <_dtoa_r+0x7ba>
 800873c:	2300      	movs	r3, #0
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008746:	6918      	ldr	r0, [r3, #16]
 8008748:	f000 fdc9 	bl	80092de <__hi0bits>
 800874c:	f1c0 0020 	rsb	r0, r0, #32
 8008750:	4440      	add	r0, r8
 8008752:	f010 001f 	ands.w	r0, r0, #31
 8008756:	d047      	beq.n	80087e8 <_dtoa_r+0x8c0>
 8008758:	f1c0 0320 	rsb	r3, r0, #32
 800875c:	2b04      	cmp	r3, #4
 800875e:	dd3b      	ble.n	80087d8 <_dtoa_r+0x8b0>
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	f1c0 001c 	rsb	r0, r0, #28
 8008766:	4403      	add	r3, r0
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	4405      	add	r5, r0
 800876c:	4480      	add	r8, r0
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	dd05      	ble.n	8008780 <_dtoa_r+0x858>
 8008774:	461a      	mov	r2, r3
 8008776:	9904      	ldr	r1, [sp, #16]
 8008778:	4620      	mov	r0, r4
 800877a:	f000 feeb 	bl	8009554 <__lshift>
 800877e:	9004      	str	r0, [sp, #16]
 8008780:	f1b8 0f00 	cmp.w	r8, #0
 8008784:	dd05      	ble.n	8008792 <_dtoa_r+0x86a>
 8008786:	4639      	mov	r1, r7
 8008788:	4642      	mov	r2, r8
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fee2 	bl	8009554 <__lshift>
 8008790:	4607      	mov	r7, r0
 8008792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008794:	b353      	cbz	r3, 80087ec <_dtoa_r+0x8c4>
 8008796:	4639      	mov	r1, r7
 8008798:	9804      	ldr	r0, [sp, #16]
 800879a:	f000 ff2f 	bl	80095fc <__mcmp>
 800879e:	2800      	cmp	r0, #0
 80087a0:	da24      	bge.n	80087ec <_dtoa_r+0x8c4>
 80087a2:	2300      	movs	r3, #0
 80087a4:	220a      	movs	r2, #10
 80087a6:	9904      	ldr	r1, [sp, #16]
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fd1f 	bl	80091ec <__multadd>
 80087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b0:	9004      	str	r0, [sp, #16]
 80087b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 814d 	beq.w	8008a56 <_dtoa_r+0xb2e>
 80087bc:	2300      	movs	r3, #0
 80087be:	4631      	mov	r1, r6
 80087c0:	220a      	movs	r2, #10
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fd12 	bl	80091ec <__multadd>
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	4606      	mov	r6, r0
 80087ce:	dc4f      	bgt.n	8008870 <_dtoa_r+0x948>
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	dd4c      	ble.n	8008870 <_dtoa_r+0x948>
 80087d6:	e011      	b.n	80087fc <_dtoa_r+0x8d4>
 80087d8:	d0c9      	beq.n	800876e <_dtoa_r+0x846>
 80087da:	9a05      	ldr	r2, [sp, #20]
 80087dc:	331c      	adds	r3, #28
 80087de:	441a      	add	r2, r3
 80087e0:	9205      	str	r2, [sp, #20]
 80087e2:	441d      	add	r5, r3
 80087e4:	4498      	add	r8, r3
 80087e6:	e7c2      	b.n	800876e <_dtoa_r+0x846>
 80087e8:	4603      	mov	r3, r0
 80087ea:	e7f6      	b.n	80087da <_dtoa_r+0x8b2>
 80087ec:	f1b9 0f00 	cmp.w	r9, #0
 80087f0:	dc38      	bgt.n	8008864 <_dtoa_r+0x93c>
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	dd35      	ble.n	8008864 <_dtoa_r+0x93c>
 80087f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	b963      	cbnz	r3, 800881a <_dtoa_r+0x8f2>
 8008800:	4639      	mov	r1, r7
 8008802:	2205      	movs	r2, #5
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fcf1 	bl	80091ec <__multadd>
 800880a:	4601      	mov	r1, r0
 800880c:	4607      	mov	r7, r0
 800880e:	9804      	ldr	r0, [sp, #16]
 8008810:	f000 fef4 	bl	80095fc <__mcmp>
 8008814:	2800      	cmp	r0, #0
 8008816:	f73f adcc 	bgt.w	80083b2 <_dtoa_r+0x48a>
 800881a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800881c:	465d      	mov	r5, fp
 800881e:	ea6f 0a03 	mvn.w	sl, r3
 8008822:	f04f 0900 	mov.w	r9, #0
 8008826:	4639      	mov	r1, r7
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fcc8 	bl	80091be <_Bfree>
 800882e:	2e00      	cmp	r6, #0
 8008830:	f43f aeb7 	beq.w	80085a2 <_dtoa_r+0x67a>
 8008834:	f1b9 0f00 	cmp.w	r9, #0
 8008838:	d005      	beq.n	8008846 <_dtoa_r+0x91e>
 800883a:	45b1      	cmp	r9, r6
 800883c:	d003      	beq.n	8008846 <_dtoa_r+0x91e>
 800883e:	4649      	mov	r1, r9
 8008840:	4620      	mov	r0, r4
 8008842:	f000 fcbc 	bl	80091be <_Bfree>
 8008846:	4631      	mov	r1, r6
 8008848:	4620      	mov	r0, r4
 800884a:	f000 fcb8 	bl	80091be <_Bfree>
 800884e:	e6a8      	b.n	80085a2 <_dtoa_r+0x67a>
 8008850:	2700      	movs	r7, #0
 8008852:	463e      	mov	r6, r7
 8008854:	e7e1      	b.n	800881a <_dtoa_r+0x8f2>
 8008856:	f8dd a020 	ldr.w	sl, [sp, #32]
 800885a:	463e      	mov	r6, r7
 800885c:	e5a9      	b.n	80083b2 <_dtoa_r+0x48a>
 800885e:	bf00      	nop
 8008860:	40240000 	.word	0x40240000
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	f8cd 9008 	str.w	r9, [sp, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80fa 	beq.w	8008a64 <_dtoa_r+0xb3c>
 8008870:	2d00      	cmp	r5, #0
 8008872:	dd05      	ble.n	8008880 <_dtoa_r+0x958>
 8008874:	4631      	mov	r1, r6
 8008876:	462a      	mov	r2, r5
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fe6b 	bl	8009554 <__lshift>
 800887e:	4606      	mov	r6, r0
 8008880:	9b07      	ldr	r3, [sp, #28]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d04c      	beq.n	8008920 <_dtoa_r+0x9f8>
 8008886:	6871      	ldr	r1, [r6, #4]
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc64 	bl	8009156 <_Balloc>
 800888e:	6932      	ldr	r2, [r6, #16]
 8008890:	3202      	adds	r2, #2
 8008892:	4605      	mov	r5, r0
 8008894:	0092      	lsls	r2, r2, #2
 8008896:	f106 010c 	add.w	r1, r6, #12
 800889a:	300c      	adds	r0, #12
 800889c:	f000 fc50 	bl	8009140 <memcpy>
 80088a0:	2201      	movs	r2, #1
 80088a2:	4629      	mov	r1, r5
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fe55 	bl	8009554 <__lshift>
 80088aa:	9b00      	ldr	r3, [sp, #0]
 80088ac:	f8cd b014 	str.w	fp, [sp, #20]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	46b1      	mov	r9, r6
 80088b6:	9307      	str	r3, [sp, #28]
 80088b8:	4606      	mov	r6, r0
 80088ba:	4639      	mov	r1, r7
 80088bc:	9804      	ldr	r0, [sp, #16]
 80088be:	f7ff faa5 	bl	8007e0c <quorem>
 80088c2:	4649      	mov	r1, r9
 80088c4:	4605      	mov	r5, r0
 80088c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088ca:	9804      	ldr	r0, [sp, #16]
 80088cc:	f000 fe96 	bl	80095fc <__mcmp>
 80088d0:	4632      	mov	r2, r6
 80088d2:	9000      	str	r0, [sp, #0]
 80088d4:	4639      	mov	r1, r7
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 feaa 	bl	8009630 <__mdiff>
 80088dc:	68c3      	ldr	r3, [r0, #12]
 80088de:	4602      	mov	r2, r0
 80088e0:	bb03      	cbnz	r3, 8008924 <_dtoa_r+0x9fc>
 80088e2:	4601      	mov	r1, r0
 80088e4:	9008      	str	r0, [sp, #32]
 80088e6:	9804      	ldr	r0, [sp, #16]
 80088e8:	f000 fe88 	bl	80095fc <__mcmp>
 80088ec:	9a08      	ldr	r2, [sp, #32]
 80088ee:	4603      	mov	r3, r0
 80088f0:	4611      	mov	r1, r2
 80088f2:	4620      	mov	r0, r4
 80088f4:	9308      	str	r3, [sp, #32]
 80088f6:	f000 fc62 	bl	80091be <_Bfree>
 80088fa:	9b08      	ldr	r3, [sp, #32]
 80088fc:	b9a3      	cbnz	r3, 8008928 <_dtoa_r+0xa00>
 80088fe:	9a06      	ldr	r2, [sp, #24]
 8008900:	b992      	cbnz	r2, 8008928 <_dtoa_r+0xa00>
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	b982      	cbnz	r2, 8008928 <_dtoa_r+0xa00>
 8008906:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800890a:	d029      	beq.n	8008960 <_dtoa_r+0xa38>
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd01      	ble.n	8008916 <_dtoa_r+0x9ee>
 8008912:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008916:	9b05      	ldr	r3, [sp, #20]
 8008918:	1c5d      	adds	r5, r3, #1
 800891a:	f883 8000 	strb.w	r8, [r3]
 800891e:	e782      	b.n	8008826 <_dtoa_r+0x8fe>
 8008920:	4630      	mov	r0, r6
 8008922:	e7c2      	b.n	80088aa <_dtoa_r+0x982>
 8008924:	2301      	movs	r3, #1
 8008926:	e7e3      	b.n	80088f0 <_dtoa_r+0x9c8>
 8008928:	9a00      	ldr	r2, [sp, #0]
 800892a:	2a00      	cmp	r2, #0
 800892c:	db04      	blt.n	8008938 <_dtoa_r+0xa10>
 800892e:	d125      	bne.n	800897c <_dtoa_r+0xa54>
 8008930:	9a06      	ldr	r2, [sp, #24]
 8008932:	bb1a      	cbnz	r2, 800897c <_dtoa_r+0xa54>
 8008934:	9a07      	ldr	r2, [sp, #28]
 8008936:	bb0a      	cbnz	r2, 800897c <_dtoa_r+0xa54>
 8008938:	2b00      	cmp	r3, #0
 800893a:	ddec      	ble.n	8008916 <_dtoa_r+0x9ee>
 800893c:	2201      	movs	r2, #1
 800893e:	9904      	ldr	r1, [sp, #16]
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fe07 	bl	8009554 <__lshift>
 8008946:	4639      	mov	r1, r7
 8008948:	9004      	str	r0, [sp, #16]
 800894a:	f000 fe57 	bl	80095fc <__mcmp>
 800894e:	2800      	cmp	r0, #0
 8008950:	dc03      	bgt.n	800895a <_dtoa_r+0xa32>
 8008952:	d1e0      	bne.n	8008916 <_dtoa_r+0x9ee>
 8008954:	f018 0f01 	tst.w	r8, #1
 8008958:	d0dd      	beq.n	8008916 <_dtoa_r+0x9ee>
 800895a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800895e:	d1d8      	bne.n	8008912 <_dtoa_r+0x9ea>
 8008960:	9b05      	ldr	r3, [sp, #20]
 8008962:	9a05      	ldr	r2, [sp, #20]
 8008964:	1c5d      	adds	r5, r3, #1
 8008966:	2339      	movs	r3, #57	; 0x39
 8008968:	7013      	strb	r3, [r2, #0]
 800896a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800896e:	2b39      	cmp	r3, #57	; 0x39
 8008970:	f105 32ff 	add.w	r2, r5, #4294967295
 8008974:	d04f      	beq.n	8008a16 <_dtoa_r+0xaee>
 8008976:	3301      	adds	r3, #1
 8008978:	7013      	strb	r3, [r2, #0]
 800897a:	e754      	b.n	8008826 <_dtoa_r+0x8fe>
 800897c:	9a05      	ldr	r2, [sp, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f102 0501 	add.w	r5, r2, #1
 8008984:	dd06      	ble.n	8008994 <_dtoa_r+0xa6c>
 8008986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800898a:	d0e9      	beq.n	8008960 <_dtoa_r+0xa38>
 800898c:	f108 0801 	add.w	r8, r8, #1
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	e7c2      	b.n	800891a <_dtoa_r+0x9f2>
 8008994:	9a02      	ldr	r2, [sp, #8]
 8008996:	f805 8c01 	strb.w	r8, [r5, #-1]
 800899a:	eba5 030b 	sub.w	r3, r5, fp
 800899e:	4293      	cmp	r3, r2
 80089a0:	d021      	beq.n	80089e6 <_dtoa_r+0xabe>
 80089a2:	2300      	movs	r3, #0
 80089a4:	220a      	movs	r2, #10
 80089a6:	9904      	ldr	r1, [sp, #16]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fc1f 	bl	80091ec <__multadd>
 80089ae:	45b1      	cmp	r9, r6
 80089b0:	9004      	str	r0, [sp, #16]
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	f04f 020a 	mov.w	r2, #10
 80089ba:	4649      	mov	r1, r9
 80089bc:	4620      	mov	r0, r4
 80089be:	d105      	bne.n	80089cc <_dtoa_r+0xaa4>
 80089c0:	f000 fc14 	bl	80091ec <__multadd>
 80089c4:	4681      	mov	r9, r0
 80089c6:	4606      	mov	r6, r0
 80089c8:	9505      	str	r5, [sp, #20]
 80089ca:	e776      	b.n	80088ba <_dtoa_r+0x992>
 80089cc:	f000 fc0e 	bl	80091ec <__multadd>
 80089d0:	4631      	mov	r1, r6
 80089d2:	4681      	mov	r9, r0
 80089d4:	2300      	movs	r3, #0
 80089d6:	220a      	movs	r2, #10
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fc07 	bl	80091ec <__multadd>
 80089de:	4606      	mov	r6, r0
 80089e0:	e7f2      	b.n	80089c8 <_dtoa_r+0xaa0>
 80089e2:	f04f 0900 	mov.w	r9, #0
 80089e6:	2201      	movs	r2, #1
 80089e8:	9904      	ldr	r1, [sp, #16]
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 fdb2 	bl	8009554 <__lshift>
 80089f0:	4639      	mov	r1, r7
 80089f2:	9004      	str	r0, [sp, #16]
 80089f4:	f000 fe02 	bl	80095fc <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dcb6      	bgt.n	800896a <_dtoa_r+0xa42>
 80089fc:	d102      	bne.n	8008a04 <_dtoa_r+0xadc>
 80089fe:	f018 0f01 	tst.w	r8, #1
 8008a02:	d1b2      	bne.n	800896a <_dtoa_r+0xa42>
 8008a04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a08:	2b30      	cmp	r3, #48	; 0x30
 8008a0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a0e:	f47f af0a 	bne.w	8008826 <_dtoa_r+0x8fe>
 8008a12:	4615      	mov	r5, r2
 8008a14:	e7f6      	b.n	8008a04 <_dtoa_r+0xadc>
 8008a16:	4593      	cmp	fp, r2
 8008a18:	d105      	bne.n	8008a26 <_dtoa_r+0xafe>
 8008a1a:	2331      	movs	r3, #49	; 0x31
 8008a1c:	f10a 0a01 	add.w	sl, sl, #1
 8008a20:	f88b 3000 	strb.w	r3, [fp]
 8008a24:	e6ff      	b.n	8008826 <_dtoa_r+0x8fe>
 8008a26:	4615      	mov	r5, r2
 8008a28:	e79f      	b.n	800896a <_dtoa_r+0xa42>
 8008a2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008a90 <_dtoa_r+0xb68>
 8008a2e:	e007      	b.n	8008a40 <_dtoa_r+0xb18>
 8008a30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008a94 <_dtoa_r+0xb6c>
 8008a36:	b11b      	cbz	r3, 8008a40 <_dtoa_r+0xb18>
 8008a38:	f10b 0308 	add.w	r3, fp, #8
 8008a3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	4658      	mov	r0, fp
 8008a42:	b017      	add	sp, #92	; 0x5c
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	9b06      	ldr	r3, [sp, #24]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	f77f ae35 	ble.w	80086ba <_dtoa_r+0x792>
 8008a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	e649      	b.n	80086ea <_dtoa_r+0x7c2>
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc03      	bgt.n	8008a64 <_dtoa_r+0xb3c>
 8008a5c:	9b06      	ldr	r3, [sp, #24]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	f73f aecc 	bgt.w	80087fc <_dtoa_r+0x8d4>
 8008a64:	465d      	mov	r5, fp
 8008a66:	4639      	mov	r1, r7
 8008a68:	9804      	ldr	r0, [sp, #16]
 8008a6a:	f7ff f9cf 	bl	8007e0c <quorem>
 8008a6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a72:	f805 8b01 	strb.w	r8, [r5], #1
 8008a76:	9a02      	ldr	r2, [sp, #8]
 8008a78:	eba5 030b 	sub.w	r3, r5, fp
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	ddb0      	ble.n	80089e2 <_dtoa_r+0xaba>
 8008a80:	2300      	movs	r3, #0
 8008a82:	220a      	movs	r2, #10
 8008a84:	9904      	ldr	r1, [sp, #16]
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fbb0 	bl	80091ec <__multadd>
 8008a8c:	9004      	str	r0, [sp, #16]
 8008a8e:	e7ea      	b.n	8008a66 <_dtoa_r+0xb3e>
 8008a90:	08009fdc 	.word	0x08009fdc
 8008a94:	0800a058 	.word	0x0800a058

08008a98 <rshift>:
 8008a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a9a:	6906      	ldr	r6, [r0, #16]
 8008a9c:	114b      	asrs	r3, r1, #5
 8008a9e:	429e      	cmp	r6, r3
 8008aa0:	f100 0414 	add.w	r4, r0, #20
 8008aa4:	dd30      	ble.n	8008b08 <rshift+0x70>
 8008aa6:	f011 011f 	ands.w	r1, r1, #31
 8008aaa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008aae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ab2:	d108      	bne.n	8008ac6 <rshift+0x2e>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	42b2      	cmp	r2, r6
 8008ab8:	460b      	mov	r3, r1
 8008aba:	d211      	bcs.n	8008ae0 <rshift+0x48>
 8008abc:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ac0:	f841 3b04 	str.w	r3, [r1], #4
 8008ac4:	e7f7      	b.n	8008ab6 <rshift+0x1e>
 8008ac6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008aca:	f1c1 0c20 	rsb	ip, r1, #32
 8008ace:	40cd      	lsrs	r5, r1
 8008ad0:	3204      	adds	r2, #4
 8008ad2:	4623      	mov	r3, r4
 8008ad4:	42b2      	cmp	r2, r6
 8008ad6:	4617      	mov	r7, r2
 8008ad8:	d30c      	bcc.n	8008af4 <rshift+0x5c>
 8008ada:	601d      	str	r5, [r3, #0]
 8008adc:	b105      	cbz	r5, 8008ae0 <rshift+0x48>
 8008ade:	3304      	adds	r3, #4
 8008ae0:	1b1a      	subs	r2, r3, r4
 8008ae2:	42a3      	cmp	r3, r4
 8008ae4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ae8:	bf08      	it	eq
 8008aea:	2300      	moveq	r3, #0
 8008aec:	6102      	str	r2, [r0, #16]
 8008aee:	bf08      	it	eq
 8008af0:	6143      	streq	r3, [r0, #20]
 8008af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af4:	683f      	ldr	r7, [r7, #0]
 8008af6:	fa07 f70c 	lsl.w	r7, r7, ip
 8008afa:	433d      	orrs	r5, r7
 8008afc:	f843 5b04 	str.w	r5, [r3], #4
 8008b00:	f852 5b04 	ldr.w	r5, [r2], #4
 8008b04:	40cd      	lsrs	r5, r1
 8008b06:	e7e5      	b.n	8008ad4 <rshift+0x3c>
 8008b08:	4623      	mov	r3, r4
 8008b0a:	e7e9      	b.n	8008ae0 <rshift+0x48>

08008b0c <__hexdig_fun>:
 8008b0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b10:	2b09      	cmp	r3, #9
 8008b12:	d802      	bhi.n	8008b1a <__hexdig_fun+0xe>
 8008b14:	3820      	subs	r0, #32
 8008b16:	b2c0      	uxtb	r0, r0
 8008b18:	4770      	bx	lr
 8008b1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	d801      	bhi.n	8008b26 <__hexdig_fun+0x1a>
 8008b22:	3847      	subs	r0, #71	; 0x47
 8008b24:	e7f7      	b.n	8008b16 <__hexdig_fun+0xa>
 8008b26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b2a:	2b05      	cmp	r3, #5
 8008b2c:	d801      	bhi.n	8008b32 <__hexdig_fun+0x26>
 8008b2e:	3827      	subs	r0, #39	; 0x27
 8008b30:	e7f1      	b.n	8008b16 <__hexdig_fun+0xa>
 8008b32:	2000      	movs	r0, #0
 8008b34:	4770      	bx	lr

08008b36 <__gethex>:
 8008b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	b08b      	sub	sp, #44	; 0x2c
 8008b3c:	468a      	mov	sl, r1
 8008b3e:	9002      	str	r0, [sp, #8]
 8008b40:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008b42:	9306      	str	r3, [sp, #24]
 8008b44:	4690      	mov	r8, r2
 8008b46:	f000 fad0 	bl	80090ea <__localeconv_l>
 8008b4a:	6803      	ldr	r3, [r0, #0]
 8008b4c:	9303      	str	r3, [sp, #12]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7f7 fb3e 	bl	80001d0 <strlen>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	9001      	str	r0, [sp, #4]
 8008b58:	4403      	add	r3, r0
 8008b5a:	f04f 0b00 	mov.w	fp, #0
 8008b5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	f8da 3000 	ldr.w	r3, [sl]
 8008b68:	3302      	adds	r3, #2
 8008b6a:	461f      	mov	r7, r3
 8008b6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b70:	2830      	cmp	r0, #48	; 0x30
 8008b72:	d06c      	beq.n	8008c4e <__gethex+0x118>
 8008b74:	f7ff ffca 	bl	8008b0c <__hexdig_fun>
 8008b78:	4604      	mov	r4, r0
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d16a      	bne.n	8008c54 <__gethex+0x11e>
 8008b7e:	9a01      	ldr	r2, [sp, #4]
 8008b80:	9903      	ldr	r1, [sp, #12]
 8008b82:	4638      	mov	r0, r7
 8008b84:	f001 f8fe 	bl	8009d84 <strncmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d166      	bne.n	8008c5a <__gethex+0x124>
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	5cf8      	ldrb	r0, [r7, r3]
 8008b90:	18fe      	adds	r6, r7, r3
 8008b92:	f7ff ffbb 	bl	8008b0c <__hexdig_fun>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d062      	beq.n	8008c60 <__gethex+0x12a>
 8008b9a:	4633      	mov	r3, r6
 8008b9c:	7818      	ldrb	r0, [r3, #0]
 8008b9e:	2830      	cmp	r0, #48	; 0x30
 8008ba0:	461f      	mov	r7, r3
 8008ba2:	f103 0301 	add.w	r3, r3, #1
 8008ba6:	d0f9      	beq.n	8008b9c <__gethex+0x66>
 8008ba8:	f7ff ffb0 	bl	8008b0c <__hexdig_fun>
 8008bac:	fab0 f580 	clz	r5, r0
 8008bb0:	096d      	lsrs	r5, r5, #5
 8008bb2:	4634      	mov	r4, r6
 8008bb4:	f04f 0b01 	mov.w	fp, #1
 8008bb8:	463a      	mov	r2, r7
 8008bba:	4616      	mov	r6, r2
 8008bbc:	3201      	adds	r2, #1
 8008bbe:	7830      	ldrb	r0, [r6, #0]
 8008bc0:	f7ff ffa4 	bl	8008b0c <__hexdig_fun>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d1f8      	bne.n	8008bba <__gethex+0x84>
 8008bc8:	9a01      	ldr	r2, [sp, #4]
 8008bca:	9903      	ldr	r1, [sp, #12]
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f001 f8d9 	bl	8009d84 <strncmp>
 8008bd2:	b950      	cbnz	r0, 8008bea <__gethex+0xb4>
 8008bd4:	b954      	cbnz	r4, 8008bec <__gethex+0xb6>
 8008bd6:	9b01      	ldr	r3, [sp, #4]
 8008bd8:	18f4      	adds	r4, r6, r3
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4616      	mov	r6, r2
 8008bde:	3201      	adds	r2, #1
 8008be0:	7830      	ldrb	r0, [r6, #0]
 8008be2:	f7ff ff93 	bl	8008b0c <__hexdig_fun>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d1f8      	bne.n	8008bdc <__gethex+0xa6>
 8008bea:	b10c      	cbz	r4, 8008bf0 <__gethex+0xba>
 8008bec:	1ba4      	subs	r4, r4, r6
 8008bee:	00a4      	lsls	r4, r4, #2
 8008bf0:	7833      	ldrb	r3, [r6, #0]
 8008bf2:	2b50      	cmp	r3, #80	; 0x50
 8008bf4:	d001      	beq.n	8008bfa <__gethex+0xc4>
 8008bf6:	2b70      	cmp	r3, #112	; 0x70
 8008bf8:	d140      	bne.n	8008c7c <__gethex+0x146>
 8008bfa:	7873      	ldrb	r3, [r6, #1]
 8008bfc:	2b2b      	cmp	r3, #43	; 0x2b
 8008bfe:	d031      	beq.n	8008c64 <__gethex+0x12e>
 8008c00:	2b2d      	cmp	r3, #45	; 0x2d
 8008c02:	d033      	beq.n	8008c6c <__gethex+0x136>
 8008c04:	1c71      	adds	r1, r6, #1
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	7808      	ldrb	r0, [r1, #0]
 8008c0c:	f7ff ff7e 	bl	8008b0c <__hexdig_fun>
 8008c10:	1e43      	subs	r3, r0, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b18      	cmp	r3, #24
 8008c16:	d831      	bhi.n	8008c7c <__gethex+0x146>
 8008c18:	f1a0 0210 	sub.w	r2, r0, #16
 8008c1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c20:	f7ff ff74 	bl	8008b0c <__hexdig_fun>
 8008c24:	1e43      	subs	r3, r0, #1
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b18      	cmp	r3, #24
 8008c2a:	d922      	bls.n	8008c72 <__gethex+0x13c>
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	d000      	beq.n	8008c34 <__gethex+0xfe>
 8008c32:	4252      	negs	r2, r2
 8008c34:	4414      	add	r4, r2
 8008c36:	f8ca 1000 	str.w	r1, [sl]
 8008c3a:	b30d      	cbz	r5, 8008c80 <__gethex+0x14a>
 8008c3c:	f1bb 0f00 	cmp.w	fp, #0
 8008c40:	bf0c      	ite	eq
 8008c42:	2706      	moveq	r7, #6
 8008c44:	2700      	movne	r7, #0
 8008c46:	4638      	mov	r0, r7
 8008c48:	b00b      	add	sp, #44	; 0x2c
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	f10b 0b01 	add.w	fp, fp, #1
 8008c52:	e78a      	b.n	8008b6a <__gethex+0x34>
 8008c54:	2500      	movs	r5, #0
 8008c56:	462c      	mov	r4, r5
 8008c58:	e7ae      	b.n	8008bb8 <__gethex+0x82>
 8008c5a:	463e      	mov	r6, r7
 8008c5c:	2501      	movs	r5, #1
 8008c5e:	e7c7      	b.n	8008bf0 <__gethex+0xba>
 8008c60:	4604      	mov	r4, r0
 8008c62:	e7fb      	b.n	8008c5c <__gethex+0x126>
 8008c64:	f04f 0900 	mov.w	r9, #0
 8008c68:	1cb1      	adds	r1, r6, #2
 8008c6a:	e7ce      	b.n	8008c0a <__gethex+0xd4>
 8008c6c:	f04f 0901 	mov.w	r9, #1
 8008c70:	e7fa      	b.n	8008c68 <__gethex+0x132>
 8008c72:	230a      	movs	r3, #10
 8008c74:	fb03 0202 	mla	r2, r3, r2, r0
 8008c78:	3a10      	subs	r2, #16
 8008c7a:	e7cf      	b.n	8008c1c <__gethex+0xe6>
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	e7da      	b.n	8008c36 <__gethex+0x100>
 8008c80:	1bf3      	subs	r3, r6, r7
 8008c82:	3b01      	subs	r3, #1
 8008c84:	4629      	mov	r1, r5
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	dc49      	bgt.n	8008d1e <__gethex+0x1e8>
 8008c8a:	9802      	ldr	r0, [sp, #8]
 8008c8c:	f000 fa63 	bl	8009156 <_Balloc>
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	f100 0914 	add.w	r9, r0, #20
 8008c96:	f04f 0b00 	mov.w	fp, #0
 8008c9a:	f1c3 0301 	rsb	r3, r3, #1
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	f8cd 9010 	str.w	r9, [sp, #16]
 8008ca4:	46da      	mov	sl, fp
 8008ca6:	9308      	str	r3, [sp, #32]
 8008ca8:	42b7      	cmp	r7, r6
 8008caa:	d33b      	bcc.n	8008d24 <__gethex+0x1ee>
 8008cac:	9804      	ldr	r0, [sp, #16]
 8008cae:	f840 ab04 	str.w	sl, [r0], #4
 8008cb2:	eba0 0009 	sub.w	r0, r0, r9
 8008cb6:	1080      	asrs	r0, r0, #2
 8008cb8:	6128      	str	r0, [r5, #16]
 8008cba:	0147      	lsls	r7, r0, #5
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	f000 fb0e 	bl	80092de <__hi0bits>
 8008cc2:	f8d8 6000 	ldr.w	r6, [r8]
 8008cc6:	1a3f      	subs	r7, r7, r0
 8008cc8:	42b7      	cmp	r7, r6
 8008cca:	dd64      	ble.n	8008d96 <__gethex+0x260>
 8008ccc:	1bbf      	subs	r7, r7, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 fe1d 	bl	8009910 <__any_on>
 8008cd6:	4682      	mov	sl, r0
 8008cd8:	b178      	cbz	r0, 8008cfa <__gethex+0x1c4>
 8008cda:	1e7b      	subs	r3, r7, #1
 8008cdc:	1159      	asrs	r1, r3, #5
 8008cde:	f003 021f 	and.w	r2, r3, #31
 8008ce2:	f04f 0a01 	mov.w	sl, #1
 8008ce6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008cea:	fa0a f202 	lsl.w	r2, sl, r2
 8008cee:	420a      	tst	r2, r1
 8008cf0:	d003      	beq.n	8008cfa <__gethex+0x1c4>
 8008cf2:	4553      	cmp	r3, sl
 8008cf4:	dc46      	bgt.n	8008d84 <__gethex+0x24e>
 8008cf6:	f04f 0a02 	mov.w	sl, #2
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7ff fecb 	bl	8008a98 <rshift>
 8008d02:	443c      	add	r4, r7
 8008d04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	da52      	bge.n	8008db2 <__gethex+0x27c>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	9802      	ldr	r0, [sp, #8]
 8008d10:	f000 fa55 	bl	80091be <_Bfree>
 8008d14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d16:	2300      	movs	r3, #0
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	27a3      	movs	r7, #163	; 0xa3
 8008d1c:	e793      	b.n	8008c46 <__gethex+0x110>
 8008d1e:	3101      	adds	r1, #1
 8008d20:	105b      	asrs	r3, r3, #1
 8008d22:	e7b0      	b.n	8008c86 <__gethex+0x150>
 8008d24:	1e73      	subs	r3, r6, #1
 8008d26:	9305      	str	r3, [sp, #20]
 8008d28:	9a07      	ldr	r2, [sp, #28]
 8008d2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d018      	beq.n	8008d64 <__gethex+0x22e>
 8008d32:	f1bb 0f20 	cmp.w	fp, #32
 8008d36:	d107      	bne.n	8008d48 <__gethex+0x212>
 8008d38:	9b04      	ldr	r3, [sp, #16]
 8008d3a:	f8c3 a000 	str.w	sl, [r3]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	f04f 0a00 	mov.w	sl, #0
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	46d3      	mov	fp, sl
 8008d48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d4c:	f7ff fede 	bl	8008b0c <__hexdig_fun>
 8008d50:	f000 000f 	and.w	r0, r0, #15
 8008d54:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d58:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d5c:	f10b 0b04 	add.w	fp, fp, #4
 8008d60:	9b05      	ldr	r3, [sp, #20]
 8008d62:	e00d      	b.n	8008d80 <__gethex+0x24a>
 8008d64:	9b05      	ldr	r3, [sp, #20]
 8008d66:	9a08      	ldr	r2, [sp, #32]
 8008d68:	4413      	add	r3, r2
 8008d6a:	42bb      	cmp	r3, r7
 8008d6c:	d3e1      	bcc.n	8008d32 <__gethex+0x1fc>
 8008d6e:	4618      	mov	r0, r3
 8008d70:	9a01      	ldr	r2, [sp, #4]
 8008d72:	9903      	ldr	r1, [sp, #12]
 8008d74:	9309      	str	r3, [sp, #36]	; 0x24
 8008d76:	f001 f805 	bl	8009d84 <strncmp>
 8008d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d1d8      	bne.n	8008d32 <__gethex+0x1fc>
 8008d80:	461e      	mov	r6, r3
 8008d82:	e791      	b.n	8008ca8 <__gethex+0x172>
 8008d84:	1eb9      	subs	r1, r7, #2
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 fdc2 	bl	8009910 <__any_on>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0b2      	beq.n	8008cf6 <__gethex+0x1c0>
 8008d90:	f04f 0a03 	mov.w	sl, #3
 8008d94:	e7b1      	b.n	8008cfa <__gethex+0x1c4>
 8008d96:	da09      	bge.n	8008dac <__gethex+0x276>
 8008d98:	1bf7      	subs	r7, r6, r7
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	9802      	ldr	r0, [sp, #8]
 8008da0:	f000 fbd8 	bl	8009554 <__lshift>
 8008da4:	1be4      	subs	r4, r4, r7
 8008da6:	4605      	mov	r5, r0
 8008da8:	f100 0914 	add.w	r9, r0, #20
 8008dac:	f04f 0a00 	mov.w	sl, #0
 8008db0:	e7a8      	b.n	8008d04 <__gethex+0x1ce>
 8008db2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008db6:	42a0      	cmp	r0, r4
 8008db8:	dd6a      	ble.n	8008e90 <__gethex+0x35a>
 8008dba:	1b04      	subs	r4, r0, r4
 8008dbc:	42a6      	cmp	r6, r4
 8008dbe:	dc2e      	bgt.n	8008e1e <__gethex+0x2e8>
 8008dc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d022      	beq.n	8008e0e <__gethex+0x2d8>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d024      	beq.n	8008e16 <__gethex+0x2e0>
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d115      	bne.n	8008dfc <__gethex+0x2c6>
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d113      	bne.n	8008dfc <__gethex+0x2c6>
 8008dd4:	2e01      	cmp	r6, #1
 8008dd6:	dc0b      	bgt.n	8008df0 <__gethex+0x2ba>
 8008dd8:	9a06      	ldr	r2, [sp, #24]
 8008dda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	2301      	movs	r3, #1
 8008de2:	612b      	str	r3, [r5, #16]
 8008de4:	f8c9 3000 	str.w	r3, [r9]
 8008de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dea:	2762      	movs	r7, #98	; 0x62
 8008dec:	601d      	str	r5, [r3, #0]
 8008dee:	e72a      	b.n	8008c46 <__gethex+0x110>
 8008df0:	1e71      	subs	r1, r6, #1
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 fd8c 	bl	8009910 <__any_on>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d1ed      	bne.n	8008dd8 <__gethex+0x2a2>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	9802      	ldr	r0, [sp, #8]
 8008e00:	f000 f9dd 	bl	80091be <_Bfree>
 8008e04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e06:	2300      	movs	r3, #0
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	2750      	movs	r7, #80	; 0x50
 8008e0c:	e71b      	b.n	8008c46 <__gethex+0x110>
 8008e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0e1      	beq.n	8008dd8 <__gethex+0x2a2>
 8008e14:	e7f2      	b.n	8008dfc <__gethex+0x2c6>
 8008e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1dd      	bne.n	8008dd8 <__gethex+0x2a2>
 8008e1c:	e7ee      	b.n	8008dfc <__gethex+0x2c6>
 8008e1e:	1e67      	subs	r7, r4, #1
 8008e20:	f1ba 0f00 	cmp.w	sl, #0
 8008e24:	d131      	bne.n	8008e8a <__gethex+0x354>
 8008e26:	b127      	cbz	r7, 8008e32 <__gethex+0x2fc>
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 fd70 	bl	8009910 <__any_on>
 8008e30:	4682      	mov	sl, r0
 8008e32:	117a      	asrs	r2, r7, #5
 8008e34:	2301      	movs	r3, #1
 8008e36:	f007 071f 	and.w	r7, r7, #31
 8008e3a:	fa03 f707 	lsl.w	r7, r3, r7
 8008e3e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008e42:	4621      	mov	r1, r4
 8008e44:	421f      	tst	r7, r3
 8008e46:	4628      	mov	r0, r5
 8008e48:	bf18      	it	ne
 8008e4a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e4e:	1b36      	subs	r6, r6, r4
 8008e50:	f7ff fe22 	bl	8008a98 <rshift>
 8008e54:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008e58:	2702      	movs	r7, #2
 8008e5a:	f1ba 0f00 	cmp.w	sl, #0
 8008e5e:	d048      	beq.n	8008ef2 <__gethex+0x3bc>
 8008e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d015      	beq.n	8008e94 <__gethex+0x35e>
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d017      	beq.n	8008e9c <__gethex+0x366>
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d109      	bne.n	8008e84 <__gethex+0x34e>
 8008e70:	f01a 0f02 	tst.w	sl, #2
 8008e74:	d006      	beq.n	8008e84 <__gethex+0x34e>
 8008e76:	f8d9 3000 	ldr.w	r3, [r9]
 8008e7a:	ea4a 0a03 	orr.w	sl, sl, r3
 8008e7e:	f01a 0f01 	tst.w	sl, #1
 8008e82:	d10e      	bne.n	8008ea2 <__gethex+0x36c>
 8008e84:	f047 0710 	orr.w	r7, r7, #16
 8008e88:	e033      	b.n	8008ef2 <__gethex+0x3bc>
 8008e8a:	f04f 0a01 	mov.w	sl, #1
 8008e8e:	e7d0      	b.n	8008e32 <__gethex+0x2fc>
 8008e90:	2701      	movs	r7, #1
 8008e92:	e7e2      	b.n	8008e5a <__gethex+0x324>
 8008e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e96:	f1c3 0301 	rsb	r3, r3, #1
 8008e9a:	9315      	str	r3, [sp, #84]	; 0x54
 8008e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <__gethex+0x34e>
 8008ea2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008ea6:	f105 0314 	add.w	r3, r5, #20
 8008eaa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008eae:	eb03 010a 	add.w	r1, r3, sl
 8008eb2:	f04f 0c00 	mov.w	ip, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ec0:	d01c      	beq.n	8008efc <__gethex+0x3c6>
 8008ec2:	3201      	adds	r2, #1
 8008ec4:	6002      	str	r2, [r0, #0]
 8008ec6:	2f02      	cmp	r7, #2
 8008ec8:	f105 0314 	add.w	r3, r5, #20
 8008ecc:	d138      	bne.n	8008f40 <__gethex+0x40a>
 8008ece:	f8d8 2000 	ldr.w	r2, [r8]
 8008ed2:	3a01      	subs	r2, #1
 8008ed4:	42b2      	cmp	r2, r6
 8008ed6:	d10a      	bne.n	8008eee <__gethex+0x3b8>
 8008ed8:	1171      	asrs	r1, r6, #5
 8008eda:	2201      	movs	r2, #1
 8008edc:	f006 061f 	and.w	r6, r6, #31
 8008ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8008ee8:	421e      	tst	r6, r3
 8008eea:	bf18      	it	ne
 8008eec:	4617      	movne	r7, r2
 8008eee:	f047 0720 	orr.w	r7, r7, #32
 8008ef2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ef4:	601d      	str	r5, [r3, #0]
 8008ef6:	9b06      	ldr	r3, [sp, #24]
 8008ef8:	601c      	str	r4, [r3, #0]
 8008efa:	e6a4      	b.n	8008c46 <__gethex+0x110>
 8008efc:	4299      	cmp	r1, r3
 8008efe:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f02:	d8d8      	bhi.n	8008eb6 <__gethex+0x380>
 8008f04:	68ab      	ldr	r3, [r5, #8]
 8008f06:	4599      	cmp	r9, r3
 8008f08:	db12      	blt.n	8008f30 <__gethex+0x3fa>
 8008f0a:	6869      	ldr	r1, [r5, #4]
 8008f0c:	9802      	ldr	r0, [sp, #8]
 8008f0e:	3101      	adds	r1, #1
 8008f10:	f000 f921 	bl	8009156 <_Balloc>
 8008f14:	692a      	ldr	r2, [r5, #16]
 8008f16:	3202      	adds	r2, #2
 8008f18:	f105 010c 	add.w	r1, r5, #12
 8008f1c:	4683      	mov	fp, r0
 8008f1e:	0092      	lsls	r2, r2, #2
 8008f20:	300c      	adds	r0, #12
 8008f22:	f000 f90d 	bl	8009140 <memcpy>
 8008f26:	4629      	mov	r1, r5
 8008f28:	9802      	ldr	r0, [sp, #8]
 8008f2a:	f000 f948 	bl	80091be <_Bfree>
 8008f2e:	465d      	mov	r5, fp
 8008f30:	692b      	ldr	r3, [r5, #16]
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008f38:	612a      	str	r2, [r5, #16]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	615a      	str	r2, [r3, #20]
 8008f3e:	e7c2      	b.n	8008ec6 <__gethex+0x390>
 8008f40:	692a      	ldr	r2, [r5, #16]
 8008f42:	454a      	cmp	r2, r9
 8008f44:	dd0b      	ble.n	8008f5e <__gethex+0x428>
 8008f46:	2101      	movs	r1, #1
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7ff fda5 	bl	8008a98 <rshift>
 8008f4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f52:	3401      	adds	r4, #1
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	f6ff aed9 	blt.w	8008d0c <__gethex+0x1d6>
 8008f5a:	2701      	movs	r7, #1
 8008f5c:	e7c7      	b.n	8008eee <__gethex+0x3b8>
 8008f5e:	f016 061f 	ands.w	r6, r6, #31
 8008f62:	d0fa      	beq.n	8008f5a <__gethex+0x424>
 8008f64:	449a      	add	sl, r3
 8008f66:	f1c6 0620 	rsb	r6, r6, #32
 8008f6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008f6e:	f000 f9b6 	bl	80092de <__hi0bits>
 8008f72:	42b0      	cmp	r0, r6
 8008f74:	dbe7      	blt.n	8008f46 <__gethex+0x410>
 8008f76:	e7f0      	b.n	8008f5a <__gethex+0x424>

08008f78 <L_shift>:
 8008f78:	f1c2 0208 	rsb	r2, r2, #8
 8008f7c:	0092      	lsls	r2, r2, #2
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	f1c2 0620 	rsb	r6, r2, #32
 8008f84:	6843      	ldr	r3, [r0, #4]
 8008f86:	6804      	ldr	r4, [r0, #0]
 8008f88:	fa03 f506 	lsl.w	r5, r3, r6
 8008f8c:	432c      	orrs	r4, r5
 8008f8e:	40d3      	lsrs	r3, r2
 8008f90:	6004      	str	r4, [r0, #0]
 8008f92:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f96:	4288      	cmp	r0, r1
 8008f98:	d3f4      	bcc.n	8008f84 <L_shift+0xc>
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}

08008f9c <__match>:
 8008f9c:	b530      	push	{r4, r5, lr}
 8008f9e:	6803      	ldr	r3, [r0, #0]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa6:	b914      	cbnz	r4, 8008fae <__match+0x12>
 8008fa8:	6003      	str	r3, [r0, #0]
 8008faa:	2001      	movs	r0, #1
 8008fac:	bd30      	pop	{r4, r5, pc}
 8008fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008fb6:	2d19      	cmp	r5, #25
 8008fb8:	bf98      	it	ls
 8008fba:	3220      	addls	r2, #32
 8008fbc:	42a2      	cmp	r2, r4
 8008fbe:	d0f0      	beq.n	8008fa2 <__match+0x6>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e7f3      	b.n	8008fac <__match+0x10>

08008fc4 <__hexnan>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	680b      	ldr	r3, [r1, #0]
 8008fca:	6801      	ldr	r1, [r0, #0]
 8008fcc:	115f      	asrs	r7, r3, #5
 8008fce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008fd2:	f013 031f 	ands.w	r3, r3, #31
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	bf18      	it	ne
 8008fda:	3704      	addne	r7, #4
 8008fdc:	2500      	movs	r5, #0
 8008fde:	1f3e      	subs	r6, r7, #4
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	4690      	mov	r8, r2
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	f847 5c04 	str.w	r5, [r7, #-4]
 8008fea:	46b1      	mov	r9, r6
 8008fec:	4634      	mov	r4, r6
 8008fee:	9502      	str	r5, [sp, #8]
 8008ff0:	46ab      	mov	fp, r5
 8008ff2:	784a      	ldrb	r2, [r1, #1]
 8008ff4:	1c4b      	adds	r3, r1, #1
 8008ff6:	9303      	str	r3, [sp, #12]
 8008ff8:	b342      	cbz	r2, 800904c <__hexnan+0x88>
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	9105      	str	r1, [sp, #20]
 8008ffe:	9204      	str	r2, [sp, #16]
 8009000:	f7ff fd84 	bl	8008b0c <__hexdig_fun>
 8009004:	2800      	cmp	r0, #0
 8009006:	d143      	bne.n	8009090 <__hexnan+0xcc>
 8009008:	9a04      	ldr	r2, [sp, #16]
 800900a:	9905      	ldr	r1, [sp, #20]
 800900c:	2a20      	cmp	r2, #32
 800900e:	d818      	bhi.n	8009042 <__hexnan+0x7e>
 8009010:	9b02      	ldr	r3, [sp, #8]
 8009012:	459b      	cmp	fp, r3
 8009014:	dd13      	ble.n	800903e <__hexnan+0x7a>
 8009016:	454c      	cmp	r4, r9
 8009018:	d206      	bcs.n	8009028 <__hexnan+0x64>
 800901a:	2d07      	cmp	r5, #7
 800901c:	dc04      	bgt.n	8009028 <__hexnan+0x64>
 800901e:	462a      	mov	r2, r5
 8009020:	4649      	mov	r1, r9
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff ffa8 	bl	8008f78 <L_shift>
 8009028:	4544      	cmp	r4, r8
 800902a:	d944      	bls.n	80090b6 <__hexnan+0xf2>
 800902c:	2300      	movs	r3, #0
 800902e:	f1a4 0904 	sub.w	r9, r4, #4
 8009032:	f844 3c04 	str.w	r3, [r4, #-4]
 8009036:	f8cd b008 	str.w	fp, [sp, #8]
 800903a:	464c      	mov	r4, r9
 800903c:	461d      	mov	r5, r3
 800903e:	9903      	ldr	r1, [sp, #12]
 8009040:	e7d7      	b.n	8008ff2 <__hexnan+0x2e>
 8009042:	2a29      	cmp	r2, #41	; 0x29
 8009044:	d14a      	bne.n	80090dc <__hexnan+0x118>
 8009046:	3102      	adds	r1, #2
 8009048:	f8ca 1000 	str.w	r1, [sl]
 800904c:	f1bb 0f00 	cmp.w	fp, #0
 8009050:	d044      	beq.n	80090dc <__hexnan+0x118>
 8009052:	454c      	cmp	r4, r9
 8009054:	d206      	bcs.n	8009064 <__hexnan+0xa0>
 8009056:	2d07      	cmp	r5, #7
 8009058:	dc04      	bgt.n	8009064 <__hexnan+0xa0>
 800905a:	462a      	mov	r2, r5
 800905c:	4649      	mov	r1, r9
 800905e:	4620      	mov	r0, r4
 8009060:	f7ff ff8a 	bl	8008f78 <L_shift>
 8009064:	4544      	cmp	r4, r8
 8009066:	d928      	bls.n	80090ba <__hexnan+0xf6>
 8009068:	4643      	mov	r3, r8
 800906a:	f854 2b04 	ldr.w	r2, [r4], #4
 800906e:	f843 2b04 	str.w	r2, [r3], #4
 8009072:	42a6      	cmp	r6, r4
 8009074:	d2f9      	bcs.n	800906a <__hexnan+0xa6>
 8009076:	2200      	movs	r2, #0
 8009078:	f843 2b04 	str.w	r2, [r3], #4
 800907c:	429e      	cmp	r6, r3
 800907e:	d2fb      	bcs.n	8009078 <__hexnan+0xb4>
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	b91b      	cbnz	r3, 800908c <__hexnan+0xc8>
 8009084:	4546      	cmp	r6, r8
 8009086:	d127      	bne.n	80090d8 <__hexnan+0x114>
 8009088:	2301      	movs	r3, #1
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	2005      	movs	r0, #5
 800908e:	e026      	b.n	80090de <__hexnan+0x11a>
 8009090:	3501      	adds	r5, #1
 8009092:	2d08      	cmp	r5, #8
 8009094:	f10b 0b01 	add.w	fp, fp, #1
 8009098:	dd06      	ble.n	80090a8 <__hexnan+0xe4>
 800909a:	4544      	cmp	r4, r8
 800909c:	d9cf      	bls.n	800903e <__hexnan+0x7a>
 800909e:	2300      	movs	r3, #0
 80090a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090a4:	2501      	movs	r5, #1
 80090a6:	3c04      	subs	r4, #4
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	f000 000f 	and.w	r0, r0, #15
 80090ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090b2:	6020      	str	r0, [r4, #0]
 80090b4:	e7c3      	b.n	800903e <__hexnan+0x7a>
 80090b6:	2508      	movs	r5, #8
 80090b8:	e7c1      	b.n	800903e <__hexnan+0x7a>
 80090ba:	9b01      	ldr	r3, [sp, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0df      	beq.n	8009080 <__hexnan+0xbc>
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	f1c3 0320 	rsb	r3, r3, #32
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80090d0:	401a      	ands	r2, r3
 80090d2:	f847 2c04 	str.w	r2, [r7, #-4]
 80090d6:	e7d3      	b.n	8009080 <__hexnan+0xbc>
 80090d8:	3e04      	subs	r6, #4
 80090da:	e7d1      	b.n	8009080 <__hexnan+0xbc>
 80090dc:	2004      	movs	r0, #4
 80090de:	b007      	add	sp, #28
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090e4 <__locale_ctype_ptr_l>:
 80090e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80090e8:	4770      	bx	lr

080090ea <__localeconv_l>:
 80090ea:	30f0      	adds	r0, #240	; 0xf0
 80090ec:	4770      	bx	lr
	...

080090f0 <_localeconv_r>:
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <_localeconv_r+0x14>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6a18      	ldr	r0, [r3, #32]
 80090f6:	4b04      	ldr	r3, [pc, #16]	; (8009108 <_localeconv_r+0x18>)
 80090f8:	2800      	cmp	r0, #0
 80090fa:	bf08      	it	eq
 80090fc:	4618      	moveq	r0, r3
 80090fe:	30f0      	adds	r0, #240	; 0xf0
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	2000000c 	.word	0x2000000c
 8009108:	20000070 	.word	0x20000070

0800910c <malloc>:
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <malloc+0xc>)
 800910e:	4601      	mov	r1, r0
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f000 bc7b 	b.w	8009a0c <_malloc_r>
 8009116:	bf00      	nop
 8009118:	2000000c 	.word	0x2000000c

0800911c <__ascii_mbtowc>:
 800911c:	b082      	sub	sp, #8
 800911e:	b901      	cbnz	r1, 8009122 <__ascii_mbtowc+0x6>
 8009120:	a901      	add	r1, sp, #4
 8009122:	b142      	cbz	r2, 8009136 <__ascii_mbtowc+0x1a>
 8009124:	b14b      	cbz	r3, 800913a <__ascii_mbtowc+0x1e>
 8009126:	7813      	ldrb	r3, [r2, #0]
 8009128:	600b      	str	r3, [r1, #0]
 800912a:	7812      	ldrb	r2, [r2, #0]
 800912c:	1c10      	adds	r0, r2, #0
 800912e:	bf18      	it	ne
 8009130:	2001      	movne	r0, #1
 8009132:	b002      	add	sp, #8
 8009134:	4770      	bx	lr
 8009136:	4610      	mov	r0, r2
 8009138:	e7fb      	b.n	8009132 <__ascii_mbtowc+0x16>
 800913a:	f06f 0001 	mvn.w	r0, #1
 800913e:	e7f8      	b.n	8009132 <__ascii_mbtowc+0x16>

08009140 <memcpy>:
 8009140:	b510      	push	{r4, lr}
 8009142:	1e43      	subs	r3, r0, #1
 8009144:	440a      	add	r2, r1
 8009146:	4291      	cmp	r1, r2
 8009148:	d100      	bne.n	800914c <memcpy+0xc>
 800914a:	bd10      	pop	{r4, pc}
 800914c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009154:	e7f7      	b.n	8009146 <memcpy+0x6>

08009156 <_Balloc>:
 8009156:	b570      	push	{r4, r5, r6, lr}
 8009158:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800915a:	4604      	mov	r4, r0
 800915c:	460e      	mov	r6, r1
 800915e:	b93d      	cbnz	r5, 8009170 <_Balloc+0x1a>
 8009160:	2010      	movs	r0, #16
 8009162:	f7ff ffd3 	bl	800910c <malloc>
 8009166:	6260      	str	r0, [r4, #36]	; 0x24
 8009168:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800916c:	6005      	str	r5, [r0, #0]
 800916e:	60c5      	str	r5, [r0, #12]
 8009170:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009172:	68eb      	ldr	r3, [r5, #12]
 8009174:	b183      	cbz	r3, 8009198 <_Balloc+0x42>
 8009176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800917e:	b9b8      	cbnz	r0, 80091b0 <_Balloc+0x5a>
 8009180:	2101      	movs	r1, #1
 8009182:	fa01 f506 	lsl.w	r5, r1, r6
 8009186:	1d6a      	adds	r2, r5, #5
 8009188:	0092      	lsls	r2, r2, #2
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fbe1 	bl	8009952 <_calloc_r>
 8009190:	b160      	cbz	r0, 80091ac <_Balloc+0x56>
 8009192:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009196:	e00e      	b.n	80091b6 <_Balloc+0x60>
 8009198:	2221      	movs	r2, #33	; 0x21
 800919a:	2104      	movs	r1, #4
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fbd8 	bl	8009952 <_calloc_r>
 80091a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091a4:	60e8      	str	r0, [r5, #12]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e4      	bne.n	8009176 <_Balloc+0x20>
 80091ac:	2000      	movs	r0, #0
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	6802      	ldr	r2, [r0, #0]
 80091b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80091b6:	2300      	movs	r3, #0
 80091b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091bc:	e7f7      	b.n	80091ae <_Balloc+0x58>

080091be <_Bfree>:
 80091be:	b570      	push	{r4, r5, r6, lr}
 80091c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80091c2:	4606      	mov	r6, r0
 80091c4:	460d      	mov	r5, r1
 80091c6:	b93c      	cbnz	r4, 80091d8 <_Bfree+0x1a>
 80091c8:	2010      	movs	r0, #16
 80091ca:	f7ff ff9f 	bl	800910c <malloc>
 80091ce:	6270      	str	r0, [r6, #36]	; 0x24
 80091d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091d4:	6004      	str	r4, [r0, #0]
 80091d6:	60c4      	str	r4, [r0, #12]
 80091d8:	b13d      	cbz	r5, 80091ea <_Bfree+0x2c>
 80091da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091dc:	686a      	ldr	r2, [r5, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091e4:	6029      	str	r1, [r5, #0]
 80091e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80091ea:	bd70      	pop	{r4, r5, r6, pc}

080091ec <__multadd>:
 80091ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f0:	690d      	ldr	r5, [r1, #16]
 80091f2:	461f      	mov	r7, r3
 80091f4:	4606      	mov	r6, r0
 80091f6:	460c      	mov	r4, r1
 80091f8:	f101 0c14 	add.w	ip, r1, #20
 80091fc:	2300      	movs	r3, #0
 80091fe:	f8dc 0000 	ldr.w	r0, [ip]
 8009202:	b281      	uxth	r1, r0
 8009204:	fb02 7101 	mla	r1, r2, r1, r7
 8009208:	0c0f      	lsrs	r7, r1, #16
 800920a:	0c00      	lsrs	r0, r0, #16
 800920c:	fb02 7000 	mla	r0, r2, r0, r7
 8009210:	b289      	uxth	r1, r1
 8009212:	3301      	adds	r3, #1
 8009214:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009218:	429d      	cmp	r5, r3
 800921a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800921e:	f84c 1b04 	str.w	r1, [ip], #4
 8009222:	dcec      	bgt.n	80091fe <__multadd+0x12>
 8009224:	b1d7      	cbz	r7, 800925c <__multadd+0x70>
 8009226:	68a3      	ldr	r3, [r4, #8]
 8009228:	42ab      	cmp	r3, r5
 800922a:	dc12      	bgt.n	8009252 <__multadd+0x66>
 800922c:	6861      	ldr	r1, [r4, #4]
 800922e:	4630      	mov	r0, r6
 8009230:	3101      	adds	r1, #1
 8009232:	f7ff ff90 	bl	8009156 <_Balloc>
 8009236:	6922      	ldr	r2, [r4, #16]
 8009238:	3202      	adds	r2, #2
 800923a:	f104 010c 	add.w	r1, r4, #12
 800923e:	4680      	mov	r8, r0
 8009240:	0092      	lsls	r2, r2, #2
 8009242:	300c      	adds	r0, #12
 8009244:	f7ff ff7c 	bl	8009140 <memcpy>
 8009248:	4621      	mov	r1, r4
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ffb7 	bl	80091be <_Bfree>
 8009250:	4644      	mov	r4, r8
 8009252:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009256:	3501      	adds	r5, #1
 8009258:	615f      	str	r7, [r3, #20]
 800925a:	6125      	str	r5, [r4, #16]
 800925c:	4620      	mov	r0, r4
 800925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009262 <__s2b>:
 8009262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009266:	460c      	mov	r4, r1
 8009268:	4615      	mov	r5, r2
 800926a:	461f      	mov	r7, r3
 800926c:	2209      	movs	r2, #9
 800926e:	3308      	adds	r3, #8
 8009270:	4606      	mov	r6, r0
 8009272:	fb93 f3f2 	sdiv	r3, r3, r2
 8009276:	2100      	movs	r1, #0
 8009278:	2201      	movs	r2, #1
 800927a:	429a      	cmp	r2, r3
 800927c:	db20      	blt.n	80092c0 <__s2b+0x5e>
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff69 	bl	8009156 <_Balloc>
 8009284:	9b08      	ldr	r3, [sp, #32]
 8009286:	6143      	str	r3, [r0, #20]
 8009288:	2d09      	cmp	r5, #9
 800928a:	f04f 0301 	mov.w	r3, #1
 800928e:	6103      	str	r3, [r0, #16]
 8009290:	dd19      	ble.n	80092c6 <__s2b+0x64>
 8009292:	f104 0809 	add.w	r8, r4, #9
 8009296:	46c1      	mov	r9, r8
 8009298:	442c      	add	r4, r5
 800929a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800929e:	4601      	mov	r1, r0
 80092a0:	3b30      	subs	r3, #48	; 0x30
 80092a2:	220a      	movs	r2, #10
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ffa1 	bl	80091ec <__multadd>
 80092aa:	45a1      	cmp	r9, r4
 80092ac:	d1f5      	bne.n	800929a <__s2b+0x38>
 80092ae:	eb08 0405 	add.w	r4, r8, r5
 80092b2:	3c08      	subs	r4, #8
 80092b4:	1b2d      	subs	r5, r5, r4
 80092b6:	1963      	adds	r3, r4, r5
 80092b8:	42bb      	cmp	r3, r7
 80092ba:	db07      	blt.n	80092cc <__s2b+0x6a>
 80092bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c0:	0052      	lsls	r2, r2, #1
 80092c2:	3101      	adds	r1, #1
 80092c4:	e7d9      	b.n	800927a <__s2b+0x18>
 80092c6:	340a      	adds	r4, #10
 80092c8:	2509      	movs	r5, #9
 80092ca:	e7f3      	b.n	80092b4 <__s2b+0x52>
 80092cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092d0:	4601      	mov	r1, r0
 80092d2:	3b30      	subs	r3, #48	; 0x30
 80092d4:	220a      	movs	r2, #10
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff ff88 	bl	80091ec <__multadd>
 80092dc:	e7eb      	b.n	80092b6 <__s2b+0x54>

080092de <__hi0bits>:
 80092de:	0c02      	lsrs	r2, r0, #16
 80092e0:	0412      	lsls	r2, r2, #16
 80092e2:	4603      	mov	r3, r0
 80092e4:	b9b2      	cbnz	r2, 8009314 <__hi0bits+0x36>
 80092e6:	0403      	lsls	r3, r0, #16
 80092e8:	2010      	movs	r0, #16
 80092ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80092ee:	bf04      	itt	eq
 80092f0:	021b      	lsleq	r3, r3, #8
 80092f2:	3008      	addeq	r0, #8
 80092f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80092f8:	bf04      	itt	eq
 80092fa:	011b      	lsleq	r3, r3, #4
 80092fc:	3004      	addeq	r0, #4
 80092fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009302:	bf04      	itt	eq
 8009304:	009b      	lsleq	r3, r3, #2
 8009306:	3002      	addeq	r0, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	db06      	blt.n	800931a <__hi0bits+0x3c>
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	d503      	bpl.n	8009318 <__hi0bits+0x3a>
 8009310:	3001      	adds	r0, #1
 8009312:	4770      	bx	lr
 8009314:	2000      	movs	r0, #0
 8009316:	e7e8      	b.n	80092ea <__hi0bits+0xc>
 8009318:	2020      	movs	r0, #32
 800931a:	4770      	bx	lr

0800931c <__lo0bits>:
 800931c:	6803      	ldr	r3, [r0, #0]
 800931e:	f013 0207 	ands.w	r2, r3, #7
 8009322:	4601      	mov	r1, r0
 8009324:	d00b      	beq.n	800933e <__lo0bits+0x22>
 8009326:	07da      	lsls	r2, r3, #31
 8009328:	d423      	bmi.n	8009372 <__lo0bits+0x56>
 800932a:	0798      	lsls	r0, r3, #30
 800932c:	bf49      	itett	mi
 800932e:	085b      	lsrmi	r3, r3, #1
 8009330:	089b      	lsrpl	r3, r3, #2
 8009332:	2001      	movmi	r0, #1
 8009334:	600b      	strmi	r3, [r1, #0]
 8009336:	bf5c      	itt	pl
 8009338:	600b      	strpl	r3, [r1, #0]
 800933a:	2002      	movpl	r0, #2
 800933c:	4770      	bx	lr
 800933e:	b298      	uxth	r0, r3
 8009340:	b9a8      	cbnz	r0, 800936e <__lo0bits+0x52>
 8009342:	0c1b      	lsrs	r3, r3, #16
 8009344:	2010      	movs	r0, #16
 8009346:	f013 0fff 	tst.w	r3, #255	; 0xff
 800934a:	bf04      	itt	eq
 800934c:	0a1b      	lsreq	r3, r3, #8
 800934e:	3008      	addeq	r0, #8
 8009350:	071a      	lsls	r2, r3, #28
 8009352:	bf04      	itt	eq
 8009354:	091b      	lsreq	r3, r3, #4
 8009356:	3004      	addeq	r0, #4
 8009358:	079a      	lsls	r2, r3, #30
 800935a:	bf04      	itt	eq
 800935c:	089b      	lsreq	r3, r3, #2
 800935e:	3002      	addeq	r0, #2
 8009360:	07da      	lsls	r2, r3, #31
 8009362:	d402      	bmi.n	800936a <__lo0bits+0x4e>
 8009364:	085b      	lsrs	r3, r3, #1
 8009366:	d006      	beq.n	8009376 <__lo0bits+0x5a>
 8009368:	3001      	adds	r0, #1
 800936a:	600b      	str	r3, [r1, #0]
 800936c:	4770      	bx	lr
 800936e:	4610      	mov	r0, r2
 8009370:	e7e9      	b.n	8009346 <__lo0bits+0x2a>
 8009372:	2000      	movs	r0, #0
 8009374:	4770      	bx	lr
 8009376:	2020      	movs	r0, #32
 8009378:	4770      	bx	lr

0800937a <__i2b>:
 800937a:	b510      	push	{r4, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	2101      	movs	r1, #1
 8009380:	f7ff fee9 	bl	8009156 <_Balloc>
 8009384:	2201      	movs	r2, #1
 8009386:	6144      	str	r4, [r0, #20]
 8009388:	6102      	str	r2, [r0, #16]
 800938a:	bd10      	pop	{r4, pc}

0800938c <__multiply>:
 800938c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	4614      	mov	r4, r2
 8009392:	690a      	ldr	r2, [r1, #16]
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	429a      	cmp	r2, r3
 8009398:	bfb8      	it	lt
 800939a:	460b      	movlt	r3, r1
 800939c:	4688      	mov	r8, r1
 800939e:	bfbc      	itt	lt
 80093a0:	46a0      	movlt	r8, r4
 80093a2:	461c      	movlt	r4, r3
 80093a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80093ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093b4:	eb07 0609 	add.w	r6, r7, r9
 80093b8:	42b3      	cmp	r3, r6
 80093ba:	bfb8      	it	lt
 80093bc:	3101      	addlt	r1, #1
 80093be:	f7ff feca 	bl	8009156 <_Balloc>
 80093c2:	f100 0514 	add.w	r5, r0, #20
 80093c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80093ca:	462b      	mov	r3, r5
 80093cc:	2200      	movs	r2, #0
 80093ce:	4573      	cmp	r3, lr
 80093d0:	d316      	bcc.n	8009400 <__multiply+0x74>
 80093d2:	f104 0214 	add.w	r2, r4, #20
 80093d6:	f108 0114 	add.w	r1, r8, #20
 80093da:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80093de:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	9b00      	ldr	r3, [sp, #0]
 80093e6:	9201      	str	r2, [sp, #4]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d80c      	bhi.n	8009406 <__multiply+0x7a>
 80093ec:	2e00      	cmp	r6, #0
 80093ee:	dd03      	ble.n	80093f8 <__multiply+0x6c>
 80093f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d05d      	beq.n	80094b4 <__multiply+0x128>
 80093f8:	6106      	str	r6, [r0, #16]
 80093fa:	b003      	add	sp, #12
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	f843 2b04 	str.w	r2, [r3], #4
 8009404:	e7e3      	b.n	80093ce <__multiply+0x42>
 8009406:	f8b2 b000 	ldrh.w	fp, [r2]
 800940a:	f1bb 0f00 	cmp.w	fp, #0
 800940e:	d023      	beq.n	8009458 <__multiply+0xcc>
 8009410:	4689      	mov	r9, r1
 8009412:	46ac      	mov	ip, r5
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	f859 4b04 	ldr.w	r4, [r9], #4
 800941c:	f8dc a000 	ldr.w	sl, [ip]
 8009420:	b2a3      	uxth	r3, r4
 8009422:	fa1f fa8a 	uxth.w	sl, sl
 8009426:	fb0b a303 	mla	r3, fp, r3, sl
 800942a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800942e:	f8dc 4000 	ldr.w	r4, [ip]
 8009432:	4443      	add	r3, r8
 8009434:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009438:	fb0b 840a 	mla	r4, fp, sl, r8
 800943c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009440:	46e2      	mov	sl, ip
 8009442:	b29b      	uxth	r3, r3
 8009444:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009448:	454f      	cmp	r7, r9
 800944a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800944e:	f84a 3b04 	str.w	r3, [sl], #4
 8009452:	d82b      	bhi.n	80094ac <__multiply+0x120>
 8009454:	f8cc 8004 	str.w	r8, [ip, #4]
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800945e:	3204      	adds	r2, #4
 8009460:	f1ba 0f00 	cmp.w	sl, #0
 8009464:	d020      	beq.n	80094a8 <__multiply+0x11c>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	4689      	mov	r9, r1
 800946a:	46a8      	mov	r8, r5
 800946c:	f04f 0b00 	mov.w	fp, #0
 8009470:	f8b9 c000 	ldrh.w	ip, [r9]
 8009474:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009478:	fb0a 440c 	mla	r4, sl, ip, r4
 800947c:	445c      	add	r4, fp
 800947e:	46c4      	mov	ip, r8
 8009480:	b29b      	uxth	r3, r3
 8009482:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009486:	f84c 3b04 	str.w	r3, [ip], #4
 800948a:	f859 3b04 	ldr.w	r3, [r9], #4
 800948e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	fb0a b303 	mla	r3, sl, r3, fp
 8009498:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800949c:	454f      	cmp	r7, r9
 800949e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80094a2:	d805      	bhi.n	80094b0 <__multiply+0x124>
 80094a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80094a8:	3504      	adds	r5, #4
 80094aa:	e79b      	b.n	80093e4 <__multiply+0x58>
 80094ac:	46d4      	mov	ip, sl
 80094ae:	e7b3      	b.n	8009418 <__multiply+0x8c>
 80094b0:	46e0      	mov	r8, ip
 80094b2:	e7dd      	b.n	8009470 <__multiply+0xe4>
 80094b4:	3e01      	subs	r6, #1
 80094b6:	e799      	b.n	80093ec <__multiply+0x60>

080094b8 <__pow5mult>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	4615      	mov	r5, r2
 80094be:	f012 0203 	ands.w	r2, r2, #3
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	d007      	beq.n	80094d8 <__pow5mult+0x20>
 80094c8:	3a01      	subs	r2, #1
 80094ca:	4c21      	ldr	r4, [pc, #132]	; (8009550 <__pow5mult+0x98>)
 80094cc:	2300      	movs	r3, #0
 80094ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094d2:	f7ff fe8b 	bl	80091ec <__multadd>
 80094d6:	4607      	mov	r7, r0
 80094d8:	10ad      	asrs	r5, r5, #2
 80094da:	d035      	beq.n	8009548 <__pow5mult+0x90>
 80094dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094de:	b93c      	cbnz	r4, 80094f0 <__pow5mult+0x38>
 80094e0:	2010      	movs	r0, #16
 80094e2:	f7ff fe13 	bl	800910c <malloc>
 80094e6:	6270      	str	r0, [r6, #36]	; 0x24
 80094e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094ec:	6004      	str	r4, [r0, #0]
 80094ee:	60c4      	str	r4, [r0, #12]
 80094f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094f8:	b94c      	cbnz	r4, 800950e <__pow5mult+0x56>
 80094fa:	f240 2171 	movw	r1, #625	; 0x271
 80094fe:	4630      	mov	r0, r6
 8009500:	f7ff ff3b 	bl	800937a <__i2b>
 8009504:	2300      	movs	r3, #0
 8009506:	f8c8 0008 	str.w	r0, [r8, #8]
 800950a:	4604      	mov	r4, r0
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	07eb      	lsls	r3, r5, #31
 8009514:	d50a      	bpl.n	800952c <__pow5mult+0x74>
 8009516:	4639      	mov	r1, r7
 8009518:	4622      	mov	r2, r4
 800951a:	4630      	mov	r0, r6
 800951c:	f7ff ff36 	bl	800938c <__multiply>
 8009520:	4639      	mov	r1, r7
 8009522:	4681      	mov	r9, r0
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff fe4a 	bl	80091be <_Bfree>
 800952a:	464f      	mov	r7, r9
 800952c:	106d      	asrs	r5, r5, #1
 800952e:	d00b      	beq.n	8009548 <__pow5mult+0x90>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	b938      	cbnz	r0, 8009544 <__pow5mult+0x8c>
 8009534:	4622      	mov	r2, r4
 8009536:	4621      	mov	r1, r4
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff ff27 	bl	800938c <__multiply>
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	f8c0 8000 	str.w	r8, [r0]
 8009544:	4604      	mov	r4, r0
 8009546:	e7e4      	b.n	8009512 <__pow5mult+0x5a>
 8009548:	4638      	mov	r0, r7
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954e:	bf00      	nop
 8009550:	0800a160 	.word	0x0800a160

08009554 <__lshift>:
 8009554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	460c      	mov	r4, r1
 800955a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800955e:	6923      	ldr	r3, [r4, #16]
 8009560:	6849      	ldr	r1, [r1, #4]
 8009562:	eb0a 0903 	add.w	r9, sl, r3
 8009566:	68a3      	ldr	r3, [r4, #8]
 8009568:	4607      	mov	r7, r0
 800956a:	4616      	mov	r6, r2
 800956c:	f109 0501 	add.w	r5, r9, #1
 8009570:	42ab      	cmp	r3, r5
 8009572:	db32      	blt.n	80095da <__lshift+0x86>
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff fdee 	bl	8009156 <_Balloc>
 800957a:	2300      	movs	r3, #0
 800957c:	4680      	mov	r8, r0
 800957e:	f100 0114 	add.w	r1, r0, #20
 8009582:	461a      	mov	r2, r3
 8009584:	4553      	cmp	r3, sl
 8009586:	db2b      	blt.n	80095e0 <__lshift+0x8c>
 8009588:	6920      	ldr	r0, [r4, #16]
 800958a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800958e:	f104 0314 	add.w	r3, r4, #20
 8009592:	f016 021f 	ands.w	r2, r6, #31
 8009596:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800959a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800959e:	d025      	beq.n	80095ec <__lshift+0x98>
 80095a0:	f1c2 0e20 	rsb	lr, r2, #32
 80095a4:	2000      	movs	r0, #0
 80095a6:	681e      	ldr	r6, [r3, #0]
 80095a8:	468a      	mov	sl, r1
 80095aa:	4096      	lsls	r6, r2
 80095ac:	4330      	orrs	r0, r6
 80095ae:	f84a 0b04 	str.w	r0, [sl], #4
 80095b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80095b6:	459c      	cmp	ip, r3
 80095b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80095bc:	d814      	bhi.n	80095e8 <__lshift+0x94>
 80095be:	6048      	str	r0, [r1, #4]
 80095c0:	b108      	cbz	r0, 80095c6 <__lshift+0x72>
 80095c2:	f109 0502 	add.w	r5, r9, #2
 80095c6:	3d01      	subs	r5, #1
 80095c8:	4638      	mov	r0, r7
 80095ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80095ce:	4621      	mov	r1, r4
 80095d0:	f7ff fdf5 	bl	80091be <_Bfree>
 80095d4:	4640      	mov	r0, r8
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	3101      	adds	r1, #1
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	e7c7      	b.n	8009570 <__lshift+0x1c>
 80095e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80095e4:	3301      	adds	r3, #1
 80095e6:	e7cd      	b.n	8009584 <__lshift+0x30>
 80095e8:	4651      	mov	r1, sl
 80095ea:	e7dc      	b.n	80095a6 <__lshift+0x52>
 80095ec:	3904      	subs	r1, #4
 80095ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80095f6:	459c      	cmp	ip, r3
 80095f8:	d8f9      	bhi.n	80095ee <__lshift+0x9a>
 80095fa:	e7e4      	b.n	80095c6 <__lshift+0x72>

080095fc <__mcmp>:
 80095fc:	6903      	ldr	r3, [r0, #16]
 80095fe:	690a      	ldr	r2, [r1, #16]
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	b530      	push	{r4, r5, lr}
 8009604:	d10c      	bne.n	8009620 <__mcmp+0x24>
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	3014      	adds	r0, #20
 800960a:	3114      	adds	r1, #20
 800960c:	1884      	adds	r4, r0, r2
 800960e:	4411      	add	r1, r2
 8009610:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009614:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009618:	4295      	cmp	r5, r2
 800961a:	d003      	beq.n	8009624 <__mcmp+0x28>
 800961c:	d305      	bcc.n	800962a <__mcmp+0x2e>
 800961e:	2301      	movs	r3, #1
 8009620:	4618      	mov	r0, r3
 8009622:	bd30      	pop	{r4, r5, pc}
 8009624:	42a0      	cmp	r0, r4
 8009626:	d3f3      	bcc.n	8009610 <__mcmp+0x14>
 8009628:	e7fa      	b.n	8009620 <__mcmp+0x24>
 800962a:	f04f 33ff 	mov.w	r3, #4294967295
 800962e:	e7f7      	b.n	8009620 <__mcmp+0x24>

08009630 <__mdiff>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	460d      	mov	r5, r1
 8009636:	4607      	mov	r7, r0
 8009638:	4611      	mov	r1, r2
 800963a:	4628      	mov	r0, r5
 800963c:	4614      	mov	r4, r2
 800963e:	f7ff ffdd 	bl	80095fc <__mcmp>
 8009642:	1e06      	subs	r6, r0, #0
 8009644:	d108      	bne.n	8009658 <__mdiff+0x28>
 8009646:	4631      	mov	r1, r6
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff fd84 	bl	8009156 <_Balloc>
 800964e:	2301      	movs	r3, #1
 8009650:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009658:	bfa4      	itt	ge
 800965a:	4623      	movge	r3, r4
 800965c:	462c      	movge	r4, r5
 800965e:	4638      	mov	r0, r7
 8009660:	6861      	ldr	r1, [r4, #4]
 8009662:	bfa6      	itte	ge
 8009664:	461d      	movge	r5, r3
 8009666:	2600      	movge	r6, #0
 8009668:	2601      	movlt	r6, #1
 800966a:	f7ff fd74 	bl	8009156 <_Balloc>
 800966e:	692b      	ldr	r3, [r5, #16]
 8009670:	60c6      	str	r6, [r0, #12]
 8009672:	6926      	ldr	r6, [r4, #16]
 8009674:	f105 0914 	add.w	r9, r5, #20
 8009678:	f104 0214 	add.w	r2, r4, #20
 800967c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009680:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009684:	f100 0514 	add.w	r5, r0, #20
 8009688:	f04f 0e00 	mov.w	lr, #0
 800968c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009690:	f859 4b04 	ldr.w	r4, [r9], #4
 8009694:	fa1e f18a 	uxtah	r1, lr, sl
 8009698:	b2a3      	uxth	r3, r4
 800969a:	1ac9      	subs	r1, r1, r3
 800969c:	0c23      	lsrs	r3, r4, #16
 800969e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80096a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80096a6:	b289      	uxth	r1, r1
 80096a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80096ac:	45c8      	cmp	r8, r9
 80096ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80096b2:	4694      	mov	ip, r2
 80096b4:	f845 3b04 	str.w	r3, [r5], #4
 80096b8:	d8e8      	bhi.n	800968c <__mdiff+0x5c>
 80096ba:	45bc      	cmp	ip, r7
 80096bc:	d304      	bcc.n	80096c8 <__mdiff+0x98>
 80096be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80096c2:	b183      	cbz	r3, 80096e6 <__mdiff+0xb6>
 80096c4:	6106      	str	r6, [r0, #16]
 80096c6:	e7c5      	b.n	8009654 <__mdiff+0x24>
 80096c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80096cc:	fa1e f381 	uxtah	r3, lr, r1
 80096d0:	141a      	asrs	r2, r3, #16
 80096d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80096e0:	f845 3b04 	str.w	r3, [r5], #4
 80096e4:	e7e9      	b.n	80096ba <__mdiff+0x8a>
 80096e6:	3e01      	subs	r6, #1
 80096e8:	e7e9      	b.n	80096be <__mdiff+0x8e>
	...

080096ec <__ulp>:
 80096ec:	4b12      	ldr	r3, [pc, #72]	; (8009738 <__ulp+0x4c>)
 80096ee:	ee10 2a90 	vmov	r2, s1
 80096f2:	401a      	ands	r2, r3
 80096f4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dd04      	ble.n	8009706 <__ulp+0x1a>
 80096fc:	2000      	movs	r0, #0
 80096fe:	4619      	mov	r1, r3
 8009700:	ec41 0b10 	vmov	d0, r0, r1
 8009704:	4770      	bx	lr
 8009706:	425b      	negs	r3, r3
 8009708:	151b      	asrs	r3, r3, #20
 800970a:	2b13      	cmp	r3, #19
 800970c:	f04f 0000 	mov.w	r0, #0
 8009710:	f04f 0100 	mov.w	r1, #0
 8009714:	dc04      	bgt.n	8009720 <__ulp+0x34>
 8009716:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800971a:	fa42 f103 	asr.w	r1, r2, r3
 800971e:	e7ef      	b.n	8009700 <__ulp+0x14>
 8009720:	3b14      	subs	r3, #20
 8009722:	2b1e      	cmp	r3, #30
 8009724:	f04f 0201 	mov.w	r2, #1
 8009728:	bfda      	itte	le
 800972a:	f1c3 031f 	rsble	r3, r3, #31
 800972e:	fa02 f303 	lslle.w	r3, r2, r3
 8009732:	4613      	movgt	r3, r2
 8009734:	4618      	mov	r0, r3
 8009736:	e7e3      	b.n	8009700 <__ulp+0x14>
 8009738:	7ff00000 	.word	0x7ff00000

0800973c <__b2d>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	6905      	ldr	r5, [r0, #16]
 8009740:	f100 0714 	add.w	r7, r0, #20
 8009744:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009748:	1f2e      	subs	r6, r5, #4
 800974a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff fdc5 	bl	80092de <__hi0bits>
 8009754:	f1c0 0320 	rsb	r3, r0, #32
 8009758:	280a      	cmp	r0, #10
 800975a:	600b      	str	r3, [r1, #0]
 800975c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80097d4 <__b2d+0x98>
 8009760:	dc14      	bgt.n	800978c <__b2d+0x50>
 8009762:	f1c0 0e0b 	rsb	lr, r0, #11
 8009766:	fa24 f10e 	lsr.w	r1, r4, lr
 800976a:	42b7      	cmp	r7, r6
 800976c:	ea41 030c 	orr.w	r3, r1, ip
 8009770:	bf34      	ite	cc
 8009772:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009776:	2100      	movcs	r1, #0
 8009778:	3015      	adds	r0, #21
 800977a:	fa04 f000 	lsl.w	r0, r4, r0
 800977e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009782:	ea40 0201 	orr.w	r2, r0, r1
 8009786:	ec43 2b10 	vmov	d0, r2, r3
 800978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978c:	42b7      	cmp	r7, r6
 800978e:	bf3a      	itte	cc
 8009790:	f1a5 0608 	subcc.w	r6, r5, #8
 8009794:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009798:	2100      	movcs	r1, #0
 800979a:	380b      	subs	r0, #11
 800979c:	d015      	beq.n	80097ca <__b2d+0x8e>
 800979e:	4084      	lsls	r4, r0
 80097a0:	f1c0 0520 	rsb	r5, r0, #32
 80097a4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80097a8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80097ac:	42be      	cmp	r6, r7
 80097ae:	fa21 fc05 	lsr.w	ip, r1, r5
 80097b2:	ea44 030c 	orr.w	r3, r4, ip
 80097b6:	bf8c      	ite	hi
 80097b8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80097bc:	2400      	movls	r4, #0
 80097be:	fa01 f000 	lsl.w	r0, r1, r0
 80097c2:	40ec      	lsrs	r4, r5
 80097c4:	ea40 0204 	orr.w	r2, r0, r4
 80097c8:	e7dd      	b.n	8009786 <__b2d+0x4a>
 80097ca:	ea44 030c 	orr.w	r3, r4, ip
 80097ce:	460a      	mov	r2, r1
 80097d0:	e7d9      	b.n	8009786 <__b2d+0x4a>
 80097d2:	bf00      	nop
 80097d4:	3ff00000 	.word	0x3ff00000

080097d8 <__d2b>:
 80097d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	460e      	mov	r6, r1
 80097de:	2101      	movs	r1, #1
 80097e0:	ec59 8b10 	vmov	r8, r9, d0
 80097e4:	4615      	mov	r5, r2
 80097e6:	f7ff fcb6 	bl	8009156 <_Balloc>
 80097ea:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80097ee:	4607      	mov	r7, r0
 80097f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097f4:	bb34      	cbnz	r4, 8009844 <__d2b+0x6c>
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	f1b8 0300 	subs.w	r3, r8, #0
 80097fc:	d027      	beq.n	800984e <__d2b+0x76>
 80097fe:	a802      	add	r0, sp, #8
 8009800:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009804:	f7ff fd8a 	bl	800931c <__lo0bits>
 8009808:	9900      	ldr	r1, [sp, #0]
 800980a:	b1f0      	cbz	r0, 800984a <__d2b+0x72>
 800980c:	9a01      	ldr	r2, [sp, #4]
 800980e:	f1c0 0320 	rsb	r3, r0, #32
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	430b      	orrs	r3, r1
 8009818:	40c2      	lsrs	r2, r0
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	9201      	str	r2, [sp, #4]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2102      	movne	r1, #2
 8009828:	2101      	moveq	r1, #1
 800982a:	6139      	str	r1, [r7, #16]
 800982c:	b1c4      	cbz	r4, 8009860 <__d2b+0x88>
 800982e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009832:	4404      	add	r4, r0
 8009834:	6034      	str	r4, [r6, #0]
 8009836:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800983a:	6028      	str	r0, [r5, #0]
 800983c:	4638      	mov	r0, r7
 800983e:	b003      	add	sp, #12
 8009840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009848:	e7d5      	b.n	80097f6 <__d2b+0x1e>
 800984a:	6179      	str	r1, [r7, #20]
 800984c:	e7e7      	b.n	800981e <__d2b+0x46>
 800984e:	a801      	add	r0, sp, #4
 8009850:	f7ff fd64 	bl	800931c <__lo0bits>
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	2101      	movs	r1, #1
 800985a:	6139      	str	r1, [r7, #16]
 800985c:	3020      	adds	r0, #32
 800985e:	e7e5      	b.n	800982c <__d2b+0x54>
 8009860:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009868:	6030      	str	r0, [r6, #0]
 800986a:	6918      	ldr	r0, [r3, #16]
 800986c:	f7ff fd37 	bl	80092de <__hi0bits>
 8009870:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009874:	e7e1      	b.n	800983a <__d2b+0x62>

08009876 <__ratio>:
 8009876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	4688      	mov	r8, r1
 800987c:	4669      	mov	r1, sp
 800987e:	4681      	mov	r9, r0
 8009880:	f7ff ff5c 	bl	800973c <__b2d>
 8009884:	a901      	add	r1, sp, #4
 8009886:	4640      	mov	r0, r8
 8009888:	ec57 6b10 	vmov	r6, r7, d0
 800988c:	f7ff ff56 	bl	800973c <__b2d>
 8009890:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009894:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009898:	eba3 0c02 	sub.w	ip, r3, r2
 800989c:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098a0:	1a9b      	subs	r3, r3, r2
 80098a2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098a6:	ec5b ab10 	vmov	sl, fp, d0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfce      	itee	gt
 80098ae:	463a      	movgt	r2, r7
 80098b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098b4:	465a      	movle	r2, fp
 80098b6:	4659      	mov	r1, fp
 80098b8:	463d      	mov	r5, r7
 80098ba:	bfd4      	ite	le
 80098bc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80098c0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80098c4:	4630      	mov	r0, r6
 80098c6:	ee10 2a10 	vmov	r2, s0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f6 ffbd 	bl	800084c <__aeabi_ddiv>
 80098d2:	ec41 0b10 	vmov	d0, r0, r1
 80098d6:	b003      	add	sp, #12
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098dc <__copybits>:
 80098dc:	3901      	subs	r1, #1
 80098de:	b510      	push	{r4, lr}
 80098e0:	1149      	asrs	r1, r1, #5
 80098e2:	6914      	ldr	r4, [r2, #16]
 80098e4:	3101      	adds	r1, #1
 80098e6:	f102 0314 	add.w	r3, r2, #20
 80098ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098f2:	42a3      	cmp	r3, r4
 80098f4:	4602      	mov	r2, r0
 80098f6:	d303      	bcc.n	8009900 <__copybits+0x24>
 80098f8:	2300      	movs	r3, #0
 80098fa:	428a      	cmp	r2, r1
 80098fc:	d305      	bcc.n	800990a <__copybits+0x2e>
 80098fe:	bd10      	pop	{r4, pc}
 8009900:	f853 2b04 	ldr.w	r2, [r3], #4
 8009904:	f840 2b04 	str.w	r2, [r0], #4
 8009908:	e7f3      	b.n	80098f2 <__copybits+0x16>
 800990a:	f842 3b04 	str.w	r3, [r2], #4
 800990e:	e7f4      	b.n	80098fa <__copybits+0x1e>

08009910 <__any_on>:
 8009910:	f100 0214 	add.w	r2, r0, #20
 8009914:	6900      	ldr	r0, [r0, #16]
 8009916:	114b      	asrs	r3, r1, #5
 8009918:	4298      	cmp	r0, r3
 800991a:	b510      	push	{r4, lr}
 800991c:	db11      	blt.n	8009942 <__any_on+0x32>
 800991e:	dd0a      	ble.n	8009936 <__any_on+0x26>
 8009920:	f011 011f 	ands.w	r1, r1, #31
 8009924:	d007      	beq.n	8009936 <__any_on+0x26>
 8009926:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800992a:	fa24 f001 	lsr.w	r0, r4, r1
 800992e:	fa00 f101 	lsl.w	r1, r0, r1
 8009932:	428c      	cmp	r4, r1
 8009934:	d10b      	bne.n	800994e <__any_on+0x3e>
 8009936:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800993a:	4293      	cmp	r3, r2
 800993c:	d803      	bhi.n	8009946 <__any_on+0x36>
 800993e:	2000      	movs	r0, #0
 8009940:	bd10      	pop	{r4, pc}
 8009942:	4603      	mov	r3, r0
 8009944:	e7f7      	b.n	8009936 <__any_on+0x26>
 8009946:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800994a:	2900      	cmp	r1, #0
 800994c:	d0f5      	beq.n	800993a <__any_on+0x2a>
 800994e:	2001      	movs	r0, #1
 8009950:	e7f6      	b.n	8009940 <__any_on+0x30>

08009952 <_calloc_r>:
 8009952:	b538      	push	{r3, r4, r5, lr}
 8009954:	fb02 f401 	mul.w	r4, r2, r1
 8009958:	4621      	mov	r1, r4
 800995a:	f000 f857 	bl	8009a0c <_malloc_r>
 800995e:	4605      	mov	r5, r0
 8009960:	b118      	cbz	r0, 800996a <_calloc_r+0x18>
 8009962:	4622      	mov	r2, r4
 8009964:	2100      	movs	r1, #0
 8009966:	f7fc fd35 	bl	80063d4 <memset>
 800996a:	4628      	mov	r0, r5
 800996c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009970 <_free_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4605      	mov	r5, r0
 8009974:	2900      	cmp	r1, #0
 8009976:	d045      	beq.n	8009a04 <_free_r+0x94>
 8009978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800997c:	1f0c      	subs	r4, r1, #4
 800997e:	2b00      	cmp	r3, #0
 8009980:	bfb8      	it	lt
 8009982:	18e4      	addlt	r4, r4, r3
 8009984:	f000 fa36 	bl	8009df4 <__malloc_lock>
 8009988:	4a1f      	ldr	r2, [pc, #124]	; (8009a08 <_free_r+0x98>)
 800998a:	6813      	ldr	r3, [r2, #0]
 800998c:	4610      	mov	r0, r2
 800998e:	b933      	cbnz	r3, 800999e <_free_r+0x2e>
 8009990:	6063      	str	r3, [r4, #4]
 8009992:	6014      	str	r4, [r2, #0]
 8009994:	4628      	mov	r0, r5
 8009996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800999a:	f000 ba2c 	b.w	8009df6 <__malloc_unlock>
 800999e:	42a3      	cmp	r3, r4
 80099a0:	d90c      	bls.n	80099bc <_free_r+0x4c>
 80099a2:	6821      	ldr	r1, [r4, #0]
 80099a4:	1862      	adds	r2, r4, r1
 80099a6:	4293      	cmp	r3, r2
 80099a8:	bf04      	itt	eq
 80099aa:	681a      	ldreq	r2, [r3, #0]
 80099ac:	685b      	ldreq	r3, [r3, #4]
 80099ae:	6063      	str	r3, [r4, #4]
 80099b0:	bf04      	itt	eq
 80099b2:	1852      	addeq	r2, r2, r1
 80099b4:	6022      	streq	r2, [r4, #0]
 80099b6:	6004      	str	r4, [r0, #0]
 80099b8:	e7ec      	b.n	8009994 <_free_r+0x24>
 80099ba:	4613      	mov	r3, r2
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	b10a      	cbz	r2, 80099c4 <_free_r+0x54>
 80099c0:	42a2      	cmp	r2, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x4a>
 80099c4:	6819      	ldr	r1, [r3, #0]
 80099c6:	1858      	adds	r0, r3, r1
 80099c8:	42a0      	cmp	r0, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x74>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	4401      	add	r1, r0
 80099d0:	1858      	adds	r0, r3, r1
 80099d2:	4282      	cmp	r2, r0
 80099d4:	6019      	str	r1, [r3, #0]
 80099d6:	d1dd      	bne.n	8009994 <_free_r+0x24>
 80099d8:	6810      	ldr	r0, [r2, #0]
 80099da:	6852      	ldr	r2, [r2, #4]
 80099dc:	605a      	str	r2, [r3, #4]
 80099de:	4401      	add	r1, r0
 80099e0:	6019      	str	r1, [r3, #0]
 80099e2:	e7d7      	b.n	8009994 <_free_r+0x24>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x7c>
 80099e6:	230c      	movs	r3, #12
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	e7d3      	b.n	8009994 <_free_r+0x24>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	1821      	adds	r1, r4, r0
 80099f0:	428a      	cmp	r2, r1
 80099f2:	bf04      	itt	eq
 80099f4:	6811      	ldreq	r1, [r2, #0]
 80099f6:	6852      	ldreq	r2, [r2, #4]
 80099f8:	6062      	str	r2, [r4, #4]
 80099fa:	bf04      	itt	eq
 80099fc:	1809      	addeq	r1, r1, r0
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	605c      	str	r4, [r3, #4]
 8009a02:	e7c7      	b.n	8009994 <_free_r+0x24>
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	200001fc 	.word	0x200001fc

08009a0c <_malloc_r>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	1ccd      	adds	r5, r1, #3
 8009a10:	f025 0503 	bic.w	r5, r5, #3
 8009a14:	3508      	adds	r5, #8
 8009a16:	2d0c      	cmp	r5, #12
 8009a18:	bf38      	it	cc
 8009a1a:	250c      	movcc	r5, #12
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	4606      	mov	r6, r0
 8009a20:	db01      	blt.n	8009a26 <_malloc_r+0x1a>
 8009a22:	42a9      	cmp	r1, r5
 8009a24:	d903      	bls.n	8009a2e <_malloc_r+0x22>
 8009a26:	230c      	movs	r3, #12
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	f000 f9e1 	bl	8009df4 <__malloc_lock>
 8009a32:	4a21      	ldr	r2, [pc, #132]	; (8009ab8 <_malloc_r+0xac>)
 8009a34:	6814      	ldr	r4, [r2, #0]
 8009a36:	4621      	mov	r1, r4
 8009a38:	b991      	cbnz	r1, 8009a60 <_malloc_r+0x54>
 8009a3a:	4c20      	ldr	r4, [pc, #128]	; (8009abc <_malloc_r+0xb0>)
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	b91b      	cbnz	r3, 8009a48 <_malloc_r+0x3c>
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 f98f 	bl	8009d64 <_sbrk_r>
 8009a46:	6020      	str	r0, [r4, #0]
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f000 f98a 	bl	8009d64 <_sbrk_r>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d124      	bne.n	8009a9e <_malloc_r+0x92>
 8009a54:	230c      	movs	r3, #12
 8009a56:	6033      	str	r3, [r6, #0]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f9cc 	bl	8009df6 <__malloc_unlock>
 8009a5e:	e7e4      	b.n	8009a2a <_malloc_r+0x1e>
 8009a60:	680b      	ldr	r3, [r1, #0]
 8009a62:	1b5b      	subs	r3, r3, r5
 8009a64:	d418      	bmi.n	8009a98 <_malloc_r+0x8c>
 8009a66:	2b0b      	cmp	r3, #11
 8009a68:	d90f      	bls.n	8009a8a <_malloc_r+0x7e>
 8009a6a:	600b      	str	r3, [r1, #0]
 8009a6c:	50cd      	str	r5, [r1, r3]
 8009a6e:	18cc      	adds	r4, r1, r3
 8009a70:	4630      	mov	r0, r6
 8009a72:	f000 f9c0 	bl	8009df6 <__malloc_unlock>
 8009a76:	f104 000b 	add.w	r0, r4, #11
 8009a7a:	1d23      	adds	r3, r4, #4
 8009a7c:	f020 0007 	bic.w	r0, r0, #7
 8009a80:	1ac3      	subs	r3, r0, r3
 8009a82:	d0d3      	beq.n	8009a2c <_malloc_r+0x20>
 8009a84:	425a      	negs	r2, r3
 8009a86:	50e2      	str	r2, [r4, r3]
 8009a88:	e7d0      	b.n	8009a2c <_malloc_r+0x20>
 8009a8a:	428c      	cmp	r4, r1
 8009a8c:	684b      	ldr	r3, [r1, #4]
 8009a8e:	bf16      	itet	ne
 8009a90:	6063      	strne	r3, [r4, #4]
 8009a92:	6013      	streq	r3, [r2, #0]
 8009a94:	460c      	movne	r4, r1
 8009a96:	e7eb      	b.n	8009a70 <_malloc_r+0x64>
 8009a98:	460c      	mov	r4, r1
 8009a9a:	6849      	ldr	r1, [r1, #4]
 8009a9c:	e7cc      	b.n	8009a38 <_malloc_r+0x2c>
 8009a9e:	1cc4      	adds	r4, r0, #3
 8009aa0:	f024 0403 	bic.w	r4, r4, #3
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d005      	beq.n	8009ab4 <_malloc_r+0xa8>
 8009aa8:	1a21      	subs	r1, r4, r0
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f000 f95a 	bl	8009d64 <_sbrk_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d0cf      	beq.n	8009a54 <_malloc_r+0x48>
 8009ab4:	6025      	str	r5, [r4, #0]
 8009ab6:	e7db      	b.n	8009a70 <_malloc_r+0x64>
 8009ab8:	200001fc 	.word	0x200001fc
 8009abc:	20000200 	.word	0x20000200

08009ac0 <__ssputs_r>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	688e      	ldr	r6, [r1, #8]
 8009ac6:	429e      	cmp	r6, r3
 8009ac8:	4682      	mov	sl, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	4690      	mov	r8, r2
 8009ace:	4699      	mov	r9, r3
 8009ad0:	d837      	bhi.n	8009b42 <__ssputs_r+0x82>
 8009ad2:	898a      	ldrh	r2, [r1, #12]
 8009ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ad8:	d031      	beq.n	8009b3e <__ssputs_r+0x7e>
 8009ada:	6825      	ldr	r5, [r4, #0]
 8009adc:	6909      	ldr	r1, [r1, #16]
 8009ade:	1a6f      	subs	r7, r5, r1
 8009ae0:	6965      	ldr	r5, [r4, #20]
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ae8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009aec:	f109 0301 	add.w	r3, r9, #1
 8009af0:	443b      	add	r3, r7
 8009af2:	429d      	cmp	r5, r3
 8009af4:	bf38      	it	cc
 8009af6:	461d      	movcc	r5, r3
 8009af8:	0553      	lsls	r3, r2, #21
 8009afa:	d530      	bpl.n	8009b5e <__ssputs_r+0x9e>
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7ff ff85 	bl	8009a0c <_malloc_r>
 8009b02:	4606      	mov	r6, r0
 8009b04:	b950      	cbnz	r0, 8009b1c <__ssputs_r+0x5c>
 8009b06:	230c      	movs	r3, #12
 8009b08:	f8ca 3000 	str.w	r3, [sl]
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1c:	463a      	mov	r2, r7
 8009b1e:	6921      	ldr	r1, [r4, #16]
 8009b20:	f7ff fb0e 	bl	8009140 <memcpy>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	6126      	str	r6, [r4, #16]
 8009b32:	6165      	str	r5, [r4, #20]
 8009b34:	443e      	add	r6, r7
 8009b36:	1bed      	subs	r5, r5, r7
 8009b38:	6026      	str	r6, [r4, #0]
 8009b3a:	60a5      	str	r5, [r4, #8]
 8009b3c:	464e      	mov	r6, r9
 8009b3e:	454e      	cmp	r6, r9
 8009b40:	d900      	bls.n	8009b44 <__ssputs_r+0x84>
 8009b42:	464e      	mov	r6, r9
 8009b44:	4632      	mov	r2, r6
 8009b46:	4641      	mov	r1, r8
 8009b48:	6820      	ldr	r0, [r4, #0]
 8009b4a:	f000 f93a 	bl	8009dc2 <memmove>
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	1b9b      	subs	r3, r3, r6
 8009b52:	60a3      	str	r3, [r4, #8]
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	441e      	add	r6, r3
 8009b58:	6026      	str	r6, [r4, #0]
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e7dc      	b.n	8009b18 <__ssputs_r+0x58>
 8009b5e:	462a      	mov	r2, r5
 8009b60:	f000 f94a 	bl	8009df8 <_realloc_r>
 8009b64:	4606      	mov	r6, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d1e2      	bne.n	8009b30 <__ssputs_r+0x70>
 8009b6a:	6921      	ldr	r1, [r4, #16]
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	f7ff feff 	bl	8009970 <_free_r>
 8009b72:	e7c8      	b.n	8009b06 <__ssputs_r+0x46>

08009b74 <_svfiprintf_r>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	461d      	mov	r5, r3
 8009b7a:	898b      	ldrh	r3, [r1, #12]
 8009b7c:	061f      	lsls	r7, r3, #24
 8009b7e:	b09d      	sub	sp, #116	; 0x74
 8009b80:	4680      	mov	r8, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	4616      	mov	r6, r2
 8009b86:	d50f      	bpl.n	8009ba8 <_svfiprintf_r+0x34>
 8009b88:	690b      	ldr	r3, [r1, #16]
 8009b8a:	b96b      	cbnz	r3, 8009ba8 <_svfiprintf_r+0x34>
 8009b8c:	2140      	movs	r1, #64	; 0x40
 8009b8e:	f7ff ff3d 	bl	8009a0c <_malloc_r>
 8009b92:	6020      	str	r0, [r4, #0]
 8009b94:	6120      	str	r0, [r4, #16]
 8009b96:	b928      	cbnz	r0, 8009ba4 <_svfiprintf_r+0x30>
 8009b98:	230c      	movs	r3, #12
 8009b9a:	f8c8 3000 	str.w	r3, [r8]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	e0c8      	b.n	8009d36 <_svfiprintf_r+0x1c2>
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	6163      	str	r3, [r4, #20]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9309      	str	r3, [sp, #36]	; 0x24
 8009bac:	2320      	movs	r3, #32
 8009bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bb2:	2330      	movs	r3, #48	; 0x30
 8009bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bb8:	9503      	str	r5, [sp, #12]
 8009bba:	f04f 0b01 	mov.w	fp, #1
 8009bbe:	4637      	mov	r7, r6
 8009bc0:	463d      	mov	r5, r7
 8009bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bc6:	b10b      	cbz	r3, 8009bcc <_svfiprintf_r+0x58>
 8009bc8:	2b25      	cmp	r3, #37	; 0x25
 8009bca:	d13e      	bne.n	8009c4a <_svfiprintf_r+0xd6>
 8009bcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009bd0:	d00b      	beq.n	8009bea <_svfiprintf_r+0x76>
 8009bd2:	4653      	mov	r3, sl
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4640      	mov	r0, r8
 8009bda:	f7ff ff71 	bl	8009ac0 <__ssputs_r>
 8009bde:	3001      	adds	r0, #1
 8009be0:	f000 80a4 	beq.w	8009d2c <_svfiprintf_r+0x1b8>
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	4453      	add	r3, sl
 8009be8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bea:	783b      	ldrb	r3, [r7, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 809d 	beq.w	8009d2c <_svfiprintf_r+0x1b8>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c04:	931a      	str	r3, [sp, #104]	; 0x68
 8009c06:	462f      	mov	r7, r5
 8009c08:	2205      	movs	r2, #5
 8009c0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c0e:	4850      	ldr	r0, [pc, #320]	; (8009d50 <_svfiprintf_r+0x1dc>)
 8009c10:	f7f6 fae6 	bl	80001e0 <memchr>
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	b9d0      	cbnz	r0, 8009c4e <_svfiprintf_r+0xda>
 8009c18:	06d9      	lsls	r1, r3, #27
 8009c1a:	bf44      	itt	mi
 8009c1c:	2220      	movmi	r2, #32
 8009c1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c22:	071a      	lsls	r2, r3, #28
 8009c24:	bf44      	itt	mi
 8009c26:	222b      	movmi	r2, #43	; 0x2b
 8009c28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c2c:	782a      	ldrb	r2, [r5, #0]
 8009c2e:	2a2a      	cmp	r2, #42	; 0x2a
 8009c30:	d015      	beq.n	8009c5e <_svfiprintf_r+0xea>
 8009c32:	9a07      	ldr	r2, [sp, #28]
 8009c34:	462f      	mov	r7, r5
 8009c36:	2000      	movs	r0, #0
 8009c38:	250a      	movs	r5, #10
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	; 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94d      	bls.n	8009ce2 <_svfiprintf_r+0x16e>
 8009c46:	b1b8      	cbz	r0, 8009c78 <_svfiprintf_r+0x104>
 8009c48:	e00f      	b.n	8009c6a <_svfiprintf_r+0xf6>
 8009c4a:	462f      	mov	r7, r5
 8009c4c:	e7b8      	b.n	8009bc0 <_svfiprintf_r+0x4c>
 8009c4e:	4a40      	ldr	r2, [pc, #256]	; (8009d50 <_svfiprintf_r+0x1dc>)
 8009c50:	1a80      	subs	r0, r0, r2
 8009c52:	fa0b f000 	lsl.w	r0, fp, r0
 8009c56:	4318      	orrs	r0, r3
 8009c58:	9004      	str	r0, [sp, #16]
 8009c5a:	463d      	mov	r5, r7
 8009c5c:	e7d3      	b.n	8009c06 <_svfiprintf_r+0x92>
 8009c5e:	9a03      	ldr	r2, [sp, #12]
 8009c60:	1d11      	adds	r1, r2, #4
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	9103      	str	r1, [sp, #12]
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	db01      	blt.n	8009c6e <_svfiprintf_r+0xfa>
 8009c6a:	9207      	str	r2, [sp, #28]
 8009c6c:	e004      	b.n	8009c78 <_svfiprintf_r+0x104>
 8009c6e:	4252      	negs	r2, r2
 8009c70:	f043 0302 	orr.w	r3, r3, #2
 8009c74:	9207      	str	r2, [sp, #28]
 8009c76:	9304      	str	r3, [sp, #16]
 8009c78:	783b      	ldrb	r3, [r7, #0]
 8009c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009c7c:	d10c      	bne.n	8009c98 <_svfiprintf_r+0x124>
 8009c7e:	787b      	ldrb	r3, [r7, #1]
 8009c80:	2b2a      	cmp	r3, #42	; 0x2a
 8009c82:	d133      	bne.n	8009cec <_svfiprintf_r+0x178>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	1d1a      	adds	r2, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	9203      	str	r2, [sp, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bfb8      	it	lt
 8009c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c94:	3702      	adds	r7, #2
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	4d2e      	ldr	r5, [pc, #184]	; (8009d54 <_svfiprintf_r+0x1e0>)
 8009c9a:	7839      	ldrb	r1, [r7, #0]
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7f6 fa9e 	bl	80001e0 <memchr>
 8009ca4:	b138      	cbz	r0, 8009cb6 <_svfiprintf_r+0x142>
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	1b40      	subs	r0, r0, r5
 8009caa:	fa03 f000 	lsl.w	r0, r3, r0
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	4303      	orrs	r3, r0
 8009cb2:	3701      	adds	r7, #1
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	7839      	ldrb	r1, [r7, #0]
 8009cb8:	4827      	ldr	r0, [pc, #156]	; (8009d58 <_svfiprintf_r+0x1e4>)
 8009cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	1c7e      	adds	r6, r7, #1
 8009cc2:	f7f6 fa8d 	bl	80001e0 <memchr>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d038      	beq.n	8009d3c <_svfiprintf_r+0x1c8>
 8009cca:	4b24      	ldr	r3, [pc, #144]	; (8009d5c <_svfiprintf_r+0x1e8>)
 8009ccc:	bb13      	cbnz	r3, 8009d14 <_svfiprintf_r+0x1a0>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	f023 0307 	bic.w	r3, r3, #7
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	9303      	str	r3, [sp, #12]
 8009cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cdc:	444b      	add	r3, r9
 8009cde:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce0:	e76d      	b.n	8009bbe <_svfiprintf_r+0x4a>
 8009ce2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	460f      	mov	r7, r1
 8009cea:	e7a6      	b.n	8009c3a <_svfiprintf_r+0xc6>
 8009cec:	2300      	movs	r3, #0
 8009cee:	3701      	adds	r7, #1
 8009cf0:	9305      	str	r3, [sp, #20]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	250a      	movs	r5, #10
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	3a30      	subs	r2, #48	; 0x30
 8009cfe:	2a09      	cmp	r2, #9
 8009d00:	d903      	bls.n	8009d0a <_svfiprintf_r+0x196>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c8      	beq.n	8009c98 <_svfiprintf_r+0x124>
 8009d06:	9105      	str	r1, [sp, #20]
 8009d08:	e7c6      	b.n	8009c98 <_svfiprintf_r+0x124>
 8009d0a:	fb05 2101 	mla	r1, r5, r1, r2
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4607      	mov	r7, r0
 8009d12:	e7f0      	b.n	8009cf6 <_svfiprintf_r+0x182>
 8009d14:	ab03      	add	r3, sp, #12
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4b11      	ldr	r3, [pc, #68]	; (8009d60 <_svfiprintf_r+0x1ec>)
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	4640      	mov	r0, r8
 8009d20:	f7fc fbf4 	bl	800650c <_printf_float>
 8009d24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d28:	4681      	mov	r9, r0
 8009d2a:	d1d6      	bne.n	8009cda <_svfiprintf_r+0x166>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	065b      	lsls	r3, r3, #25
 8009d30:	f53f af35 	bmi.w	8009b9e <_svfiprintf_r+0x2a>
 8009d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d36:	b01d      	add	sp, #116	; 0x74
 8009d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	ab03      	add	r3, sp, #12
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	4622      	mov	r2, r4
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <_svfiprintf_r+0x1ec>)
 8009d44:	a904      	add	r1, sp, #16
 8009d46:	4640      	mov	r0, r8
 8009d48:	f7fc fe96 	bl	8006a78 <_printf_i>
 8009d4c:	e7ea      	b.n	8009d24 <_svfiprintf_r+0x1b0>
 8009d4e:	bf00      	nop
 8009d50:	0800a16c 	.word	0x0800a16c
 8009d54:	0800a172 	.word	0x0800a172
 8009d58:	0800a176 	.word	0x0800a176
 8009d5c:	0800650d 	.word	0x0800650d
 8009d60:	08009ac1 	.word	0x08009ac1

08009d64 <_sbrk_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4c06      	ldr	r4, [pc, #24]	; (8009d80 <_sbrk_r+0x1c>)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	f7f8 f826 	bl	8001dc0 <_sbrk>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_sbrk_r+0x1a>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_sbrk_r+0x1a>
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	200023a4 	.word	0x200023a4

08009d84 <strncmp>:
 8009d84:	b510      	push	{r4, lr}
 8009d86:	b16a      	cbz	r2, 8009da4 <strncmp+0x20>
 8009d88:	3901      	subs	r1, #1
 8009d8a:	1884      	adds	r4, r0, r2
 8009d8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009d90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d103      	bne.n	8009da0 <strncmp+0x1c>
 8009d98:	42a0      	cmp	r0, r4
 8009d9a:	d001      	beq.n	8009da0 <strncmp+0x1c>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1f5      	bne.n	8009d8c <strncmp+0x8>
 8009da0:	1a98      	subs	r0, r3, r2
 8009da2:	bd10      	pop	{r4, pc}
 8009da4:	4610      	mov	r0, r2
 8009da6:	e7fc      	b.n	8009da2 <strncmp+0x1e>

08009da8 <__ascii_wctomb>:
 8009da8:	b149      	cbz	r1, 8009dbe <__ascii_wctomb+0x16>
 8009daa:	2aff      	cmp	r2, #255	; 0xff
 8009dac:	bf85      	ittet	hi
 8009dae:	238a      	movhi	r3, #138	; 0x8a
 8009db0:	6003      	strhi	r3, [r0, #0]
 8009db2:	700a      	strbls	r2, [r1, #0]
 8009db4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009db8:	bf98      	it	ls
 8009dba:	2001      	movls	r0, #1
 8009dbc:	4770      	bx	lr
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4770      	bx	lr

08009dc2 <memmove>:
 8009dc2:	4288      	cmp	r0, r1
 8009dc4:	b510      	push	{r4, lr}
 8009dc6:	eb01 0302 	add.w	r3, r1, r2
 8009dca:	d807      	bhi.n	8009ddc <memmove+0x1a>
 8009dcc:	1e42      	subs	r2, r0, #1
 8009dce:	4299      	cmp	r1, r3
 8009dd0:	d00a      	beq.n	8009de8 <memmove+0x26>
 8009dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009dda:	e7f8      	b.n	8009dce <memmove+0xc>
 8009ddc:	4283      	cmp	r3, r0
 8009dde:	d9f5      	bls.n	8009dcc <memmove+0xa>
 8009de0:	1881      	adds	r1, r0, r2
 8009de2:	1ad2      	subs	r2, r2, r3
 8009de4:	42d3      	cmn	r3, r2
 8009de6:	d100      	bne.n	8009dea <memmove+0x28>
 8009de8:	bd10      	pop	{r4, pc}
 8009dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009df2:	e7f7      	b.n	8009de4 <memmove+0x22>

08009df4 <__malloc_lock>:
 8009df4:	4770      	bx	lr

08009df6 <__malloc_unlock>:
 8009df6:	4770      	bx	lr

08009df8 <_realloc_r>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	4614      	mov	r4, r2
 8009dfe:	460e      	mov	r6, r1
 8009e00:	b921      	cbnz	r1, 8009e0c <_realloc_r+0x14>
 8009e02:	4611      	mov	r1, r2
 8009e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e08:	f7ff be00 	b.w	8009a0c <_malloc_r>
 8009e0c:	b922      	cbnz	r2, 8009e18 <_realloc_r+0x20>
 8009e0e:	f7ff fdaf 	bl	8009970 <_free_r>
 8009e12:	4625      	mov	r5, r4
 8009e14:	4628      	mov	r0, r5
 8009e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e18:	f000 f814 	bl	8009e44 <_malloc_usable_size_r>
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d20f      	bcs.n	8009e40 <_realloc_r+0x48>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7ff fdf2 	bl	8009a0c <_malloc_r>
 8009e28:	4605      	mov	r5, r0
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d0f2      	beq.n	8009e14 <_realloc_r+0x1c>
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4622      	mov	r2, r4
 8009e32:	f7ff f985 	bl	8009140 <memcpy>
 8009e36:	4631      	mov	r1, r6
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f7ff fd99 	bl	8009970 <_free_r>
 8009e3e:	e7e9      	b.n	8009e14 <_realloc_r+0x1c>
 8009e40:	4635      	mov	r5, r6
 8009e42:	e7e7      	b.n	8009e14 <_realloc_r+0x1c>

08009e44 <_malloc_usable_size_r>:
 8009e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e48:	1f18      	subs	r0, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	bfbc      	itt	lt
 8009e4e:	580b      	ldrlt	r3, [r1, r0]
 8009e50:	18c0      	addlt	r0, r0, r3
 8009e52:	4770      	bx	lr

08009e54 <_init>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr

08009e60 <_fini>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr
