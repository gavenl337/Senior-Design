
SeniorDesignMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b4  080041b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041bc  080041bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  080041d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080041d0  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb80  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c10  00000000  00000000  0002ebbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027356  00000000  00000000  00032358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aae6  00000000  00000000  000596ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa670  00000000  00000000  00064194  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  0015e880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004154 	.word	0x08004154

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004154 	.word	0x08004154

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb7f 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f809 	bl	80004e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f964 	bl	80007a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8f4 	bl	80006c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f930 	bl	8000740 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e0:	f000 f87a 	bl	80005d8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x1c>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b0b8      	sub	sp, #224	; 0xe0
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004f0:	2244      	movs	r2, #68	; 0x44
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 fe25 	bl	8004144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2288      	movs	r2, #136	; 0x88
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f003 fe17 	bl	8004144 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	2310      	movs	r3, #16
 8000518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051c:	2301      	movs	r3, #1
 800051e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000528:	2360      	movs	r3, #96	; 0x60
 800052a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fe67 	bl	800220c <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000544:	f000 f990 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	230f      	movs	r3, #15
 800054a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fa33 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000578:	f000 f976 	bl	8000868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800057c:	f244 0302 	movw	r3, #16386	; 0x4002
 8000580:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000582:	2300      	movs	r3, #0
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800058a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000594:	2310      	movs	r3, #16
 8000596:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000598:	2307      	movs	r3, #7
 800059a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005a8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fc17 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005b8:	f000 f956 	bl	8000868 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c0:	f001 fdce 	bl	8002160 <HAL_PWREx_ControlVoltageScaling>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80005ca:	f000 f94d 	bl	8000868 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	37e0      	adds	r7, #224	; 0xe0
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xe0>)
 80005fc:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <MX_ADC1_Init+0xe4>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000600:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800061a:	2204      	movs	r2, #4
 800061c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000626:	2200      	movs	r2, #0
 8000628:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800062c:	2201      	movs	r2, #1
 800062e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065a:	4817      	ldr	r0, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xe0>)
 800065c:	f000 fcb8 	bl	8000fd0 <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000666:	f000 f8ff 	bl	8000868 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <MX_ADC1_Init+0xe0>)
 8000676:	f001 fa13 	bl	8001aa0 <HAL_ADCEx_MultiModeConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000680:	f000 f8f2 	bl	8000868 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_ADC1_Init+0xe8>)
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000688:	2306      	movs	r3, #6
 800068a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000690:	237f      	movs	r3, #127	; 0x7f
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000694:	2304      	movs	r3, #4
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0xe0>)
 80006a2:	f000 fde9 	bl	8001278 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006ac:	f000 f8dc 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	50040000 	.word	0x50040000
 80006c0:	04300002 	.word	0x04300002

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_SPI1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_SPI1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_SPI1_Init+0x74>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_SPI1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x74>)
 80006de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_SPI1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x74>)
 80006f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_SPI1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x74>)
 8000712:	2207      	movs	r2, #7
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x74>)
 800071e:	2208      	movs	r2, #8
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_SPI1_Init+0x74>)
 8000724:	f003 f80c 	bl	8003740 <HAL_SPI_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 f89b 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40013000 	.word	0x40013000

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	; (800079c <MX_USART2_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000764:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000768:	220c      	movs	r2, #12
 800076a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_USART2_UART_Init+0x58>)
 8000786:	f003 f87e 	bl	8003886 <HAL_UART_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000790:	f000 f86a 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000f0 	.word	0x200000f0
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a29      	ldr	r2, [pc, #164]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a23      	ldr	r2, [pc, #140]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_GPIO_Init+0xc0>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2106      	movs	r1, #6
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_GPIO_Init+0xc4>)
 8000804:	f001 fc86 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000808:	2301      	movs	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	4812      	ldr	r0, [pc, #72]	; (8000864 <MX_GPIO_Init+0xc4>)
 800081c:	f001 fad2 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin;
 8000820:	2306      	movs	r3, #6
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0xc4>)
 8000838:	f001 fac4 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip5_Pin Dip4_Pin Dip3_Pin Dip2_Pin
                           Dip1_Pin */
  GPIO_InitStruct.Pin = Dip5_Pin|Dip4_Pin|Dip3_Pin|Dip2_Pin
 800083c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000840:	60fb      	str	r3, [r7, #12]
                          |Dip1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f001 fab6 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6613      	str	r3, [r2, #96]	; 0x60
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x44>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x44>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x44>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_ADC_MspInit+0xa4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d13c      	bne.n	800095c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a20      	ldr	r2, [pc, #128]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 80008e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_ADC_MspInit+0xa8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin|Pot3_Pin;
 800092a:	2317      	movs	r3, #23
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800092e:	230b      	movs	r3, #11
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_ADC_MspInit+0xac>)
 800093e:	f001 fa41 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot1_Pin|Pot2_Pin;
 8000942:	23c0      	movs	r3, #192	; 0xc0
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000946:	230b      	movs	r3, #11
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f001 fa34 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	50040000 	.word	0x50040000
 8000968:	40021000 	.word	0x40021000
 800096c:	48000800 	.word	0x48000800

08000970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <HAL_SPI_MspInit+0xb4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d144      	bne.n	8000a1c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 8000998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_SPI_MspInit+0xb8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009da:	2320      	movs	r3, #32
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ea:	2305      	movs	r3, #5
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f001 f9e4 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009fc:	2320      	movs	r3, #32
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_SPI_MspInit+0xbc>)
 8000a18:	f001 f9d4 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40013000 	.word	0x40013000
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_UART_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d128      	bne.n	8000aa4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_UART_MspInit+0x80>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8000a82:	230c      	movs	r3, #12
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 f990 	bl	8001dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f8b6 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <SystemInit+0x64>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <SystemInit+0x64>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemInit+0x68>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <SystemInit+0x68>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <SystemInit+0x68>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <SystemInit+0x68>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <SystemInit+0x68>)
 8000b3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <SystemInit+0x68>)
 8000b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <SystemInit+0x68>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <SystemInit+0x68>)
 8000b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <SystemInit+0x68>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x64>)
 8000b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b66:	609a      	str	r2, [r3, #8]
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	40021000 	.word	0x40021000

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff ffc6 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b86:	e003      	b.n	8000b90 <LoopCopyDataInit>

08000b88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b8e:	3104      	adds	r1, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b98:	d3f6      	bcc.n	8000b88 <CopyDataInit>
	ldr	r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b9c:	e002      	b.n	8000ba4 <LoopFillZerobss>

08000b9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba0:	f842 3b04 	str.w	r3, [r2], #4

08000ba4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ba6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba8:	d3f9      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 faa7 	bl	80040fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fc8b 	bl	80004c8 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bb8:	080041c4 	.word	0x080041c4
	ldr	r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bc0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bc8:	20000174 	.word	0x20000174

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f001 f8bf 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fe42 	bl	8000878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d023      	beq.n	8000c5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_InitTick+0x70>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 f8bd 	bl	8001daa <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10f      	bne.n	8000c56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d809      	bhi.n	8000c50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f001 f895 	bl	8001d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_InitTick+0x74>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e007      	b.n	8000c60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e004      	b.n	8000c60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e001      	b.n	8000c60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000170 	.word	0x20000170

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000170 	.word	0x20000170

08000cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3360      	adds	r3, #96	; 0x60
 8000d32:	461a      	mov	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LL_ADC_SetOffset+0x44>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	03fff000 	.word	0x03fff000

08000d68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3360      	adds	r3, #96	; 0x60
 8000d76:	461a      	mov	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3360      	adds	r3, #96	; 0x60
 8000da4:	461a      	mov	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dbe:	bf00      	nop
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3330      	adds	r3, #48	; 0x30
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	211f      	movs	r1, #31
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0e9b      	lsrs	r3, r3, #26
 8000e02:	f003 011f 	and.w	r1, r3, #31
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	431a      	orrs	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e16:	bf00      	nop
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b087      	sub	sp, #28
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3314      	adds	r3, #20
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	0e5b      	lsrs	r3, r3, #25
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	0d1b      	lsrs	r3, r3, #20
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2107      	movs	r1, #7
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	0d1b      	lsrs	r3, r3, #20
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e6c:	bf00      	nop
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0318 	and.w	r3, r3, #24
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e9c:	40d9      	lsrs	r1, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	0007ffff 	.word	0x0007ffff

08000ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6093      	str	r3, [r2, #8]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ef8:	d101      	bne.n	8000efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f48:	d101      	bne.n	8000f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <LL_ADC_IsEnabled+0x18>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <LL_ADC_IsEnabled+0x1a>
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d101      	bne.n	8000f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d101      	bne.n	8000fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e134      	b.n	8001254 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d109      	bne.n	800100c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fc61 	bl	80008c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff67 	bl	8000ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff4d 	bl	8000ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff82 	bl	8000f34 <LL_ADC_IsInternalRegulatorEnabled>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d113      	bne.n	800105e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff66 	bl	8000f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001040:	4b86      	ldr	r3, [pc, #536]	; (800125c <HAL_ADC_Init+0x28c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	099b      	lsrs	r3, r3, #6
 8001046:	4a86      	ldr	r2, [pc, #536]	; (8001260 <HAL_ADC_Init+0x290>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	099b      	lsrs	r3, r3, #6
 800104e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001050:	e002      	b.n	8001058 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3b01      	subs	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff66 	bl	8000f34 <LL_ADC_IsInternalRegulatorEnabled>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10d      	bne.n	800108a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001072:	f043 0210 	orr.w	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff77 	bl	8000f82 <LL_ADC_REG_IsConversionOngoing>
 8001094:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 80cf 	bne.w	8001242 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 80cb 	bne.w	8001242 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010b4:	f043 0202 	orr.w	r2, r3, #2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff4b 	bl	8000f5c <LL_ADC_IsEnabled>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d115      	bne.n	80010f8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010cc:	4865      	ldr	r0, [pc, #404]	; (8001264 <HAL_ADC_Init+0x294>)
 80010ce:	f7ff ff45 	bl	8000f5c <LL_ADC_IsEnabled>
 80010d2:	4604      	mov	r4, r0
 80010d4:	4864      	ldr	r0, [pc, #400]	; (8001268 <HAL_ADC_Init+0x298>)
 80010d6:	f7ff ff41 	bl	8000f5c <LL_ADC_IsEnabled>
 80010da:	4603      	mov	r3, r0
 80010dc:	431c      	orrs	r4, r3
 80010de:	4863      	ldr	r0, [pc, #396]	; (800126c <HAL_ADC_Init+0x29c>)
 80010e0:	f7ff ff3c 	bl	8000f5c <LL_ADC_IsEnabled>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4323      	orrs	r3, r4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4619      	mov	r1, r3
 80010f2:	485f      	ldr	r0, [pc, #380]	; (8001270 <HAL_ADC_Init+0x2a0>)
 80010f4:	f7ff fde0 	bl	8000cb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e5b      	ldrb	r3, [r3, #25]
 80010fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001102:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001108:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800110e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001116:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d106      	bne.n	8001134 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	3b01      	subs	r3, #1
 800112c:	045b      	lsls	r3, r3, #17
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	2b00      	cmp	r3, #0
 800113a:	d009      	beq.n	8001150 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <HAL_ADC_Init+0x2a4>)
 8001158:	4013      	ands	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	430b      	orrs	r3, r1
 8001162:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff0a 	bl	8000f82 <LL_ADC_REG_IsConversionOngoing>
 800116e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff17 	bl	8000fa8 <LL_ADC_INJ_IsConversionOngoing>
 800117a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13d      	bne.n	80011fe <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d13a      	bne.n	80011fe <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800118c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001194:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011a4:	f023 0302 	bic.w	r3, r3, #2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	69b9      	ldr	r1, [r7, #24]
 80011ae:	430b      	orrs	r3, r1
 80011b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d118      	bne.n	80011ee <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011c6:	f023 0304 	bic.w	r3, r3, #4
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011d2:	4311      	orrs	r1, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011d8:	4311      	orrs	r1, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011de:	430a      	orrs	r2, r1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	e007      	b.n	80011fe <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10c      	bne.n	8001220 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f023 010f 	bic.w	r1, r3, #15
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
 800121e:	e007      	b.n	8001230 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020f 	bic.w	r2, r2, #15
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	f023 0303 	bic.w	r3, r3, #3
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
 8001240:	e007      	b.n	8001252 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	f043 0210 	orr.w	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001252:	7ffb      	ldrb	r3, [r7, #31]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3724      	adds	r7, #36	; 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	053e2d63 	.word	0x053e2d63
 8001264:	50040000 	.word	0x50040000
 8001268:	50040100 	.word	0x50040100
 800126c:	50040200 	.word	0x50040200
 8001270:	50040300 	.word	0x50040300
 8001274:	fff0c007 	.word	0xfff0c007

08001278 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0b6      	sub	sp, #216	; 0xd8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_ADC_ConfigChannel+0x22>
 8001296:	2302      	movs	r3, #2
 8001298:	e3c6      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x7b0>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe6b 	bl	8000f82 <LL_ADC_REG_IsConversionOngoing>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 83a7 	bne.w	8001a02 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d824      	bhi.n	8001306 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	3b02      	subs	r3, #2
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d81b      	bhi.n	80012fe <HAL_ADC_ConfigChannel+0x86>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <HAL_ADC_ConfigChannel+0x54>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	080012e5 	.word	0x080012e5
 80012d4:	080012ed 	.word	0x080012ed
 80012d8:	080012f5 	.word	0x080012f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	220c      	movs	r2, #12
 80012e0:	605a      	str	r2, [r3, #4]
          break;
 80012e2:	e011      	b.n	8001308 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2212      	movs	r2, #18
 80012e8:	605a      	str	r2, [r3, #4]
          break;
 80012ea:	e00d      	b.n	8001308 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2218      	movs	r2, #24
 80012f0:	605a      	str	r2, [r3, #4]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fa:	605a      	str	r2, [r3, #4]
          break;
 80012fc:	e004      	b.n	8001308 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2206      	movs	r2, #6
 8001302:	605a      	str	r2, [r3, #4]
          break;
 8001304:	e000      	b.n	8001308 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001306:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	f7ff fd58 	bl	8000dca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe2f 	bl	8000f82 <LL_ADC_REG_IsConversionOngoing>
 8001324:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe3b 	bl	8000fa8 <LL_ADC_INJ_IsConversionOngoing>
 8001332:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 81a6 	bne.w	800168c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 81a1 	bne.w	800168c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	461a      	mov	r2, r3
 8001358:	f7ff fd63 	bl	8000e22 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d00a      	beq.n	8001394 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800138e:	f7ff fcc7 	bl	8000d20 <LL_ADC_SetOffset>
 8001392:	e17b      	b.n	800168c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fce4 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x148>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fcd9 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	0e9b      	lsrs	r3, r3, #26
 80013ba:	f003 021f 	and.w	r2, r3, #31
 80013be:	e01e      	b.n	80013fe <HAL_ADC_ConfigChannel+0x186>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fcce 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80013ee:	2320      	movs	r3, #32
 80013f0:	e004      	b.n	80013fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80013f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x19e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0e9b      	lsrs	r3, r3, #26
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	e018      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1d0>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800142a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800142e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800143a:	2320      	movs	r3, #32
 800143c:	e004      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800143e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001448:	429a      	cmp	r2, r3
 800144a:	d106      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc9d 	bl	8000d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fc81 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10a      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x20e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc76 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	0e9b      	lsrs	r3, r3, #26
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	e01e      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x24c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2101      	movs	r1, #1
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc6b 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80014a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80014ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80014b4:	2320      	movs	r3, #32
 80014b6:	e004      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80014b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x264>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0e9b      	lsrs	r3, r3, #26
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	e018      	b.n	800150e <HAL_ADC_ConfigChannel+0x296>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80014f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80014f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001500:	2320      	movs	r3, #32
 8001502:	e004      	b.n	800150e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800150e:	429a      	cmp	r2, r3
 8001510:	d106      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fc3a 	bl	8000d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2102      	movs	r1, #2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc1e 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x2d4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2102      	movs	r1, #2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc13 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	0e9b      	lsrs	r3, r3, #26
 8001546:	f003 021f 	and.w	r2, r3, #31
 800154a:	e01e      	b.n	800158a <HAL_ADC_ConfigChannel+0x312>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2102      	movs	r1, #2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fc08 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800156a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800156e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800157a:	2320      	movs	r3, #32
 800157c:	e004      	b.n	8001588 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800157e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x32a>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0e9b      	lsrs	r3, r3, #26
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	e016      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x358>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80015b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80015ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e004      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80015c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d106      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	2102      	movs	r1, #2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fbd9 	bl	8000d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2103      	movs	r1, #3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fbbd 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <HAL_ADC_ConfigChannel+0x396>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2103      	movs	r1, #3
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fbb2 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	0e9b      	lsrs	r3, r3, #26
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	e017      	b.n	800163e <HAL_ADC_ConfigChannel+0x3c6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2103      	movs	r1, #3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fba7 	bl	8000d68 <LL_ADC_GetOffsetChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001628:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800162a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001630:	2320      	movs	r3, #32
 8001632:	e003      	b.n	800163c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x3de>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0e9b      	lsrs	r3, r3, #26
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	e011      	b.n	800167a <HAL_ADC_ConfigChannel+0x402>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001666:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e003      	b.n	800167a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800167a:	429a      	cmp	r2, r3
 800167c:	d106      	bne.n	800168c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	2103      	movs	r1, #3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb84 	bl	8000d94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc63 	bl	8000f5c <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 813f 	bne.w	800191c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f7ff fbe4 	bl	8000e78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a8e      	ldr	r2, [pc, #568]	; (80018f0 <HAL_ADC_ConfigChannel+0x678>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 8130 	bne.w	800191c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10b      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x46c>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0e9b      	lsrs	r3, r3, #26
 80016d2:	3301      	adds	r3, #1
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2b09      	cmp	r3, #9
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	e019      	b.n	8001718 <HAL_ADC_ConfigChannel+0x4a0>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80016f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80016f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80016fc:	2320      	movs	r3, #32
 80016fe:	e003      	b.n	8001708 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2b09      	cmp	r3, #9
 8001710:	bf94      	ite	ls
 8001712:	2301      	movls	r3, #1
 8001714:	2300      	movhi	r3, #0
 8001716:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001718:	2b00      	cmp	r3, #0
 800171a:	d079      	beq.n	8001810 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001724:	2b00      	cmp	r3, #0
 8001726:	d107      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x4c0>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0e9b      	lsrs	r3, r3, #26
 800172e:	3301      	adds	r3, #1
 8001730:	069b      	lsls	r3, r3, #26
 8001732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001736:	e015      	b.n	8001764 <HAL_ADC_ConfigChannel+0x4ec>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001748:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800174a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001750:	2320      	movs	r3, #32
 8001752:	e003      	b.n	800175c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	069b      	lsls	r3, r3, #26
 8001760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x50c>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	3301      	adds	r3, #1
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	e017      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x53c>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800179c:	2320      	movs	r3, #32
 800179e:	e003      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80017a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	ea42 0103 	orr.w	r1, r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10a      	bne.n	80017da <HAL_ADC_ConfigChannel+0x562>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e9b      	lsrs	r3, r3, #26
 80017ca:	3301      	adds	r3, #1
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	051b      	lsls	r3, r3, #20
 80017d8:	e018      	b.n	800180c <HAL_ADC_ConfigChannel+0x594>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80017e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80017ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80017f2:	2320      	movs	r3, #32
 80017f4:	e003      	b.n	80017fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80017f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800180c:	430b      	orrs	r3, r1
 800180e:	e080      	b.n	8001912 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001818:	2b00      	cmp	r3, #0
 800181a:	d107      	bne.n	800182c <HAL_ADC_ConfigChannel+0x5b4>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0e9b      	lsrs	r3, r3, #26
 8001822:	3301      	adds	r3, #1
 8001824:	069b      	lsls	r3, r3, #26
 8001826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800182a:	e015      	b.n	8001858 <HAL_ADC_ConfigChannel+0x5e0>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001844:	2320      	movs	r3, #32
 8001846:	e003      	b.n	8001850 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3301      	adds	r3, #1
 8001852:	069b      	lsls	r3, r3, #26
 8001854:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x600>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	3301      	adds	r3, #1
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	e017      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x630>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	61fb      	str	r3, [r7, #28]
  return result;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001890:	2320      	movs	r3, #32
 8001892:	e003      	b.n	800189c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	ea42 0103 	orr.w	r1, r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x65c>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0e9b      	lsrs	r3, r3, #26
 80018be:	3301      	adds	r3, #1
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	3b1e      	subs	r3, #30
 80018cc:	051b      	lsls	r3, r3, #20
 80018ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d2:	e01d      	b.n	8001910 <HAL_ADC_ConfigChannel+0x698>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	613b      	str	r3, [r7, #16]
  return result;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80018ec:	2320      	movs	r3, #32
 80018ee:	e005      	b.n	80018fc <HAL_ADC_ConfigChannel+0x684>
 80018f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	f003 021f 	and.w	r2, r3, #31
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	3b1e      	subs	r3, #30
 800190a:	051b      	lsls	r3, r3, #20
 800190c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001910:	430b      	orrs	r3, r1
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	6892      	ldr	r2, [r2, #8]
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff fa83 	bl	8000e22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_ADC_ConfigChannel+0x7b8>)
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d079      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001928:	4842      	ldr	r0, [pc, #264]	; (8001a34 <HAL_ADC_ConfigChannel+0x7bc>)
 800192a:	f7ff f9eb 	bl	8000d04 <LL_ADC_GetCommonPathInternalCh>
 800192e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a40      	ldr	r2, [pc, #256]	; (8001a38 <HAL_ADC_ConfigChannel+0x7c0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d12b      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800193c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d125      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <HAL_ADC_ConfigChannel+0x7c4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_ADC_ConfigChannel+0x6e4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <HAL_ADC_ConfigChannel+0x7c8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d15c      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800195c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001964:	4619      	mov	r1, r3
 8001966:	4833      	ldr	r0, [pc, #204]	; (8001a34 <HAL_ADC_ConfigChannel+0x7bc>)
 8001968:	f7ff f9b9 	bl	8000cde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_ADC_ConfigChannel+0x7cc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	4a35      	ldr	r2, [pc, #212]	; (8001a48 <HAL_ADC_ConfigChannel+0x7d0>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099a      	lsrs	r2, r3, #6
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001984:	e002      	b.n	800198c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3b01      	subs	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001992:	e040      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_ADC_ConfigChannel+0x7d4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d118      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x758>
 800199e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d112      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_ADC_ConfigChannel+0x7c4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_ADC_ConfigChannel+0x746>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_ADC_ConfigChannel+0x7c8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12d      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	4619      	mov	r1, r3
 80019c8:	481a      	ldr	r0, [pc, #104]	; (8001a34 <HAL_ADC_ConfigChannel+0x7bc>)
 80019ca:	f7ff f988 	bl	8000cde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019ce:	e024      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_ADC_ConfigChannel+0x7d8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d120      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_ADC_ConfigChannel+0x7c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d115      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f8:	4619      	mov	r1, r3
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <HAL_ADC_ConfigChannel+0x7bc>)
 80019fc:	f7ff f96f 	bl	8000cde <LL_ADC_SetCommonPathInternalCh>
 8001a00:	e00c      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f043 0220 	orr.w	r2, r3, #32
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a24:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	37d8      	adds	r7, #216	; 0xd8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	80080000 	.word	0x80080000
 8001a34:	50040300 	.word	0x50040300
 8001a38:	c7520000 	.word	0xc7520000
 8001a3c:	50040000 	.word	0x50040000
 8001a40:	50040200 	.word	0x50040200
 8001a44:	20000000 	.word	0x20000000
 8001a48:	053e2d63 	.word	0x053e2d63
 8001a4c:	cb840000 	.word	0xcb840000
 8001a50:	80000001 	.word	0x80000001

08001a54 <LL_ADC_IsEnabled>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <LL_ADC_IsEnabled+0x18>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_ADC_IsEnabled+0x1a>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_REG_IsConversionOngoing>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b09f      	sub	sp, #124	; 0x7c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e08f      	b.n	8001bde <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a47      	ldr	r2, [pc, #284]	; (8001be8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d102      	bne.n	8001ad6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001ad0:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	e001      	b.n	8001ada <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10b      	bne.n	8001af8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e072      	b.n	8001bde <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ffbd 	bl	8001a7a <LL_ADC_REG_IsConversionOngoing>
 8001b00:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ffb7 	bl	8001a7a <LL_ADC_REG_IsConversionOngoing>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d154      	bne.n	8001bbc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d151      	bne.n	8001bbc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001b1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d02c      	beq.n	8001b7e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b36:	035b      	lsls	r3, r3, #13
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b40:	4829      	ldr	r0, [pc, #164]	; (8001be8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001b42:	f7ff ff87 	bl	8001a54 <LL_ADC_IsEnabled>
 8001b46:	4604      	mov	r4, r0
 8001b48:	4828      	ldr	r0, [pc, #160]	; (8001bec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001b4a:	f7ff ff83 	bl	8001a54 <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	431c      	orrs	r4, r3
 8001b52:	4828      	ldr	r0, [pc, #160]	; (8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b54:	f7ff ff7e 	bl	8001a54 <LL_ADC_IsEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d137      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001b68:	f023 030f 	bic.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	6811      	ldr	r1, [r2, #0]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	6892      	ldr	r2, [r2, #8]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	431a      	orrs	r2, r3
 8001b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b7a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b7c:	e028      	b.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b8a:	4817      	ldr	r0, [pc, #92]	; (8001be8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001b8c:	f7ff ff62 	bl	8001a54 <LL_ADC_IsEnabled>
 8001b90:	4604      	mov	r4, r0
 8001b92:	4816      	ldr	r0, [pc, #88]	; (8001bec <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001b94:	f7ff ff5e 	bl	8001a54 <LL_ADC_IsEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	431c      	orrs	r4, r3
 8001b9c:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001b9e:	f7ff ff59 	bl	8001a54 <LL_ADC_IsEnabled>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4323      	orrs	r3, r4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d112      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bb2:	f023 030f 	bic.w	r3, r3, #15
 8001bb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001bb8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bba:	e009      	b.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001bce:	e000      	b.n	8001bd2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bda:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	377c      	adds	r7, #124	; 0x7c
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	50040000 	.word	0x50040000
 8001bec:	50040100 	.word	0x50040100
 8001bf0:	50040300 	.word	0x50040300
 8001bf4:	50040200 	.word	0x50040200

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff47 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff5c 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffb0 	bl	8001d18 <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e17f      	b.n	80020d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8171 	beq.w	80020ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d00b      	beq.n	8001e0c <HAL_GPIO_Init+0x48>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d007      	beq.n	8001e0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	2b11      	cmp	r3, #17
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b12      	cmp	r3, #18
 8001e0a:	d130      	bne.n	8001e6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e42:	2201      	movs	r2, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 0201 	and.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d118      	bne.n	8001eac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	f003 0201 	and.w	r2, r3, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x128>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	6939      	ldr	r1, [r7, #16]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80ac 	beq.w	80020ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b5e      	ldr	r3, [pc, #376]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a5d      	ldr	r2, [pc, #372]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <HAL_GPIO_Init+0x32c>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f8e:	4a59      	ldr	r2, [pc, #356]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb8:	d025      	beq.n	8002006 <HAL_GPIO_Init+0x242>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4e      	ldr	r2, [pc, #312]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01f      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4d      	ldr	r2, [pc, #308]	; (80020fc <HAL_GPIO_Init+0x338>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x23a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_GPIO_Init+0x33c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x236>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_GPIO_Init+0x340>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x232>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <HAL_GPIO_Init+0x344>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x22e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a49      	ldr	r2, [pc, #292]	; (800210c <HAL_GPIO_Init+0x348>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x22a>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8002006:	2300      	movs	r3, #0
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002018:	4936      	ldr	r1, [pc, #216]	; (80020f4 <HAL_GPIO_Init+0x330>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800204a:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_GPIO_Init+0x34c>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a26      	ldr	r2, [pc, #152]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_GPIO_Init+0x34c>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_GPIO_Init+0x34c>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_GPIO_Init+0x34c>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_GPIO_Init+0x34c>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f47f ae78 	bne.w	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	48000c00 	.word	0x48000c00
 8002104:	48001000 	.word	0x48001000
 8002108:	48001400 	.word	0x48001400
 800210c:	48001800 	.word	0x48001800
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002130:	e002      	b.n	8002138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <HAL_PWREx_GetVoltageRange+0x18>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216e:	d130      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217c:	d038      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2232      	movs	r2, #50	; 0x32
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	e002      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d102      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f2      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021cc:	d110      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e00f      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d007      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000
 8002204:	20000000 	.word	0x20000000
 8002208:	431bde83 	.word	0x431bde83

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e3d4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4ba1      	ldr	r3, [pc, #644]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b9e      	ldr	r3, [pc, #632]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80e4 	beq.w	8002408 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_RCC_OscConfig+0x4a>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f040 808b 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 8087 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	4b93      	ldr	r3, [pc, #588]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e3ac      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4b8c      	ldr	r3, [pc, #560]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_RCC_OscConfig+0x7c>
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002286:	e005      	b.n	8002294 <HAL_RCC_OscConfig+0x88>
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002294:	4293      	cmp	r3, r2
 8002296:	d223      	bcs.n	80022e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd3f 	bl	8002d20 <RCC_SetFlashLatencyFromMSIRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e38d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b7d      	ldr	r3, [pc, #500]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7c      	ldr	r2, [pc, #496]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4977      	ldr	r1, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b76      	ldr	r3, [pc, #472]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	4972      	ldr	r1, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e025      	b.n	800232c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6f      	ldr	r2, [pc, #444]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	496a      	ldr	r1, [pc, #424]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fe:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4965      	ldr	r1, [pc, #404]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fcff 	bl	8002d20 <RCC_SetFlashLatencyFromMSIRange>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e34d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232c:	f000 fc36 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002330:	4601      	mov	r1, r0
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x29c>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa21 f303 	lsr.w	r3, r1, r3
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x2a0>)
 800234a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_RCC_OscConfig+0x2a4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fc55 	bl	8000c00 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d052      	beq.n	8002406 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e331      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d032      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002378:	f7fe fc92 	bl	8000ca0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002380:	f7fe fc8e 	bl	8000ca0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e31a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	493b      	ldr	r1, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e01a      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023de:	f7fe fc5f 	bl	8000ca0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e6:	f7fe fc5b 	bl	8000ca0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e2e7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x1da>
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002406:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d074      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x21a>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d064      	beq.n	80024fc <HAL_RCC_OscConfig+0x2f0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d160      	bne.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e2c4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x24a>
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e01d      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x26e>
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fc01 	bl	8000ca0 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a0:	e011      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	0800416c 	.word	0x0800416c
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fbf4 	bl	8000ca0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e280      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4baf      	ldr	r3, [pc, #700]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fbe4 	bl	8000ca0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fbe0 	bl	8000ca0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e26c      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	4ba5      	ldr	r3, [pc, #660]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d0>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x310>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d119      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b99      	ldr	r3, [pc, #612]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x328>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e249      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b93      	ldr	r3, [pc, #588]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	4990      	ldr	r1, [pc, #576]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e040      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8b      	ldr	r2, [pc, #556]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fb9f 	bl	8000ca0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fb9b 	bl	8000ca0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e227      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	497c      	ldr	r1, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a79      	ldr	r2, [pc, #484]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fb7b 	bl	8000ca0 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fb77 	bl	8000ca0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e203      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fb56 	bl	8000ca0 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fb52 	bl	8000ca0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1de      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3ec>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fb39 	bl	8000ca0 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fb35 	bl	8000ca0 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1c1      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002664:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a43      	ldr	r2, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d118      	bne.n	80026ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7fe fafc 	bl	8000ca0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe faf8 	bl	8000ca0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e184      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e2:	e024      	b.n	800272e <HAL_RCC_OscConfig+0x522>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d110      	bne.n	800270e <HAL_RCC_OscConfig+0x502>
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270c:	e00f      	b.n	800272e <HAL_RCC_OscConfig+0x522>
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fab3 	bl	8000ca0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe faaf 	bl	8000ca0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e139      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ed      	beq.n	800273e <HAL_RCC_OscConfig+0x532>
 8002762:	e01a      	b.n	800279a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fa9c 	bl	8000ca0 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276a:	e00f      	b.n	800278c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fa98 	bl	8000ca0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d906      	bls.n	800278c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e122      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b90      	ldr	r3, [pc, #576]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e8      	bne.n	800276c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8108 	beq.w	80029c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 80d0 	bne.w	8002960 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c0:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d130      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	3b01      	subs	r3, #1
 80027e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d127      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d11f      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	2a07      	cmp	r2, #7
 8002802:	bf14      	ite	ne
 8002804:	2201      	movne	r2, #1
 8002806:	2200      	moveq	r2, #0
 8002808:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	4293      	cmp	r3, r2
 800280c:	d113      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d109      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d06e      	beq.n	8002914 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d069      	beq.n	8002910 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002858:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5c      	ldr	r2, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7fe fa1c 	bl	8000ca0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fa18 	bl	8000ca0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0a4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x7c8>)
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800289a:	3a01      	subs	r2, #1
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0552      	lsls	r2, r2, #21
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c4:	0912      	lsrs	r2, r2, #4
 80028c6:	0452      	lsls	r2, r2, #17
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4941      	ldr	r1, [pc, #260]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe f9da 	bl	8000ca0 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe f9d6 	bl	8000ca0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e062      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	e05a      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e059      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d152      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe f9b2 	bl	8000ca0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f9ae 	bl	8000ca0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x734>
 800295e:	e032      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d02d      	beq.n	80029c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002990:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe f981 	bl	8000ca0 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe f97d 	bl	8000ca0 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e009      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x796>
 80029c0:	e001      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	f99d808c 	.word	0xf99d808c

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0c8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4961      	ldr	r1, [pc, #388]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d04c      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09e      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d115      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e092      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e086      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e07e      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 0203 	bic.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	493f      	ldr	r1, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a92:	f7fe f905 	bl	8000ca0 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9a:	f7fe f901 	bl	8000ca0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e066      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 020c 	and.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d1eb      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	492c      	ldr	r1, [pc, #176]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d210      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4924      	ldr	r1, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e036      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4910      	ldr	r1, [pc, #64]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b4e:	f000 f825 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b52:	4601      	mov	r1, r0
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	5cd3      	ldrb	r3, [r2, r3]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	fa21 f303 	lsr.w	r3, r1, r3
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f844 	bl	8000c00 <HAL_InitTick>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	0800416c 	.word	0x0800416c
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d133      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xa4>
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0xaa>
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c42:	617b      	str	r3, [r7, #20]
      break;
 8002c44:	e005      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c48:	617b      	str	r3, [r7, #20]
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	617b      	str	r3, [r7, #20]
      break;
 8002c50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	fb02 f203 	mul.w	r2, r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0e5b      	lsrs	r3, r3, #25
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c92:	69bb      	ldr	r3, [r7, #24]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3724      	adds	r7, #36	; 0x24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08004184 	.word	0x08004184
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	007a1200 	.word	0x007a1200

08002cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ccc:	f7ff fff0 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	0800417c 	.word	0x0800417c

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cf8:	f7ff ffda 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4601      	mov	r1, r0
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0adb      	lsrs	r3, r3, #11
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	0800417c 	.word	0x0800417c

08002d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d38:	f7ff fa04 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002d3c:	6178      	str	r0, [r7, #20]
 8002d3e:	e014      	b.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	4a24      	ldr	r2, [pc, #144]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d4c:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d58:	f7ff f9f4 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002d5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d10b      	bne.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d919      	bls.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d7c:	d902      	bls.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d7e:	2302      	movs	r3, #2
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	e013      	b.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d84:	2301      	movs	r3, #1
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e010      	b.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d902      	bls.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d90:	2303      	movs	r3, #3
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e00a      	b.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d102      	bne.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e004      	b.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b70      	cmp	r3, #112	; 0x70
 8002da6:	d101      	bne.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002da8:	2301      	movs	r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 0207 	bic.w	r2, r3, #7
 8002db4:	4909      	ldr	r1, [pc, #36]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d001      	beq.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40022000 	.word	0x40022000

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de8:	2300      	movs	r3, #0
 8002dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d03f      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e04:	d01c      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0a:	d802      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e10:	e01f      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e16:	d003      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e1c:	d01c      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e1e:	e018      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e20:	4b85      	ldr	r3, [pc, #532]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a84      	ldr	r2, [pc, #528]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e2c:	e015      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fab9 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3e:	e00c      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3320      	adds	r3, #32
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fba0 	bl	800358c <RCCEx_PLLSAI2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e50:	e003      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	74fb      	strb	r3, [r7, #19]
      break;
 8002e56:	e000      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e60:	4b75      	ldr	r3, [pc, #468]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6e:	4972      	ldr	r1, [pc, #456]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e76:	e001      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03f      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e90:	d01c      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e96:	d802      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002e9c:	e01f      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea2:	d003      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ea8:	d01c      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a61      	ldr	r2, [pc, #388]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa73 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fb5a 	bl	800358c <RCCEx_PLLSAI2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eec:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efa:	494f      	ldr	r1, [pc, #316]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a0 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3c:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f58:	f7fd fea2 	bl	8000ca0 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f5e:	e009      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fd fe9e 	bl	8000ca0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	74fb      	strb	r3, [r7, #19]
        break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ef      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d15c      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f86:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01f      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d019      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fe5d 	bl	8000ca0 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe8:	e00b      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fd fe59 	bl	8000ca0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d902      	bls.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	74fb      	strb	r3, [r7, #19]
            break;
 8003000:	e006      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ec      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	4904      	ldr	r1, [pc, #16]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7c7b      	ldrb	r3, [r7, #17]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	4a9d      	ldr	r2, [pc, #628]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4b98      	ldr	r3, [pc, #608]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	f023 0203 	bic.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	4994      	ldr	r1, [pc, #592]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003084:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f023 020c 	bic.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	498c      	ldr	r1, [pc, #560]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a6:	4b87      	ldr	r3, [pc, #540]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4983      	ldr	r1, [pc, #524]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c8:	4b7e      	ldr	r3, [pc, #504]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	497b      	ldr	r1, [pc, #492]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f8:	4972      	ldr	r1, [pc, #456]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800310c:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	496a      	ldr	r1, [pc, #424]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	4961      	ldr	r1, [pc, #388]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003150:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4959      	ldr	r1, [pc, #356]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	4950      	ldr	r1, [pc, #320]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	4948      	ldr	r1, [pc, #288]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	493f      	ldr	r1, [pc, #252]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d028      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e6:	4937      	ldr	r1, [pc, #220]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f6:	d106      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003202:	60d3      	str	r3, [r2, #12]
 8003204:	e011      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800320a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800320e:	d10c      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f8c8 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	491f      	ldr	r1, [pc, #124]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003260:	60d3      	str	r3, [r2, #12]
 8003262:	e011      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326c:	d10c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f899 	bl	80033ac <RCCEx_PLLSAI1_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02b      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	4908      	ldr	r1, [pc, #32]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d109      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e014      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f867 	bl	80033ac <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02f      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	4928      	ldr	r1, [pc, #160]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003316:	d10d      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f844 	bl	80033ac <RCCEx_PLLSAI1_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d014      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	74bb      	strb	r3, [r7, #18]
 8003332:	e011      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3320      	adds	r3, #32
 8003342:	2102      	movs	r1, #2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f921 	bl	800358c <RCCEx_PLLSAI2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003372:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800339e:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033c6:	4b70      	ldr	r3, [pc, #448]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
       ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033de:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
       ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d044      	beq.n	800347c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	e041      	b.n	800347c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d00c      	beq.n	800341a <RCCEx_PLLSAI1_Config+0x6e>
 8003400:	2b03      	cmp	r3, #3
 8003402:	d013      	beq.n	800342c <RCCEx_PLLSAI1_Config+0x80>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d120      	bne.n	800344a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003408:	4b5f      	ldr	r3, [pc, #380]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11d      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003418:	e01a      	b.n	8003450 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800341a:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342a:	e013      	b.n	8003454 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800342c:	4b56      	ldr	r3, [pc, #344]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10f      	bne.n	8003458 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003448:	e006      	b.n	8003458 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
      break;
 800344e:	e004      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003450:	bf00      	nop
 8003452:	e002      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003458:	bf00      	nop
    }

    if(status == HAL_OK)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10d      	bne.n	800347c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003460:	4b49      	ldr	r3, [pc, #292]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	3b01      	subs	r3, #1
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	430b      	orrs	r3, r1
 8003476:	4944      	ldr	r1, [pc, #272]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d17d      	bne.n	800357e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a40      	ldr	r2, [pc, #256]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003488:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800348c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348e:	f7fd fc07 	bl	8000ca0 <HAL_GetTick>
 8003492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003494:	e009      	b.n	80034aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003496:	f7fd fc03 	bl	8000ca0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d902      	bls.n	80034aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	73fb      	strb	r3, [r7, #15]
        break;
 80034a8:	e005      	b.n	80034b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ef      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d160      	bne.n	800357e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d111      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c2:	4b31      	ldr	r3, [pc, #196]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6892      	ldr	r2, [r2, #8]
 80034d2:	0211      	lsls	r1, r2, #8
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68d2      	ldr	r2, [r2, #12]
 80034d8:	0912      	lsrs	r2, r2, #4
 80034da:	0452      	lsls	r2, r2, #17
 80034dc:	430a      	orrs	r2, r1
 80034de:	492a      	ldr	r1, [pc, #168]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	610b      	str	r3, [r1, #16]
 80034e4:	e027      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d112      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ec:	4b26      	ldr	r3, [pc, #152]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6892      	ldr	r2, [r2, #8]
 80034fc:	0211      	lsls	r1, r2, #8
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6912      	ldr	r2, [r2, #16]
 8003502:	0852      	lsrs	r2, r2, #1
 8003504:	3a01      	subs	r2, #1
 8003506:	0552      	lsls	r2, r2, #21
 8003508:	430a      	orrs	r2, r1
 800350a:	491f      	ldr	r1, [pc, #124]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	610b      	str	r3, [r1, #16]
 8003510:	e011      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800351a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6952      	ldr	r2, [r2, #20]
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0652      	lsls	r2, r2, #25
 800352e:	430a      	orrs	r2, r1
 8003530:	4915      	ldr	r1, [pc, #84]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800353c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003540:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fd fbad 	bl	8000ca0 <HAL_GetTick>
 8003546:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003548:	e009      	b.n	800355e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354a:	f7fd fba9 	bl	8000ca0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d902      	bls.n	800355e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	73fb      	strb	r3, [r7, #15]
          break;
 800355c:	e005      	b.n	800356a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ef      	beq.n	800354a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <RCCEx_PLLSAI1_Config+0x1dc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000

0800358c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800359a:	4b68      	ldr	r3, [pc, #416]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10d      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
       ||
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035be:	4b5f      	ldr	r3, [pc, #380]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
       ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d044      	beq.n	800365c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e041      	b.n	800365c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d00c      	beq.n	80035fa <RCCEx_PLLSAI2_Config+0x6e>
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d013      	beq.n	800360c <RCCEx_PLLSAI2_Config+0x80>
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d120      	bne.n	800362a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035e8:	4b54      	ldr	r3, [pc, #336]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11d      	bne.n	8003630 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f8:	e01a      	b.n	8003630 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035fa:	4b50      	ldr	r3, [pc, #320]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360a:	e013      	b.n	8003634 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003618:	4b48      	ldr	r3, [pc, #288]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003628:	e006      	b.n	8003638 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
      break;
 800362e:	e004      	b.n	800363a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003630:	bf00      	nop
 8003632:	e002      	b.n	800363a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003634:	bf00      	nop
 8003636:	e000      	b.n	800363a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003638:	bf00      	nop
    }

    if(status == HAL_OK)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003640:	4b3e      	ldr	r3, [pc, #248]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	430b      	orrs	r3, r1
 8003656:	4939      	ldr	r1, [pc, #228]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d167      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a35      	ldr	r2, [pc, #212]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366e:	f7fd fb17 	bl	8000ca0 <HAL_GetTick>
 8003672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003674:	e009      	b.n	800368a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003676:	f7fd fb13 	bl	8000ca0 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d902      	bls.n	800368a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	73fb      	strb	r3, [r7, #15]
        break;
 8003688:	e005      	b.n	8003696 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ef      	bne.n	8003676 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d14a      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d111      	bne.n	80036c6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6892      	ldr	r2, [r2, #8]
 80036b2:	0211      	lsls	r1, r2, #8
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68d2      	ldr	r2, [r2, #12]
 80036b8:	0912      	lsrs	r2, r2, #4
 80036ba:	0452      	lsls	r2, r2, #17
 80036bc:	430a      	orrs	r2, r1
 80036be:	491f      	ldr	r1, [pc, #124]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	614b      	str	r3, [r1, #20]
 80036c4:	e011      	b.n	80036ea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6892      	ldr	r2, [r2, #8]
 80036d6:	0211      	lsls	r1, r2, #8
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6912      	ldr	r2, [r2, #16]
 80036dc:	0852      	lsrs	r2, r2, #1
 80036de:	3a01      	subs	r2, #1
 80036e0:	0652      	lsls	r2, r2, #25
 80036e2:	430a      	orrs	r2, r1
 80036e4:	4915      	ldr	r1, [pc, #84]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a13      	ldr	r2, [pc, #76]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fd fad3 	bl	8000ca0 <HAL_GetTick>
 80036fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036fc:	e009      	b.n	8003712 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036fe:	f7fd facf 	bl	8000ca0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d902      	bls.n	8003712 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	73fb      	strb	r3, [r7, #15]
          break;
 8003710:	e005      	b.n	800371e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ef      	beq.n	80036fe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <RCCEx_PLLSAI2_Config+0x1b0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e095      	b.n	800387e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003762:	d009      	beq.n	8003778 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	61da      	str	r2, [r3, #28]
 800376a:	e005      	b.n	8003778 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f8ec 	bl	8000970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b8:	d902      	bls.n	80037c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e002      	b.n	80037c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037ce:	d007      	beq.n	80037e0 <HAL_SPI_Init+0xa0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	ea42 0103 	orr.w	r1, r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	f003 0204 	and.w	r2, r3, #4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e040      	b.n	800391a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fd f8c1 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2224      	movs	r2, #36	; 0x24
 80038b2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f82d 	bl	8003924 <UART_SetConfig>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e022      	b.n	800391a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 faab 	bl	8003e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003900:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fb32 	bl	8003f7c <UART_CheckIdleState>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003924:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4313      	orrs	r3, r2
 8003948:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4bac      	ldr	r3, [pc, #688]	; (8003c04 <UART_SetConfig+0x2e0>)
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	69f9      	ldr	r1, [r7, #28]
 800395a:	430b      	orrs	r3, r1
 800395c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4aa2      	ldr	r2, [pc, #648]	; (8003c08 <UART_SetConfig+0x2e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	4313      	orrs	r3, r2
 800398c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	430a      	orrs	r2, r1
 80039a0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a99      	ldr	r2, [pc, #612]	; (8003c0c <UART_SetConfig+0x2e8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d121      	bne.n	80039f0 <UART_SetConfig+0xcc>
 80039ac:	4b98      	ldr	r3, [pc, #608]	; (8003c10 <UART_SetConfig+0x2ec>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d816      	bhi.n	80039e8 <UART_SetConfig+0xc4>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <UART_SetConfig+0x9c>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039dd 	.word	0x080039dd
 80039c8:	080039d7 	.word	0x080039d7
 80039cc:	080039e3 	.word	0x080039e3
 80039d0:	2301      	movs	r3, #1
 80039d2:	76fb      	strb	r3, [r7, #27]
 80039d4:	e0e8      	b.n	8003ba8 <UART_SetConfig+0x284>
 80039d6:	2302      	movs	r3, #2
 80039d8:	76fb      	strb	r3, [r7, #27]
 80039da:	e0e5      	b.n	8003ba8 <UART_SetConfig+0x284>
 80039dc:	2304      	movs	r3, #4
 80039de:	76fb      	strb	r3, [r7, #27]
 80039e0:	e0e2      	b.n	8003ba8 <UART_SetConfig+0x284>
 80039e2:	2308      	movs	r3, #8
 80039e4:	76fb      	strb	r3, [r7, #27]
 80039e6:	e0df      	b.n	8003ba8 <UART_SetConfig+0x284>
 80039e8:	2310      	movs	r3, #16
 80039ea:	76fb      	strb	r3, [r7, #27]
 80039ec:	bf00      	nop
 80039ee:	e0db      	b.n	8003ba8 <UART_SetConfig+0x284>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a87      	ldr	r2, [pc, #540]	; (8003c14 <UART_SetConfig+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d134      	bne.n	8003a64 <UART_SetConfig+0x140>
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <UART_SetConfig+0x2ec>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d829      	bhi.n	8003a5c <UART_SetConfig+0x138>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0xec>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a5d 	.word	0x08003a5d
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003a5d 	.word	0x08003a5d
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003a5d 	.word	0x08003a5d
 8003a30:	08003a4b 	.word	0x08003a4b
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a5d 	.word	0x08003a5d
 8003a40:	08003a57 	.word	0x08003a57
 8003a44:	2300      	movs	r3, #0
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e0ae      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	76fb      	strb	r3, [r7, #27]
 8003a4e:	e0ab      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a50:	2304      	movs	r3, #4
 8003a52:	76fb      	strb	r3, [r7, #27]
 8003a54:	e0a8      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a56:	2308      	movs	r3, #8
 8003a58:	76fb      	strb	r3, [r7, #27]
 8003a5a:	e0a5      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	bf00      	nop
 8003a62:	e0a1      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6b      	ldr	r2, [pc, #428]	; (8003c18 <UART_SetConfig+0x2f4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d120      	bne.n	8003ab0 <UART_SetConfig+0x18c>
 8003a6e:	4b68      	ldr	r3, [pc, #416]	; (8003c10 <UART_SetConfig+0x2ec>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d00f      	beq.n	8003a9c <UART_SetConfig+0x178>
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d802      	bhi.n	8003a86 <UART_SetConfig+0x162>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <UART_SetConfig+0x16c>
 8003a84:	e010      	b.n	8003aa8 <UART_SetConfig+0x184>
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d005      	beq.n	8003a96 <UART_SetConfig+0x172>
 8003a8a:	2b30      	cmp	r3, #48	; 0x30
 8003a8c:	d009      	beq.n	8003aa2 <UART_SetConfig+0x17e>
 8003a8e:	e00b      	b.n	8003aa8 <UART_SetConfig+0x184>
 8003a90:	2300      	movs	r3, #0
 8003a92:	76fb      	strb	r3, [r7, #27]
 8003a94:	e088      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a96:	2302      	movs	r3, #2
 8003a98:	76fb      	strb	r3, [r7, #27]
 8003a9a:	e085      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	76fb      	strb	r3, [r7, #27]
 8003aa0:	e082      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	76fb      	strb	r3, [r7, #27]
 8003aa6:	e07f      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	76fb      	strb	r3, [r7, #27]
 8003aac:	bf00      	nop
 8003aae:	e07b      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a59      	ldr	r2, [pc, #356]	; (8003c1c <UART_SetConfig+0x2f8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d120      	bne.n	8003afc <UART_SetConfig+0x1d8>
 8003aba:	4b55      	ldr	r3, [pc, #340]	; (8003c10 <UART_SetConfig+0x2ec>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d00f      	beq.n	8003ae8 <UART_SetConfig+0x1c4>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d802      	bhi.n	8003ad2 <UART_SetConfig+0x1ae>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <UART_SetConfig+0x1b8>
 8003ad0:	e010      	b.n	8003af4 <UART_SetConfig+0x1d0>
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d005      	beq.n	8003ae2 <UART_SetConfig+0x1be>
 8003ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad8:	d009      	beq.n	8003aee <UART_SetConfig+0x1ca>
 8003ada:	e00b      	b.n	8003af4 <UART_SetConfig+0x1d0>
 8003adc:	2300      	movs	r3, #0
 8003ade:	76fb      	strb	r3, [r7, #27]
 8003ae0:	e062      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	76fb      	strb	r3, [r7, #27]
 8003ae6:	e05f      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	76fb      	strb	r3, [r7, #27]
 8003aec:	e05c      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003aee:	2308      	movs	r3, #8
 8003af0:	76fb      	strb	r3, [r7, #27]
 8003af2:	e059      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003af4:	2310      	movs	r3, #16
 8003af6:	76fb      	strb	r3, [r7, #27]
 8003af8:	bf00      	nop
 8003afa:	e055      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a47      	ldr	r2, [pc, #284]	; (8003c20 <UART_SetConfig+0x2fc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d124      	bne.n	8003b50 <UART_SetConfig+0x22c>
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <UART_SetConfig+0x2ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d012      	beq.n	8003b3c <UART_SetConfig+0x218>
 8003b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1a:	d802      	bhi.n	8003b22 <UART_SetConfig+0x1fe>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <UART_SetConfig+0x20c>
 8003b20:	e012      	b.n	8003b48 <UART_SetConfig+0x224>
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b26:	d006      	beq.n	8003b36 <UART_SetConfig+0x212>
 8003b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2c:	d009      	beq.n	8003b42 <UART_SetConfig+0x21e>
 8003b2e:	e00b      	b.n	8003b48 <UART_SetConfig+0x224>
 8003b30:	2300      	movs	r3, #0
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e038      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b36:	2302      	movs	r3, #2
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e035      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	e032      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b42:	2308      	movs	r3, #8
 8003b44:	76fb      	strb	r3, [r7, #27]
 8003b46:	e02f      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	76fb      	strb	r3, [r7, #27]
 8003b4c:	bf00      	nop
 8003b4e:	e02b      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <UART_SetConfig+0x2e4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d124      	bne.n	8003ba4 <UART_SetConfig+0x280>
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <UART_SetConfig+0x2ec>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b68:	d012      	beq.n	8003b90 <UART_SetConfig+0x26c>
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6e:	d802      	bhi.n	8003b76 <UART_SetConfig+0x252>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <UART_SetConfig+0x260>
 8003b74:	e012      	b.n	8003b9c <UART_SetConfig+0x278>
 8003b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7a:	d006      	beq.n	8003b8a <UART_SetConfig+0x266>
 8003b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b80:	d009      	beq.n	8003b96 <UART_SetConfig+0x272>
 8003b82:	e00b      	b.n	8003b9c <UART_SetConfig+0x278>
 8003b84:	2300      	movs	r3, #0
 8003b86:	76fb      	strb	r3, [r7, #27]
 8003b88:	e00e      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	76fb      	strb	r3, [r7, #27]
 8003b8e:	e00b      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b90:	2304      	movs	r3, #4
 8003b92:	76fb      	strb	r3, [r7, #27]
 8003b94:	e008      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b96:	2308      	movs	r3, #8
 8003b98:	76fb      	strb	r3, [r7, #27]
 8003b9a:	e005      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	76fb      	strb	r3, [r7, #27]
 8003ba0:	bf00      	nop
 8003ba2:	e001      	b.n	8003ba8 <UART_SetConfig+0x284>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <UART_SetConfig+0x2e4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	f040 8087 	bne.w	8003cc2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bb4:	7efb      	ldrb	r3, [r7, #27]
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d836      	bhi.n	8003c28 <UART_SetConfig+0x304>
 8003bba:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <UART_SetConfig+0x29c>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003c29 	.word	0x08003c29
 8003bd0:	08003bf3 	.word	0x08003bf3
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003c29 	.word	0x08003c29
 8003bdc:	08003c29 	.word	0x08003c29
 8003be0:	08003bfb 	.word	0x08003bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7ff f870 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8003be8:	6178      	str	r0, [r7, #20]
        break;
 8003bea:	e022      	b.n	8003c32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <UART_SetConfig+0x300>)
 8003bee:	617b      	str	r3, [r7, #20]
        break;
 8003bf0:	e01f      	b.n	8003c32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf2:	f7fe ffd3 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003bf6:	6178      	str	r0, [r7, #20]
        break;
 8003bf8:	e01b      	b.n	8003c32 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfe:	617b      	str	r3, [r7, #20]
        break;
 8003c00:	e017      	b.n	8003c32 <UART_SetConfig+0x30e>
 8003c02:	bf00      	nop
 8003c04:	efff69f3 	.word	0xefff69f3
 8003c08:	40008000 	.word	0x40008000
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40004400 	.word	0x40004400
 8003c18:	40004800 	.word	0x40004800
 8003c1c:	40004c00 	.word	0x40004c00
 8003c20:	40005000 	.word	0x40005000
 8003c24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	76bb      	strb	r3, [r7, #26]
        break;
 8003c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80f1 	beq.w	8003e1c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d305      	bcc.n	8003c56 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d902      	bls.n	8003c5c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	76bb      	strb	r3, [r7, #26]
 8003c5a:	e0df      	b.n	8003e1c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f04f 0400 	mov.w	r4, #0
 8003c6c:	0214      	lsls	r4, r2, #8
 8003c6e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003c72:	020b      	lsls	r3, r1, #8
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6852      	ldr	r2, [r2, #4]
 8003c78:	0852      	lsrs	r2, r2, #1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	eb13 0b01 	adds.w	fp, r3, r1
 8003c84:	eb44 0c02 	adc.w	ip, r4, r2
 8003c88:	4658      	mov	r0, fp
 8003c8a:	4661      	mov	r1, ip
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	f7fc fa96 	bl	80001c8 <__aeabi_uldivmod>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca8:	d308      	bcc.n	8003cbc <UART_SetConfig+0x398>
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb0:	d204      	bcs.n	8003cbc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	e0af      	b.n	8003e1c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	76bb      	strb	r3, [r7, #26]
 8003cc0:	e0ac      	b.n	8003e1c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cca:	d15b      	bne.n	8003d84 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ccc:	7efb      	ldrb	r3, [r7, #27]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d827      	bhi.n	8003d22 <UART_SetConfig+0x3fe>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x3b4>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003d0d 	.word	0x08003d0d
 8003ce4:	08003d23 	.word	0x08003d23
 8003ce8:	08003d13 	.word	0x08003d13
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d23 	.word	0x08003d23
 8003cf4:	08003d23 	.word	0x08003d23
 8003cf8:	08003d1b 	.word	0x08003d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7fe ffe4 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8003d00:	6178      	str	r0, [r7, #20]
        break;
 8003d02:	e013      	b.n	8003d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7fe fff6 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8003d08:	6178      	str	r0, [r7, #20]
        break;
 8003d0a:	e00f      	b.n	8003d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d0c:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <UART_SetConfig+0x510>)
 8003d0e:	617b      	str	r3, [r7, #20]
        break;
 8003d10:	e00c      	b.n	8003d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d12:	f7fe ff43 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003d16:	6178      	str	r0, [r7, #20]
        break;
 8003d18:	e008      	b.n	8003d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1e:	617b      	str	r3, [r7, #20]
        break;
 8003d20:	e004      	b.n	8003d2c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	76bb      	strb	r3, [r7, #26]
        break;
 8003d2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d074      	beq.n	8003e1c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005a      	lsls	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	441a      	add	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d916      	bls.n	8003d7e <UART_SetConfig+0x45a>
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d212      	bcs.n	8003d7e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f023 030f 	bic.w	r3, r3, #15
 8003d60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	89fa      	ldrh	r2, [r7, #14]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e04e      	b.n	8003e1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	76bb      	strb	r3, [r7, #26]
 8003d82:	e04b      	b.n	8003e1c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d84:	7efb      	ldrb	r3, [r7, #27]
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d827      	bhi.n	8003dda <UART_SetConfig+0x4b6>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0x46c>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003ddb 	.word	0x08003ddb
 8003da0:	08003dcb 	.word	0x08003dcb
 8003da4:	08003ddb 	.word	0x08003ddb
 8003da8:	08003ddb 	.word	0x08003ddb
 8003dac:	08003ddb 	.word	0x08003ddb
 8003db0:	08003dd3 	.word	0x08003dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7fe ff88 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8003db8:	6178      	str	r0, [r7, #20]
        break;
 8003dba:	e013      	b.n	8003de4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dbc:	f7fe ff9a 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8003dc0:	6178      	str	r0, [r7, #20]
        break;
 8003dc2:	e00f      	b.n	8003de4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <UART_SetConfig+0x510>)
 8003dc6:	617b      	str	r3, [r7, #20]
        break;
 8003dc8:	e00c      	b.n	8003de4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe fee7 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003dce:	6178      	str	r0, [r7, #20]
        break;
 8003dd0:	e008      	b.n	8003de4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd6:	617b      	str	r3, [r7, #20]
        break;
 8003dd8:	e004      	b.n	8003de4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	76bb      	strb	r3, [r7, #26]
        break;
 8003de2:	bf00      	nop
    }

    if (pclk != 0U)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	085a      	lsrs	r2, r3, #1
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	441a      	add	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d908      	bls.n	8003e18 <UART_SetConfig+0x4f4>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0c:	d204      	bcs.n	8003e18 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e001      	b.n	8003e1c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e28:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003e34:	00f42400 	.word	0x00f42400

08003e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f36:	d10a      	bne.n	8003f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f8a:	f7fc fe89 	bl	8000ca0 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d10e      	bne.n	8003fbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f82a 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e020      	b.n	8003ffe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d10e      	bne.n	8003fe8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f814 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e00a      	b.n	8003ffe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	e05d      	b.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d059      	beq.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fc fe3e 	bl	8000ca0 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <UART_WaitOnFlagUntilTimeout+0x30>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d11b      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004044:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e042      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d02b      	beq.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d123      	bne.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e00f      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d092      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	4e0d      	ldr	r6, [pc, #52]	; (8004134 <__libc_init_array+0x38>)
 8004100:	4c0d      	ldr	r4, [pc, #52]	; (8004138 <__libc_init_array+0x3c>)
 8004102:	1ba4      	subs	r4, r4, r6
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	2500      	movs	r5, #0
 8004108:	42a5      	cmp	r5, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	4e0b      	ldr	r6, [pc, #44]	; (800413c <__libc_init_array+0x40>)
 800410e:	4c0c      	ldr	r4, [pc, #48]	; (8004140 <__libc_init_array+0x44>)
 8004110:	f000 f820 	bl	8004154 <_init>
 8004114:	1ba4      	subs	r4, r4, r6
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	2500      	movs	r5, #0
 800411a:	42a5      	cmp	r5, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004124:	4798      	blx	r3
 8004126:	3501      	adds	r5, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800412e:	4798      	blx	r3
 8004130:	3501      	adds	r5, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	080041bc 	.word	0x080041bc
 8004138:	080041bc 	.word	0x080041bc
 800413c:	080041bc 	.word	0x080041bc
 8004140:	080041c0 	.word	0x080041c0

08004144 <memset>:
 8004144:	4402      	add	r2, r0
 8004146:	4603      	mov	r3, r0
 8004148:	4293      	cmp	r3, r2
 800414a:	d100      	bne.n	800414e <memset+0xa>
 800414c:	4770      	bx	lr
 800414e:	f803 1b01 	strb.w	r1, [r3], #1
 8004152:	e7f9      	b.n	8004148 <memset+0x4>

08004154 <_init>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	bf00      	nop
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr

08004160 <_fini>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr
