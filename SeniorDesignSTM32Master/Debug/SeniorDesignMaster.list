
SeniorDesignMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec8  08006ec8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08006f40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006f40  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d63  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d6  00000000  00000000  00030e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000284bf  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc4f  00000000  00000000  0005d0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fefd2  00000000  00000000  00068d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a0  00000000  00000000  00167d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006db4 	.word	0x08006db4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006db4 	.word	0x08006db4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t adc[6], buffer[6], sensor1, sensor2, sensor3, pot1in, pot2in, pot3in;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i<6; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e00a      	b.n	8000ee0 <HAL_ADC_ConvCpltCallback+0x24>
		{
			adc[i] = buffer[i];
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed2:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i<6; i++)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	ddf1      	ble.n	8000eca <HAL_ADC_ConvCpltCallback+0xe>
		}
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000018c 	.word	0x2000018c
 8000ef8:	200001a4 	.word	0x200001a4

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char uart_buf[50] = {'\0'};	//buffer for output data
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 fb45 	bl	8006598 <memset>
	int uart_buf_len = {'\0'};
 8000f0e:	2300      	movs	r3, #0
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 ff1c 	bl	8001d4e <HAL_Init>

  /* USER CODE BEGIN Init */
	//byte address = 0x00;
	int val = 0;  // variable to store the value read
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
	int i = 128; //starting value of 540
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int target = 256; //target analog bit value
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	63bb      	str	r3, [r7, #56]	; 0x38
	int tNum = 1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f28:	f000 f858 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f000 fa02 	bl	8001334 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f30:	f000 f9e2 	bl	80012f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f34:	f000 f942 	bl	80011bc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000f38:	f000 f8ca 	bl	80010d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 f97c 	bl	8001238 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f40:	f000 f9aa 	bl	8001298 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //DMA stores ADC values in memory to be called back when needed.
  //buffer holds the values until conversions are complete,
  //at which point the adc[] array holds the referenced values.
  HAL_ADC_Start_DMA (&hadc1, buffer, 6);
 8000f44:	2206      	movs	r2, #6
 8000f46:	4923      	ldr	r1, [pc, #140]	; (8000fd4 <main+0xd8>)
 8000f48:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <main+0xdc>)
 8000f4a:	f001 fc59 	bl	8002800 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  for(int measurement = 0; measurement <= 10; measurement++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
 8000f52:	e034      	b.n	8000fbe <main+0xc2>
	  HAL_ADC_Start(&hadc1);								//Start ADC conversion
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <main+0xdc>)
 8000f56:	f001 fac9 	bl	80024ec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);		//wait for ADC conversion
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <main+0xdc>)
 8000f60:	f001 fb7e 	bl	8002660 <HAL_ADC_PollForConversion>
	  val = HAL_ADC_GetValue(&hadc1);
 8000f64:	481c      	ldr	r0, [pc, #112]	; (8000fd8 <main+0xdc>)
 8000f66:	f001 fcff 	bl	8002968 <HAL_ADC_GetValue>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  i = targetCheck(val, target, i);
 8000f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f74:	f000 faf4 	bl	8001560 <targetCheck>
 8000f78:	64f8      	str	r0, [r7, #76]	; 0x4c
	  //dataString = createCSV(val,val,val,tNum);
	  if (i > 128){
 8000f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f7c:	2b80      	cmp	r3, #128	; 0x80
 8000f7e:	dd01      	ble.n	8000f84 <main+0x88>
	    i = 128;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }
	  if (i < 0){
 8000f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da01      	bge.n	8000f8e <main+0x92>
	    i = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }

	  displayResults(measurement, i, val);
 8000f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f94:	f000 fa4c 	bl	8001430 <displayResults>
	  digitalPotWrite(i);
 8000f98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f9a:	f000 fc5f 	bl	800185c <digitalPotWrite>
	  HAL_Delay(1000);
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f000 ff49 	bl	8001e38 <HAL_Delay>
	//HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f002 ff76 	bl	8003e9c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb4:	f000 ff40 	bl	8001e38 <HAL_Delay>
	  for(int measurement = 0; measurement <= 10; measurement++){
 8000fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fba:	3301      	adds	r3, #1
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8000fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	ddc7      	ble.n	8000f54 <main+0x58>
	  //Using DMA to scan ADC values. Array adc[] holds the values
	  //from the 6 ADC inputs. sensor1=adc[0] sensor2=adc[1] etc.
  }
	tNum++;
 8000fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_Delay(3000);
 8000fca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fce:	f000 ff33 	bl	8001e38 <HAL_Delay>
	  for(int measurement = 0; measurement <= 10; measurement++){
 8000fd2:	e7bc      	b.n	8000f4e <main+0x52>
 8000fd4:	2000018c 	.word	0x2000018c
 8000fd8:	20000124 	.word	0x20000124

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0b8      	sub	sp, #224	; 0xe0
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fad4 	bl	8006598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2288      	movs	r2, #136	; 0x88
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fac6 	bl	8006598 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800100c:	2310      	movs	r3, #16
 800100e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800101e:	2360      	movs	r3, #96	; 0x60
 8001020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800102e:	4618      	mov	r0, r3
 8001030:	f002 ffb2 	bl	8003f98 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800103a:	f000 fc31 	bl	80018a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fb7e 	bl	8004764 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800106e:	f000 fc17 	bl	80018a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001072:	f244 0306 	movw	r3, #16390	; 0x4006
 8001076:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800107c:	2300      	movs	r3, #0
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001084:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001086:	2301      	movs	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800108a:	2301      	movs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800108e:	2310      	movs	r3, #16
 8001090:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001092:	2307      	movs	r3, #7
 8001094:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800109e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fd60 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80010b2:	f000 fbf5 	bl	80018a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ba:	f002 ff17 	bl	8003eec <HAL_PWREx_ControlVoltageScaling>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80010c4:	f000 fbec 	bl	80018a0 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	37e0      	adds	r7, #224	; 0xe0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <MX_ADC1_Init+0xe0>)
 80010f4:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <MX_ADC1_Init+0xe4>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_ADC1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001112:	2204      	movs	r2, #4
 8001114:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800111e:	2200      	movs	r2, #0
 8001120:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001124:	2201      	movs	r2, #1
 8001126:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <MX_ADC1_Init+0xe0>)
 8001154:	f001 f876 	bl	8002244 <HAL_ADC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800115e:	f000 fb9f 	bl	80018a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800116e:	f002 f91f 	bl	80033b0 <HAL_ADCEx_MultiModeConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001178:	f000 fb92 	bl	80018a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_ADC1_Init+0xe8>)
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001180:	2306      	movs	r3, #6
 8001182:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001188:	237f      	movs	r3, #127	; 0x7f
 800118a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800118c:	2304      	movs	r3, #4
 800118e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC1_Init+0xe0>)
 800119a:	f001 fc07 	bl	80029ac <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011a4:	f000 fb7c 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000124 	.word	0x20000124
 80011b4:	50040000 	.word	0x50040000
 80011b8:	04300002 	.word	0x04300002

080011bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_SPI1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_SPI1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_SPI1_Init+0x74>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_SPI1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_7BIT;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI1_Init+0x74>)
 80011d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80011da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_SPI1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI1_Init+0x74>)
 80011ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_SPI1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI1_Init+0x74>)
 800120a:	2207      	movs	r2, #7
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_SPI1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI1_Init+0x74>)
 8001216:	2208      	movs	r2, #8
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_SPI1_Init+0x74>)
 800121c:	f004 f956 	bl	80054cc <HAL_SPI_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fb3b 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000204 	.word	0x20000204
 8001234:	40013000 	.word	0x40013000

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <MX_USART2_UART_Init+0x5c>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800127c:	f004 fc94 	bl	8005ba8 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001286:	f000 fb0b 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000026c 	.word	0x2000026c
 8001294:	40004400 	.word	0x40004400

08001298 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_USART3_UART_Init+0x5c>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART3_UART_Init+0x58>)
 80012dc:	f004 fc64 	bl	8005ba8 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 fadb 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	40004800 	.word	0x40004800

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_DMA_Init+0x38>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <MX_DMA_Init+0x38>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6493      	str	r3, [r2, #72]	; 0x48
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_DMA_Init+0x38>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200b      	movs	r0, #11
 800131c:	f002 f9cf 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001320:	200b      	movs	r0, #11
 8001322:	f002 f9e8 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <MX_GPIO_Init+0xf0>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a35      	ldr	r2, [pc, #212]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_GPIO_Init+0xf0>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a29      	ldr	r2, [pc, #164]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <MX_GPIO_Init+0xf0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED_Pin|G_LED_Pin|Heater_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f240 4106 	movw	r1, #1030	; 0x406
 8001398:	4823      	ldr	r0, [pc, #140]	; (8001428 <MX_GPIO_Init+0xf4>)
 800139a:	f002 fd67 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80013a4:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_GPIO_Init+0xf8>)
 80013a6:	f002 fd61 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	481a      	ldr	r0, [pc, #104]	; (8001428 <MX_GPIO_Init+0xf4>)
 80013be:	f002 fbad 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED_Pin G_LED_Pin Heater_Pin */
  GPIO_InitStruct.Pin = R_LED_Pin|G_LED_Pin|Heater_Pin;
 80013c2:	f240 4306 	movw	r3, #1030	; 0x406
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_GPIO_Init+0xf4>)
 80013dc:	f002 fb9e 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 80013e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_GPIO_Init+0xf8>)
 80013fa:	f002 fb8f 	bl	8003b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Dip5_Pin Dip4_Pin Dip3_Pin Dip2_Pin
                           Dip1_Pin */
  GPIO_InitStruct.Pin = Dip5_Pin|Dip4_Pin|Dip3_Pin|Dip2_Pin
 80013fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001402:	60fb      	str	r3, [r7, #12]
                          |Dip1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f002 fb81 	bl	8003b1c <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800

08001430 <displayResults>:

/* USER CODE BEGIN 4 */
void displayResults(int measurement, int i, int val){
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b095      	sub	sp, #84	; 0x54
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  char uart_buf[50] = {'\0'};	//buffer for output data
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2232      	movs	r2, #50	; 0x32
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f8a7 	bl	8006598 <memset>
  int uart_buf_len = {'\0'};
 800144a:	2300      	movs	r3, #0
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  float voltage = ((5.000/1024) * val);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff f860 	bl	8000514 <__aeabi_i2d>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <displayResults+0x110>)
 800145a:	f7ff f8c5 	bl	80005e8 <__aeabi_dmul>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	f7ff fb59 	bl	8000b1c <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	64bb      	str	r3, [r7, #72]	; 0x48
  float potValue = (10000/128) * i;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	224e      	movs	r2, #78	; 0x4e
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

  //sprintf(uart_buf, "Test # %d", measurement);	  			//load print buffer with message
  //HAL_UART_Transmit(&huart2, (uint8_t *)MSG, uart_buf_len, 100);		//print to terminal

  uart_buf_len =sprintf(uart_buf, "Testing #%d\n", measurement);	  	//load print buffer with message
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	492e      	ldr	r1, [pc, #184]	; (8001544 <displayResults+0x114>)
 800148a:	4618      	mov	r0, r3
 800148c:	f005 f88c 	bl	80065a8 <siprintf>
 8001490:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001494:	b29a      	uxth	r2, r3
 8001496:	f107 0110 	add.w	r1, r7, #16
 800149a:	2364      	movs	r3, #100	; 0x64
 800149c:	482a      	ldr	r0, [pc, #168]	; (8001548 <displayResults+0x118>)
 800149e:	f004 fbd1 	bl	8005c44 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tPotentiometer Bit Value: %d\n", i);	//load print buffer with message
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	4928      	ldr	r1, [pc, #160]	; (800154c <displayResults+0x11c>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 f87c 	bl	80065a8 <siprintf>
 80014b0:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f107 0110 	add.w	r1, r7, #16
 80014ba:	2364      	movs	r3, #100	; 0x64
 80014bc:	4822      	ldr	r0, [pc, #136]	; (8001548 <displayResults+0x118>)
 80014be:	f004 fbc1 	bl	8005c44 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tPotentiometer (Ohms): %g\n", potValue);	//load print buffer with message
 80014c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014c4:	f7ff f838 	bl	8000538 <__aeabi_f2d>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	f107 0010 	add.w	r0, r7, #16
 80014d0:	461a      	mov	r2, r3
 80014d2:	4623      	mov	r3, r4
 80014d4:	491e      	ldr	r1, [pc, #120]	; (8001550 <displayResults+0x120>)
 80014d6:	f005 f867 	bl	80065a8 <siprintf>
 80014da:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80014dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 0110 	add.w	r1, r7, #16
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	4818      	ldr	r0, [pc, #96]	; (8001548 <displayResults+0x118>)
 80014e8:	f004 fbac 	bl	8005c44 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tOutput Bit Value: %d\n", val);	  		//load print buffer with message
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4918      	ldr	r1, [pc, #96]	; (8001554 <displayResults+0x124>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 f857 	bl	80065a8 <siprintf>
 80014fa:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 80014fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f107 0110 	add.w	r1, r7, #16
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	4810      	ldr	r0, [pc, #64]	; (8001548 <displayResults+0x118>)
 8001508:	f004 fb9c 	bl	8005c44 <HAL_UART_Transmit>

  uart_buf_len =sprintf(uart_buf, "\r\tVoltage: %gV\n\n\r", voltage);	  			//load print buffer with message
 800150c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800150e:	f7ff f813 	bl	8000538 <__aeabi_f2d>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	f107 0010 	add.w	r0, r7, #16
 800151a:	461a      	mov	r2, r3
 800151c:	4623      	mov	r3, r4
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <displayResults+0x128>)
 8001520:	f005 f842 	bl	80065a8 <siprintf>
 8001524:	64f8      	str	r0, [r7, #76]	; 0x4c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
 8001526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 0110 	add.w	r1, r7, #16
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <displayResults+0x118>)
 8001532:	f004 fb87 	bl	8005c44 <HAL_UART_Transmit>

}
 8001536:	bf00      	nop
 8001538:	3754      	adds	r7, #84	; 0x54
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	3f740000 	.word	0x3f740000
 8001544:	08006dcc 	.word	0x08006dcc
 8001548:	2000026c 	.word	0x2000026c
 800154c:	08006ddc 	.word	0x08006ddc
 8001550:	08006dfc 	.word	0x08006dfc
 8001554:	08006e18 	.word	0x08006e18
 8001558:	08006e30 	.word	0x08006e30
 800155c:	00000000 	.word	0x00000000

08001560 <targetCheck>:

  uart_buf_len =sprintf(uart_buf, "\tVoltage: {voltage}V\n");	  			//load print buffer with message
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);		//print to terminal
*/

int targetCheck(int val, int target, int i){
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	//check for distance val is from the target
	//if the analog value is greater than 50% of the target value, decrease 'i' by 50
	if (val > 1.50 * target){
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f7fe ffd1 	bl	8000514 <__aeabi_i2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	68b8      	ldr	r0, [r7, #8]
 8001578:	f7fe ffcc 	bl	8000514 <__aeabi_i2d>
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4bb3      	ldr	r3, [pc, #716]	; (8001850 <targetCheck+0x2f0>)
 8001582:	f7ff f831 	bl	80005e8 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4620      	mov	r0, r4
 800158c:	4629      	mov	r1, r5
 800158e:	f7ff fabb 	bl	8000b08 <__aeabi_dcmpgt>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <targetCheck+0x40>
	  i = i - 50;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b32      	subs	r3, #50	; 0x32
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	e12c      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 40% of the target value, decrease 'i' by 40
	else if (val > 1.40 * target){
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7fe ffb7 	bl	8000514 <__aeabi_i2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	f7fe ffb2 	bl	8000514 <__aeabi_i2d>
 80015b0:	a395      	add	r3, pc, #596	; (adr r3, 8001808 <targetCheck+0x2a8>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f817 	bl	80005e8 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7ff faa1 	bl	8000b08 <__aeabi_dcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <targetCheck+0x74>
	  i = i - 40;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b28      	subs	r3, #40	; 0x28
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e112      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 30% of the target value, decrease 'i' by 30
	else if (val > 1.30 * target){
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7fe ff9d 	bl	8000514 <__aeabi_i2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
 80015de:	68b8      	ldr	r0, [r7, #8]
 80015e0:	f7fe ff98 	bl	8000514 <__aeabi_i2d>
 80015e4:	a38a      	add	r3, pc, #552	; (adr r3, 8001810 <targetCheck+0x2b0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe fffd 	bl	80005e8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7ff fa87 	bl	8000b08 <__aeabi_dcmpgt>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <targetCheck+0xa8>
	  i = i - 30;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b1e      	subs	r3, #30
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	e0f8      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 20% of the target value, decrease 'i' by 20
	else if (val > 1.20 * target){
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7fe ff83 	bl	8000514 <__aeabi_i2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	68b8      	ldr	r0, [r7, #8]
 8001614:	f7fe ff7e 	bl	8000514 <__aeabi_i2d>
 8001618:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800161c:	4b8d      	ldr	r3, [pc, #564]	; (8001854 <targetCheck+0x2f4>)
 800161e:	f7fe ffe3 	bl	80005e8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7ff fa6d 	bl	8000b08 <__aeabi_dcmpgt>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <targetCheck+0xdc>
	  i = i - 20;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b14      	subs	r3, #20
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	e0de      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 10% of the target value, decrease 'i' by 10
	else if (val > 1.10 * target){
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7fe ff69 	bl	8000514 <__aeabi_i2d>
 8001642:	4604      	mov	r4, r0
 8001644:	460d      	mov	r5, r1
 8001646:	68b8      	ldr	r0, [r7, #8]
 8001648:	f7fe ff64 	bl	8000514 <__aeabi_i2d>
 800164c:	a372      	add	r3, pc, #456	; (adr r3, 8001818 <targetCheck+0x2b8>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ffc9 	bl	80005e8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7ff fa53 	bl	8000b08 <__aeabi_dcmpgt>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <targetCheck+0x110>
	  i = i - 10;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b0a      	subs	r3, #10
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	e0c4      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 20% of the target value, decrease 'i' by 5
	else if (val > 1.04 * target){
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7fe ff4f 	bl	8000514 <__aeabi_i2d>
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f7fe ff4a 	bl	8000514 <__aeabi_i2d>
 8001680:	a367      	add	r3, pc, #412	; (adr r3, 8001820 <targetCheck+0x2c0>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ffaf 	bl	80005e8 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7ff fa39 	bl	8000b08 <__aeabi_dcmpgt>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <targetCheck+0x144>
	  i = i - 5;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b05      	subs	r3, #5
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	e0aa      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 20% of the target value, decrease 'i' by 1
	else if (val > target){
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dd03      	ble.n	80016b4 <targetCheck+0x154>
	  i = i - 1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e0a2      	b.n	80017fa <targetCheck+0x29a>
	}
	//--------------------------------------------------------------------------------------------------------------
	//if the analog value is greater than 20% of the target value, decrease 'i' by 50
	else if (val < (1- 0.50) * target){
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7fe ff2d 	bl	8000514 <__aeabi_i2d>
 80016ba:	4604      	mov	r4, r0
 80016bc:	460d      	mov	r5, r1
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe ff28 	bl	8000514 <__aeabi_i2d>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <targetCheck+0x2f8>)
 80016ca:	f7fe ff8d 	bl	80005e8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7ff f9f9 	bl	8000acc <__aeabi_dcmplt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <targetCheck+0x188>
	  i = i + 50;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3332      	adds	r3, #50	; 0x32
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e088      	b.n	80017fa <targetCheck+0x29a>
	}
	else if (val < (1- 0.04) * target){
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7fe ff13 	bl	8000514 <__aeabi_i2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe ff0e 	bl	8000514 <__aeabi_i2d>
 80016f8:	a34b      	add	r3, pc, #300	; (adr r3, 8001828 <targetCheck+0x2c8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ff73 	bl	80005e8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7ff f9df 	bl	8000acc <__aeabi_dcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <targetCheck+0x1bc>
	  i = i + 5;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3305      	adds	r3, #5
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	e06e      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 40% of the target value, decrease 'i' by 50
	else if (val < (1- 0.10) * target){
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7fe fef9 	bl	8000514 <__aeabi_i2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f7fe fef4 	bl	8000514 <__aeabi_i2d>
 800172c:	a340      	add	r3, pc, #256	; (adr r3, 8001830 <targetCheck+0x2d0>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff59 	bl	80005e8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7ff f9c5 	bl	8000acc <__aeabi_dcmplt>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <targetCheck+0x1f0>
	  i = i + 10;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	330a      	adds	r3, #10
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e054      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 30% of the target value, decrease 'i' by 50
	else if (val < (1- 0.20) * target){
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7fe fedf 	bl	8000514 <__aeabi_i2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	68b8      	ldr	r0, [r7, #8]
 800175c:	f7fe feda 	bl	8000514 <__aeabi_i2d>
 8001760:	a335      	add	r3, pc, #212	; (adr r3, 8001838 <targetCheck+0x2d8>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe ff3f 	bl	80005e8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7ff f9ab 	bl	8000acc <__aeabi_dcmplt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <targetCheck+0x224>
	  i = i + 20;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3314      	adds	r3, #20
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	e03a      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 20% of the target value, decrease 'i' by 50
	else if (val < (1- 0.30) * target){
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7fe fec5 	bl	8000514 <__aeabi_i2d>
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f7fe fec0 	bl	8000514 <__aeabi_i2d>
 8001794:	a32a      	add	r3, pc, #168	; (adr r3, 8001840 <targetCheck+0x2e0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff25 	bl	80005e8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7ff f991 	bl	8000acc <__aeabi_dcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <targetCheck+0x258>
	  i = i + 30;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	331e      	adds	r3, #30
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e020      	b.n	80017fa <targetCheck+0x29a>
	}
	//if the analog value is greater than 10% of the target value, decrease 'i' by 50
	else if (val < (1- 0.40) * target){
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7fe feab 	bl	8000514 <__aeabi_i2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f7fe fea6 	bl	8000514 <__aeabi_i2d>
 80017c8:	a31f      	add	r3, pc, #124	; (adr r3, 8001848 <targetCheck+0x2e8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff0b 	bl	80005e8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7ff f977 	bl	8000acc <__aeabi_dcmplt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <targetCheck+0x28c>
	  i = i + 40;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3328      	adds	r3, #40	; 0x28
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	e006      	b.n	80017fa <targetCheck+0x29a>
	}
	else if (val < target){
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	da02      	bge.n	80017fa <targetCheck+0x29a>
	  i = i + 1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3301      	adds	r3, #1
 80017f8:	607b      	str	r3, [r7, #4]
	}
	return i;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	f3af 8000 	nop.w
 8001808:	66666666 	.word	0x66666666
 800180c:	3ff66666 	.word	0x3ff66666
 8001810:	cccccccd 	.word	0xcccccccd
 8001814:	3ff4cccc 	.word	0x3ff4cccc
 8001818:	9999999a 	.word	0x9999999a
 800181c:	3ff19999 	.word	0x3ff19999
 8001820:	0a3d70a4 	.word	0x0a3d70a4
 8001824:	3ff0a3d7 	.word	0x3ff0a3d7
 8001828:	eb851eb8 	.word	0xeb851eb8
 800182c:	3feeb851 	.word	0x3feeb851
 8001830:	cccccccd 	.word	0xcccccccd
 8001834:	3feccccc 	.word	0x3feccccc
 8001838:	9999999a 	.word	0x9999999a
 800183c:	3fe99999 	.word	0x3fe99999
 8001840:	66666666 	.word	0x66666666
 8001844:	3fe66666 	.word	0x3fe66666
 8001848:	33333333 	.word	0x33333333
 800184c:	3fe33333 	.word	0x3fe33333
 8001850:	3ff80000 	.word	0x3ff80000
 8001854:	3ff33333 	.word	0x3ff33333
 8001858:	3fe00000 	.word	0x3fe00000

0800185c <digitalPotWrite>:

void digitalPotWrite(int value){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//set CS1 pin HIGH.
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <digitalPotWrite+0x3c>)
 800186c:	f002 fafe 	bl	8003e6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&value, 2, 400); //handle SPI, Cast data to a 16 bit unsigned integer, 2 bytes of data, 400 ms delay
 8001870:	1d39      	adds	r1, r7, #4
 8001872:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001876:	2202      	movs	r2, #2
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <digitalPotWrite+0x40>)
 800187a:	f003 feca 	bl	8005612 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//set CS1 pin HIGH.
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <digitalPotWrite+0x3c>)
 8001886:	f002 faf1 	bl	8003e6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f000 fad4 	bl	8001e38 <HAL_Delay>
	}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	48000800 	.word	0x48000800
 800189c:	20000204 	.word	0x20000204

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_MspInit+0x44>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_MspInit+0x44>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	; 0x60
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_MspInit+0x44>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x44>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x44>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6593      	str	r3, [r2, #88]	; 0x58
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x44>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_ADC_MspInit+0xfc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d167      	bne.n	80019ea <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a36      	ldr	r2, [pc, #216]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_ADC_MspInit+0x100>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Sensor1_Pin|Sensor2_Pin|Sensor3_Pin|Pot3_Pin;
 8001962:	2317      	movs	r3, #23
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001966:	230b      	movs	r3, #11
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <HAL_ADC_MspInit+0x104>)
 8001976:	f002 f8d1 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Pot1_Pin|Pot2_Pin;
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800197e:	230b      	movs	r3, #11
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f002 f8c4 	bl	8003b1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_ADC_MspInit+0x10c>)
 8001998:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ce:	480c      	ldr	r0, [pc, #48]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019d0:	f001 feac 	bl	800372c <HAL_DMA_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80019da:	f7ff ff61 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_ADC_MspInit+0x108>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	50040000 	.word	0x50040000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000800 	.word	0x48000800
 8001a00:	200001bc 	.word	0x200001bc
 8001a04:	40020008 	.word	0x40020008

08001a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_SPI_MspInit+0xb4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d144      	bne.n	8001ab4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a34:	6613      	str	r3, [r2, #96]	; 0x60
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_SPI_MspInit+0xb8>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a72:	2320      	movs	r3, #32
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a82:	2305      	movs	r3, #5
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f002 f844 	bl	8003b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a94:	2320      	movs	r3, #32
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_SPI_MspInit+0xbc>)
 8001ab0:	f002 f834 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40013000 	.word	0x40013000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <HAL_UART_MspInit+0xdc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d129      	bne.n	8001b3e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin|GPIO_PIN_3;
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f001 fff0 	bl	8003b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b3c:	e02d      	b.n	8001b9a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_UART_MspInit+0xe4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d128      	bne.n	8001b9a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b52:	6593      	str	r3, [r2, #88]	; 0x58
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_UART_MspInit+0xe0>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001b78:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <HAL_UART_MspInit+0xe8>)
 8001b96:	f001 ffc1 	bl	8003b1c <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3730      	adds	r7, #48	; 0x30
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40004400 	.word	0x40004400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40004800 	.word	0x40004800
 8001bb0:	48000800 	.word	0x48000800

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 f8f6 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA1_Channel1_IRQHandler+0x10>)
 8001c16:	f001 fea1 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200001bc 	.word	0x200001bc

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f004 fc76 	bl	8006544 <__errno>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20018000 	.word	0x20018000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	2000008c 	.word	0x2000008c
 8001c8c:	200002f8 	.word	0x200002f8

08001c90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <SystemInit+0x64>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <SystemInit+0x64>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <SystemInit+0x68>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <SystemInit+0x68>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <SystemInit+0x68>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <SystemInit+0x68>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <SystemInit+0x68>)
 8001cbc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001cc0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <SystemInit+0x68>)
 8001cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ccc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <SystemInit+0x68>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <SystemInit+0x68>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <SystemInit+0x68>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x64>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	40021000 	.word	0x40021000

08001cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d00:	f7ff ffc6 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d06:	e003      	b.n	8001d10 <LoopCopyDataInit>

08001d08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d0e:	3104      	adds	r1, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d10:	480a      	ldr	r0, [pc, #40]	; (8001d3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d18:	d3f6      	bcc.n	8001d08 <CopyDataInit>
	ldr	r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d1c:	e002      	b.n	8001d24 <LoopFillZerobss>

08001d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d20:	f842 3b04 	str.w	r3, [r2], #4

08001d24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <LoopForever+0x16>)
	cmp	r2, r3
 8001d26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d28:	d3f9      	bcc.n	8001d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f004 fc11 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2e:	f7ff f8e5 	bl	8000efc <main>

08001d32 <LoopForever>:

LoopForever:
    b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d34:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d38:	08006ed0 	.word	0x08006ed0
	ldr	r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d40:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001d44:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001d48:	200002f8 	.word	0x200002f8

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>

08001d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f001 fca5 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f80e 	bl	8001d80 <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e001      	b.n	8001d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d70:	f7ff fd9e 	bl	80018b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_InitTick+0x6c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d023      	beq.n	8001ddc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_InitTick+0x70>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_InitTick+0x6c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 fcb1 	bl	8003712 <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d809      	bhi.n	8001dd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f001 fc7b 	bl	80036be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_InitTick+0x74>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e004      	b.n	8001de0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e001      	b.n	8001de0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	200002f0 	.word	0x200002f0

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200002f0 	.word	0x200002f0

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_Delay+0x40>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000008 	.word	0x20000008

08001e7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	609a      	str	r2, [r3, #8]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3360      	adds	r3, #96	; 0x60
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <LL_ADC_SetOffset+0x44>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f1c:	bf00      	nop
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	03fff000 	.word	0x03fff000

08001f2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3360      	adds	r3, #96	; 0x60
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3360      	adds	r3, #96	; 0x60
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3330      	adds	r3, #48	; 0x30
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	211f      	movs	r1, #31
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 011f 	and.w	r1, r3, #31
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3314      	adds	r3, #20
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	0e5b      	lsrs	r3, r3, #25
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	4413      	add	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	0d1b      	lsrs	r3, r3, #20
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2107      	movs	r1, #7
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0d1b      	lsrs	r3, r3, #20
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0318 	and.w	r3, r3, #24
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002088:	40d9      	lsrs	r1, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	400b      	ands	r3, r1
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0007ffff 	.word	0x0007ffff

080020ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 031f 	and.w	r3, r3, #31
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6093      	str	r3, [r2, #8]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800211c:	d101      	bne.n	8002122 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800216c:	d101      	bne.n	8002172 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_IsEnabled+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_IsEnabled+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e2:	f043 0204 	orr.w	r2, r3, #4
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d101      	bne.n	800220e <LL_ADC_REG_IsConversionOngoing+0x18>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b08      	cmp	r3, #8
 800222e:	d101      	bne.n	8002234 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e134      	b.n	80024c8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fb43 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff3f 	bl	8002108 <LL_ADC_IsDeepPowerDownEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff25 	bl	80020e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff5a 	bl	8002158 <LL_ADC_IsInternalRegulatorEnabled>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d113      	bne.n	80022d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff3e 	bl	8002130 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_ADC_Init+0x28c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	4a86      	ldr	r2, [pc, #536]	; (80024d4 <HAL_ADC_Init+0x290>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022c4:	e002      	b.n	80022cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff3e 	bl	8002158 <LL_ADC_IsInternalRegulatorEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff77 	bl	80021f6 <LL_ADC_REG_IsConversionOngoing>
 8002308:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 80cf 	bne.w	80024b6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 80cb 	bne.w	80024b6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002328:	f043 0202 	orr.w	r2, r3, #2
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff37 	bl	80021a8 <LL_ADC_IsEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d115      	bne.n	800236c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002340:	4865      	ldr	r0, [pc, #404]	; (80024d8 <HAL_ADC_Init+0x294>)
 8002342:	f7ff ff31 	bl	80021a8 <LL_ADC_IsEnabled>
 8002346:	4604      	mov	r4, r0
 8002348:	4864      	ldr	r0, [pc, #400]	; (80024dc <HAL_ADC_Init+0x298>)
 800234a:	f7ff ff2d 	bl	80021a8 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	431c      	orrs	r4, r3
 8002352:	4863      	ldr	r0, [pc, #396]	; (80024e0 <HAL_ADC_Init+0x29c>)
 8002354:	f7ff ff28 	bl	80021a8 <LL_ADC_IsEnabled>
 8002358:	4603      	mov	r3, r0
 800235a:	4323      	orrs	r3, r4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4619      	mov	r1, r3
 8002366:	485f      	ldr	r0, [pc, #380]	; (80024e4 <HAL_ADC_Init+0x2a0>)
 8002368:	f7ff fd88 	bl	8001e7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7e5b      	ldrb	r3, [r3, #25]
 8002370:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002376:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800237c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002382:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d106      	bne.n	80023a8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	3b01      	subs	r3, #1
 80023a0:	045b      	lsls	r3, r3, #17
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_ADC_Init+0x2a4>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff0a 	bl	80021f6 <LL_ADC_REG_IsConversionOngoing>
 80023e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff17 	bl	800221c <LL_ADC_INJ_IsConversionOngoing>
 80023ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d13d      	bne.n	8002472 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d13a      	bne.n	8002472 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002400:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002408:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002418:	f023 0302 	bic.w	r3, r3, #2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	430b      	orrs	r3, r1
 8002424:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800242c:	2b01      	cmp	r3, #1
 800242e:	d118      	bne.n	8002462 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800243a:	f023 0304 	bic.w	r3, r3, #4
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002452:	430a      	orrs	r2, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	e007      	b.n	8002472 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10c      	bne.n	8002494 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f023 010f 	bic.w	r1, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
 8002492:	e007      	b.n	80024a4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020f 	bic.w	r2, r2, #15
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f023 0303 	bic.w	r3, r3, #3
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
 80024b4:	e007      	b.n	80024c6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3724      	adds	r7, #36	; 0x24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	053e2d63 	.word	0x053e2d63
 80024d8:	50040000 	.word	0x50040000
 80024dc:	50040100 	.word	0x50040100
 80024e0:	50040200 	.word	0x50040200
 80024e4:	50040300 	.word	0x50040300
 80024e8:	fff0c007 	.word	0xfff0c007

080024ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f4:	4857      	ldr	r0, [pc, #348]	; (8002654 <HAL_ADC_Start+0x168>)
 80024f6:	f7ff fdd9 	bl	80020ac <LL_ADC_GetMultimode>
 80024fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe78 	bl	80021f6 <LL_ADC_REG_IsConversionOngoing>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 809c 	bne.w	8002646 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_Start+0x30>
 8002518:	2302      	movs	r3, #2
 800251a:	e097      	b.n	800264c <HAL_ADC_Start+0x160>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fe2f 	bl	8003188 <ADC_Enable>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 8083 	bne.w	800263c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a42      	ldr	r2, [pc, #264]	; (8002658 <HAL_ADC_Start+0x16c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_Start+0x6e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e000      	b.n	800255c <HAL_ADC_Start+0x70>
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_ADC_Start+0x170>)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	4293      	cmp	r3, r2
 8002562:	d002      	beq.n	800256a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	d106      	bne.n	8002592 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	f023 0206 	bic.w	r2, r3, #6
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	659a      	str	r2, [r3, #88]	; 0x58
 8002590:	e002      	b.n	8002598 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	221c      	movs	r2, #28
 800259e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_ADC_Start+0x16c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d002      	beq.n	80025b8 <HAL_ADC_Start+0xcc>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e000      	b.n	80025ba <HAL_ADC_Start+0xce>
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_ADC_Start+0x170>)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d008      	beq.n	80025d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d002      	beq.n	80025d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	d114      	bne.n	80025fe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fde9 	bl	80021ce <LL_ADC_REG_StartConversion>
 80025fc:	e025      	b.n	800264a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <HAL_ADC_Start+0x16c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d002      	beq.n	800261a <HAL_ADC_Start+0x12e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e000      	b.n	800261c <HAL_ADC_Start+0x130>
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_ADC_Start+0x170>)
 800261c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00f      	beq.n	800264a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
 800263a:	e006      	b.n	800264a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002644:	e001      	b.n	800264a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	50040300 	.word	0x50040300
 8002658:	50040100 	.word	0x50040100
 800265c:	50040000 	.word	0x50040000

08002660 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800266a:	4862      	ldr	r0, [pc, #392]	; (80027f4 <HAL_ADC_PollForConversion+0x194>)
 800266c:	f7ff fd1e 	bl	80020ac <LL_ADC_GetMultimode>
 8002670:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b08      	cmp	r3, #8
 8002678:	d102      	bne.n	8002680 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800267a:	2308      	movs	r3, #8
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e02a      	b.n	80026d6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d002      	beq.n	8002692 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b09      	cmp	r3, #9
 8002690:	d111      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e09d      	b.n	80027ec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026b0:	2304      	movs	r3, #4
 80026b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026b4:	e00f      	b.n	80026d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026b6:	484f      	ldr	r0, [pc, #316]	; (80027f4 <HAL_ADC_PollForConversion+0x194>)
 80026b8:	f7ff fd06 	bl	80020c8 <LL_ADC_GetMultiDMATransfer>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e08c      	b.n	80027ec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026d2:	2304      	movs	r3, #4
 80026d4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026d6:	f7ff fba3 	bl	8001e20 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026dc:	e01a      	b.n	8002714 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d016      	beq.n	8002714 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026e6:	f7ff fb9b 	bl	8001e20 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <HAL_ADC_PollForConversion+0x9c>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e06b      	b.n	80027ec <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0dd      	beq.n	80026de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fc2b 	bl	8001f8e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01c      	beq.n	8002778 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7e5b      	ldrb	r3, [r3, #25]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b08      	cmp	r3, #8
 8002752:	d111      	bne.n	8002778 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <HAL_ADC_PollForConversion+0x198>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d002      	beq.n	8002788 <HAL_ADC_PollForConversion+0x128>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e000      	b.n	800278a <HAL_ADC_PollForConversion+0x12a>
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_ADC_PollForConversion+0x19c>)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4293      	cmp	r3, r2
 8002790:	d008      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d002      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b09      	cmp	r3, #9
 80027a2:	d104      	bne.n	80027ae <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	e00c      	b.n	80027c8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <HAL_ADC_PollForConversion+0x198>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d002      	beq.n	80027be <HAL_ADC_PollForConversion+0x15e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_PollForConversion+0x160>
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_ADC_PollForConversion+0x19c>)
 80027c0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d104      	bne.n	80027d8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2208      	movs	r2, #8
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e008      	b.n	80027ea <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	50040300 	.word	0x50040300
 80027f8:	50040100 	.word	0x50040100
 80027fc:	50040000 	.word	0x50040000

08002800 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800280c:	4850      	ldr	r0, [pc, #320]	; (8002950 <HAL_ADC_Start_DMA+0x150>)
 800280e:	f7ff fc4d 	bl	80020ac <LL_ADC_GetMultimode>
 8002812:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fcec 	bl	80021f6 <LL_ADC_REG_IsConversionOngoing>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 808e 	bne.w	8002942 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_ADC_Start_DMA+0x34>
 8002830:	2302      	movs	r3, #2
 8002832:	e089      	b.n	8002948 <HAL_ADC_Start_DMA+0x148>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d002      	beq.n	800284e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b09      	cmp	r3, #9
 800284c:	d172      	bne.n	8002934 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fc9a 	bl	8003188 <ADC_Enable>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d165      	bne.n	800292a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a37      	ldr	r2, [pc, #220]	; (8002954 <HAL_ADC_Start_DMA+0x154>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d002      	beq.n	8002882 <HAL_ADC_Start_DMA+0x82>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e000      	b.n	8002884 <HAL_ADC_Start_DMA+0x84>
 8002882:	4b35      	ldr	r3, [pc, #212]	; (8002958 <HAL_ADC_Start_DMA+0x158>)
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	4293      	cmp	r3, r2
 800288a:	d002      	beq.n	8002892 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f023 0206 	bic.w	r2, r3, #6
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	659a      	str	r2, [r3, #88]	; 0x58
 80028b6:	e002      	b.n	80028be <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <HAL_ADC_Start_DMA+0x15c>)
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	4a25      	ldr	r2, [pc, #148]	; (8002960 <HAL_ADC_Start_DMA+0x160>)
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	4a24      	ldr	r2, [pc, #144]	; (8002964 <HAL_ADC_Start_DMA+0x164>)
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	221c      	movs	r2, #28
 80028dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0210 	orr.w	r2, r2, #16
 80028f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3340      	adds	r3, #64	; 0x40
 8002910:	4619      	mov	r1, r3
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f000 ffc1 	bl	800389c <HAL_DMA_Start_IT>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fc53 	bl	80021ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002928:	e00d      	b.n	8002946 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002932:	e008      	b.n	8002946 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002940:	e001      	b.n	8002946 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	50040300 	.word	0x50040300
 8002954:	50040100 	.word	0x50040100
 8002958:	50040000 	.word	0x50040000
 800295c:	0800323d 	.word	0x0800323d
 8002960:	08003315 	.word	0x08003315
 8002964:	08003331 	.word	0x08003331

08002968 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0b6      	sub	sp, #216	; 0xd8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x22>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e3c6      	b.n	800315c <HAL_ADC_ConfigChannel+0x7b0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fc0b 	bl	80021f6 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 83a7 	bne.w	8003136 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d824      	bhi.n	8002a3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	3b02      	subs	r3, #2
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d81b      	bhi.n	8002a32 <HAL_ADC_ConfigChannel+0x86>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <HAL_ADC_ConfigChannel+0x54>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a19 	.word	0x08002a19
 8002a08:	08002a21 	.word	0x08002a21
 8002a0c:	08002a29 	.word	0x08002a29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	220c      	movs	r2, #12
 8002a14:	605a      	str	r2, [r3, #4]
          break;
 8002a16:	e011      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2212      	movs	r2, #18
 8002a1c:	605a      	str	r2, [r3, #4]
          break;
 8002a1e:	e00d      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2218      	movs	r2, #24
 8002a24:	605a      	str	r2, [r3, #4]
          break;
 8002a26:	e009      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2e:	605a      	str	r2, [r3, #4]
          break;
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2206      	movs	r2, #6
 8002a36:	605a      	str	r2, [r3, #4]
          break;
 8002a38:	e000      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f7ff fab3 	bl	8001fb4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fbcf 	bl	80021f6 <LL_ADC_REG_IsConversionOngoing>
 8002a58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fbdb 	bl	800221c <LL_ADC_INJ_IsConversionOngoing>
 8002a66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 81a6 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 81a1 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f7ff fabe 	bl	800200c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	08db      	lsrs	r3, r3, #3
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6919      	ldr	r1, [r3, #16]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ac2:	f7ff fa0f 	bl	8001ee4 <LL_ADC_SetOffset>
 8002ac6:	e17b      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fa2c 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x148>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fa21 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 021f 	and.w	r2, r3, #31
 8002af2:	e01e      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x186>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fa16 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e004      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x19e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	e018      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x1d0>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e004      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f9e5 	bl	8001f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f9c9 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x20e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff f9be 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	e01e      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x24c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f9b3 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002be0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e004      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x264>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	e018      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x296>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e004      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d106      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f982 	bl	8001f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f966 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x2d4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f95b 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 021f 	and.w	r2, r3, #31
 8002c7e:	e01e      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x312>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f950 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e004      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x32a>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	e016      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x358>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e004      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d106      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f921 	bl	8001f58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f905 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x396>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2103      	movs	r1, #3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f8fa 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	e017      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x3c6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2103      	movs	r1, #3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f8ef 	bl	8001f2c <LL_ADC_GetOffsetChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x3de>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	0e9b      	lsrs	r3, r3, #26
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	e011      	b.n	8002dae <HAL_ADC_ConfigChannel+0x402>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e003      	b.n	8002dae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2103      	movs	r1, #3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f8cc 	bl	8001f58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f9ef 	bl	80021a8 <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 813f 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f7ff f940 	bl	8002064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a8e      	ldr	r2, [pc, #568]	; (8003024 <HAL_ADC_ConfigChannel+0x678>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f040 8130 	bne.w	8003050 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x46c>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e019      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x4a0>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	bf94      	ite	ls
 8002e46:	2301      	movls	r3, #1
 8002e48:	2300      	movhi	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d079      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x4c0>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	3301      	adds	r3, #1
 8002e64:	069b      	lsls	r3, r3, #26
 8002e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6a:	e015      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x4ec>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	069b      	lsls	r3, r3, #26
 8002e94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x50c>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	e017      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x53c>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	ea42 0103 	orr.w	r1, r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x562>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	051b      	lsls	r3, r3, #20
 8002f0c:	e018      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x594>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f26:	2320      	movs	r3, #32
 8002f28:	e003      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f40:	430b      	orrs	r3, r1
 8002f42:	e080      	b.n	8003046 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x5b4>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	069b      	lsls	r3, r3, #26
 8002f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f5e:	e015      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x5e0>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e003      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	069b      	lsls	r3, r3, #26
 8002f88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x600>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	e017      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x630>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	61fb      	str	r3, [r7, #28]
  return result;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x65c>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b1e      	subs	r3, #30
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003006:	e01d      	b.n	8003044 <HAL_ADC_ConfigChannel+0x698>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	613b      	str	r3, [r7, #16]
  return result;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e005      	b.n	8003030 <HAL_ADC_ConfigChannel+0x684>
 8003024:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f003 021f 	and.w	r2, r3, #31
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	3b1e      	subs	r3, #30
 800303e:	051b      	lsls	r3, r3, #20
 8003040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003044:	430b      	orrs	r3, r1
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	4619      	mov	r1, r3
 800304c:	f7fe ffde 	bl	800200c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b43      	ldr	r3, [pc, #268]	; (8003164 <HAL_ADC_ConfigChannel+0x7b8>)
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d079      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800305c:	4842      	ldr	r0, [pc, #264]	; (8003168 <HAL_ADC_ConfigChannel+0x7bc>)
 800305e:	f7fe ff33 	bl	8001ec8 <LL_ADC_GetCommonPathInternalCh>
 8003062:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a40      	ldr	r2, [pc, #256]	; (800316c <HAL_ADC_ConfigChannel+0x7c0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d12b      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d125      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a3b      	ldr	r2, [pc, #236]	; (8003170 <HAL_ADC_ConfigChannel+0x7c4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x6e4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <HAL_ADC_ConfigChannel+0x7c8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d15c      	bne.n	800314a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003098:	4619      	mov	r1, r3
 800309a:	4833      	ldr	r0, [pc, #204]	; (8003168 <HAL_ADC_ConfigChannel+0x7bc>)
 800309c:	f7fe ff01 	bl	8001ea2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_ADC_ConfigChannel+0x7cc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	4a35      	ldr	r2, [pc, #212]	; (800317c <HAL_ADC_ConfigChannel+0x7d0>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099a      	lsrs	r2, r3, #6
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030b8:	e002      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3b01      	subs	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f9      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c6:	e040      	b.n	800314a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_ADC_ConfigChannel+0x7d4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d118      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x758>
 80030d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d112      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_ADC_ConfigChannel+0x7c4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x746>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a21      	ldr	r2, [pc, #132]	; (8003174 <HAL_ADC_ConfigChannel+0x7c8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12d      	bne.n	800314e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fa:	4619      	mov	r1, r3
 80030fc:	481a      	ldr	r0, [pc, #104]	; (8003168 <HAL_ADC_ConfigChannel+0x7bc>)
 80030fe:	f7fe fed0 	bl	8001ea2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003102:	e024      	b.n	800314e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_ADC_ConfigChannel+0x7d8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d120      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800310e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11a      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_ADC_ConfigChannel+0x7c4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d115      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800312c:	4619      	mov	r1, r3
 800312e:	480e      	ldr	r0, [pc, #56]	; (8003168 <HAL_ADC_ConfigChannel+0x7bc>)
 8003130:	f7fe feb7 	bl	8001ea2 <LL_ADC_SetCommonPathInternalCh>
 8003134:	e00c      	b.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003148:	e002      	b.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800314e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003158:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800315c:	4618      	mov	r0, r3
 800315e:	37d8      	adds	r7, #216	; 0xd8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	80080000 	.word	0x80080000
 8003168:	50040300 	.word	0x50040300
 800316c:	c7520000 	.word	0xc7520000
 8003170:	50040000 	.word	0x50040000
 8003174:	50040200 	.word	0x50040200
 8003178:	20000000 	.word	0x20000000
 800317c:	053e2d63 	.word	0x053e2d63
 8003180:	cb840000 	.word	0xcb840000
 8003184:	80000001 	.word	0x80000001

08003188 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f807 	bl	80021a8 <LL_ADC_IsEnabled>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d146      	bne.n	800322e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <ADC_Enable+0xb0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f043 0210 	orr.w	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e032      	b.n	8003230 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe ffd6 	bl	8002180 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031d4:	f7fe fe24 	bl	8001e20 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031da:	e021      	b.n	8003220 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe ffe1 	bl	80021a8 <LL_ADC_IsEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe ffc5 	bl	8002180 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031f6:	f7fe fe13 	bl	8001e20 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d90d      	bls.n	8003220 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	f043 0210 	orr.w	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e007      	b.n	8003230 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d1d6      	bne.n	80031dc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	8000003f 	.word	0x8000003f

0800323c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14b      	bne.n	80032ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d021      	beq.n	80032b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fe8a 	bl	8001f8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d032      	beq.n	80032e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d12b      	bne.n	80032e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
 80032b2:	e018      	b.n	80032e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d111      	bne.n	80032e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7fd fde8 	bl	8000ebc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032ec:	e00e      	b.n	800330c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff fb4b 	bl	8002996 <HAL_ADC_ErrorCallback>
}
 8003300:	e004      	b.n	800330c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fb2d 	bl	8002982 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff fb1d 	bl	8002996 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <LL_ADC_IsEnabled>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <LL_ADC_IsEnabled+0x18>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <LL_ADC_IsEnabled+0x1a>
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_ADC_REG_IsConversionOngoing>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d101      	bne.n	80033a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b09f      	sub	sp, #124	; 0x7c
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e08f      	b.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a47      	ldr	r2, [pc, #284]	; (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d102      	bne.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80033e0:	4b46      	ldr	r3, [pc, #280]	; (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	e001      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e072      	b.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ffbd 	bl	800338a <LL_ADC_REG_IsConversionOngoing>
 8003410:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ffb7 	bl	800338a <LL_ADC_REG_IsConversionOngoing>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d154      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003424:	2b00      	cmp	r3, #0
 8003426:	d151      	bne.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003428:	4b35      	ldr	r3, [pc, #212]	; (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800342a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02c      	beq.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003446:	035b      	lsls	r3, r3, #13
 8003448:	430b      	orrs	r3, r1
 800344a:	431a      	orrs	r2, r3
 800344c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003450:	4829      	ldr	r0, [pc, #164]	; (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003452:	f7ff ff87 	bl	8003364 <LL_ADC_IsEnabled>
 8003456:	4604      	mov	r4, r0
 8003458:	4828      	ldr	r0, [pc, #160]	; (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800345a:	f7ff ff83 	bl	8003364 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	431c      	orrs	r4, r3
 8003462:	4828      	ldr	r0, [pc, #160]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003464:	f7ff ff7e 	bl	8003364 <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	4323      	orrs	r3, r4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d137      	bne.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	6811      	ldr	r1, [r2, #0]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	6892      	ldr	r2, [r2, #8]
 8003484:	430a      	orrs	r2, r1
 8003486:	431a      	orrs	r2, r3
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800348c:	e028      	b.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800349a:	4817      	ldr	r0, [pc, #92]	; (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800349c:	f7ff ff62 	bl	8003364 <LL_ADC_IsEnabled>
 80034a0:	4604      	mov	r4, r0
 80034a2:	4816      	ldr	r0, [pc, #88]	; (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80034a4:	f7ff ff5e 	bl	8003364 <LL_ADC_IsEnabled>
 80034a8:	4603      	mov	r3, r0
 80034aa:	431c      	orrs	r4, r3
 80034ac:	4815      	ldr	r0, [pc, #84]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ae:	f7ff ff59 	bl	8003364 <LL_ADC_IsEnabled>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4323      	orrs	r3, r4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d112      	bne.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034c2:	f023 030f 	bic.w	r3, r3, #15
 80034c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ca:	e009      	b.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034de:	e000      	b.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	377c      	adds	r7, #124	; 0x7c
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	bf00      	nop
 80034f8:	50040000 	.word	0x50040000
 80034fc:	50040100 	.word	0x50040100
 8003500:	50040300 	.word	0x50040300
 8003504:	50040200 	.word	0x50040200

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f7ff ff8e 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff29 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff3e 	bl	8003550 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff8e 	bl	80035fc <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5d 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff31 	bl	800356c <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e098      	b.n	8003870 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	4b4d      	ldr	r3, [pc, #308]	; (800387c <HAL_DMA_Init+0x150>)
 8003746:	429a      	cmp	r2, r3
 8003748:	d80f      	bhi.n	800376a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_DMA_Init+0x154>)
 8003752:	4413      	add	r3, r2
 8003754:	4a4b      	ldr	r2, [pc, #300]	; (8003884 <HAL_DMA_Init+0x158>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	009a      	lsls	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a48      	ldr	r2, [pc, #288]	; (8003888 <HAL_DMA_Init+0x15c>)
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
 8003768:	e00e      	b.n	8003788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_DMA_Init+0x160>)
 8003772:	4413      	add	r3, r2
 8003774:	4a43      	ldr	r2, [pc, #268]	; (8003884 <HAL_DMA_Init+0x158>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a42      	ldr	r2, [pc, #264]	; (8003890 <HAL_DMA_Init+0x164>)
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e2:	d039      	beq.n	8003858 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	4a27      	ldr	r2, [pc, #156]	; (8003888 <HAL_DMA_Init+0x15c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d11a      	bne.n	8003824 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_DMA_Init+0x168>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f003 031c 	and.w	r3, r3, #28
 80037fa:	210f      	movs	r1, #15
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	4924      	ldr	r1, [pc, #144]	; (8003894 <HAL_DMA_Init+0x168>)
 8003804:	4013      	ands	r3, r2
 8003806:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003808:	4b22      	ldr	r3, [pc, #136]	; (8003894 <HAL_DMA_Init+0x168>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f003 031c 	and.w	r3, r3, #28
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	491d      	ldr	r1, [pc, #116]	; (8003894 <HAL_DMA_Init+0x168>)
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
 8003822:	e019      	b.n	8003858 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003824:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_DMA_Init+0x16c>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f003 031c 	and.w	r3, r3, #28
 8003830:	210f      	movs	r1, #15
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	4917      	ldr	r1, [pc, #92]	; (8003898 <HAL_DMA_Init+0x16c>)
 800383a:	4013      	ands	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_DMA_Init+0x16c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f003 031c 	and.w	r3, r3, #28
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	4911      	ldr	r1, [pc, #68]	; (8003898 <HAL_DMA_Init+0x16c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40020407 	.word	0x40020407
 8003880:	bffdfff8 	.word	0xbffdfff8
 8003884:	cccccccd 	.word	0xcccccccd
 8003888:	40020000 	.word	0x40020000
 800388c:	bffdfbf8 	.word	0xbffdfbf8
 8003890:	40020400 	.word	0x40020400
 8003894:	400200a8 	.word	0x400200a8
 8003898:	400204a8 	.word	0x400204a8

0800389c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_DMA_Start_IT+0x20>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e04b      	b.n	8003954 <HAL_DMA_Start_IT+0xb8>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d13a      	bne.n	8003946 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f8e0 	bl	8003aba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 020e 	orr.w	r2, r2, #14
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e00f      	b.n	8003934 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 020a 	orr.w	r2, r2, #10
 8003932:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e005      	b.n	8003952 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f003 031c 	and.w	r3, r3, #28
 800397c:	2204      	movs	r2, #4
 800397e:	409a      	lsls	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d026      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x7a>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d021      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f003 021c 	and.w	r2, r3, #28
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	2104      	movs	r1, #4
 80039be:	fa01 f202 	lsl.w	r2, r1, r2
 80039c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d071      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80039d4:	e06c      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f003 031c 	and.w	r3, r3, #28
 80039de:	2202      	movs	r2, #2
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02e      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xec>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d029      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 020a 	bic.w	r2, r2, #10
 8003a10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 021c 	and.w	r2, r3, #28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2102      	movs	r1, #2
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d038      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a46:	e033      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	f003 031c 	and.w	r3, r3, #28
 8003a50:	2208      	movs	r2, #8
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x156>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d025      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 020e 	bic.w	r2, r2, #14
 8003a74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 021c 	and.w	r2, r3, #28
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
}
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f003 021c 	and.w	r2, r3, #28
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ada:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d108      	bne.n	8003afe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003afc:	e007      	b.n	8003b0e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	60da      	str	r2, [r3, #12]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b2a:	e17f      	b.n	8003e2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8171 	beq.w	8003e26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d00b      	beq.n	8003b64 <HAL_GPIO_Init+0x48>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d007      	beq.n	8003b64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b58:	2b11      	cmp	r3, #17
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b12      	cmp	r3, #18
 8003b62:	d130      	bne.n	8003bc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0201 	and.w	r2, r3, #1
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d118      	bne.n	8003c04 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bd8:	2201      	movs	r2, #1
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	f003 0201 	and.w	r2, r3, #1
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x128>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b12      	cmp	r3, #18
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	6939      	ldr	r1, [r7, #16]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80ac 	beq.w	8003e26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	4b5e      	ldr	r3, [pc, #376]	; (8003e48 <HAL_GPIO_Init+0x32c>)
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	4a5d      	ldr	r2, [pc, #372]	; (8003e48 <HAL_GPIO_Init+0x32c>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8003cda:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_GPIO_Init+0x32c>)
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ce6:	4a59      	ldr	r2, [pc, #356]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	3302      	adds	r3, #2
 8003cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	220f      	movs	r2, #15
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d10:	d025      	beq.n	8003d5e <HAL_GPIO_Init+0x242>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4e      	ldr	r2, [pc, #312]	; (8003e50 <HAL_GPIO_Init+0x334>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <HAL_GPIO_Init+0x23e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <HAL_GPIO_Init+0x338>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d019      	beq.n	8003d56 <HAL_GPIO_Init+0x23a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4c      	ldr	r2, [pc, #304]	; (8003e58 <HAL_GPIO_Init+0x33c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0x236>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <HAL_GPIO_Init+0x340>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <HAL_GPIO_Init+0x232>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a4a      	ldr	r2, [pc, #296]	; (8003e60 <HAL_GPIO_Init+0x344>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <HAL_GPIO_Init+0x22e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a49      	ldr	r2, [pc, #292]	; (8003e64 <HAL_GPIO_Init+0x348>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_GPIO_Init+0x22a>
 8003d42:	2306      	movs	r3, #6
 8003d44:	e00c      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d46:	2307      	movs	r3, #7
 8003d48:	e00a      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x244>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	f002 0203 	and.w	r2, r2, #3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d70:	4936      	ldr	r1, [pc, #216]	; (8003e4c <HAL_GPIO_Init+0x330>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003da2:	4a31      	ldr	r2, [pc, #196]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003da8:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dcc:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd2:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003df6:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <HAL_GPIO_Init+0x34c>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f47f ae78 	bne.w	8003b2c <HAL_GPIO_Init+0x10>
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	48000400 	.word	0x48000400
 8003e54:	48000800 	.word	0x48000800
 8003e58:	48000c00 	.word	0x48000c00
 8003e5c:	48001000 	.word	0x48001000
 8003e60:	48001400 	.word	0x48001400
 8003e64:	48001800 	.word	0x48001800
 8003e68:	40010400 	.word	0x40010400

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e88:	e002      	b.n	8003e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	041a      	lsls	r2, r3, #16
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43d9      	mvns	r1, r3
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40007000 	.word	0x40007000

08003eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d130      	bne.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f08:	d038      	beq.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2232      	movs	r2, #50	; 0x32
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0c9b      	lsrs	r3, r3, #18
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f30:	e002      	b.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f44:	d102      	bne.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f2      	bne.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f58:	d110      	bne.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e00f      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d007      	beq.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	20000000 	.word	0x20000000
 8003f94:	431bde83 	.word	0x431bde83

08003f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e3d4      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003faa:	4ba1      	ldr	r3, [pc, #644]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb4:	4b9e      	ldr	r3, [pc, #632]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80e4 	beq.w	8004194 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x4a>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	f040 808b 	bne.w	80040f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f040 8087 	bne.w	80040f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fe2:	4b93      	ldr	r3, [pc, #588]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_RCC_OscConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e3ac      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	4b8c      	ldr	r3, [pc, #560]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_RCC_OscConfig+0x7c>
 800400a:	4b89      	ldr	r3, [pc, #548]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004012:	e005      	b.n	8004020 <HAL_RCC_OscConfig+0x88>
 8004014:	4b86      	ldr	r3, [pc, #536]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004020:	4293      	cmp	r3, r2
 8004022:	d223      	bcs.n	800406c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fd3f 	bl	8004aac <RCC_SetFlashLatencyFromMSIRange>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e38d      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004038:	4b7d      	ldr	r3, [pc, #500]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a7c      	ldr	r2, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800403e:	f043 0308 	orr.w	r3, r3, #8
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4977      	ldr	r1, [pc, #476]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	4972      	ldr	r1, [pc, #456]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
 800406a:	e025      	b.n	80040b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800406c:	4b70      	ldr	r3, [pc, #448]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6f      	ldr	r2, [pc, #444]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004072:	f043 0308 	orr.w	r3, r3, #8
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b6d      	ldr	r3, [pc, #436]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	496a      	ldr	r1, [pc, #424]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408a:	4b69      	ldr	r3, [pc, #420]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4965      	ldr	r1, [pc, #404]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fcff 	bl	8004aac <RCC_SetFlashLatencyFromMSIRange>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e34d      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b8:	f000 fc36 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80040bc:	4601      	mov	r1, r0
 80040be:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	4a5a      	ldr	r2, [pc, #360]	; (8004234 <HAL_RCC_OscConfig+0x29c>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	fa21 f303 	lsr.w	r3, r1, r3
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCC_OscConfig+0x2a0>)
 80040d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040d8:	4b58      	ldr	r3, [pc, #352]	; (800423c <HAL_RCC_OscConfig+0x2a4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fe4f 	bl	8001d80 <HAL_InitTick>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d052      	beq.n	8004192 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	e331      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d032      	beq.n	800415e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040f8:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a4c      	ldr	r2, [pc, #304]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004104:	f7fd fe8c 	bl	8001e20 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800410c:	f7fd fe88 	bl	8001e20 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e31a      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800411e:	4b44      	ldr	r3, [pc, #272]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004130:	f043 0308 	orr.w	r3, r3, #8
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	493b      	ldr	r1, [pc, #236]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004144:	4313      	orrs	r3, r2
 8004146:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	4936      	ldr	r1, [pc, #216]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
 800415c:	e01a      	b.n	8004194 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a33      	ldr	r2, [pc, #204]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800416a:	f7fd fe59 	bl	8001e20 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004172:	f7fd fe55 	bl	8001e20 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e2e7      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004184:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x1da>
 8004190:	e000      	b.n	8004194 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004192:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d074      	beq.n	800428a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d005      	beq.n	80041b2 <HAL_RCC_OscConfig+0x21a>
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d10e      	bne.n	80041ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d10b      	bne.n	80041ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b2:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d064      	beq.n	8004288 <HAL_RCC_OscConfig+0x2f0>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d160      	bne.n	8004288 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e2c4      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x24a>
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e01d      	b.n	800421e <HAL_RCC_OscConfig+0x286>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ea:	d10c      	bne.n	8004206 <HAL_RCC_OscConfig+0x26e>
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e00b      	b.n	800421e <HAL_RCC_OscConfig+0x286>
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a06      	ldr	r2, [pc, #24]	; (8004230 <HAL_RCC_OscConfig+0x298>)
 8004218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01c      	beq.n	8004260 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd fdfb 	bl	8001e20 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422c:	e011      	b.n	8004252 <HAL_RCC_OscConfig+0x2ba>
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	08006e44 	.word	0x08006e44
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fd fdee 	bl	8001e20 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e280      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	4baf      	ldr	r3, [pc, #700]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x2a8>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fdde 	bl	8001e20 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd fdda 	bl	8001e20 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e26c      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427a:	4ba5      	ldr	r3, [pc, #660]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x2d0>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d060      	beq.n	8004358 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x310>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d116      	bne.n	80042d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	4b99      	ldr	r3, [pc, #612]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x328>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e249      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	4b93      	ldr	r3, [pc, #588]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	4990      	ldr	r1, [pc, #576]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d4:	e040      	b.n	8004358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d023      	beq.n	8004326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042de:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a8b      	ldr	r2, [pc, #556]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd fd99 	bl	8001e20 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fd fd95 	bl	8001e20 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e227      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004304:	4b82      	ldr	r3, [pc, #520]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b7f      	ldr	r3, [pc, #508]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	497c      	ldr	r1, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	e018      	b.n	8004358 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b7a      	ldr	r3, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a79      	ldr	r2, [pc, #484]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800432c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fd75 	bl	8001e20 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433a:	f7fd fd71 	bl	8001e20 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e203      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434c:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03c      	beq.n	80043de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436c:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004372:	4a67      	ldr	r2, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fd fd50 	bl	8001e20 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004384:	f7fd fd4c 	bl	8001e20 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1de      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004396:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ef      	beq.n	8004384 <HAL_RCC_OscConfig+0x3ec>
 80043a4:	e01b      	b.n	80043de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a6:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ac:	4a58      	ldr	r2, [pc, #352]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fd33 	bl	8001e20 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fd fd2f 	bl	8001e20 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1c1      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d0:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ef      	bne.n	80043be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80a6 	beq.w	8004538 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ec:	2300      	movs	r3, #0
 80043ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043f0:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a43      	ldr	r2, [pc, #268]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
 8004408:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d118      	bne.n	8004456 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004430:	f7fd fcf6 	bl	8001e20 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7fd fcf2 	bl	8001e20 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e184      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	4b32      	ldr	r3, [pc, #200]	; (8004514 <HAL_RCC_OscConfig+0x57c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d108      	bne.n	8004470 <HAL_RCC_OscConfig+0x4d8>
 800445e:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	4a2a      	ldr	r2, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800446e:	e024      	b.n	80044ba <HAL_RCC_OscConfig+0x522>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b05      	cmp	r3, #5
 8004476:	d110      	bne.n	800449a <HAL_RCC_OscConfig+0x502>
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	4a24      	ldr	r2, [pc, #144]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004498:	e00f      	b.n	80044ba <HAL_RCC_OscConfig+0x522>
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044b2:	f023 0304 	bic.w	r3, r3, #4
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd fcad 	bl	8001e20 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd fca9 	bl	8001e20 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e139      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x578>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ed      	beq.n	80044ca <HAL_RCC_OscConfig+0x532>
 80044ee:	e01a      	b.n	8004526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fc96 	bl	8001e20 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044f6:	e00f      	b.n	8004518 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd fc92 	bl	8001e20 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d906      	bls.n	8004518 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e122      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004518:	4b90      	ldr	r3, [pc, #576]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e8      	bne.n	80044f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	4b8b      	ldr	r3, [pc, #556]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a8a      	ldr	r2, [pc, #552]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8108 	beq.w	8004752 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b02      	cmp	r3, #2
 8004548:	f040 80d0 	bne.w	80046ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800454c:	4b83      	ldr	r3, [pc, #524]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0203 	and.w	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	429a      	cmp	r2, r3
 800455e:	d130      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	3b01      	subs	r3, #1
 800456c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d127      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d11f      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800458c:	2a07      	cmp	r2, #7
 800458e:	bf14      	ite	ne
 8004590:	2201      	movne	r2, #1
 8004592:	2200      	moveq	r2, #0
 8004594:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004596:	4293      	cmp	r3, r2
 8004598:	d113      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	3b01      	subs	r3, #1
 80045a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d109      	bne.n	80045c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d06e      	beq.n	80046a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	d069      	beq.n	800469c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045c8:	4b64      	ldr	r3, [pc, #400]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045d4:	4b61      	ldr	r3, [pc, #388]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b7      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045e4:	4b5d      	ldr	r3, [pc, #372]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a5c      	ldr	r2, [pc, #368]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f0:	f7fd fc16 	bl	8001e20 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd fc12 	bl	8001e20 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0a4      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460a:	4b54      	ldr	r3, [pc, #336]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004616:	4b51      	ldr	r3, [pc, #324]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	4b51      	ldr	r3, [pc, #324]	; (8004760 <HAL_RCC_OscConfig+0x7c8>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004626:	3a01      	subs	r2, #1
 8004628:	0112      	lsls	r2, r2, #4
 800462a:	4311      	orrs	r1, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004630:	0212      	lsls	r2, r2, #8
 8004632:	4311      	orrs	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004638:	0852      	lsrs	r2, r2, #1
 800463a:	3a01      	subs	r2, #1
 800463c:	0552      	lsls	r2, r2, #21
 800463e:	4311      	orrs	r1, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004644:	0852      	lsrs	r2, r2, #1
 8004646:	3a01      	subs	r2, #1
 8004648:	0652      	lsls	r2, r2, #25
 800464a:	4311      	orrs	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004650:	0912      	lsrs	r2, r2, #4
 8004652:	0452      	lsls	r2, r2, #17
 8004654:	430a      	orrs	r2, r1
 8004656:	4941      	ldr	r1, [pc, #260]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004658:	4313      	orrs	r3, r2
 800465a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800465c:	4b3f      	ldr	r3, [pc, #252]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a3e      	ldr	r2, [pc, #248]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004666:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004668:	4b3c      	ldr	r3, [pc, #240]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a3b      	ldr	r2, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004674:	f7fd fbd4 	bl	8001e20 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fd fbd0 	bl	8001e20 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e062      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468e:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800469a:	e05a      	b.n	8004752 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e059      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a0:	4b2e      	ldr	r3, [pc, #184]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d152      	bne.n	8004752 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b8:	4b28      	ldr	r3, [pc, #160]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a27      	ldr	r2, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046c4:	f7fd fbac 	bl	8001e20 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd fba8 	bl	8001e20 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e03a      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x734>
 80046ea:	e032      	b.n	8004752 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d02d      	beq.n	800474e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4a13      	ldr	r2, [pc, #76]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004710:	f023 0303 	bic.w	r3, r3, #3
 8004714:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 800471c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004724:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd fb7b 	bl	8001e20 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472e:	f7fd fb77 	bl	8001e20 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e009      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_OscConfig+0x7c4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x796>
 800474c:	e001      	b.n	8004752 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	f99d808c 	.word	0xf99d808c

08004764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0c8      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b66      	ldr	r3, [pc, #408]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d910      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b63      	ldr	r3, [pc, #396]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 0207 	bic.w	r2, r3, #7
 800478e:	4961      	ldr	r1, [pc, #388]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b5f      	ldr	r3, [pc, #380]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b0      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d04c      	beq.n	800484e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047bc:	4b56      	ldr	r3, [pc, #344]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d121      	bne.n	800480c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e09e      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d4:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d115      	bne.n	800480c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e092      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ec:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e086      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047fc:	4b46      	ldr	r3, [pc, #280]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e07e      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 0203 	bic.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	493f      	ldr	r1, [pc, #252]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481e:	f7fd faff 	bl	8001e20 <HAL_GetTick>
 8004822:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004824:	e00a      	b.n	800483c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004826:	f7fd fafb 	bl	8001e20 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e066      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 020c 	and.w	r2, r3, #12
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	429a      	cmp	r2, r3
 800484c:	d1eb      	bne.n	8004826 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485a:	4b2f      	ldr	r3, [pc, #188]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	492c      	ldr	r1, [pc, #176]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d210      	bcs.n	800489c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b26      	ldr	r3, [pc, #152]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 0207 	bic.w	r2, r3, #7
 8004882:	4924      	ldr	r1, [pc, #144]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_RCC_ClockConfig+0x1b0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e036      	b.n	800490a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4918      	ldr	r1, [pc, #96]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4910      	ldr	r1, [pc, #64]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048da:	f000 f825 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048de:	4601      	mov	r1, r0
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <HAL_RCC_ClockConfig+0x1b4>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	5cd3      	ldrb	r3, [r2, r3]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	fa21 f303 	lsr.w	r3, r1, r3
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fa3e 	bl	8001d80 <HAL_InitTick>
 8004904:	4603      	mov	r3, r0
 8004906:	72fb      	strb	r3, [r7, #11]

  return status;
 8004908:	7afb      	ldrb	r3, [r7, #11]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40022000 	.word	0x40022000
 8004918:	40021000 	.word	0x40021000
 800491c:	08006e44 	.word	0x08006e44
 8004920:	20000000 	.word	0x20000000
 8004924:	20000004 	.word	0x20000004

08004928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004936:	4b3d      	ldr	r3, [pc, #244]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004940:	4b3a      	ldr	r3, [pc, #232]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x34>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d121      	bne.n	800499a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d11e      	bne.n	800499a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800495c:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004968:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e005      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004978:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004984:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10d      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d102      	bne.n	80049a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e004      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d133      	bne.n	8004a1e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049b6:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0xa4>
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d003      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0xaa>
 80049ca:	e005      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ce:	617b      	str	r3, [r7, #20]
      break;
 80049d0:	e005      	b.n	80049de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80049d4:	617b      	str	r3, [r7, #20]
      break;
 80049d6:	e002      	b.n	80049de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	617b      	str	r3, [r7, #20]
      break;
 80049dc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	3301      	adds	r3, #1
 80049ea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	fb02 f203 	mul.w	r2, r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x104>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	0e5b      	lsrs	r3, r3, #25
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3724      	adds	r7, #36	; 0x24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	08006e5c 	.word	0x08006e5c
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	007a1200 	.word	0x007a1200

08004a3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000000 	.word	0x20000000

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a58:	f7ff fff0 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a5c:	4601      	mov	r1, r0
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a6a:	5cd3      	ldrb	r3, [r2, r3]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	08006e54 	.word	0x08006e54

08004a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a84:	f7ff ffda 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0adb      	lsrs	r3, r3, #11
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08006e54 	.word	0x08006e54

08004aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ac4:	f7ff fa04 	bl	8003ed0 <HAL_PWREx_GetVoltageRange>
 8004ac8:	6178      	str	r0, [r7, #20]
 8004aca:	e014      	b.n	8004af6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ae4:	f7ff f9f4 	bl	8003ed0 <HAL_PWREx_GetVoltageRange>
 8004ae8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d10b      	bne.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d919      	bls.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2ba0      	cmp	r3, #160	; 0xa0
 8004b08:	d902      	bls.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e013      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b10:	2301      	movs	r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e010      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d902      	bls.n	8004b22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e00a      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d102      	bne.n	8004b2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b28:	2302      	movs	r3, #2
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	e004      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d101      	bne.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b34:	2301      	movs	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 0207 	bic.w	r2, r3, #7
 8004b40:	4909      	ldr	r1, [pc, #36]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d001      	beq.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40022000 	.word	0x40022000

08004b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b74:	2300      	movs	r3, #0
 8004b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d03f      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b90:	d01c      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b96:	d802      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00e      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b9c:	e01f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004b9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ba2:	d003      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ba4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ba8:	d01c      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004baa:	e018      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bac:	4b85      	ldr	r3, [pc, #532]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a84      	ldr	r2, [pc, #528]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bb8:	e015      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fab9 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bca:	e00c      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3320      	adds	r3, #32
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fba0 	bl	8005318 <RCCEx_PLLSAI2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bdc:	e003      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	74fb      	strb	r3, [r7, #19]
      break;
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bec:	4b75      	ldr	r3, [pc, #468]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfa:	4972      	ldr	r1, [pc, #456]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c02:	e001      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03f      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c1c:	d01c      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c22:	d802      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004c28:	e01f      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c2e:	d003      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c34:	d01c      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004c36:	e018      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c38:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a61      	ldr	r2, [pc, #388]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c44:	e015      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fa73 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c56:	e00c      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3320      	adds	r3, #32
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb5a 	bl	8005318 <RCCEx_PLLSAI2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c6e:	e000      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c72:	7cfb      	ldrb	r3, [r7, #19]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c78:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c86:	494f      	ldr	r1, [pc, #316]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c8e:	e001      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a0 	beq.w	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	4a40      	ldr	r2, [pc, #256]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc8:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd f89c 	bl	8001e20 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cea:	e009      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cec:	f7fd f898 	bl	8001e20 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d902      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	74fb      	strb	r3, [r7, #19]
        break;
 8004cfe:	e005      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ef      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d15c      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d12:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01f      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d019      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fd f857 	bl	8001e20 <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d74:	e00b      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fd f853 	bl	8001e20 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d902      	bls.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ec      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db2:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dba:	e009      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	74bb      	strb	r3, [r7, #18]
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd0:	7c7b      	ldrb	r3, [r7, #17]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd6:	4b9e      	ldr	r3, [pc, #632]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dda:	4a9d      	ldr	r2, [pc, #628]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dee:	4b98      	ldr	r3, [pc, #608]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	f023 0203 	bic.w	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	4994      	ldr	r1, [pc, #592]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e10:	4b8f      	ldr	r3, [pc, #572]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 020c 	bic.w	r2, r3, #12
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	498c      	ldr	r1, [pc, #560]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e32:	4b87      	ldr	r3, [pc, #540]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	4983      	ldr	r1, [pc, #524]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e54:	4b7e      	ldr	r3, [pc, #504]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	497b      	ldr	r1, [pc, #492]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e76:	4b76      	ldr	r3, [pc, #472]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	4972      	ldr	r1, [pc, #456]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e98:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	496a      	ldr	r1, [pc, #424]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eba:	4b65      	ldr	r3, [pc, #404]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	4961      	ldr	r1, [pc, #388]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004edc:	4b5c      	ldr	r3, [pc, #368]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eea:	4959      	ldr	r1, [pc, #356]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efe:	4b54      	ldr	r3, [pc, #336]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	4950      	ldr	r1, [pc, #320]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f20:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	4948      	ldr	r1, [pc, #288]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f42:	4b43      	ldr	r3, [pc, #268]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f50:	493f      	ldr	r1, [pc, #252]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d028      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f72:	4937      	ldr	r1, [pc, #220]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f82:	d106      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a31      	ldr	r2, [pc, #196]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8e:	60d3      	str	r3, [r2, #12]
 8004f90:	e011      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f8c8 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d028      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fc2:	4b23      	ldr	r3, [pc, #140]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	491f      	ldr	r1, [pc, #124]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fec:	60d3      	str	r3, [r2, #12]
 8004fee:	e011      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2101      	movs	r1, #1
 8005000:	4618      	mov	r0, r3
 8005002:	f000 f899 	bl	8005138 <RCCEx_PLLSAI1_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800500a:	7cfb      	ldrb	r3, [r7, #19]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02b      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503e:	d109      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a02      	ldr	r2, [pc, #8]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800504a:	60d3      	str	r3, [r2, #12]
 800504c:	e014      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	2101      	movs	r1, #1
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f867 	bl	8005138 <RCCEx_PLLSAI1_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506e:	7cfb      	ldrb	r3, [r7, #19]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02f      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005084:	4b2b      	ldr	r3, [pc, #172]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	4928      	ldr	r1, [pc, #160]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050a2:	d10d      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f844 	bl	8005138 <RCCEx_PLLSAI1_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d014      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
 80050be:	e011      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3320      	adds	r3, #32
 80050ce:	2102      	movs	r1, #2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 f921 	bl	8005318 <RCCEx_PLLSAI2_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050f0:	4b10      	ldr	r3, [pc, #64]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fe:	490d      	ldr	r1, [pc, #52]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005122:	4904      	ldr	r1, [pc, #16]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800512a:	7cbb      	ldrb	r3, [r7, #18]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40021000 	.word	0x40021000

08005138 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005146:	4b73      	ldr	r3, [pc, #460]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d018      	beq.n	8005184 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005152:	4b70      	ldr	r3, [pc, #448]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0203 	and.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d10d      	bne.n	800517e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
       ||
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800516a:	4b6a      	ldr	r3, [pc, #424]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
       ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d044      	beq.n	8005208 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	e041      	b.n	8005208 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d00c      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x6e>
 800518c:	2b03      	cmp	r3, #3
 800518e:	d013      	beq.n	80051b8 <RCCEx_PLLSAI1_Config+0x80>
 8005190:	2b01      	cmp	r3, #1
 8005192:	d120      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005194:	4b5f      	ldr	r3, [pc, #380]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11d      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a4:	e01a      	b.n	80051dc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a6:	4b5b      	ldr	r3, [pc, #364]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b6:	e013      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b8:	4b56      	ldr	r3, [pc, #344]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c4:	4b53      	ldr	r3, [pc, #332]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d4:	e006      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      break;
 80051da:	e004      	b.n	80051e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80051dc:	bf00      	nop
 80051de:	e002      	b.n	80051e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80051e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10d      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ec:	4b49      	ldr	r3, [pc, #292]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	430b      	orrs	r3, r1
 8005202:	4944      	ldr	r1, [pc, #272]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d17d      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800520e:	4b41      	ldr	r3, [pc, #260]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a40      	ldr	r2, [pc, #256]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521a:	f7fc fe01 	bl	8001e20 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005220:	e009      	b.n	8005236 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005222:	f7fc fdfd 	bl	8001e20 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d902      	bls.n	8005236 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	73fb      	strb	r3, [r7, #15]
        break;
 8005234:	e005      	b.n	8005242 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005236:	4b37      	ldr	r3, [pc, #220]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1ef      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d160      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d111      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800524e:	4b31      	ldr	r3, [pc, #196]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	0211      	lsls	r1, r2, #8
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68d2      	ldr	r2, [r2, #12]
 8005264:	0912      	lsrs	r2, r2, #4
 8005266:	0452      	lsls	r2, r2, #17
 8005268:	430a      	orrs	r2, r1
 800526a:	492a      	ldr	r1, [pc, #168]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
 8005270:	e027      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d112      	bne.n	800529e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005278:	4b26      	ldr	r3, [pc, #152]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005280:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6892      	ldr	r2, [r2, #8]
 8005288:	0211      	lsls	r1, r2, #8
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6912      	ldr	r2, [r2, #16]
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	3a01      	subs	r2, #1
 8005292:	0552      	lsls	r2, r2, #21
 8005294:	430a      	orrs	r2, r1
 8005296:	491f      	ldr	r1, [pc, #124]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
 800529c:	e011      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6892      	ldr	r2, [r2, #8]
 80052ae:	0211      	lsls	r1, r2, #8
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6952      	ldr	r2, [r2, #20]
 80052b4:	0852      	lsrs	r2, r2, #1
 80052b6:	3a01      	subs	r2, #1
 80052b8:	0652      	lsls	r2, r2, #25
 80052ba:	430a      	orrs	r2, r1
 80052bc:	4915      	ldr	r1, [pc, #84]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ce:	f7fc fda7 	bl	8001e20 <HAL_GetTick>
 80052d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d4:	e009      	b.n	80052ea <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d6:	f7fc fda3 	bl	8001e20 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d902      	bls.n	80052ea <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	73fb      	strb	r3, [r7, #15]
          break;
 80052e8:	e005      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ef      	beq.n	80052d6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005306:	4313      	orrs	r3, r2
 8005308:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000

08005318 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005326:	4b68      	ldr	r3, [pc, #416]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d018      	beq.n	8005364 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005332:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d10d      	bne.n	800535e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
       ||
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800534a:	4b5f      	ldr	r3, [pc, #380]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
       ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d044      	beq.n	80053e8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	e041      	b.n	80053e8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d00c      	beq.n	8005386 <RCCEx_PLLSAI2_Config+0x6e>
 800536c:	2b03      	cmp	r3, #3
 800536e:	d013      	beq.n	8005398 <RCCEx_PLLSAI2_Config+0x80>
 8005370:	2b01      	cmp	r3, #1
 8005372:	d120      	bne.n	80053b6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005374:	4b54      	ldr	r3, [pc, #336]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11d      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005384:	e01a      	b.n	80053bc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005386:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538e:	2b00      	cmp	r3, #0
 8005390:	d116      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005396:	e013      	b.n	80053c0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005398:	4b4b      	ldr	r3, [pc, #300]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a4:	4b48      	ldr	r3, [pc, #288]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b4:	e006      	b.n	80053c4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ba:	e004      	b.n	80053c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80053c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10d      	bne.n	80053e8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053cc:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	3b01      	subs	r3, #1
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	430b      	orrs	r3, r1
 80053e2:	4939      	ldr	r1, [pc, #228]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d167      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fa:	f7fc fd11 	bl	8001e20 <HAL_GetTick>
 80053fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005400:	e009      	b.n	8005416 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005402:	f7fc fd0d 	bl	8001e20 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d902      	bls.n	8005416 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	73fb      	strb	r3, [r7, #15]
        break;
 8005414:	e005      	b.n	8005422 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005416:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1ef      	bne.n	8005402 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d14a      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d111      	bne.n	8005452 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800542e:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6892      	ldr	r2, [r2, #8]
 800543e:	0211      	lsls	r1, r2, #8
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68d2      	ldr	r2, [r2, #12]
 8005444:	0912      	lsrs	r2, r2, #4
 8005446:	0452      	lsls	r2, r2, #17
 8005448:	430a      	orrs	r2, r1
 800544a:	491f      	ldr	r1, [pc, #124]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800544c:	4313      	orrs	r3, r2
 800544e:	614b      	str	r3, [r1, #20]
 8005450:	e011      	b.n	8005476 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800545a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6892      	ldr	r2, [r2, #8]
 8005462:	0211      	lsls	r1, r2, #8
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6912      	ldr	r2, [r2, #16]
 8005468:	0852      	lsrs	r2, r2, #1
 800546a:	3a01      	subs	r2, #1
 800546c:	0652      	lsls	r2, r2, #25
 800546e:	430a      	orrs	r2, r1
 8005470:	4915      	ldr	r1, [pc, #84]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005472:	4313      	orrs	r3, r2
 8005474:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005482:	f7fc fccd 	bl	8001e20 <HAL_GetTick>
 8005486:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005488:	e009      	b.n	800549e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800548a:	f7fc fcc9 	bl	8001e20 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d902      	bls.n	800549e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	73fb      	strb	r3, [r7, #15]
          break;
 800549c:	e005      	b.n	80054aa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ef      	beq.n	800548a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000

080054cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e095      	b.n	800560a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ee:	d009      	beq.n	8005504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
 80054f6:	e005      	b.n	8005504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc fa72 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005544:	d902      	bls.n	800554c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e002      	b.n	8005552 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800554c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005550:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800555a:	d007      	beq.n	800556c <HAL_SPI_Init+0xa0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005564:	d002      	beq.n	800556c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ae:	ea42 0103 	orr.w	r1, r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 0204 	and.w	r2, r3, #4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055e8:	ea42 0103 	orr.w	r1, r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b088      	sub	sp, #32
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_SPI_Transmit+0x22>
 8005630:	2302      	movs	r3, #2
 8005632:	e158      	b.n	80058e6 <HAL_SPI_Transmit+0x2d4>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800563c:	f7fc fbf0 	bl	8001e20 <HAL_GetTick>
 8005640:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	d002      	beq.n	8005658 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005656:	e13d      	b.n	80058d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_Transmit+0x52>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005668:	e134      	b.n	80058d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	d10f      	bne.n	80056d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d007      	beq.n	80056f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056fc:	d94b      	bls.n	8005796 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_SPI_Transmit+0xfa>
 8005706:	8afb      	ldrh	r3, [r7, #22]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d13e      	bne.n	800578a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	1c9a      	adds	r2, r3, #2
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005730:	e02b      	b.n	800578a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d112      	bne.n	8005766 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	1c9a      	adds	r2, r3, #2
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005764:	e011      	b.n	800578a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005766:	f7fc fb5b 	bl	8001e20 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d803      	bhi.n	800577e <HAL_SPI_Transmit+0x16c>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d102      	bne.n	8005784 <HAL_SPI_Transmit+0x172>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005788:	e0a4      	b.n	80058d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1ce      	bne.n	8005732 <HAL_SPI_Transmit+0x120>
 8005794:	e07c      	b.n	8005890 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Transmit+0x192>
 800579e:	8afb      	ldrh	r3, [r7, #22]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d170      	bne.n	8005886 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d912      	bls.n	80057d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b02      	subs	r3, #2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d2:	e058      	b.n	8005886 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	7812      	ldrb	r2, [r2, #0]
 80057e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80057fa:	e044      	b.n	8005886 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d12b      	bne.n	8005862 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d912      	bls.n	800583a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	1c9a      	adds	r2, r3, #2
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b02      	subs	r3, #2
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005838:	e025      	b.n	8005886 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	7812      	ldrb	r2, [r2, #0]
 8005846:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005860:	e011      	b.n	8005886 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005862:	f7fc fadd 	bl	8001e20 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d803      	bhi.n	800587a <HAL_SPI_Transmit+0x268>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d102      	bne.n	8005880 <HAL_SPI_Transmit+0x26e>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005884:	e026      	b.n	80058d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1b5      	bne.n	80057fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f941 	bl	8005b1c <SPI_EndRxTxTransaction>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	e000      	b.n	80058d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80058d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005900:	f7fc fa8e 	bl	8001e20 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	4413      	add	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005910:	f7fc fa86 	bl	8001e20 <HAL_GetTick>
 8005914:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	015b      	lsls	r3, r3, #5
 800591c:	0d1b      	lsrs	r3, r3, #20
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	fb02 f303 	mul.w	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005926:	e054      	b.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d050      	beq.n	80059d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005930:	f7fc fa76 	bl	8001e20 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	429a      	cmp	r2, r3
 800593e:	d902      	bls.n	8005946 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d13d      	bne.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005954:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595e:	d111      	bne.n	8005984 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005968:	d004      	beq.n	8005974 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005972:	d107      	bne.n	8005984 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598c:	d10f      	bne.n	80059ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e017      	b.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d19b      	bne.n	8005928 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000000 	.word	0x20000000

08005a00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a0e:	f7fc fa07 	bl	8001e20 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a1e:	f7fc f9ff 	bl	8001e20 <HAL_GetTick>
 8005a22:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a24:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	0d1b      	lsrs	r3, r3, #20
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a3c:	e05f      	b.n	8005afe <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a44:	d106      	bne.n	8005a54 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d050      	beq.n	8005afe <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a5c:	f7fc f9e0 	bl	8001e20 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d902      	bls.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x72>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d13d      	bne.n	8005aee <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8a:	d111      	bne.n	8005ab0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a94:	d004      	beq.n	8005aa0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9e:	d107      	bne.n	8005ab0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab8:	d10f      	bne.n	8005ada <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e010      	b.n	8005b10 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4013      	ands	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d197      	bne.n	8005a3e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000000 	.word	0x20000000

08005b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ff63 	bl	8005a00 <SPI_WaitFifoStateUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e027      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff fec8 	bl	80058f0 <SPI_WaitFlagStateUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e014      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff ff3c 	bl	8005a00 <SPI_WaitFifoStateUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	f043 0220 	orr.w	r2, r3, #32
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e000      	b.n	8005ba0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e040      	b.n	8005c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fb ff7c 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8c0 	bl	8005d6c <UART_SetConfig>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e022      	b.n	8005c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fb3e 	bl	8006280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fbc5 	bl	80063c4 <UART_CheckIdleState>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	f040 8081 	bne.w	8005d60 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_UART_Transmit+0x26>
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e079      	b.n	8005d62 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_UART_Transmit+0x38>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e072      	b.n	8005d62 <HAL_UART_Transmit+0x11e>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2221      	movs	r2, #33	; 0x21
 8005c8e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c90:	f7fc f8c6 	bl	8001e20 <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d108      	bne.n	8005cc2 <HAL_UART_Transmit+0x7e>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e003      	b.n	8005cca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005cd2:	e02d      	b.n	8005d30 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2180      	movs	r1, #128	; 0x80
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fbb5 	bl	800644e <UART_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e039      	b.n	8005d62 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	881a      	ldrh	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d00:	b292      	uxth	r2, r2
 8005d02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	3302      	adds	r3, #2
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e008      	b.n	8005d1e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	b292      	uxth	r2, r2
 8005d16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1cb      	bne.n	8005cd4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2140      	movs	r1, #64	; 0x40
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fb81 	bl	800644e <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e005      	b.n	8005d62 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d70:	b088      	sub	sp, #32
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4bac      	ldr	r3, [pc, #688]	; (800604c <UART_SetConfig+0x2e0>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	69f9      	ldr	r1, [r7, #28]
 8005da2:	430b      	orrs	r3, r1
 8005da4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4aa2      	ldr	r2, [pc, #648]	; (8006050 <UART_SetConfig+0x2e4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a99      	ldr	r2, [pc, #612]	; (8006054 <UART_SetConfig+0x2e8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d121      	bne.n	8005e38 <UART_SetConfig+0xcc>
 8005df4:	4b98      	ldr	r3, [pc, #608]	; (8006058 <UART_SetConfig+0x2ec>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d816      	bhi.n	8005e30 <UART_SetConfig+0xc4>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x9c>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e1f 	.word	0x08005e1f
 8005e14:	08005e2b 	.word	0x08005e2b
 8005e18:	2301      	movs	r3, #1
 8005e1a:	76fb      	strb	r3, [r7, #27]
 8005e1c:	e0e8      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	76fb      	strb	r3, [r7, #27]
 8005e22:	e0e5      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e24:	2304      	movs	r3, #4
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e0e2      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e0df      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e30:	2310      	movs	r3, #16
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	bf00      	nop
 8005e36:	e0db      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a87      	ldr	r2, [pc, #540]	; (800605c <UART_SetConfig+0x2f0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d134      	bne.n	8005eac <UART_SetConfig+0x140>
 8005e42:	4b85      	ldr	r3, [pc, #532]	; (8006058 <UART_SetConfig+0x2ec>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f003 030c 	and.w	r3, r3, #12
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d829      	bhi.n	8005ea4 <UART_SetConfig+0x138>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0xec>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e8d 	.word	0x08005e8d
 8005e5c:	08005ea5 	.word	0x08005ea5
 8005e60:	08005ea5 	.word	0x08005ea5
 8005e64:	08005ea5 	.word	0x08005ea5
 8005e68:	08005e99 	.word	0x08005e99
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005e93 	.word	0x08005e93
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ea5 	.word	0x08005ea5
 8005e88:	08005e9f 	.word	0x08005e9f
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	76fb      	strb	r3, [r7, #27]
 8005e90:	e0ae      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e92:	2302      	movs	r3, #2
 8005e94:	76fb      	strb	r3, [r7, #27]
 8005e96:	e0ab      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	76fb      	strb	r3, [r7, #27]
 8005e9c:	e0a8      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	76fb      	strb	r3, [r7, #27]
 8005ea2:	e0a5      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	76fb      	strb	r3, [r7, #27]
 8005ea8:	bf00      	nop
 8005eaa:	e0a1      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a6b      	ldr	r2, [pc, #428]	; (8006060 <UART_SetConfig+0x2f4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d120      	bne.n	8005ef8 <UART_SetConfig+0x18c>
 8005eb6:	4b68      	ldr	r3, [pc, #416]	; (8006058 <UART_SetConfig+0x2ec>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d00f      	beq.n	8005ee4 <UART_SetConfig+0x178>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d802      	bhi.n	8005ece <UART_SetConfig+0x162>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <UART_SetConfig+0x16c>
 8005ecc:	e010      	b.n	8005ef0 <UART_SetConfig+0x184>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d005      	beq.n	8005ede <UART_SetConfig+0x172>
 8005ed2:	2b30      	cmp	r3, #48	; 0x30
 8005ed4:	d009      	beq.n	8005eea <UART_SetConfig+0x17e>
 8005ed6:	e00b      	b.n	8005ef0 <UART_SetConfig+0x184>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	76fb      	strb	r3, [r7, #27]
 8005edc:	e088      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	76fb      	strb	r3, [r7, #27]
 8005ee2:	e085      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	76fb      	strb	r3, [r7, #27]
 8005ee8:	e082      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005eea:	2308      	movs	r3, #8
 8005eec:	76fb      	strb	r3, [r7, #27]
 8005eee:	e07f      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	76fb      	strb	r3, [r7, #27]
 8005ef4:	bf00      	nop
 8005ef6:	e07b      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a59      	ldr	r2, [pc, #356]	; (8006064 <UART_SetConfig+0x2f8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d120      	bne.n	8005f44 <UART_SetConfig+0x1d8>
 8005f02:	4b55      	ldr	r3, [pc, #340]	; (8006058 <UART_SetConfig+0x2ec>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d00f      	beq.n	8005f30 <UART_SetConfig+0x1c4>
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d802      	bhi.n	8005f1a <UART_SetConfig+0x1ae>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <UART_SetConfig+0x1b8>
 8005f18:	e010      	b.n	8005f3c <UART_SetConfig+0x1d0>
 8005f1a:	2b80      	cmp	r3, #128	; 0x80
 8005f1c:	d005      	beq.n	8005f2a <UART_SetConfig+0x1be>
 8005f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f20:	d009      	beq.n	8005f36 <UART_SetConfig+0x1ca>
 8005f22:	e00b      	b.n	8005f3c <UART_SetConfig+0x1d0>
 8005f24:	2300      	movs	r3, #0
 8005f26:	76fb      	strb	r3, [r7, #27]
 8005f28:	e062      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	76fb      	strb	r3, [r7, #27]
 8005f2e:	e05f      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f30:	2304      	movs	r3, #4
 8005f32:	76fb      	strb	r3, [r7, #27]
 8005f34:	e05c      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f36:	2308      	movs	r3, #8
 8005f38:	76fb      	strb	r3, [r7, #27]
 8005f3a:	e059      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	76fb      	strb	r3, [r7, #27]
 8005f40:	bf00      	nop
 8005f42:	e055      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a47      	ldr	r2, [pc, #284]	; (8006068 <UART_SetConfig+0x2fc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d124      	bne.n	8005f98 <UART_SetConfig+0x22c>
 8005f4e:	4b42      	ldr	r3, [pc, #264]	; (8006058 <UART_SetConfig+0x2ec>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	d012      	beq.n	8005f84 <UART_SetConfig+0x218>
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f62:	d802      	bhi.n	8005f6a <UART_SetConfig+0x1fe>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <UART_SetConfig+0x20c>
 8005f68:	e012      	b.n	8005f90 <UART_SetConfig+0x224>
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6e:	d006      	beq.n	8005f7e <UART_SetConfig+0x212>
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f74:	d009      	beq.n	8005f8a <UART_SetConfig+0x21e>
 8005f76:	e00b      	b.n	8005f90 <UART_SetConfig+0x224>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	76fb      	strb	r3, [r7, #27]
 8005f7c:	e038      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	76fb      	strb	r3, [r7, #27]
 8005f82:	e035      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f84:	2304      	movs	r3, #4
 8005f86:	76fb      	strb	r3, [r7, #27]
 8005f88:	e032      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	76fb      	strb	r3, [r7, #27]
 8005f8e:	e02f      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f90:	2310      	movs	r3, #16
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	bf00      	nop
 8005f96:	e02b      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <UART_SetConfig+0x2e4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d124      	bne.n	8005fec <UART_SetConfig+0x280>
 8005fa2:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <UART_SetConfig+0x2ec>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d012      	beq.n	8005fd8 <UART_SetConfig+0x26c>
 8005fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb6:	d802      	bhi.n	8005fbe <UART_SetConfig+0x252>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <UART_SetConfig+0x260>
 8005fbc:	e012      	b.n	8005fe4 <UART_SetConfig+0x278>
 8005fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc2:	d006      	beq.n	8005fd2 <UART_SetConfig+0x266>
 8005fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc8:	d009      	beq.n	8005fde <UART_SetConfig+0x272>
 8005fca:	e00b      	b.n	8005fe4 <UART_SetConfig+0x278>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	76fb      	strb	r3, [r7, #27]
 8005fd0:	e00e      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	76fb      	strb	r3, [r7, #27]
 8005fd6:	e00b      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	76fb      	strb	r3, [r7, #27]
 8005fdc:	e008      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	76fb      	strb	r3, [r7, #27]
 8005fe2:	e005      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	76fb      	strb	r3, [r7, #27]
 8005fe8:	bf00      	nop
 8005fea:	e001      	b.n	8005ff0 <UART_SetConfig+0x284>
 8005fec:	2310      	movs	r3, #16
 8005fee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <UART_SetConfig+0x2e4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	f040 8087 	bne.w	800610a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ffc:	7efb      	ldrb	r3, [r7, #27]
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d836      	bhi.n	8006070 <UART_SetConfig+0x304>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x29c>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006071 	.word	0x08006071
 8006010:	08006035 	.word	0x08006035
 8006014:	08006071 	.word	0x08006071
 8006018:	0800603b 	.word	0x0800603b
 800601c:	08006071 	.word	0x08006071
 8006020:	08006071 	.word	0x08006071
 8006024:	08006071 	.word	0x08006071
 8006028:	08006043 	.word	0x08006043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fe fd12 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006030:	6178      	str	r0, [r7, #20]
        break;
 8006032:	e022      	b.n	800607a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006034:	4b0d      	ldr	r3, [pc, #52]	; (800606c <UART_SetConfig+0x300>)
 8006036:	617b      	str	r3, [r7, #20]
        break;
 8006038:	e01f      	b.n	800607a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fe fc75 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 800603e:	6178      	str	r0, [r7, #20]
        break;
 8006040:	e01b      	b.n	800607a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006046:	617b      	str	r3, [r7, #20]
        break;
 8006048:	e017      	b.n	800607a <UART_SetConfig+0x30e>
 800604a:	bf00      	nop
 800604c:	efff69f3 	.word	0xefff69f3
 8006050:	40008000 	.word	0x40008000
 8006054:	40013800 	.word	0x40013800
 8006058:	40021000 	.word	0x40021000
 800605c:	40004400 	.word	0x40004400
 8006060:	40004800 	.word	0x40004800
 8006064:	40004c00 	.word	0x40004c00
 8006068:	40005000 	.word	0x40005000
 800606c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	76bb      	strb	r3, [r7, #26]
        break;
 8006078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80f1 	beq.w	8006264 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	4413      	add	r3, r2
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	429a      	cmp	r2, r3
 8006090:	d305      	bcc.n	800609e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	429a      	cmp	r2, r3
 800609c:	d902      	bls.n	80060a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	76bb      	strb	r3, [r7, #26]
 80060a2:	e0df      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4619      	mov	r1, r3
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	f04f 0400 	mov.w	r4, #0
 80060b4:	0214      	lsls	r4, r2, #8
 80060b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80060ba:	020b      	lsls	r3, r1, #8
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6852      	ldr	r2, [r2, #4]
 80060c0:	0852      	lsrs	r2, r2, #1
 80060c2:	4611      	mov	r1, r2
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	eb13 0b01 	adds.w	fp, r3, r1
 80060cc:	eb44 0c02 	adc.w	ip, r4, r2
 80060d0:	4658      	mov	r0, fp
 80060d2:	4661      	mov	r1, ip
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	461a      	mov	r2, r3
 80060de:	4623      	mov	r3, r4
 80060e0:	f7fa fd6c 	bl	8000bbc <__aeabi_uldivmod>
 80060e4:	4603      	mov	r3, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f0:	d308      	bcc.n	8006104 <UART_SetConfig+0x398>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f8:	d204      	bcs.n	8006104 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	e0af      	b.n	8006264 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	76bb      	strb	r3, [r7, #26]
 8006108:	e0ac      	b.n	8006264 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006112:	d15b      	bne.n	80061cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006114:	7efb      	ldrb	r3, [r7, #27]
 8006116:	2b08      	cmp	r3, #8
 8006118:	d827      	bhi.n	800616a <UART_SetConfig+0x3fe>
 800611a:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x3b4>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006145 	.word	0x08006145
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006155 	.word	0x08006155
 800612c:	0800616b 	.word	0x0800616b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800616b 	.word	0x0800616b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fe fc86 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006148:	6178      	str	r0, [r7, #20]
        break;
 800614a:	e013      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe fc98 	bl	8004a80 <HAL_RCC_GetPCLK2Freq>
 8006150:	6178      	str	r0, [r7, #20]
        break;
 8006152:	e00f      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b49      	ldr	r3, [pc, #292]	; (800627c <UART_SetConfig+0x510>)
 8006156:	617b      	str	r3, [r7, #20]
        break;
 8006158:	e00c      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fe fbe5 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 800615e:	6178      	str	r0, [r7, #20]
        break;
 8006160:	e008      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	617b      	str	r3, [r7, #20]
        break;
 8006168:	e004      	b.n	8006174 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	76bb      	strb	r3, [r7, #26]
        break;
 8006172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d074      	beq.n	8006264 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	005a      	lsls	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	b29b      	uxth	r3, r3
 8006190:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d916      	bls.n	80061c6 <UART_SetConfig+0x45a>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619e:	d212      	bcs.n	80061c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f023 030f 	bic.w	r3, r3, #15
 80061a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	89fb      	ldrh	r3, [r7, #14]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	89fa      	ldrh	r2, [r7, #14]
 80061c2:	60da      	str	r2, [r3, #12]
 80061c4:	e04e      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	76bb      	strb	r3, [r7, #26]
 80061ca:	e04b      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061cc:	7efb      	ldrb	r3, [r7, #27]
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d827      	bhi.n	8006222 <UART_SetConfig+0x4b6>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0x46c>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006205 	.word	0x08006205
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	08006223 	.word	0x08006223
 80061e8:	08006213 	.word	0x08006213
 80061ec:	08006223 	.word	0x08006223
 80061f0:	08006223 	.word	0x08006223
 80061f4:	08006223 	.word	0x08006223
 80061f8:	0800621b 	.word	0x0800621b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fe fc2a 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006200:	6178      	str	r0, [r7, #20]
        break;
 8006202:	e013      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006204:	f7fe fc3c 	bl	8004a80 <HAL_RCC_GetPCLK2Freq>
 8006208:	6178      	str	r0, [r7, #20]
        break;
 800620a:	e00f      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <UART_SetConfig+0x510>)
 800620e:	617b      	str	r3, [r7, #20]
        break;
 8006210:	e00c      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7fe fb89 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8006216:	6178      	str	r0, [r7, #20]
        break;
 8006218:	e008      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621e:	617b      	str	r3, [r7, #20]
        break;
 8006220:	e004      	b.n	800622c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	76bb      	strb	r3, [r7, #26]
        break;
 800622a:	bf00      	nop
    }

    if (pclk != 0U)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d018      	beq.n	8006264 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	085a      	lsrs	r2, r3, #1
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	441a      	add	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	b29b      	uxth	r3, r3
 8006246:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d908      	bls.n	8006260 <UART_SetConfig+0x4f4>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d204      	bcs.n	8006260 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	e001      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006270:	7ebb      	ldrb	r3, [r7, #26]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800627c:	00f42400 	.word	0x00f42400

08006280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637e:	d10a      	bne.n	8006396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80063d2:	f7fb fd25 	bl	8001e20 <HAL_GetTick>
 80063d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d10e      	bne.n	8006404 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f82a 	bl	800644e <UART_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e020      	b.n	8006446 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d10e      	bne.n	8006430 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f814 	bl	800644e <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e00a      	b.n	8006446 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	603b      	str	r3, [r7, #0]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645e:	e05d      	b.n	800651c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d059      	beq.n	800651c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006468:	f7fb fcda 	bl	8001e20 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	429a      	cmp	r2, r3
 8006476:	d302      	bcc.n	800647e <UART_WaitOnFlagUntilTimeout+0x30>
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d11b      	bne.n	80064b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800648c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e042      	b.n	800653c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02b      	beq.n	800651c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d2:	d123      	bne.n	800651c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064ec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e00f      	b.n	800653c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69da      	ldr	r2, [r3, #28]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	429a      	cmp	r2, r3
 8006538:	d092      	beq.n	8006460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	; (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	2000000c 	.word	0x2000000c

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4e0d      	ldr	r6, [pc, #52]	; (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	; (800658c <__libc_init_array+0x3c>)
 8006556:	1ba4      	subs	r4, r4, r6
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2500      	movs	r5, #0
 800655c:	42a5      	cmp	r5, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4e0b      	ldr	r6, [pc, #44]	; (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	; (8006594 <__libc_init_array+0x44>)
 8006564:	f000 fc26 	bl	8006db4 <_init>
 8006568:	1ba4      	subs	r4, r4, r6
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2500      	movs	r5, #0
 800656e:	42a5      	cmp	r5, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006578:	4798      	blx	r3
 800657a:	3501      	adds	r5, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006582:	4798      	blx	r3
 8006584:	3501      	adds	r5, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	08006ec8 	.word	0x08006ec8
 800658c:	08006ec8 	.word	0x08006ec8
 8006590:	08006ec8 	.word	0x08006ec8
 8006594:	08006ecc 	.word	0x08006ecc

08006598 <memset>:
 8006598:	4402      	add	r2, r0
 800659a:	4603      	mov	r3, r0
 800659c:	4293      	cmp	r3, r2
 800659e:	d100      	bne.n	80065a2 <memset+0xa>
 80065a0:	4770      	bx	lr
 80065a2:	f803 1b01 	strb.w	r1, [r3], #1
 80065a6:	e7f9      	b.n	800659c <memset+0x4>

080065a8 <siprintf>:
 80065a8:	b40e      	push	{r1, r2, r3}
 80065aa:	b500      	push	{lr}
 80065ac:	b09c      	sub	sp, #112	; 0x70
 80065ae:	ab1d      	add	r3, sp, #116	; 0x74
 80065b0:	9002      	str	r0, [sp, #8]
 80065b2:	9006      	str	r0, [sp, #24]
 80065b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065b8:	4809      	ldr	r0, [pc, #36]	; (80065e0 <siprintf+0x38>)
 80065ba:	9107      	str	r1, [sp, #28]
 80065bc:	9104      	str	r1, [sp, #16]
 80065be:	4909      	ldr	r1, [pc, #36]	; (80065e4 <siprintf+0x3c>)
 80065c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	6800      	ldr	r0, [r0, #0]
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	a902      	add	r1, sp, #8
 80065cc:	f000 f866 	bl	800669c <_svfiprintf_r>
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	b01c      	add	sp, #112	; 0x70
 80065d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065dc:	b003      	add	sp, #12
 80065de:	4770      	bx	lr
 80065e0:	2000000c 	.word	0x2000000c
 80065e4:	ffff0208 	.word	0xffff0208

080065e8 <__ssputs_r>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	688e      	ldr	r6, [r1, #8]
 80065ee:	429e      	cmp	r6, r3
 80065f0:	4682      	mov	sl, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4690      	mov	r8, r2
 80065f6:	4699      	mov	r9, r3
 80065f8:	d837      	bhi.n	800666a <__ssputs_r+0x82>
 80065fa:	898a      	ldrh	r2, [r1, #12]
 80065fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006600:	d031      	beq.n	8006666 <__ssputs_r+0x7e>
 8006602:	6825      	ldr	r5, [r4, #0]
 8006604:	6909      	ldr	r1, [r1, #16]
 8006606:	1a6f      	subs	r7, r5, r1
 8006608:	6965      	ldr	r5, [r4, #20]
 800660a:	2302      	movs	r3, #2
 800660c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006610:	fb95 f5f3 	sdiv	r5, r5, r3
 8006614:	f109 0301 	add.w	r3, r9, #1
 8006618:	443b      	add	r3, r7
 800661a:	429d      	cmp	r5, r3
 800661c:	bf38      	it	cc
 800661e:	461d      	movcc	r5, r3
 8006620:	0553      	lsls	r3, r2, #21
 8006622:	d530      	bpl.n	8006686 <__ssputs_r+0x9e>
 8006624:	4629      	mov	r1, r5
 8006626:	f000 fb2b 	bl	8006c80 <_malloc_r>
 800662a:	4606      	mov	r6, r0
 800662c:	b950      	cbnz	r0, 8006644 <__ssputs_r+0x5c>
 800662e:	230c      	movs	r3, #12
 8006630:	f8ca 3000 	str.w	r3, [sl]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	463a      	mov	r2, r7
 8006646:	6921      	ldr	r1, [r4, #16]
 8006648:	f000 faa8 	bl	8006b9c <memcpy>
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	6126      	str	r6, [r4, #16]
 800665a:	6165      	str	r5, [r4, #20]
 800665c:	443e      	add	r6, r7
 800665e:	1bed      	subs	r5, r5, r7
 8006660:	6026      	str	r6, [r4, #0]
 8006662:	60a5      	str	r5, [r4, #8]
 8006664:	464e      	mov	r6, r9
 8006666:	454e      	cmp	r6, r9
 8006668:	d900      	bls.n	800666c <__ssputs_r+0x84>
 800666a:	464e      	mov	r6, r9
 800666c:	4632      	mov	r2, r6
 800666e:	4641      	mov	r1, r8
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	f000 fa9e 	bl	8006bb2 <memmove>
 8006676:	68a3      	ldr	r3, [r4, #8]
 8006678:	1b9b      	subs	r3, r3, r6
 800667a:	60a3      	str	r3, [r4, #8]
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	441e      	add	r6, r3
 8006680:	6026      	str	r6, [r4, #0]
 8006682:	2000      	movs	r0, #0
 8006684:	e7dc      	b.n	8006640 <__ssputs_r+0x58>
 8006686:	462a      	mov	r2, r5
 8006688:	f000 fb54 	bl	8006d34 <_realloc_r>
 800668c:	4606      	mov	r6, r0
 800668e:	2800      	cmp	r0, #0
 8006690:	d1e2      	bne.n	8006658 <__ssputs_r+0x70>
 8006692:	6921      	ldr	r1, [r4, #16]
 8006694:	4650      	mov	r0, sl
 8006696:	f000 faa5 	bl	8006be4 <_free_r>
 800669a:	e7c8      	b.n	800662e <__ssputs_r+0x46>

0800669c <_svfiprintf_r>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	461d      	mov	r5, r3
 80066a2:	898b      	ldrh	r3, [r1, #12]
 80066a4:	061f      	lsls	r7, r3, #24
 80066a6:	b09d      	sub	sp, #116	; 0x74
 80066a8:	4680      	mov	r8, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4616      	mov	r6, r2
 80066ae:	d50f      	bpl.n	80066d0 <_svfiprintf_r+0x34>
 80066b0:	690b      	ldr	r3, [r1, #16]
 80066b2:	b96b      	cbnz	r3, 80066d0 <_svfiprintf_r+0x34>
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	f000 fae3 	bl	8006c80 <_malloc_r>
 80066ba:	6020      	str	r0, [r4, #0]
 80066bc:	6120      	str	r0, [r4, #16]
 80066be:	b928      	cbnz	r0, 80066cc <_svfiprintf_r+0x30>
 80066c0:	230c      	movs	r3, #12
 80066c2:	f8c8 3000 	str.w	r3, [r8]
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ca:	e0c8      	b.n	800685e <_svfiprintf_r+0x1c2>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	6163      	str	r3, [r4, #20]
 80066d0:	2300      	movs	r3, #0
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
 80066d4:	2320      	movs	r3, #32
 80066d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066da:	2330      	movs	r3, #48	; 0x30
 80066dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066e0:	9503      	str	r5, [sp, #12]
 80066e2:	f04f 0b01 	mov.w	fp, #1
 80066e6:	4637      	mov	r7, r6
 80066e8:	463d      	mov	r5, r7
 80066ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066ee:	b10b      	cbz	r3, 80066f4 <_svfiprintf_r+0x58>
 80066f0:	2b25      	cmp	r3, #37	; 0x25
 80066f2:	d13e      	bne.n	8006772 <_svfiprintf_r+0xd6>
 80066f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80066f8:	d00b      	beq.n	8006712 <_svfiprintf_r+0x76>
 80066fa:	4653      	mov	r3, sl
 80066fc:	4632      	mov	r2, r6
 80066fe:	4621      	mov	r1, r4
 8006700:	4640      	mov	r0, r8
 8006702:	f7ff ff71 	bl	80065e8 <__ssputs_r>
 8006706:	3001      	adds	r0, #1
 8006708:	f000 80a4 	beq.w	8006854 <_svfiprintf_r+0x1b8>
 800670c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670e:	4453      	add	r3, sl
 8006710:	9309      	str	r3, [sp, #36]	; 0x24
 8006712:	783b      	ldrb	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 809d 	beq.w	8006854 <_svfiprintf_r+0x1b8>
 800671a:	2300      	movs	r3, #0
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	9307      	str	r3, [sp, #28]
 8006728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800672c:	931a      	str	r3, [sp, #104]	; 0x68
 800672e:	462f      	mov	r7, r5
 8006730:	2205      	movs	r2, #5
 8006732:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006736:	4850      	ldr	r0, [pc, #320]	; (8006878 <_svfiprintf_r+0x1dc>)
 8006738:	f7f9 fd4a 	bl	80001d0 <memchr>
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	b9d0      	cbnz	r0, 8006776 <_svfiprintf_r+0xda>
 8006740:	06d9      	lsls	r1, r3, #27
 8006742:	bf44      	itt	mi
 8006744:	2220      	movmi	r2, #32
 8006746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800674a:	071a      	lsls	r2, r3, #28
 800674c:	bf44      	itt	mi
 800674e:	222b      	movmi	r2, #43	; 0x2b
 8006750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006754:	782a      	ldrb	r2, [r5, #0]
 8006756:	2a2a      	cmp	r2, #42	; 0x2a
 8006758:	d015      	beq.n	8006786 <_svfiprintf_r+0xea>
 800675a:	9a07      	ldr	r2, [sp, #28]
 800675c:	462f      	mov	r7, r5
 800675e:	2000      	movs	r0, #0
 8006760:	250a      	movs	r5, #10
 8006762:	4639      	mov	r1, r7
 8006764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006768:	3b30      	subs	r3, #48	; 0x30
 800676a:	2b09      	cmp	r3, #9
 800676c:	d94d      	bls.n	800680a <_svfiprintf_r+0x16e>
 800676e:	b1b8      	cbz	r0, 80067a0 <_svfiprintf_r+0x104>
 8006770:	e00f      	b.n	8006792 <_svfiprintf_r+0xf6>
 8006772:	462f      	mov	r7, r5
 8006774:	e7b8      	b.n	80066e8 <_svfiprintf_r+0x4c>
 8006776:	4a40      	ldr	r2, [pc, #256]	; (8006878 <_svfiprintf_r+0x1dc>)
 8006778:	1a80      	subs	r0, r0, r2
 800677a:	fa0b f000 	lsl.w	r0, fp, r0
 800677e:	4318      	orrs	r0, r3
 8006780:	9004      	str	r0, [sp, #16]
 8006782:	463d      	mov	r5, r7
 8006784:	e7d3      	b.n	800672e <_svfiprintf_r+0x92>
 8006786:	9a03      	ldr	r2, [sp, #12]
 8006788:	1d11      	adds	r1, r2, #4
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	9103      	str	r1, [sp, #12]
 800678e:	2a00      	cmp	r2, #0
 8006790:	db01      	blt.n	8006796 <_svfiprintf_r+0xfa>
 8006792:	9207      	str	r2, [sp, #28]
 8006794:	e004      	b.n	80067a0 <_svfiprintf_r+0x104>
 8006796:	4252      	negs	r2, r2
 8006798:	f043 0302 	orr.w	r3, r3, #2
 800679c:	9207      	str	r2, [sp, #28]
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	783b      	ldrb	r3, [r7, #0]
 80067a2:	2b2e      	cmp	r3, #46	; 0x2e
 80067a4:	d10c      	bne.n	80067c0 <_svfiprintf_r+0x124>
 80067a6:	787b      	ldrb	r3, [r7, #1]
 80067a8:	2b2a      	cmp	r3, #42	; 0x2a
 80067aa:	d133      	bne.n	8006814 <_svfiprintf_r+0x178>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	9203      	str	r2, [sp, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfb8      	it	lt
 80067b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067bc:	3702      	adds	r7, #2
 80067be:	9305      	str	r3, [sp, #20]
 80067c0:	4d2e      	ldr	r5, [pc, #184]	; (800687c <_svfiprintf_r+0x1e0>)
 80067c2:	7839      	ldrb	r1, [r7, #0]
 80067c4:	2203      	movs	r2, #3
 80067c6:	4628      	mov	r0, r5
 80067c8:	f7f9 fd02 	bl	80001d0 <memchr>
 80067cc:	b138      	cbz	r0, 80067de <_svfiprintf_r+0x142>
 80067ce:	2340      	movs	r3, #64	; 0x40
 80067d0:	1b40      	subs	r0, r0, r5
 80067d2:	fa03 f000 	lsl.w	r0, r3, r0
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	4303      	orrs	r3, r0
 80067da:	3701      	adds	r7, #1
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	7839      	ldrb	r1, [r7, #0]
 80067e0:	4827      	ldr	r0, [pc, #156]	; (8006880 <_svfiprintf_r+0x1e4>)
 80067e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e6:	2206      	movs	r2, #6
 80067e8:	1c7e      	adds	r6, r7, #1
 80067ea:	f7f9 fcf1 	bl	80001d0 <memchr>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d038      	beq.n	8006864 <_svfiprintf_r+0x1c8>
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <_svfiprintf_r+0x1e8>)
 80067f4:	bb13      	cbnz	r3, 800683c <_svfiprintf_r+0x1a0>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3307      	adds	r3, #7
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	3308      	adds	r3, #8
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	444b      	add	r3, r9
 8006806:	9309      	str	r3, [sp, #36]	; 0x24
 8006808:	e76d      	b.n	80066e6 <_svfiprintf_r+0x4a>
 800680a:	fb05 3202 	mla	r2, r5, r2, r3
 800680e:	2001      	movs	r0, #1
 8006810:	460f      	mov	r7, r1
 8006812:	e7a6      	b.n	8006762 <_svfiprintf_r+0xc6>
 8006814:	2300      	movs	r3, #0
 8006816:	3701      	adds	r7, #1
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	4619      	mov	r1, r3
 800681c:	250a      	movs	r5, #10
 800681e:	4638      	mov	r0, r7
 8006820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006824:	3a30      	subs	r2, #48	; 0x30
 8006826:	2a09      	cmp	r2, #9
 8006828:	d903      	bls.n	8006832 <_svfiprintf_r+0x196>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0c8      	beq.n	80067c0 <_svfiprintf_r+0x124>
 800682e:	9105      	str	r1, [sp, #20]
 8006830:	e7c6      	b.n	80067c0 <_svfiprintf_r+0x124>
 8006832:	fb05 2101 	mla	r1, r5, r1, r2
 8006836:	2301      	movs	r3, #1
 8006838:	4607      	mov	r7, r0
 800683a:	e7f0      	b.n	800681e <_svfiprintf_r+0x182>
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	4622      	mov	r2, r4
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <_svfiprintf_r+0x1ec>)
 8006844:	a904      	add	r1, sp, #16
 8006846:	4640      	mov	r0, r8
 8006848:	f3af 8000 	nop.w
 800684c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006850:	4681      	mov	r9, r0
 8006852:	d1d6      	bne.n	8006802 <_svfiprintf_r+0x166>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	065b      	lsls	r3, r3, #25
 8006858:	f53f af35 	bmi.w	80066c6 <_svfiprintf_r+0x2a>
 800685c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800685e:	b01d      	add	sp, #116	; 0x74
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	ab03      	add	r3, sp, #12
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	4622      	mov	r2, r4
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <_svfiprintf_r+0x1ec>)
 800686c:	a904      	add	r1, sp, #16
 800686e:	4640      	mov	r0, r8
 8006870:	f000 f882 	bl	8006978 <_printf_i>
 8006874:	e7ea      	b.n	800684c <_svfiprintf_r+0x1b0>
 8006876:	bf00      	nop
 8006878:	08006e8c 	.word	0x08006e8c
 800687c:	08006e92 	.word	0x08006e92
 8006880:	08006e96 	.word	0x08006e96
 8006884:	00000000 	.word	0x00000000
 8006888:	080065e9 	.word	0x080065e9

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4691      	mov	r9, r2
 8006892:	461f      	mov	r7, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800689c:	4293      	cmp	r3, r2
 800689e:	bfb8      	it	lt
 80068a0:	4613      	movlt	r3, r2
 80068a2:	f8c9 3000 	str.w	r3, [r9]
 80068a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	b112      	cbz	r2, 80068b6 <_printf_common+0x2a>
 80068b0:	3301      	adds	r3, #1
 80068b2:	f8c9 3000 	str.w	r3, [r9]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	0699      	lsls	r1, r3, #26
 80068ba:	bf42      	ittt	mi
 80068bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068c0:	3302      	addmi	r3, #2
 80068c2:	f8c9 3000 	strmi.w	r3, [r9]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	f015 0506 	ands.w	r5, r5, #6
 80068cc:	d107      	bne.n	80068de <_printf_common+0x52>
 80068ce:	f104 0a19 	add.w	sl, r4, #25
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	f8d9 2000 	ldr.w	r2, [r9]
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	42ab      	cmp	r3, r5
 80068dc:	dc28      	bgt.n	8006930 <_printf_common+0xa4>
 80068de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	3300      	adds	r3, #0
 80068e6:	bf18      	it	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	0692      	lsls	r2, r2, #26
 80068ec:	d42d      	bmi.n	800694a <_printf_common+0xbe>
 80068ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f2:	4639      	mov	r1, r7
 80068f4:	4630      	mov	r0, r6
 80068f6:	47c0      	blx	r8
 80068f8:	3001      	adds	r0, #1
 80068fa:	d020      	beq.n	800693e <_printf_common+0xb2>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	68e5      	ldr	r5, [r4, #12]
 8006900:	f8d9 2000 	ldr.w	r2, [r9]
 8006904:	f003 0306 	and.w	r3, r3, #6
 8006908:	2b04      	cmp	r3, #4
 800690a:	bf08      	it	eq
 800690c:	1aad      	subeq	r5, r5, r2
 800690e:	68a3      	ldr	r3, [r4, #8]
 8006910:	6922      	ldr	r2, [r4, #16]
 8006912:	bf0c      	ite	eq
 8006914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006918:	2500      	movne	r5, #0
 800691a:	4293      	cmp	r3, r2
 800691c:	bfc4      	itt	gt
 800691e:	1a9b      	subgt	r3, r3, r2
 8006920:	18ed      	addgt	r5, r5, r3
 8006922:	f04f 0900 	mov.w	r9, #0
 8006926:	341a      	adds	r4, #26
 8006928:	454d      	cmp	r5, r9
 800692a:	d11a      	bne.n	8006962 <_printf_common+0xd6>
 800692c:	2000      	movs	r0, #0
 800692e:	e008      	b.n	8006942 <_printf_common+0xb6>
 8006930:	2301      	movs	r3, #1
 8006932:	4652      	mov	r2, sl
 8006934:	4639      	mov	r1, r7
 8006936:	4630      	mov	r0, r6
 8006938:	47c0      	blx	r8
 800693a:	3001      	adds	r0, #1
 800693c:	d103      	bne.n	8006946 <_printf_common+0xba>
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006946:	3501      	adds	r5, #1
 8006948:	e7c3      	b.n	80068d2 <_printf_common+0x46>
 800694a:	18e1      	adds	r1, r4, r3
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	2030      	movs	r0, #48	; 0x30
 8006950:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006954:	4422      	add	r2, r4
 8006956:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800695a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800695e:	3302      	adds	r3, #2
 8006960:	e7c5      	b.n	80068ee <_printf_common+0x62>
 8006962:	2301      	movs	r3, #1
 8006964:	4622      	mov	r2, r4
 8006966:	4639      	mov	r1, r7
 8006968:	4630      	mov	r0, r6
 800696a:	47c0      	blx	r8
 800696c:	3001      	adds	r0, #1
 800696e:	d0e6      	beq.n	800693e <_printf_common+0xb2>
 8006970:	f109 0901 	add.w	r9, r9, #1
 8006974:	e7d8      	b.n	8006928 <_printf_common+0x9c>
	...

08006978 <_printf_i>:
 8006978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800697c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006980:	460c      	mov	r4, r1
 8006982:	7e09      	ldrb	r1, [r1, #24]
 8006984:	b085      	sub	sp, #20
 8006986:	296e      	cmp	r1, #110	; 0x6e
 8006988:	4617      	mov	r7, r2
 800698a:	4606      	mov	r6, r0
 800698c:	4698      	mov	r8, r3
 800698e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006990:	f000 80b3 	beq.w	8006afa <_printf_i+0x182>
 8006994:	d822      	bhi.n	80069dc <_printf_i+0x64>
 8006996:	2963      	cmp	r1, #99	; 0x63
 8006998:	d036      	beq.n	8006a08 <_printf_i+0x90>
 800699a:	d80a      	bhi.n	80069b2 <_printf_i+0x3a>
 800699c:	2900      	cmp	r1, #0
 800699e:	f000 80b9 	beq.w	8006b14 <_printf_i+0x19c>
 80069a2:	2958      	cmp	r1, #88	; 0x58
 80069a4:	f000 8083 	beq.w	8006aae <_printf_i+0x136>
 80069a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80069b0:	e032      	b.n	8006a18 <_printf_i+0xa0>
 80069b2:	2964      	cmp	r1, #100	; 0x64
 80069b4:	d001      	beq.n	80069ba <_printf_i+0x42>
 80069b6:	2969      	cmp	r1, #105	; 0x69
 80069b8:	d1f6      	bne.n	80069a8 <_printf_i+0x30>
 80069ba:	6820      	ldr	r0, [r4, #0]
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	0605      	lsls	r5, r0, #24
 80069c0:	f103 0104 	add.w	r1, r3, #4
 80069c4:	d52a      	bpl.n	8006a1c <_printf_i+0xa4>
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6011      	str	r1, [r2, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da03      	bge.n	80069d6 <_printf_i+0x5e>
 80069ce:	222d      	movs	r2, #45	; 0x2d
 80069d0:	425b      	negs	r3, r3
 80069d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069d6:	486f      	ldr	r0, [pc, #444]	; (8006b94 <_printf_i+0x21c>)
 80069d8:	220a      	movs	r2, #10
 80069da:	e039      	b.n	8006a50 <_printf_i+0xd8>
 80069dc:	2973      	cmp	r1, #115	; 0x73
 80069de:	f000 809d 	beq.w	8006b1c <_printf_i+0x1a4>
 80069e2:	d808      	bhi.n	80069f6 <_printf_i+0x7e>
 80069e4:	296f      	cmp	r1, #111	; 0x6f
 80069e6:	d020      	beq.n	8006a2a <_printf_i+0xb2>
 80069e8:	2970      	cmp	r1, #112	; 0x70
 80069ea:	d1dd      	bne.n	80069a8 <_printf_i+0x30>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	f043 0320 	orr.w	r3, r3, #32
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	e003      	b.n	80069fe <_printf_i+0x86>
 80069f6:	2975      	cmp	r1, #117	; 0x75
 80069f8:	d017      	beq.n	8006a2a <_printf_i+0xb2>
 80069fa:	2978      	cmp	r1, #120	; 0x78
 80069fc:	d1d4      	bne.n	80069a8 <_printf_i+0x30>
 80069fe:	2378      	movs	r3, #120	; 0x78
 8006a00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a04:	4864      	ldr	r0, [pc, #400]	; (8006b98 <_printf_i+0x220>)
 8006a06:	e055      	b.n	8006ab4 <_printf_i+0x13c>
 8006a08:	6813      	ldr	r3, [r2, #0]
 8006a0a:	1d19      	adds	r1, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6011      	str	r1, [r2, #0]
 8006a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e08c      	b.n	8006b36 <_printf_i+0x1be>
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6011      	str	r1, [r2, #0]
 8006a20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a24:	bf18      	it	ne
 8006a26:	b21b      	sxthne	r3, r3
 8006a28:	e7cf      	b.n	80069ca <_printf_i+0x52>
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	6825      	ldr	r5, [r4, #0]
 8006a2e:	1d18      	adds	r0, r3, #4
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	0628      	lsls	r0, r5, #24
 8006a34:	d501      	bpl.n	8006a3a <_printf_i+0xc2>
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	e002      	b.n	8006a40 <_printf_i+0xc8>
 8006a3a:	0668      	lsls	r0, r5, #25
 8006a3c:	d5fb      	bpl.n	8006a36 <_printf_i+0xbe>
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	4854      	ldr	r0, [pc, #336]	; (8006b94 <_printf_i+0x21c>)
 8006a42:	296f      	cmp	r1, #111	; 0x6f
 8006a44:	bf14      	ite	ne
 8006a46:	220a      	movne	r2, #10
 8006a48:	2208      	moveq	r2, #8
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a50:	6865      	ldr	r5, [r4, #4]
 8006a52:	60a5      	str	r5, [r4, #8]
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	f2c0 8095 	blt.w	8006b84 <_printf_i+0x20c>
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	f021 0104 	bic.w	r1, r1, #4
 8006a60:	6021      	str	r1, [r4, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d13d      	bne.n	8006ae2 <_printf_i+0x16a>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	f040 808e 	bne.w	8006b88 <_printf_i+0x210>
 8006a6c:	4665      	mov	r5, ip
 8006a6e:	2a08      	cmp	r2, #8
 8006a70:	d10b      	bne.n	8006a8a <_printf_i+0x112>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	07db      	lsls	r3, r3, #31
 8006a76:	d508      	bpl.n	8006a8a <_printf_i+0x112>
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	bfde      	ittt	le
 8006a80:	2330      	movle	r3, #48	; 0x30
 8006a82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a8a:	ebac 0305 	sub.w	r3, ip, r5
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	f8cd 8000 	str.w	r8, [sp]
 8006a94:	463b      	mov	r3, r7
 8006a96:	aa03      	add	r2, sp, #12
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff fef6 	bl	800688c <_printf_common>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d14d      	bne.n	8006b40 <_printf_i+0x1c8>
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	b005      	add	sp, #20
 8006aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aae:	4839      	ldr	r0, [pc, #228]	; (8006b94 <_printf_i+0x21c>)
 8006ab0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	1d1d      	adds	r5, r3, #4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6015      	str	r5, [r2, #0]
 8006abe:	060a      	lsls	r2, r1, #24
 8006ac0:	d50b      	bpl.n	8006ada <_printf_i+0x162>
 8006ac2:	07ca      	lsls	r2, r1, #31
 8006ac4:	bf44      	itt	mi
 8006ac6:	f041 0120 	orrmi.w	r1, r1, #32
 8006aca:	6021      	strmi	r1, [r4, #0]
 8006acc:	b91b      	cbnz	r3, 8006ad6 <_printf_i+0x15e>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	f022 0220 	bic.w	r2, r2, #32
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	e7b7      	b.n	8006a4a <_printf_i+0xd2>
 8006ada:	064d      	lsls	r5, r1, #25
 8006adc:	bf48      	it	mi
 8006ade:	b29b      	uxthmi	r3, r3
 8006ae0:	e7ef      	b.n	8006ac2 <_printf_i+0x14a>
 8006ae2:	4665      	mov	r5, ip
 8006ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ae8:	fb02 3311 	mls	r3, r2, r1, r3
 8006aec:	5cc3      	ldrb	r3, [r0, r3]
 8006aee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006af2:	460b      	mov	r3, r1
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d1f5      	bne.n	8006ae4 <_printf_i+0x16c>
 8006af8:	e7b9      	b.n	8006a6e <_printf_i+0xf6>
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	6961      	ldr	r1, [r4, #20]
 8006b00:	1d18      	adds	r0, r3, #4
 8006b02:	6010      	str	r0, [r2, #0]
 8006b04:	0628      	lsls	r0, r5, #24
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	d501      	bpl.n	8006b0e <_printf_i+0x196>
 8006b0a:	6019      	str	r1, [r3, #0]
 8006b0c:	e002      	b.n	8006b14 <_printf_i+0x19c>
 8006b0e:	066a      	lsls	r2, r5, #25
 8006b10:	d5fb      	bpl.n	8006b0a <_printf_i+0x192>
 8006b12:	8019      	strh	r1, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	4665      	mov	r5, ip
 8006b1a:	e7b9      	b.n	8006a90 <_printf_i+0x118>
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	1d19      	adds	r1, r3, #4
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	681d      	ldr	r5, [r3, #0]
 8006b24:	6862      	ldr	r2, [r4, #4]
 8006b26:	2100      	movs	r1, #0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f7f9 fb51 	bl	80001d0 <memchr>
 8006b2e:	b108      	cbz	r0, 8006b34 <_printf_i+0x1bc>
 8006b30:	1b40      	subs	r0, r0, r5
 8006b32:	6060      	str	r0, [r4, #4]
 8006b34:	6863      	ldr	r3, [r4, #4]
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b3e:	e7a7      	b.n	8006a90 <_printf_i+0x118>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4639      	mov	r1, r7
 8006b46:	4630      	mov	r0, r6
 8006b48:	47c0      	blx	r8
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d0aa      	beq.n	8006aa4 <_printf_i+0x12c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	079b      	lsls	r3, r3, #30
 8006b52:	d413      	bmi.n	8006b7c <_printf_i+0x204>
 8006b54:	68e0      	ldr	r0, [r4, #12]
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	4298      	cmp	r0, r3
 8006b5a:	bfb8      	it	lt
 8006b5c:	4618      	movlt	r0, r3
 8006b5e:	e7a3      	b.n	8006aa8 <_printf_i+0x130>
 8006b60:	2301      	movs	r3, #1
 8006b62:	464a      	mov	r2, r9
 8006b64:	4639      	mov	r1, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	47c0      	blx	r8
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d09a      	beq.n	8006aa4 <_printf_i+0x12c>
 8006b6e:	3501      	adds	r5, #1
 8006b70:	68e3      	ldr	r3, [r4, #12]
 8006b72:	9a03      	ldr	r2, [sp, #12]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	42ab      	cmp	r3, r5
 8006b78:	dcf2      	bgt.n	8006b60 <_printf_i+0x1e8>
 8006b7a:	e7eb      	b.n	8006b54 <_printf_i+0x1dc>
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	f104 0919 	add.w	r9, r4, #25
 8006b82:	e7f5      	b.n	8006b70 <_printf_i+0x1f8>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ac      	bne.n	8006ae2 <_printf_i+0x16a>
 8006b88:	7803      	ldrb	r3, [r0, #0]
 8006b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b92:	e76c      	b.n	8006a6e <_printf_i+0xf6>
 8006b94:	08006e9d 	.word	0x08006e9d
 8006b98:	08006eae 	.word	0x08006eae

08006b9c <memcpy>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	1e43      	subs	r3, r0, #1
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	d100      	bne.n	8006ba8 <memcpy+0xc>
 8006ba6:	bd10      	pop	{r4, pc}
 8006ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb0:	e7f7      	b.n	8006ba2 <memcpy+0x6>

08006bb2 <memmove>:
 8006bb2:	4288      	cmp	r0, r1
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	eb01 0302 	add.w	r3, r1, r2
 8006bba:	d807      	bhi.n	8006bcc <memmove+0x1a>
 8006bbc:	1e42      	subs	r2, r0, #1
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d00a      	beq.n	8006bd8 <memmove+0x26>
 8006bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006bca:	e7f8      	b.n	8006bbe <memmove+0xc>
 8006bcc:	4283      	cmp	r3, r0
 8006bce:	d9f5      	bls.n	8006bbc <memmove+0xa>
 8006bd0:	1881      	adds	r1, r0, r2
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	42d3      	cmn	r3, r2
 8006bd6:	d100      	bne.n	8006bda <memmove+0x28>
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006be2:	e7f7      	b.n	8006bd4 <memmove+0x22>

08006be4 <_free_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4605      	mov	r5, r0
 8006be8:	2900      	cmp	r1, #0
 8006bea:	d045      	beq.n	8006c78 <_free_r+0x94>
 8006bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf0:	1f0c      	subs	r4, r1, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfb8      	it	lt
 8006bf6:	18e4      	addlt	r4, r4, r3
 8006bf8:	f000 f8d2 	bl	8006da0 <__malloc_lock>
 8006bfc:	4a1f      	ldr	r2, [pc, #124]	; (8006c7c <_free_r+0x98>)
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	4610      	mov	r0, r2
 8006c02:	b933      	cbnz	r3, 8006c12 <_free_r+0x2e>
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	6014      	str	r4, [r2, #0]
 8006c08:	4628      	mov	r0, r5
 8006c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0e:	f000 b8c8 	b.w	8006da2 <__malloc_unlock>
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	d90c      	bls.n	8006c30 <_free_r+0x4c>
 8006c16:	6821      	ldr	r1, [r4, #0]
 8006c18:	1862      	adds	r2, r4, r1
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	bf04      	itt	eq
 8006c1e:	681a      	ldreq	r2, [r3, #0]
 8006c20:	685b      	ldreq	r3, [r3, #4]
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	bf04      	itt	eq
 8006c26:	1852      	addeq	r2, r2, r1
 8006c28:	6022      	streq	r2, [r4, #0]
 8006c2a:	6004      	str	r4, [r0, #0]
 8006c2c:	e7ec      	b.n	8006c08 <_free_r+0x24>
 8006c2e:	4613      	mov	r3, r2
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	b10a      	cbz	r2, 8006c38 <_free_r+0x54>
 8006c34:	42a2      	cmp	r2, r4
 8006c36:	d9fa      	bls.n	8006c2e <_free_r+0x4a>
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	1858      	adds	r0, r3, r1
 8006c3c:	42a0      	cmp	r0, r4
 8006c3e:	d10b      	bne.n	8006c58 <_free_r+0x74>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	4401      	add	r1, r0
 8006c44:	1858      	adds	r0, r3, r1
 8006c46:	4282      	cmp	r2, r0
 8006c48:	6019      	str	r1, [r3, #0]
 8006c4a:	d1dd      	bne.n	8006c08 <_free_r+0x24>
 8006c4c:	6810      	ldr	r0, [r2, #0]
 8006c4e:	6852      	ldr	r2, [r2, #4]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	4401      	add	r1, r0
 8006c54:	6019      	str	r1, [r3, #0]
 8006c56:	e7d7      	b.n	8006c08 <_free_r+0x24>
 8006c58:	d902      	bls.n	8006c60 <_free_r+0x7c>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	602b      	str	r3, [r5, #0]
 8006c5e:	e7d3      	b.n	8006c08 <_free_r+0x24>
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	1821      	adds	r1, r4, r0
 8006c64:	428a      	cmp	r2, r1
 8006c66:	bf04      	itt	eq
 8006c68:	6811      	ldreq	r1, [r2, #0]
 8006c6a:	6852      	ldreq	r2, [r2, #4]
 8006c6c:	6062      	str	r2, [r4, #4]
 8006c6e:	bf04      	itt	eq
 8006c70:	1809      	addeq	r1, r1, r0
 8006c72:	6021      	streq	r1, [r4, #0]
 8006c74:	605c      	str	r4, [r3, #4]
 8006c76:	e7c7      	b.n	8006c08 <_free_r+0x24>
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000090 	.word	0x20000090

08006c80 <_malloc_r>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	1ccd      	adds	r5, r1, #3
 8006c84:	f025 0503 	bic.w	r5, r5, #3
 8006c88:	3508      	adds	r5, #8
 8006c8a:	2d0c      	cmp	r5, #12
 8006c8c:	bf38      	it	cc
 8006c8e:	250c      	movcc	r5, #12
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	4606      	mov	r6, r0
 8006c94:	db01      	blt.n	8006c9a <_malloc_r+0x1a>
 8006c96:	42a9      	cmp	r1, r5
 8006c98:	d903      	bls.n	8006ca2 <_malloc_r+0x22>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	6033      	str	r3, [r6, #0]
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	f000 f87d 	bl	8006da0 <__malloc_lock>
 8006ca6:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <_malloc_r+0xac>)
 8006ca8:	6814      	ldr	r4, [r2, #0]
 8006caa:	4621      	mov	r1, r4
 8006cac:	b991      	cbnz	r1, 8006cd4 <_malloc_r+0x54>
 8006cae:	4c20      	ldr	r4, [pc, #128]	; (8006d30 <_malloc_r+0xb0>)
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	b91b      	cbnz	r3, 8006cbc <_malloc_r+0x3c>
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 f863 	bl	8006d80 <_sbrk_r>
 8006cba:	6020      	str	r0, [r4, #0]
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f000 f85e 	bl	8006d80 <_sbrk_r>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d124      	bne.n	8006d12 <_malloc_r+0x92>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	6033      	str	r3, [r6, #0]
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 f868 	bl	8006da2 <__malloc_unlock>
 8006cd2:	e7e4      	b.n	8006c9e <_malloc_r+0x1e>
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	1b5b      	subs	r3, r3, r5
 8006cd8:	d418      	bmi.n	8006d0c <_malloc_r+0x8c>
 8006cda:	2b0b      	cmp	r3, #11
 8006cdc:	d90f      	bls.n	8006cfe <_malloc_r+0x7e>
 8006cde:	600b      	str	r3, [r1, #0]
 8006ce0:	50cd      	str	r5, [r1, r3]
 8006ce2:	18cc      	adds	r4, r1, r3
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f000 f85c 	bl	8006da2 <__malloc_unlock>
 8006cea:	f104 000b 	add.w	r0, r4, #11
 8006cee:	1d23      	adds	r3, r4, #4
 8006cf0:	f020 0007 	bic.w	r0, r0, #7
 8006cf4:	1ac3      	subs	r3, r0, r3
 8006cf6:	d0d3      	beq.n	8006ca0 <_malloc_r+0x20>
 8006cf8:	425a      	negs	r2, r3
 8006cfa:	50e2      	str	r2, [r4, r3]
 8006cfc:	e7d0      	b.n	8006ca0 <_malloc_r+0x20>
 8006cfe:	428c      	cmp	r4, r1
 8006d00:	684b      	ldr	r3, [r1, #4]
 8006d02:	bf16      	itet	ne
 8006d04:	6063      	strne	r3, [r4, #4]
 8006d06:	6013      	streq	r3, [r2, #0]
 8006d08:	460c      	movne	r4, r1
 8006d0a:	e7eb      	b.n	8006ce4 <_malloc_r+0x64>
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	6849      	ldr	r1, [r1, #4]
 8006d10:	e7cc      	b.n	8006cac <_malloc_r+0x2c>
 8006d12:	1cc4      	adds	r4, r0, #3
 8006d14:	f024 0403 	bic.w	r4, r4, #3
 8006d18:	42a0      	cmp	r0, r4
 8006d1a:	d005      	beq.n	8006d28 <_malloc_r+0xa8>
 8006d1c:	1a21      	subs	r1, r4, r0
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f000 f82e 	bl	8006d80 <_sbrk_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0cf      	beq.n	8006cc8 <_malloc_r+0x48>
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	e7db      	b.n	8006ce4 <_malloc_r+0x64>
 8006d2c:	20000090 	.word	0x20000090
 8006d30:	20000094 	.word	0x20000094

08006d34 <_realloc_r>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	4607      	mov	r7, r0
 8006d38:	4614      	mov	r4, r2
 8006d3a:	460e      	mov	r6, r1
 8006d3c:	b921      	cbnz	r1, 8006d48 <_realloc_r+0x14>
 8006d3e:	4611      	mov	r1, r2
 8006d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d44:	f7ff bf9c 	b.w	8006c80 <_malloc_r>
 8006d48:	b922      	cbnz	r2, 8006d54 <_realloc_r+0x20>
 8006d4a:	f7ff ff4b 	bl	8006be4 <_free_r>
 8006d4e:	4625      	mov	r5, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d54:	f000 f826 	bl	8006da4 <_malloc_usable_size_r>
 8006d58:	42a0      	cmp	r0, r4
 8006d5a:	d20f      	bcs.n	8006d7c <_realloc_r+0x48>
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7ff ff8e 	bl	8006c80 <_malloc_r>
 8006d64:	4605      	mov	r5, r0
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d0f2      	beq.n	8006d50 <_realloc_r+0x1c>
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	f7ff ff15 	bl	8006b9c <memcpy>
 8006d72:	4631      	mov	r1, r6
 8006d74:	4638      	mov	r0, r7
 8006d76:	f7ff ff35 	bl	8006be4 <_free_r>
 8006d7a:	e7e9      	b.n	8006d50 <_realloc_r+0x1c>
 8006d7c:	4635      	mov	r5, r6
 8006d7e:	e7e7      	b.n	8006d50 <_realloc_r+0x1c>

08006d80 <_sbrk_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4c06      	ldr	r4, [pc, #24]	; (8006d9c <_sbrk_r+0x1c>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4605      	mov	r5, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	6023      	str	r3, [r4, #0]
 8006d8c:	f7fa ff4a 	bl	8001c24 <_sbrk>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_sbrk_r+0x1a>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_sbrk_r+0x1a>
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	200002f4 	.word	0x200002f4

08006da0 <__malloc_lock>:
 8006da0:	4770      	bx	lr

08006da2 <__malloc_unlock>:
 8006da2:	4770      	bx	lr

08006da4 <_malloc_usable_size_r>:
 8006da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da8:	1f18      	subs	r0, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfbc      	itt	lt
 8006dae:	580b      	ldrlt	r3, [r1, r0]
 8006db0:	18c0      	addlt	r0, r0, r3
 8006db2:	4770      	bx	lr

08006db4 <_init>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr

08006dc0 <_fini>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr
